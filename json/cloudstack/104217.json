[{"authorTime":"2021-06-08 18:14:53","codes":[{"authorDate":"2020-10-27 14:45:43","commitOrder":5,"curCode":"    protected UserVm createKubernetesNode(String joinIp, int nodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm nodeVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Account owner = accountDao.findById(kubernetesCluster.getAccountId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-node-%s\", kubernetesClusterNodeNamePrefix, nodeInstance));\n        String k8sNodeConfig = null;\n        try {\n            k8sNodeConfig = getKubernetesNodeConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes node configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sNodeConfig.getBytes(StringUtils.getPreferredCharset()));\n        nodeVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created node VM : %s, %s in the Kubernetes cluster : %s\", hostName, nodeVm.getUuid(), kubernetesCluster.getName()));\n        }\n        return nodeVm;\n    }\n","date":"2020-10-27 14:45:43","endLine":347,"groupId":"14750","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createKubernetesNode","params":"(StringjoinIp@intnodeInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/15f09d7b88fa246b85976cba4ab28c0700cd61.src","preCode":"    protected UserVm createKubernetesNode(String joinIp, int nodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm nodeVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Account owner = accountDao.findById(kubernetesCluster.getAccountId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-node-%s\", kubernetesClusterNodeNamePrefix, nodeInstance));\n        String k8sNodeConfig = null;\n        try {\n            k8sNodeConfig = getKubernetesNodeConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes node configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sNodeConfig.getBytes(StringUtils.getPreferredCharset()));\n        nodeVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created node VM : %s, %s in the Kubernetes cluster : %s\", hostName, nodeVm.getUuid(), kubernetesCluster.getName()));\n        }\n        return nodeVm;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterResourceModifierActionWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"NB"},{"authorDate":"2021-06-08 18:14:53","commitOrder":5,"curCode":"    private UserVm createKubernetesAdditionalControlNode(final String joinIp, final int additionalControlNodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm additionalControlVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-control-%d\", kubernetesClusterNodeNamePrefix, additionalControlNodeInstance + 1));\n        String k8sControlConfig = null;\n        try {\n            k8sControlConfig = getKubernetesAdditionalControlConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes control configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sControlConfig.getBytes(StringUtils.getPreferredCharset()));\n        additionalControlVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created control VM ID : %s, %s in the Kubernetes cluster : %s\", additionalControlVm.getUuid(), hostName, kubernetesCluster.getName()));\n        }\n        return additionalControlVm;\n    }\n","date":"2021-06-08 18:17:20","endLine":273,"groupId":"18743","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createKubernetesAdditionalControlNode","params":"(finalStringjoinIp@finalintadditionalControlNodeInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/54/c3a6228d132dfd6751cf45008521c577829de9.src","preCode":"    private UserVm createKubernetesAdditionalControlNode(final String joinIp, final int additionalControlNodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm additionalControlVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-control-%d\", kubernetesClusterNodeNamePrefix, additionalControlNodeInstance + 1));\n        String k8sControlConfig = null;\n        try {\n            k8sControlConfig = getKubernetesAdditionalControlConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes control configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sControlConfig.getBytes(StringUtils.getPreferredCharset()));\n        additionalControlVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created control VM ID : %s, %s in the Kubernetes cluster : %s\", additionalControlVm.getUuid(), hostName, kubernetesCluster.getName()));\n        }\n        return additionalControlVm;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterStartWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"}],"commitId":"958182481e200afa95f04022fe37044393085265","commitMessage":"@@@cloudstack: make code more inclusive\n\nInclusivity changes for CloudStack\n\n- Change default git branch name from 'master' to 'main' (post renaming/changing default git branch to 'main' in git repo)\n- Rename some offensive words/terms as appropriate for inclusiveness.\n\nThis PR updates the default git branch to 'main'.  as part of #4887.\n\nSigned-off-by: Suresh Kumar Anaparti <suresh.anaparti@shapeblue.com>\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-06-08 18:17:20","modifiedFileCount":"68","status":"M","submitter":"Suresh Kumar Anaparti"},{"authorTime":"2021-06-08 19:40:00","codes":[{"authorDate":"2021-06-08 19:40:00","commitOrder":6,"curCode":"    protected UserVm createKubernetesNode(String joinIp, int nodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm nodeVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Account owner = accountDao.findById(kubernetesCluster.getAccountId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-node-%s\", kubernetesClusterNodeNamePrefix, nodeInstance));\n        String k8sNodeConfig = null;\n        try {\n            k8sNodeConfig = getKubernetesNodeConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes node configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sNodeConfig.getBytes(StringUtils.getPreferredCharset()));\n        nodeVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null, true);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created node VM : %s, %s in the Kubernetes cluster : %s\", hostName, nodeVm.getUuid(), kubernetesCluster.getName()));\n        }\n        return nodeVm;\n    }\n","date":"2021-06-08 19:40:00","endLine":382,"groupId":"14750","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createKubernetesNode","params":"(StringjoinIp@intnodeInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/f925915c95b790c94e98d89975085bbe949937.src","preCode":"    protected UserVm createKubernetesNode(String joinIp, int nodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm nodeVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Account owner = accountDao.findById(kubernetesCluster.getAccountId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-node-%s\", kubernetesClusterNodeNamePrefix, nodeInstance));\n        String k8sNodeConfig = null;\n        try {\n            k8sNodeConfig = getKubernetesNodeConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes node configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sNodeConfig.getBytes(StringUtils.getPreferredCharset()));\n        nodeVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created node VM : %s, %s in the Kubernetes cluster : %s\", hostName, nodeVm.getUuid(), kubernetesCluster.getName()));\n        }\n        return nodeVm;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterResourceModifierActionWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"},{"authorDate":"2021-06-08 19:40:00","commitOrder":6,"curCode":"    private UserVm createKubernetesAdditionalControlNode(final String joinIp, final int additionalControlNodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm additionalControlVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-control-%d\", kubernetesClusterNodeNamePrefix, additionalControlNodeInstance + 1));\n        String k8sControlConfig = null;\n        try {\n            k8sControlConfig = getKubernetesAdditionalControlConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes control configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sControlConfig.getBytes(StringUtils.getPreferredCharset()));\n        additionalControlVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null, true);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created control VM ID : %s, %s in the Kubernetes cluster : %s\", additionalControlVm.getUuid(), hostName, kubernetesCluster.getName()));\n        }\n        return additionalControlVm;\n    }\n","date":"2021-06-08 19:40:00","endLine":273,"groupId":"18743","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createKubernetesAdditionalControlNode","params":"(finalStringjoinIp@finalintadditionalControlNodeInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c6/f939cf4269c4218e0ef90a019707e4a796433f.src","preCode":"    private UserVm createKubernetesAdditionalControlNode(final String joinIp, final int additionalControlNodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm additionalControlVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-control-%d\", kubernetesClusterNodeNamePrefix, additionalControlNodeInstance + 1));\n        String k8sControlConfig = null;\n        try {\n            k8sControlConfig = getKubernetesAdditionalControlConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes control configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sControlConfig.getBytes(StringUtils.getPreferredCharset()));\n        additionalControlVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created control VM ID : %s, %s in the Kubernetes cluster : %s\", additionalControlVm.getUuid(), hostName, kubernetesCluster.getName()));\n        }\n        return additionalControlVm;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterStartWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"083646b3c3f05f4100c5de0c28b231109ebc98c3","commitMessage":"@@@server: VM dynamic scaling option granularity (#4643)\n\nThis PR introduces new granularity levels to configure VM dynamic scalability. Previously VM is configured to be dynamically scalable based on the template and global setting. Now we bringing this option to configure at service offering and VM level also.\n\nVM can dynamically scale only when all flags are ON at VM level.  template.  service offering and global setting. If any of the flags is set to false then VM cannot be scalable. This result will be persisted in DB for each VM and will be honoured for that VM till it is updated.\n\nWe are introducing 'dynamicscalingallowed' parameter with permitted values of true or false for deployVM API and createServiceOffering API.\n\nFollowing are the API parameter changes:\ncreateServiceOffering API: \n          dynamicscalingenabled: an optional parameter of type Boolean with default value ?true?.\ndeployVirtualMachine API: \n          dynamicscalingenabled: an optional parameter of type Boolean with default value ?true?.\n\nFollowing are the UI changes:\nService offering creation has ON/OFF switch for dynamic scaling enabled with default value true","date":"2021-06-08 19:40:00","modifiedFileCount":"26","status":"M","submitter":"Harikrishna"},{"authorTime":"2021-07-02 19:18:33","codes":[{"authorDate":"2021-06-08 19:40:00","commitOrder":7,"curCode":"    protected UserVm createKubernetesNode(String joinIp, int nodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm nodeVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Account owner = accountDao.findById(kubernetesCluster.getAccountId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-node-%s\", kubernetesClusterNodeNamePrefix, nodeInstance));\n        String k8sNodeConfig = null;\n        try {\n            k8sNodeConfig = getKubernetesNodeConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes node configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sNodeConfig.getBytes(StringUtils.getPreferredCharset()));\n        nodeVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null, true);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created node VM : %s, %s in the Kubernetes cluster : %s\", hostName, nodeVm.getUuid(), kubernetesCluster.getName()));\n        }\n        return nodeVm;\n    }\n","date":"2021-06-08 19:40:00","endLine":382,"groupId":"104217","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createKubernetesNode","params":"(StringjoinIp@intnodeInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/f925915c95b790c94e98d89975085bbe949937.src","preCode":"    protected UserVm createKubernetesNode(String joinIp, int nodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm nodeVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Account owner = accountDao.findById(kubernetesCluster.getAccountId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-node-%s\", kubernetesClusterNodeNamePrefix, nodeInstance));\n        String k8sNodeConfig = null;\n        try {\n            k8sNodeConfig = getKubernetesNodeConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes node configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sNodeConfig.getBytes(StringUtils.getPreferredCharset()));\n        nodeVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null, true);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created node VM : %s, %s in the Kubernetes cluster : %s\", hostName, nodeVm.getUuid(), kubernetesCluster.getName()));\n        }\n        return nodeVm;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterResourceModifierActionWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"N"},{"authorDate":"2021-07-02 19:18:33","commitOrder":7,"curCode":"    private UserVm createKubernetesAdditionalControlNode(final String joinIp, final int additionalControlNodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm additionalControlVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-control-%d\", kubernetesClusterNodeNamePrefix, additionalControlNodeInstance + 1));\n        String k8sControlNodeConfig = null;\n        try {\n            k8sControlNodeConfig = getKubernetesAdditionalControlNodeConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes control configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sControlNodeConfig.getBytes(StringUtils.getPreferredCharset()));\n        additionalControlVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null, true);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created control VM ID : %s, %s in the Kubernetes cluster : %s\", additionalControlVm.getUuid(), hostName, kubernetesCluster.getName()));\n        }\n        return additionalControlVm;\n    }\n","date":"2021-07-02 19:18:33","endLine":273,"groupId":"104217","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createKubernetesAdditionalControlNode","params":"(finalStringjoinIp@finalintadditionalControlNodeInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9a/30fdd82357f3d7b30de898829c684b24fc6369.src","preCode":"    private UserVm createKubernetesAdditionalControlNode(final String joinIp, final int additionalControlNodeInstance) throws ManagementServerException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        UserVm additionalControlVm = null;\n        DataCenter zone = dataCenterDao.findById(kubernetesCluster.getZoneId());\n        ServiceOffering serviceOffering = serviceOfferingDao.findById(kubernetesCluster.getServiceOfferingId());\n        List<Long> networkIds = new ArrayList<Long>();\n        networkIds.add(kubernetesCluster.getNetworkId());\n        Network.IpAddresses addrs = new Network.IpAddresses(null, null);\n        long rootDiskSize = kubernetesCluster.getNodeRootDiskSize();\n        Map<String, String> customParameterMap = new HashMap<String, String>();\n        if (rootDiskSize > 0) {\n            customParameterMap.put(\"rootdisksize\", String.valueOf(rootDiskSize));\n        }\n        String hostName = getKubernetesClusterNodeAvailableName(String.format(\"%s-control-%d\", kubernetesClusterNodeNamePrefix, additionalControlNodeInstance + 1));\n        String k8sControlConfig = null;\n        try {\n            k8sControlConfig = getKubernetesAdditionalControlConfig(joinIp, Hypervisor.HypervisorType.VMware.equals(clusterTemplate.getHypervisorType()));\n        } catch (IOException e) {\n            logAndThrow(Level.ERROR, \"Failed to read Kubernetes control configuration file\", e);\n        }\n        String base64UserData = Base64.encodeBase64String(k8sControlConfig.getBytes(StringUtils.getPreferredCharset()));\n        additionalControlVm = userVmService.createAdvancedVirtualMachine(zone, serviceOffering, clusterTemplate, networkIds, owner,\n                hostName, hostName, null, null, null,\n                Hypervisor.HypervisorType.None, BaseCmd.HTTPMethod.POST, base64UserData, kubernetesCluster.getKeyPair(),\n                null, addrs, null, null, null, customParameterMap, null, null, null, null, true);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(String.format(\"Created control VM ID : %s, %s in the Kubernetes cluster : %s\", additionalControlVm.getUuid(), hostName, kubernetesCluster.getName()));\n        }\n        return additionalControlVm;\n    }\n","realPath":"plugins/integrations/kubernetes-service/src/main/java/com/cloud/kubernetes/cluster/actionworkers/KubernetesClusterStartWorker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"f81d79da8e2c1bbd484e2a35c643b212f7694b9f","commitMessage":"@@@Updated some offensive words in kubernetes plugin/service with inclusive words/terms. (#5171)\n\n","date":"2021-07-02 19:18:33","modifiedFileCount":"3","status":"M","submitter":"sureshanaparti"}]
