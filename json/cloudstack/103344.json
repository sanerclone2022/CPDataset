[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer execute(final CreatePrivateTemplateFromVolumeCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final String secondaryStorageURL = command.getSecondaryStorageUrl();\n\n        KVMStoragePool secondaryStorage = null;\n        KVMStoragePool primary = null;\n        final KVMStoragePoolManager storagePoolMgr = libvirtComputingResource.getStoragePoolMgr();\n        try {\n            final String templateFolder = command.getAccountId() + File.separator + command.getTemplateId() + File.separator;\n            final String templateInstallFolder = \"/template/tmpl/\" + templateFolder;\n\n            secondaryStorage = storagePoolMgr.getStoragePoolByURI(secondaryStorageURL);\n\n            try {\n                primary = storagePoolMgr.getStoragePool(command.getPool().getType(), command.getPrimaryStoragePoolNameLabel());\n            } catch (final CloudRuntimeException e) {\n                if (e.getMessage().contains(\"not found\")) {\n                    primary =\n                            storagePoolMgr.createStoragePool(command.getPool().getUuid(), command.getPool().getHost(), command.getPool().getPort(), command.getPool().getPath(),\n                                    command.getPool().getUserInfo(), command.getPool().getType());\n                } else {\n                    return new CreatePrivateTemplateAnswer(command, false, e.getMessage());\n                }\n            }\n\n            final KVMPhysicalDisk disk = primary.getPhysicalDisk(command.getVolumePath());\n            final String tmpltPath = secondaryStorage.getLocalPath() + File.separator + templateInstallFolder;\n            final StorageLayer storage = libvirtComputingResource.getStorage();\n            storage.mkdirs(tmpltPath);\n\n            if (primary.getType() != StoragePoolType.RBD) {\n                final String createTmplPath = libvirtComputingResource.createTmplPath();\n                final int cmdsTimeout = libvirtComputingResource.getCmdsTimeout();\n\n                final Script scriptCommand = new Script(createTmplPath, cmdsTimeout, s_logger);\n                scriptCommand.add(\"-f\", disk.getPath());\n                scriptCommand.add(\"-t\", tmpltPath);\n                scriptCommand.add(\"-n\", command.getUniqueName() + \".qcow2\");\n\n                final String result = scriptCommand.execute();\n\n                if (result != null) {\n                    s_logger.debug(\"failed to create template: \" + result);\n                    return new CreatePrivateTemplateAnswer(command, false, result);\n                }\n            } else {\n                s_logger.debug(\"Converting RBD disk \" + disk.getPath() + \" into template \" + command.getUniqueName());\n\n                final QemuImgFile srcFile =\n                        new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(), primary.getSourcePort(), primary.getAuthUserName(),\n                                primary.getAuthSecret(), disk.getPath()));\n                srcFile.setFormat(PhysicalDiskFormat.RAW);\n\n                final QemuImgFile destFile = new QemuImgFile(tmpltPath + \"/\" + command.getUniqueName() + \".qcow2\");\n                destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                final QemuImg q = new QemuImg(0);\n                try {\n                    q.convert(srcFile, destFile);\n                } catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to create new template while converting \" + srcFile.getFileName() + \" to \" + destFile.getFileName() + \" the error was: \" +\n                            e.getMessage());\n                }\n\n                final File templateProp = new File(tmpltPath + \"/template.properties\");\n                if (!templateProp.exists()) {\n                    templateProp.createNewFile();\n                }\n\n                String templateContent = \"filename=\" + command.getUniqueName() + \".qcow2\" + System.getProperty(\"line.separator\");\n\n                final DateFormat dateFormat = new SimpleDateFormat(\"MM_dd_yyyy\");\n                final Date date = new Date();\n                templateContent += \"snapshot.name=\" + dateFormat.format(date) + System.getProperty(\"line.separator\");\n\n                try(FileOutputStream templFo = new FileOutputStream(templateProp);) {\n                    templFo.write(templateContent.getBytes(\"UTF-8\"));\n                    templFo.flush();\n                }catch(final IOException ex)\n                {\n                    s_logger.error(\"CreatePrivateTemplateAnswer:Exception:\"+ex.getMessage());\n                }\n\n            }\n\n            final Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, storage);\n            final Processor qcow2Processor = new QCOW2Processor();\n\n            qcow2Processor.configure(\"QCOW2 Processor\", params);\n\n            final FormatInfo info = qcow2Processor.process(tmpltPath, null, command.getUniqueName());\n\n            final TemplateLocation loc = new TemplateLocation(storage, tmpltPath);\n            loc.create(1, true, command.getUniqueName());\n            loc.addFormat(info);\n            loc.save();\n\n            return new CreatePrivateTemplateAnswer(command, true, null, templateInstallFolder + command.getUniqueName() + \".qcow2\", info.virtualSize, info.size,\n                    command.getUniqueName(), ImageFormat.QCOW2);\n        } catch (final InternalErrorException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final IOException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final ConfigurationException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final CloudRuntimeException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } finally {\n            if (secondaryStorage != null) {\n                storagePoolMgr.deleteStoragePool(secondaryStorage.getType(), secondaryStorage.getUuid());\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":177,"groupId":"9268","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalCreatePrivateTemplateFromVolumeCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/debe1a1350eec0f67305820e896a9def322d77.src","preCode":"    public Answer execute(final CreatePrivateTemplateFromVolumeCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final String secondaryStorageURL = command.getSecondaryStorageUrl();\n\n        KVMStoragePool secondaryStorage = null;\n        KVMStoragePool primary = null;\n        final KVMStoragePoolManager storagePoolMgr = libvirtComputingResource.getStoragePoolMgr();\n        try {\n            final String templateFolder = command.getAccountId() + File.separator + command.getTemplateId() + File.separator;\n            final String templateInstallFolder = \"/template/tmpl/\" + templateFolder;\n\n            secondaryStorage = storagePoolMgr.getStoragePoolByURI(secondaryStorageURL);\n\n            try {\n                primary = storagePoolMgr.getStoragePool(command.getPool().getType(), command.getPrimaryStoragePoolNameLabel());\n            } catch (final CloudRuntimeException e) {\n                if (e.getMessage().contains(\"not found\")) {\n                    primary =\n                            storagePoolMgr.createStoragePool(command.getPool().getUuid(), command.getPool().getHost(), command.getPool().getPort(), command.getPool().getPath(),\n                                    command.getPool().getUserInfo(), command.getPool().getType());\n                } else {\n                    return new CreatePrivateTemplateAnswer(command, false, e.getMessage());\n                }\n            }\n\n            final KVMPhysicalDisk disk = primary.getPhysicalDisk(command.getVolumePath());\n            final String tmpltPath = secondaryStorage.getLocalPath() + File.separator + templateInstallFolder;\n            final StorageLayer storage = libvirtComputingResource.getStorage();\n            storage.mkdirs(tmpltPath);\n\n            if (primary.getType() != StoragePoolType.RBD) {\n                final String createTmplPath = libvirtComputingResource.createTmplPath();\n                final int cmdsTimeout = libvirtComputingResource.getCmdsTimeout();\n\n                final Script scriptCommand = new Script(createTmplPath, cmdsTimeout, s_logger);\n                scriptCommand.add(\"-f\", disk.getPath());\n                scriptCommand.add(\"-t\", tmpltPath);\n                scriptCommand.add(\"-n\", command.getUniqueName() + \".qcow2\");\n\n                final String result = scriptCommand.execute();\n\n                if (result != null) {\n                    s_logger.debug(\"failed to create template: \" + result);\n                    return new CreatePrivateTemplateAnswer(command, false, result);\n                }\n            } else {\n                s_logger.debug(\"Converting RBD disk \" + disk.getPath() + \" into template \" + command.getUniqueName());\n\n                final QemuImgFile srcFile =\n                        new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(), primary.getSourcePort(), primary.getAuthUserName(),\n                                primary.getAuthSecret(), disk.getPath()));\n                srcFile.setFormat(PhysicalDiskFormat.RAW);\n\n                final QemuImgFile destFile = new QemuImgFile(tmpltPath + \"/\" + command.getUniqueName() + \".qcow2\");\n                destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                final QemuImg q = new QemuImg(0);\n                try {\n                    q.convert(srcFile, destFile);\n                } catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to create new template while converting \" + srcFile.getFileName() + \" to \" + destFile.getFileName() + \" the error was: \" +\n                            e.getMessage());\n                }\n\n                final File templateProp = new File(tmpltPath + \"/template.properties\");\n                if (!templateProp.exists()) {\n                    templateProp.createNewFile();\n                }\n\n                String templateContent = \"filename=\" + command.getUniqueName() + \".qcow2\" + System.getProperty(\"line.separator\");\n\n                final DateFormat dateFormat = new SimpleDateFormat(\"MM_dd_yyyy\");\n                final Date date = new Date();\n                templateContent += \"snapshot.name=\" + dateFormat.format(date) + System.getProperty(\"line.separator\");\n\n                try(FileOutputStream templFo = new FileOutputStream(templateProp);) {\n                    templFo.write(templateContent.getBytes(\"UTF-8\"));\n                    templFo.flush();\n                }catch(final IOException ex)\n                {\n                    s_logger.error(\"CreatePrivateTemplateAnswer:Exception:\"+ex.getMessage());\n                }\n\n            }\n\n            final Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, storage);\n            final Processor qcow2Processor = new QCOW2Processor();\n\n            qcow2Processor.configure(\"QCOW2 Processor\", params);\n\n            final FormatInfo info = qcow2Processor.process(tmpltPath, null, command.getUniqueName());\n\n            final TemplateLocation loc = new TemplateLocation(storage, tmpltPath);\n            loc.create(1, true, command.getUniqueName());\n            loc.addFormat(info);\n            loc.save();\n\n            return new CreatePrivateTemplateAnswer(command, true, null, templateInstallFolder + command.getUniqueName() + \".qcow2\", info.virtualSize, info.size,\n                    command.getUniqueName(), ImageFormat.QCOW2);\n        } catch (final InternalErrorException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final IOException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final ConfigurationException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final CloudRuntimeException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } finally {\n            if (secondaryStorage != null) {\n                storagePoolMgr.deleteStoragePool(secondaryStorage.getType(), secondaryStorage.getUuid());\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtCreatePrivateTemplateFromVolumeCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected long getVirtualSize(File file, ImageFormat format) {\n        Processor processor = null;\n        try {\n            if (format == null) {\n                return file.length();\n            } else if (format == ImageFormat.QCOW2) {\n                processor = new QCOW2Processor();\n            } else if (format == ImageFormat.OVA) {\n                processor = new OVAProcessor();\n            } else if (format == ImageFormat.VHD) {\n                processor = new VhdProcessor();\n            } else if (format == ImageFormat.RAW) {\n                processor = new RawImageProcessor();\n            } else if (format == ImageFormat.VMDK) {\n                processor = new VmdkProcessor();\n            }\n            if (format == ImageFormat.TAR) {\n                processor = new TARProcessor();\n            }\n\n            if (processor == null) {\n                return file.length();\n            }\n\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"template processor\", params);\n            return processor.getVirtualSize(file);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to get virtual size of file \" + file.getPath() + \", returning file size instead: \", e);\n            return file.length();\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":1498,"groupId":"20637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getVirtualSize","params":"(Filefile@ImageFormatformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/93/d8c271df33d3b3bc9ab0fa1e8ac824c9d6d472.src","preCode":"    protected long getVirtualSize(File file, ImageFormat format) {\n        Processor processor = null;\n        try {\n            if (format == null) {\n                return file.length();\n            } else if (format == ImageFormat.QCOW2) {\n                processor = new QCOW2Processor();\n            } else if (format == ImageFormat.OVA) {\n                processor = new OVAProcessor();\n            } else if (format == ImageFormat.VHD) {\n                processor = new VhdProcessor();\n            } else if (format == ImageFormat.RAW) {\n                processor = new RawImageProcessor();\n            } else if (format == ImageFormat.VMDK) {\n                processor = new VmdkProcessor();\n            }\n            if (format == ImageFormat.TAR) {\n                processor = new TARProcessor();\n            }\n\n            if (processor == null) {\n                return file.length();\n            }\n\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"template processor\", params);\n            return processor.getVirtualSize(file);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to get virtual size of file \" + file.getPath() + \", returning file size instead: \", e);\n            return file.length();\n        }\n\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/resource/NfsSecondaryStorageResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1465,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-03-18 18:54:01","commitOrder":2,"curCode":"    public Answer execute(final CreatePrivateTemplateFromVolumeCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final String secondaryStorageURL = command.getSecondaryStorageUrl();\n\n        KVMStoragePool secondaryStorage = null;\n        KVMStoragePool primary = null;\n        final KVMStoragePoolManager storagePoolMgr = libvirtComputingResource.getStoragePoolMgr();\n        try {\n            final String templateFolder = command.getAccountId() + File.separator + command.getTemplateId() + File.separator;\n            final String templateInstallFolder = \"/template/tmpl/\" + templateFolder;\n\n            secondaryStorage = storagePoolMgr.getStoragePoolByURI(secondaryStorageURL);\n\n            try {\n                primary = storagePoolMgr.getStoragePool(command.getPool().getType(), command.getPrimaryStoragePoolNameLabel());\n            } catch (final CloudRuntimeException e) {\n                if (e.getMessage().contains(\"not found\")) {\n                    primary =\n                            storagePoolMgr.createStoragePool(command.getPool().getUuid(), command.getPool().getHost(), command.getPool().getPort(), command.getPool().getPath(),\n                                    command.getPool().getUserInfo(), command.getPool().getType());\n                } else {\n                    return new CreatePrivateTemplateAnswer(command, false, e.getMessage());\n                }\n            }\n\n            final KVMPhysicalDisk disk = primary.getPhysicalDisk(command.getVolumePath());\n            final String tmpltPath = secondaryStorage.getLocalPath() + File.separator + templateInstallFolder;\n            final StorageLayer storage = libvirtComputingResource.getStorage();\n            storage.mkdirs(tmpltPath);\n\n            if (primary.getType() != StoragePoolType.RBD) {\n                final String createTmplPath = libvirtComputingResource.createTmplPath();\n                final int cmdsTimeout = libvirtComputingResource.getCmdsTimeout();\n\n                final Script scriptCommand = new Script(createTmplPath, cmdsTimeout, s_logger);\n                scriptCommand.add(\"-f\", disk.getPath());\n                scriptCommand.add(\"-t\", tmpltPath);\n                scriptCommand.add(\"-n\", command.getUniqueName() + \".qcow2\");\n\n                final String result = scriptCommand.execute();\n\n                if (result != null) {\n                    s_logger.debug(\"failed to create template: \" + result);\n                    return new CreatePrivateTemplateAnswer(command, false, result);\n                }\n            } else {\n                s_logger.debug(\"Converting RBD disk \" + disk.getPath() + \" into template \" + command.getUniqueName());\n\n                final QemuImgFile srcFile =\n                        new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(), primary.getSourcePort(), primary.getAuthUserName(),\n                                primary.getAuthSecret(), disk.getPath()));\n                srcFile.setFormat(PhysicalDiskFormat.RAW);\n\n                final QemuImgFile destFile = new QemuImgFile(tmpltPath + \"/\" + command.getUniqueName() + \".qcow2\");\n                destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                final QemuImg q = new QemuImg(0);\n                try {\n                    q.convert(srcFile, destFile);\n                } catch (final QemuImgException | LibvirtException e) {\n                    s_logger.error(\"Failed to create new template while converting \" + srcFile.getFileName() + \" to \" + destFile.getFileName() + \" the error was: \" +\n                            e.getMessage());\n                }\n\n                final File templateProp = new File(tmpltPath + \"/template.properties\");\n                if (!templateProp.exists()) {\n                    templateProp.createNewFile();\n                }\n\n                String templateContent = \"filename=\" + command.getUniqueName() + \".qcow2\" + System.getProperty(\"line.separator\");\n\n                final DateFormat dateFormat = new SimpleDateFormat(\"MM_dd_yyyy\");\n                final Date date = new Date();\n                templateContent += \"snapshot.name=\" + dateFormat.format(date) + System.getProperty(\"line.separator\");\n\n                try(FileOutputStream templFo = new FileOutputStream(templateProp);) {\n                    templFo.write(templateContent.getBytes(\"UTF-8\"));\n                    templFo.flush();\n                }catch(final IOException ex)\n                {\n                    s_logger.error(\"CreatePrivateTemplateAnswer:Exception:\"+ex.getMessage());\n                }\n\n            }\n\n            final Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, storage);\n            final Processor qcow2Processor = new QCOW2Processor();\n\n            qcow2Processor.configure(\"QCOW2 Processor\", params);\n\n            final FormatInfo info = qcow2Processor.process(tmpltPath, null, command.getUniqueName());\n\n            final TemplateLocation loc = new TemplateLocation(storage, tmpltPath);\n            loc.create(1, true, command.getUniqueName());\n            loc.addFormat(info);\n            loc.save();\n\n            return new CreatePrivateTemplateAnswer(command, true, null, templateInstallFolder + command.getUniqueName() + \".qcow2\", info.virtualSize, info.size,\n                    command.getUniqueName(), ImageFormat.QCOW2);\n        } catch (final InternalErrorException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final IOException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final ConfigurationException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final CloudRuntimeException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } finally {\n            if (secondaryStorage != null) {\n                storagePoolMgr.deleteStoragePool(secondaryStorage.getType(), secondaryStorage.getUuid());\n            }\n        }\n    }\n","date":"2021-03-18 18:54:01","endLine":178,"groupId":"103344","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"(finalCreatePrivateTemplateFromVolumeCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e6/21e5facee1dea5afc5fddffeac082f1b8601c7.src","preCode":"    public Answer execute(final CreatePrivateTemplateFromVolumeCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final String secondaryStorageURL = command.getSecondaryStorageUrl();\n\n        KVMStoragePool secondaryStorage = null;\n        KVMStoragePool primary = null;\n        final KVMStoragePoolManager storagePoolMgr = libvirtComputingResource.getStoragePoolMgr();\n        try {\n            final String templateFolder = command.getAccountId() + File.separator + command.getTemplateId() + File.separator;\n            final String templateInstallFolder = \"/template/tmpl/\" + templateFolder;\n\n            secondaryStorage = storagePoolMgr.getStoragePoolByURI(secondaryStorageURL);\n\n            try {\n                primary = storagePoolMgr.getStoragePool(command.getPool().getType(), command.getPrimaryStoragePoolNameLabel());\n            } catch (final CloudRuntimeException e) {\n                if (e.getMessage().contains(\"not found\")) {\n                    primary =\n                            storagePoolMgr.createStoragePool(command.getPool().getUuid(), command.getPool().getHost(), command.getPool().getPort(), command.getPool().getPath(),\n                                    command.getPool().getUserInfo(), command.getPool().getType());\n                } else {\n                    return new CreatePrivateTemplateAnswer(command, false, e.getMessage());\n                }\n            }\n\n            final KVMPhysicalDisk disk = primary.getPhysicalDisk(command.getVolumePath());\n            final String tmpltPath = secondaryStorage.getLocalPath() + File.separator + templateInstallFolder;\n            final StorageLayer storage = libvirtComputingResource.getStorage();\n            storage.mkdirs(tmpltPath);\n\n            if (primary.getType() != StoragePoolType.RBD) {\n                final String createTmplPath = libvirtComputingResource.createTmplPath();\n                final int cmdsTimeout = libvirtComputingResource.getCmdsTimeout();\n\n                final Script scriptCommand = new Script(createTmplPath, cmdsTimeout, s_logger);\n                scriptCommand.add(\"-f\", disk.getPath());\n                scriptCommand.add(\"-t\", tmpltPath);\n                scriptCommand.add(\"-n\", command.getUniqueName() + \".qcow2\");\n\n                final String result = scriptCommand.execute();\n\n                if (result != null) {\n                    s_logger.debug(\"failed to create template: \" + result);\n                    return new CreatePrivateTemplateAnswer(command, false, result);\n                }\n            } else {\n                s_logger.debug(\"Converting RBD disk \" + disk.getPath() + \" into template \" + command.getUniqueName());\n\n                final QemuImgFile srcFile =\n                        new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primary.getSourceHost(), primary.getSourcePort(), primary.getAuthUserName(),\n                                primary.getAuthSecret(), disk.getPath()));\n                srcFile.setFormat(PhysicalDiskFormat.RAW);\n\n                final QemuImgFile destFile = new QemuImgFile(tmpltPath + \"/\" + command.getUniqueName() + \".qcow2\");\n                destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                final QemuImg q = new QemuImg(0);\n                try {\n                    q.convert(srcFile, destFile);\n                } catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to create new template while converting \" + srcFile.getFileName() + \" to \" + destFile.getFileName() + \" the error was: \" +\n                            e.getMessage());\n                }\n\n                final File templateProp = new File(tmpltPath + \"/template.properties\");\n                if (!templateProp.exists()) {\n                    templateProp.createNewFile();\n                }\n\n                String templateContent = \"filename=\" + command.getUniqueName() + \".qcow2\" + System.getProperty(\"line.separator\");\n\n                final DateFormat dateFormat = new SimpleDateFormat(\"MM_dd_yyyy\");\n                final Date date = new Date();\n                templateContent += \"snapshot.name=\" + dateFormat.format(date) + System.getProperty(\"line.separator\");\n\n                try(FileOutputStream templFo = new FileOutputStream(templateProp);) {\n                    templFo.write(templateContent.getBytes(\"UTF-8\"));\n                    templFo.flush();\n                }catch(final IOException ex)\n                {\n                    s_logger.error(\"CreatePrivateTemplateAnswer:Exception:\"+ex.getMessage());\n                }\n\n            }\n\n            final Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, storage);\n            final Processor qcow2Processor = new QCOW2Processor();\n\n            qcow2Processor.configure(\"QCOW2 Processor\", params);\n\n            final FormatInfo info = qcow2Processor.process(tmpltPath, null, command.getUniqueName());\n\n            final TemplateLocation loc = new TemplateLocation(storage, tmpltPath);\n            loc.create(1, true, command.getUniqueName());\n            loc.addFormat(info);\n            loc.save();\n\n            return new CreatePrivateTemplateAnswer(command, true, null, templateInstallFolder + command.getUniqueName() + \".qcow2\", info.virtualSize, info.size,\n                    command.getUniqueName(), ImageFormat.QCOW2);\n        } catch (final InternalErrorException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final IOException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final ConfigurationException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } catch (final CloudRuntimeException e) {\n            return new CreatePrivateTemplateAnswer(command, false, e.toString());\n        } finally {\n            if (secondaryStorage != null) {\n                storagePoolMgr.deleteStoragePool(secondaryStorage.getType(), secondaryStorage.getUuid());\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtCreatePrivateTemplateFromVolumeCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected long getVirtualSize(File file, ImageFormat format) {\n        Processor processor = null;\n        try {\n            if (format == null) {\n                return file.length();\n            } else if (format == ImageFormat.QCOW2) {\n                processor = new QCOW2Processor();\n            } else if (format == ImageFormat.OVA) {\n                processor = new OVAProcessor();\n            } else if (format == ImageFormat.VHD) {\n                processor = new VhdProcessor();\n            } else if (format == ImageFormat.RAW) {\n                processor = new RawImageProcessor();\n            } else if (format == ImageFormat.VMDK) {\n                processor = new VmdkProcessor();\n            }\n            if (format == ImageFormat.TAR) {\n                processor = new TARProcessor();\n            }\n\n            if (processor == null) {\n                return file.length();\n            }\n\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"template processor\", params);\n            return processor.getVirtualSize(file);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to get virtual size of file \" + file.getPath() + \", returning file size instead: \", e);\n            return file.length();\n        }\n\n    }\n","date":"2018-01-20 05:49:27","endLine":1498,"groupId":"103344","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getVirtualSize","params":"(Filefile@ImageFormatformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/93/d8c271df33d3b3bc9ab0fa1e8ac824c9d6d472.src","preCode":"    protected long getVirtualSize(File file, ImageFormat format) {\n        Processor processor = null;\n        try {\n            if (format == null) {\n                return file.length();\n            } else if (format == ImageFormat.QCOW2) {\n                processor = new QCOW2Processor();\n            } else if (format == ImageFormat.OVA) {\n                processor = new OVAProcessor();\n            } else if (format == ImageFormat.VHD) {\n                processor = new VhdProcessor();\n            } else if (format == ImageFormat.RAW) {\n                processor = new RawImageProcessor();\n            } else if (format == ImageFormat.VMDK) {\n                processor = new VmdkProcessor();\n            }\n            if (format == ImageFormat.TAR) {\n                processor = new TARProcessor();\n            }\n\n            if (processor == null) {\n                return file.length();\n            }\n\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"template processor\", params);\n            return processor.getVirtualSize(file);\n        } catch (Exception e) {\n            s_logger.warn(\"Failed to get virtual size of file \" + file.getPath() + \", returning file size instead: \", e);\n            return file.length();\n        }\n\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/resource/NfsSecondaryStorageResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1465,"status":"N"}],"commitId":"4e90a8c454f4d8ea6c35d9f92ada13325aeecf54","commitMessage":"@@@Qemu 2.10 requires `-U` flag to read volume metadata (#4567)\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <daniel@scclouds.com.br>","date":"2021-03-18 18:54:01","modifiedFileCount":"9","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
