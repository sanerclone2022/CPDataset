[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, int returnUpTo, boolean considerReservedCapacity) {\n\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n\n        if (type == Host.Type.Storage) {\n            \r\n            return new ArrayList<Host>();\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Looking for hosts in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId);\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        List<HostVO> clusterHosts = new ArrayList<HostVO>();\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag);\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                clusterHosts = _resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId);\n            } else {\n                List<HostVO> hostsMatchingOfferingTag = new ArrayList<HostVO>();\n                List<HostVO> hostsMatchingTemplateTag = new ArrayList<HostVO>();\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsMatchingOfferingTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsMatchingOfferingTag);\n                    }\n                }\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n                    hostsMatchingTemplateTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsMatchingTemplateTag);\n                    }\n                }\n\n                if (hasSvcOfferingTag && hasTemplateTag) {\n                    hostsMatchingOfferingTag.retainAll(hostsMatchingTemplateTag);\n                    clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Found \" + hostsMatchingOfferingTag.size() + \" Hosts satisfying both tags, host ids are:\" + hostsMatchingOfferingTag);\n                    }\n\n                    clusterHosts = hostsMatchingOfferingTag;\n                } else {\n                    if (hasSvcOfferingTag) {\n                        clusterHosts = hostsMatchingOfferingTag;\n                    } else {\n                        clusterHosts = hostsMatchingTemplateTag;\n                    }\n                }\n            }\n        }\n\n        \r\n        List<HostVO> allhostsInCluster = _hostDao.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId, null);\n        allhostsInCluster.removeAll(clusterHosts);\n        for (HostVO host : allhostsInCluster) {\n            avoid.addHost(host.getId());\n        }\n\n        return allocateTo(plan, offering, template, avoid, clusterHosts, returnUpTo, considerReservedCapacity, account);\n    }\n","date":"2018-01-20 05:49:27","endLine":186,"groupId":"15700","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"allocateTo","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@Typetype@ExcludeListavoid@intreturnUpTo@booleanconsiderReservedCapacity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/33/cee36e192459791a42713cc3855661b897104f.src","preCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, int returnUpTo, boolean considerReservedCapacity) {\n\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n\n        if (type == Host.Type.Storage) {\n            \r\n            return new ArrayList<Host>();\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Looking for hosts in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId);\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        List<HostVO> clusterHosts = new ArrayList<HostVO>();\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag);\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                clusterHosts = _resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId);\n            } else {\n                List<HostVO> hostsMatchingOfferingTag = new ArrayList<HostVO>();\n                List<HostVO> hostsMatchingTemplateTag = new ArrayList<HostVO>();\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsMatchingOfferingTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsMatchingOfferingTag);\n                    }\n                }\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n                    hostsMatchingTemplateTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsMatchingTemplateTag);\n                    }\n                }\n\n                if (hasSvcOfferingTag && hasTemplateTag) {\n                    hostsMatchingOfferingTag.retainAll(hostsMatchingTemplateTag);\n                    clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Found \" + hostsMatchingOfferingTag.size() + \" Hosts satisfying both tags, host ids are:\" + hostsMatchingOfferingTag);\n                    }\n\n                    clusterHosts = hostsMatchingOfferingTag;\n                } else {\n                    if (hasSvcOfferingTag) {\n                        clusterHosts = hostsMatchingOfferingTag;\n                    } else {\n                        clusterHosts = hostsMatchingTemplateTag;\n                    }\n                }\n            }\n        }\n\n        \r\n        List<HostVO> allhostsInCluster = _hostDao.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId, null);\n        allhostsInCluster.removeAll(clusterHosts);\n        for (HostVO host : allhostsInCluster) {\n            avoid.addHost(host.getId());\n        }\n\n        return allocateTo(plan, offering, template, avoid, clusterHosts, returnUpTo, considerReservedCapacity, account);\n    }\n","realPath":"server/src/main/java/com/cloud/agent/manager/allocator/impl/FirstFitAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, List<? extends Host> hosts, int returnUpTo,\n        boolean considerReservedCapacity) {\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n        List<Host> suitableHosts = new ArrayList<Host>();\n        List<Host> hostsCopy = new ArrayList<Host>(hosts);\n\n        if (type == Host.Type.Storage) {\n            \r\n            \r\n            return suitableHosts;\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag));\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                hostsCopy.retainAll(_resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId));\n            } else {\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsCopy);\n                    }\n                }\n\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsCopy);\n                    }\n                }\n            }\n        }\n\n        if (!hostsCopy.isEmpty()) {\n            suitableHosts = allocateTo(plan, offering, template, avoid, hostsCopy, returnUpTo, considerReservedCapacity, account);\n        }\n\n        return suitableHosts;\n    }\n","date":"2018-01-20 05:49:27","endLine":248,"groupId":"11129","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"allocateTo","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@Typetype@ExcludeListavoid@List<?extendsHost>hosts@intreturnUpTo@booleanconsiderReservedCapacity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/33/cee36e192459791a42713cc3855661b897104f.src","preCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, List<? extends Host> hosts, int returnUpTo,\n        boolean considerReservedCapacity) {\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n        List<Host> suitableHosts = new ArrayList<Host>();\n        List<Host> hostsCopy = new ArrayList<Host>(hosts);\n\n        if (type == Host.Type.Storage) {\n            \r\n            \r\n            return suitableHosts;\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag));\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                hostsCopy.retainAll(_resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId));\n            } else {\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsCopy);\n                    }\n                }\n\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsCopy);\n                    }\n                }\n            }\n        }\n\n        if (!hostsCopy.isEmpty()) {\n            suitableHosts = allocateTo(plan, offering, template, avoid, hostsCopy, returnUpTo, considerReservedCapacity, account);\n        }\n\n        return suitableHosts;\n    }\n","realPath":"server/src/main/java/com/cloud/agent/manager/allocator/impl/FirstFitAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-03-14 03:56:26","commitOrder":2,"curCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, int returnUpTo, boolean considerReservedCapacity) {\n\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n\n        boolean isVMDeployedWithUefi = false;\n        UserVmDetailVO userVmDetailVO = _userVmDetailsDao.findDetail(vmProfile.getId(), \"UEFI\");\n        if(userVmDetailVO != null){\n            if (\"secure\".equalsIgnoreCase(userVmDetailVO.getValue()) || \"legacy\".equalsIgnoreCase(userVmDetailVO.getValue())) {\n                isVMDeployedWithUefi = true;\n            }\n        }\n        s_logger.info(\" Guest VM is requested with Cusotm[UEFI] Boot Type \"+ isVMDeployedWithUefi);\n\n\n        if (type == Host.Type.Storage) {\n            \r\n            return new ArrayList<Host>();\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Looking for hosts in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId);\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        String hostTagUefi = \"UEFI\";\n\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        List<HostVO> clusterHosts = new ArrayList<HostVO>();\n        List<HostVO> hostsMatchingUefiTag = new ArrayList<HostVO>();\n        if(isVMDeployedWithUefi){\n            hostsMatchingUefiTag = _hostDao.listByHostCapability(type, clusterId, podId, dcId, Host.HOST_UEFI_ENABLE);\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Hosts with tag '\" + hostTagUefi + \"' are:\" + hostsMatchingUefiTag);\n            }\n        }\n\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag);\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                clusterHosts = _resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId);\n            } else {\n                List<HostVO> hostsMatchingOfferingTag = new ArrayList<HostVO>();\n                List<HostVO> hostsMatchingTemplateTag = new ArrayList<HostVO>();\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsMatchingOfferingTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsMatchingOfferingTag);\n                    }\n                }\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n                    hostsMatchingTemplateTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsMatchingTemplateTag);\n                    }\n                }\n\n                if (hasSvcOfferingTag && hasTemplateTag) {\n                    hostsMatchingOfferingTag.retainAll(hostsMatchingTemplateTag);\n                    clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Found \" + hostsMatchingOfferingTag.size() + \" Hosts satisfying both tags, host ids are:\" + hostsMatchingOfferingTag);\n                    }\n\n                    clusterHosts = hostsMatchingOfferingTag;\n                } else {\n                    if (hasSvcOfferingTag) {\n                        clusterHosts = hostsMatchingOfferingTag;\n                    } else {\n                        clusterHosts = hostsMatchingTemplateTag;\n                    }\n                }\n            }\n        }\n\n        if (isVMDeployedWithUefi) {\n            clusterHosts.retainAll(hostsMatchingUefiTag);\n        }\n\n        \r\n        List<HostVO> allhostsInCluster = _hostDao.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId, null);\n        allhostsInCluster.removeAll(clusterHosts);\n        for (HostVO host : allhostsInCluster) {\n            avoid.addHost(host.getId());\n        }\n\n        return allocateTo(plan, offering, template, avoid, clusterHosts, returnUpTo, considerReservedCapacity, account);\n    }\n","date":"2020-03-14 03:56:26","endLine":214,"groupId":"15700","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"allocateTo","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@Typetype@ExcludeListavoid@intreturnUpTo@booleanconsiderReservedCapacity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/aa/b9510c4f056d36919a9d6a3c44e84df1c2d089.src","preCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, int returnUpTo, boolean considerReservedCapacity) {\n\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n\n        if (type == Host.Type.Storage) {\n            \r\n            return new ArrayList<Host>();\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Looking for hosts in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId);\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        List<HostVO> clusterHosts = new ArrayList<HostVO>();\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag);\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                clusterHosts = _resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId);\n            } else {\n                List<HostVO> hostsMatchingOfferingTag = new ArrayList<HostVO>();\n                List<HostVO> hostsMatchingTemplateTag = new ArrayList<HostVO>();\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsMatchingOfferingTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsMatchingOfferingTag);\n                    }\n                }\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n                    hostsMatchingTemplateTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsMatchingTemplateTag);\n                    }\n                }\n\n                if (hasSvcOfferingTag && hasTemplateTag) {\n                    hostsMatchingOfferingTag.retainAll(hostsMatchingTemplateTag);\n                    clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Found \" + hostsMatchingOfferingTag.size() + \" Hosts satisfying both tags, host ids are:\" + hostsMatchingOfferingTag);\n                    }\n\n                    clusterHosts = hostsMatchingOfferingTag;\n                } else {\n                    if (hasSvcOfferingTag) {\n                        clusterHosts = hostsMatchingOfferingTag;\n                    } else {\n                        clusterHosts = hostsMatchingTemplateTag;\n                    }\n                }\n            }\n        }\n\n        \r\n        List<HostVO> allhostsInCluster = _hostDao.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId, null);\n        allhostsInCluster.removeAll(clusterHosts);\n        for (HostVO host : allhostsInCluster) {\n            avoid.addHost(host.getId());\n        }\n\n        return allocateTo(plan, offering, template, avoid, clusterHosts, returnUpTo, considerReservedCapacity, account);\n    }\n","realPath":"server/src/main/java/com/cloud/agent/manager/allocator/impl/FirstFitAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, List<? extends Host> hosts, int returnUpTo,\n        boolean considerReservedCapacity) {\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n        List<Host> suitableHosts = new ArrayList<Host>();\n        List<Host> hostsCopy = new ArrayList<Host>(hosts);\n\n        if (type == Host.Type.Storage) {\n            \r\n            \r\n            return suitableHosts;\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag));\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                hostsCopy.retainAll(_resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId));\n            } else {\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsCopy);\n                    }\n                }\n\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsCopy);\n                    }\n                }\n            }\n        }\n\n        if (!hostsCopy.isEmpty()) {\n            suitableHosts = allocateTo(plan, offering, template, avoid, hostsCopy, returnUpTo, considerReservedCapacity, account);\n        }\n\n        return suitableHosts;\n    }\n","date":"2018-01-20 05:49:27","endLine":248,"groupId":"11129","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"allocateTo","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@Typetype@ExcludeListavoid@List<?extendsHost>hosts@intreturnUpTo@booleanconsiderReservedCapacity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/33/cee36e192459791a42713cc3855661b897104f.src","preCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, List<? extends Host> hosts, int returnUpTo,\n        boolean considerReservedCapacity) {\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n        List<Host> suitableHosts = new ArrayList<Host>();\n        List<Host> hostsCopy = new ArrayList<Host>(hosts);\n\n        if (type == Host.Type.Storage) {\n            \r\n            \r\n            return suitableHosts;\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag));\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                hostsCopy.retainAll(_resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId));\n            } else {\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsCopy);\n                    }\n                }\n\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsCopy);\n                    }\n                }\n            }\n        }\n\n        if (!hostsCopy.isEmpty()) {\n            suitableHosts = allocateTo(plan, offering, template, avoid, hostsCopy, returnUpTo, considerReservedCapacity, account);\n        }\n\n        return suitableHosts;\n    }\n","realPath":"server/src/main/java/com/cloud/agent/manager/allocator/impl/FirstFitAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"d4b537efa7ed27ef88b735a22493808b61529186","commitMessage":"@@@UEFI Implementation:  Enabled UEFI Support for Guest VM's on Hypervisor KVM. VMware. enabled boot modes [Legacy. Secure] support for UEFI boot with known caveats. (#3638)\n\nCo-authored-by: Pavan Kumar Aravapalli <pavan_aravapalli@accelerite.com>\nCo-authored-by: dahn <daan.hoogland@shapeblue.com>","date":"2020-03-14 03:56:26","modifiedFileCount":"32","status":"M","submitter":"pavanaravapalli"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-02-12 15:23:40","commitOrder":3,"curCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, int returnUpTo, boolean considerReservedCapacity) {\n\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n\n        boolean isVMDeployedWithUefi = false;\n        UserVmDetailVO userVmDetailVO = _userVmDetailsDao.findDetail(vmProfile.getId(), \"UEFI\");\n        if(userVmDetailVO != null){\n            if (\"secure\".equalsIgnoreCase(userVmDetailVO.getValue()) || \"legacy\".equalsIgnoreCase(userVmDetailVO.getValue())) {\n                isVMDeployedWithUefi = true;\n            }\n        }\n        s_logger.info(\" Guest VM is requested with Custom[UEFI] Boot Type \"+ isVMDeployedWithUefi);\n\n\n        if (type == Host.Type.Storage) {\n            \r\n            return new ArrayList<Host>();\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Looking for hosts in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId);\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        String hostTagUefi = \"UEFI\";\n\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        List<HostVO> clusterHosts = new ArrayList<HostVO>();\n        List<HostVO> hostsMatchingUefiTag = new ArrayList<HostVO>();\n        if(isVMDeployedWithUefi){\n            hostsMatchingUefiTag = _hostDao.listByHostCapability(type, clusterId, podId, dcId, Host.HOST_UEFI_ENABLE);\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Hosts with tag '\" + hostTagUefi + \"' are:\" + hostsMatchingUefiTag);\n            }\n        }\n\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag);\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                clusterHosts = _resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId);\n            } else {\n                List<HostVO> hostsMatchingOfferingTag = new ArrayList<HostVO>();\n                List<HostVO> hostsMatchingTemplateTag = new ArrayList<HostVO>();\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsMatchingOfferingTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsMatchingOfferingTag);\n                    }\n                }\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n                    hostsMatchingTemplateTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsMatchingTemplateTag);\n                    }\n                }\n\n                if (hasSvcOfferingTag && hasTemplateTag) {\n                    hostsMatchingOfferingTag.retainAll(hostsMatchingTemplateTag);\n                    clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Found \" + hostsMatchingOfferingTag.size() + \" Hosts satisfying both tags, host ids are:\" + hostsMatchingOfferingTag);\n                    }\n\n                    clusterHosts = hostsMatchingOfferingTag;\n                } else {\n                    if (hasSvcOfferingTag) {\n                        clusterHosts = hostsMatchingOfferingTag;\n                    } else {\n                        clusterHosts = hostsMatchingTemplateTag;\n                    }\n                }\n            }\n        }\n\n        if (isVMDeployedWithUefi) {\n            clusterHosts.retainAll(hostsMatchingUefiTag);\n        }\n\n        \r\n        List<HostVO> allhostsInCluster = _hostDao.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId, null);\n        allhostsInCluster.removeAll(clusterHosts);\n        for (HostVO host : allhostsInCluster) {\n            avoid.addHost(host.getId());\n        }\n\n        return allocateTo(plan, offering, template, avoid, clusterHosts, returnUpTo, considerReservedCapacity, account);\n    }\n","date":"2021-02-12 15:23:40","endLine":214,"groupId":"111591","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"allocateTo","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@Typetype@ExcludeListavoid@intreturnUpTo@booleanconsiderReservedCapacity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/22/d320ebb66a3223c95d9de688af590351d352c9.src","preCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, int returnUpTo, boolean considerReservedCapacity) {\n\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n\n        boolean isVMDeployedWithUefi = false;\n        UserVmDetailVO userVmDetailVO = _userVmDetailsDao.findDetail(vmProfile.getId(), \"UEFI\");\n        if(userVmDetailVO != null){\n            if (\"secure\".equalsIgnoreCase(userVmDetailVO.getValue()) || \"legacy\".equalsIgnoreCase(userVmDetailVO.getValue())) {\n                isVMDeployedWithUefi = true;\n            }\n        }\n        s_logger.info(\" Guest VM is requested with Cusotm[UEFI] Boot Type \"+ isVMDeployedWithUefi);\n\n\n        if (type == Host.Type.Storage) {\n            \r\n            return new ArrayList<Host>();\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Looking for hosts in dc: \" + dcId + \"  pod:\" + podId + \"  cluster:\" + clusterId);\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        String hostTagUefi = \"UEFI\";\n\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        List<HostVO> clusterHosts = new ArrayList<HostVO>();\n        List<HostVO> hostsMatchingUefiTag = new ArrayList<HostVO>();\n        if(isVMDeployedWithUefi){\n            hostsMatchingUefiTag = _hostDao.listByHostCapability(type, clusterId, podId, dcId, Host.HOST_UEFI_ENABLE);\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Hosts with tag '\" + hostTagUefi + \"' are:\" + hostsMatchingUefiTag);\n            }\n        }\n\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag);\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                clusterHosts = _resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId);\n            } else {\n                List<HostVO> hostsMatchingOfferingTag = new ArrayList<HostVO>();\n                List<HostVO> hostsMatchingTemplateTag = new ArrayList<HostVO>();\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsMatchingOfferingTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsMatchingOfferingTag);\n                    }\n                }\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n                    hostsMatchingTemplateTag = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsMatchingTemplateTag);\n                    }\n                }\n\n                if (hasSvcOfferingTag && hasTemplateTag) {\n                    hostsMatchingOfferingTag.retainAll(hostsMatchingTemplateTag);\n                    clusterHosts = _hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate);\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Found \" + hostsMatchingOfferingTag.size() + \" Hosts satisfying both tags, host ids are:\" + hostsMatchingOfferingTag);\n                    }\n\n                    clusterHosts = hostsMatchingOfferingTag;\n                } else {\n                    if (hasSvcOfferingTag) {\n                        clusterHosts = hostsMatchingOfferingTag;\n                    } else {\n                        clusterHosts = hostsMatchingTemplateTag;\n                    }\n                }\n            }\n        }\n\n        if (isVMDeployedWithUefi) {\n            clusterHosts.retainAll(hostsMatchingUefiTag);\n        }\n\n        \r\n        List<HostVO> allhostsInCluster = _hostDao.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId, null);\n        allhostsInCluster.removeAll(clusterHosts);\n        for (HostVO host : allhostsInCluster) {\n            avoid.addHost(host.getId());\n        }\n\n        return allocateTo(plan, offering, template, avoid, clusterHosts, returnUpTo, considerReservedCapacity, account);\n    }\n","realPath":"server/src/main/java/com/cloud/agent/manager/allocator/impl/FirstFitAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, List<? extends Host> hosts, int returnUpTo,\n        boolean considerReservedCapacity) {\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n        List<Host> suitableHosts = new ArrayList<Host>();\n        List<Host> hostsCopy = new ArrayList<Host>(hosts);\n\n        if (type == Host.Type.Storage) {\n            \r\n            \r\n            return suitableHosts;\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag));\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                hostsCopy.retainAll(_resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId));\n            } else {\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsCopy);\n                    }\n                }\n\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsCopy);\n                    }\n                }\n            }\n        }\n\n        if (!hostsCopy.isEmpty()) {\n            suitableHosts = allocateTo(plan, offering, template, avoid, hostsCopy, returnUpTo, considerReservedCapacity, account);\n        }\n\n        return suitableHosts;\n    }\n","date":"2018-01-20 05:49:27","endLine":248,"groupId":"111591","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"allocateTo","params":"(VirtualMachineProfilevmProfile@DeploymentPlanplan@Typetype@ExcludeListavoid@List<?extendsHost>hosts@intreturnUpTo@booleanconsiderReservedCapacity)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/33/cee36e192459791a42713cc3855661b897104f.src","preCode":"    public List<Host> allocateTo(VirtualMachineProfile vmProfile, DeploymentPlan plan, Type type, ExcludeList avoid, List<? extends Host> hosts, int returnUpTo,\n        boolean considerReservedCapacity) {\n        long dcId = plan.getDataCenterId();\n        Long podId = plan.getPodId();\n        Long clusterId = plan.getClusterId();\n        ServiceOffering offering = vmProfile.getServiceOffering();\n        VMTemplateVO template = (VMTemplateVO)vmProfile.getTemplate();\n        Account account = vmProfile.getOwner();\n        List<Host> suitableHosts = new ArrayList<Host>();\n        List<Host> hostsCopy = new ArrayList<Host>(hosts);\n\n        if (type == Host.Type.Storage) {\n            \r\n            \r\n            return suitableHosts;\n        }\n\n        String hostTagOnOffering = offering.getHostTag();\n        String hostTagOnTemplate = template.getTemplateTag();\n        boolean hasSvcOfferingTag = hostTagOnOffering != null ? true : false;\n        boolean hasTemplateTag = hostTagOnTemplate != null ? true : false;\n\n        String haVmTag = (String)vmProfile.getParameter(VirtualMachineProfile.Param.HaTag);\n        if (haVmTag != null) {\n            hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, haVmTag));\n        } else {\n            if (hostTagOnOffering == null && hostTagOnTemplate == null) {\n                hostsCopy.retainAll(_resourceMgr.listAllUpAndEnabledNonHAHosts(type, clusterId, podId, dcId));\n            } else {\n                if (hasSvcOfferingTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on SvcOffering:\" + hostTagOnOffering);\n                    }\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnOffering));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnOffering + \"' are:\" + hostsCopy);\n                    }\n                }\n\n                if (hasTemplateTag) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Looking for hosts having tag specified on Template:\" + hostTagOnTemplate);\n                    }\n\n                    hostsCopy.retainAll(_hostDao.listByHostTag(type, clusterId, podId, dcId, hostTagOnTemplate));\n\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Hosts with tag '\" + hostTagOnTemplate + \"' are:\" + hostsCopy);\n                    }\n                }\n            }\n        }\n\n        if (!hostsCopy.isEmpty()) {\n            suitableHosts = allocateTo(plan, offering, template, avoid, hostsCopy, returnUpTo, considerReservedCapacity, account);\n        }\n\n        return suitableHosts;\n    }\n","realPath":"server/src/main/java/com/cloud/agent/manager/allocator/impl/FirstFitAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"35055896a0edb911ee32c5cbd7adf996aab6a3da","commitMessage":"@@@server: FIx typo on FirstFitAllocator (#4648)\n\nFrom \"Cusotm[UEFI]\" to \"Custom[UEFI]\"","date":"2021-02-12 15:23:40","modifiedFileCount":"1","status":"M","submitter":"Gabriel Beims Br?scher"}]
