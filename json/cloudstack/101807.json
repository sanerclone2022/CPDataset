[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already assocaited with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        NetworkOffering offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        boolean sharedSourceNat = offering.getSharedSourceNat();\n        boolean isSourceNat = false;\n        if (!sharedSourceNat) {\n            if (getExistingSourceNatInNetwork(owner.getId(), networkId) == null) {\n                if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {\n                    isSourceNat = true;\n                }\n            }\n        }\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1418,"groupId":"19381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"associateIPToGuestNetwork","params":"(longipId@longnetworkId@booleanreleaseOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already assocaited with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        NetworkOffering offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        boolean sharedSourceNat = offering.getSharedSourceNat();\n        boolean isSourceNat = false;\n        if (!sharedSourceNat) {\n            if (getExistingSourceNatInNetwork(owner.getId(), networkId) == null) {\n                if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {\n                    isSourceNat = true;\n                }\n            }\n        }\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1288,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1518,"groupId":"17722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"disassociatePortableIPToGuestNetwork","params":"(longipId@longnetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":2,"curCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already assocaited with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        NetworkOffering offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        boolean sharedSourceNat = offering.isSharedSourceNat();\n        boolean isSourceNat = false;\n        if (!sharedSourceNat) {\n            if (getExistingSourceNatInNetwork(owner.getId(), networkId) == null) {\n                if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {\n                    isSourceNat = true;\n                }\n            }\n        }\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-09-22 23:20:48","endLine":1426,"groupId":"19381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"associateIPToGuestNetwork","params":"(longipId@longnetworkId@booleanreleaseOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cb/7210d33acfe12ba1b3926dbe86c72f63bd28da.src","preCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already assocaited with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        NetworkOffering offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        boolean sharedSourceNat = offering.getSharedSourceNat();\n        boolean isSourceNat = false;\n        if (!sharedSourceNat) {\n            if (getExistingSourceNatInNetwork(owner.getId(), networkId) == null) {\n                if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {\n                    isSourceNat = true;\n                }\n            }\n        }\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1296,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1518,"groupId":"17722","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"disassociatePortableIPToGuestNetwork","params":"(longipId@longnetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"N"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-01-23 20:05:16","commitOrder":3,"curCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already assocaited with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        boolean isSourceNat = isSourceNatAvailableForNetwork(owner, ipToAssoc, network);\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-01-23 20:05:16","endLine":1416,"groupId":"19381","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"associateIPToGuestNetwork","params":"(longipId@longnetworkId@booleanreleaseOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c1/52034c11b9ea3fa2ad5d52231fb566fd8cd35b.src","preCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already assocaited with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        NetworkOffering offering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n        boolean sharedSourceNat = offering.isSharedSourceNat();\n        boolean isSourceNat = false;\n        if (!sharedSourceNat) {\n            if (getExistingSourceNatInNetwork(owner.getId(), networkId) == null) {\n                if (network.getGuestType() == GuestType.Isolated && network.getVpcId() == null && !ipToAssoc.isPortable()) {\n                    isSourceNat = true;\n                }\n            }\n        }\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1295,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1518,"groupId":"17722","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"disassociatePortableIPToGuestNetwork","params":"(longipId@longnetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"N"}],"commitId":"323f791efca6f1d5b8bb63573d9e385c97c427e1","commitMessage":"@@@IP address acquired with associate ip address is marked as source nat (#3125)\n\n* CLOUDSTACK-4045 added a check for network state when determining whether a new IP should be source NAT. this prevents associated IP's to be marked as source NAT when the network is in allocated state.  causing disassociateIpAddress to fail later\n\n* Remove mock object that cause other tests to fail\n\n* Remove underscores from variable types and add documentation for the created method\n\n* Improve exception message to include network name\n\n* Include network UUID with the Exception message and fix failing marvin test\n\n* Rebase against latest master and format AssociateIPAddrCmd class\n","date":"2019-01-23 20:05:16","modifiedFileCount":"3","status":"M","submitter":"Dingane Hlaluku"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-07-30 22:38:11","commitOrder":4,"curCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already associated with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        boolean isSourceNat = isSourceNatAvailableForNetwork(owner, ipToAssoc, network);\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-07-30 22:38:11","endLine":1486,"groupId":"101807","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"associateIPToGuestNetwork","params":"(longipId@longnetworkId@booleanreleaseOnFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/eb/df63560501bcefa41783f9d76230d685acb675.src","preCode":"    public IPAddressVO associateIPToGuestNetwork(long ipId, long networkId, boolean releaseOnFailure) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                                network);\n                    } else {\n                        throw new InvalidParameterValueException(\"IP can be associated with guest network of 'shared' type only if \"\n                                + \"network services Source Nat, Static Nat, Port Forwarding, Load balancing, firewall are enabled in the network\");\n                    }\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        if (ipToAssoc.getAssociatedWithNetworkId() != null) {\n            s_logger.debug(\"IP \" + ipToAssoc + \" is already assocaited with network id\" + networkId);\n            return ipToAssoc;\n        }\n\n        Network network = _networksDao.findById(networkId);\n        if (network != null) {\n            _accountMgr.checkAccess(owner, AccessType.UseEntry, false, network);\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Ip address can be associated to the network with trafficType \" + TrafficType.Guest);\n        }\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        if (zone.getNetworkType() == NetworkType.Advanced) {\n            \r\n            if (network.getGuestType() == GuestType.Isolated && !(_networkModel.areServicesSupportedInNetwork(network.getId(), Service.SourceNat))) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated only to the network of guest type \"\n                        + GuestType.Isolated + \" with the \" + Service.SourceNat.getName() + \" enabled\");\n            }\n\n            \r\n            if (network.getGuestType() == GuestType.Shared && !isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                if (releaseOnFailure && ipToAssoc != null) {\n                    s_logger.warn(\"Failed to associate ip address, so unassigning ip from the database \" + ipToAssoc);\n                    _ipAddressDao.unassignIpAddress(ipToAssoc.getId());\n                }\n                throw new InvalidParameterValueException(\"In zone of type \" + NetworkType.Advanced + \" ip address can be associated with network of guest type \" + GuestType.Shared\n                        + \"only if at \" + \"least one of the services \" + Service.SourceNat.getName() + \"/\" + Service.StaticNat.getName() + \"/\" + Service.Lb.getName() + \"/\"\n                        + Service.PortForwarding.getName() + \" is enabled\");\n            }\n        }\n\n        boolean isSourceNat = isSourceNatAvailableForNetwork(owner, ipToAssoc, network);\n\n        s_logger.debug(\"Associating ip \" + ipToAssoc + \" to network \" + network);\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        \r\n        ip.setAssociatedWithNetworkId(networkId);\n        ip.setSourceNat(isSourceNat);\n        _ipAddressDao.update(ipId, ip);\n\n        boolean success = false;\n        try {\n            success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n            if (!success && releaseOnFailure) {\n                if (ip != null) {\n                    try {\n                        s_logger.warn(\"Failed to associate ip address, so releasing ip from the database \" + ip);\n                        _ipAddressDao.markAsUnavailable(ip.getId());\n                        if (!applyIpAssociations(network, true)) {\n                            \r\n                            \r\n                            _ipAddressDao.unassignIpAddress(ip.getId());\n                        }\n                    } catch (Exception e) {\n                        s_logger.warn(\"Unable to disassociate ip address for recovery\", e);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1365,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1518,"groupId":"101807","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"disassociatePortableIPToGuestNetwork","params":"(longipId@longnetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c0/0359c92f008cbc5e83df80b963434e7416ac5f.src","preCode":"    public IPAddressVO disassociatePortableIPToGuestNetwork(long ipId, long networkId) throws ResourceAllocationException, ResourceUnavailableException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        Account owner = null;\n\n        Network network = _networksDao.findById(networkId);\n        if (network == null) {\n            throw new InvalidParameterValueException(\"Invalid network id is given\");\n        }\n\n        IPAddressVO ipToAssoc = _ipAddressDao.findById(ipId);\n        if (ipToAssoc != null) {\n\n            if (ipToAssoc.getAssociatedWithNetworkId() == null) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with any network\");\n            }\n\n            if (ipToAssoc.getAssociatedWithNetworkId() != network.getId()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" is not associated with network id\" + networkId);\n            }\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n            if (zone.getNetworkType() == NetworkType.Advanced) {\n                if (network.getGuestType() == Network.GuestType.Shared) {\n                    assert(isSharedNetworkOfferingWithServices(network.getNetworkOfferingId()));\n                    _accountMgr.checkAccess(CallContext.current().getCallingAccount(), AccessType.UseEntry, false,\n                            network);\n                }\n            } else {\n                _accountMgr.checkAccess(caller, null, true, ipToAssoc);\n            }\n            owner = _accountMgr.getAccount(ipToAssoc.getAllocatedToAccountId());\n        } else {\n            s_logger.debug(\"Unable to find ip address by id: \" + ipId);\n            return null;\n        }\n\n        DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        \r\n        \r\n        \r\n        \r\n        if (network.getAccountId() != owner.getId()) {\n            if (zone.getNetworkType() != NetworkType.Basic && !(zone.getNetworkType() == NetworkType.Advanced && network.getGuestType() == Network.GuestType.Shared)) {\n                throw new InvalidParameterValueException(\"The owner of the network is not the same as owner of the IP\");\n            }\n        }\n\n        \r\n        List<PublicIpAddress> ipList = new ArrayList<PublicIpAddress>();\n        PublicIp publicIp = PublicIp.createFromAddrAndVlan(ipToAssoc, _vlanDao.findById(ipToAssoc.getVlanId()));\n        ipList.add(publicIp);\n        Map<PublicIpAddress, Set<Service>> ipToServices = _networkModel.getIpToServices(ipList, false, true);\n        if (!ipToServices.isEmpty()) {\n            Set<Service> services = ipToServices.get(publicIp);\n            if (services != null && !services.isEmpty()) {\n                throw new InvalidParameterValueException(\"IP \" + ipToAssoc + \" has services and rules associated in the network \" + networkId);\n            }\n        }\n\n        IPAddressVO ip = _ipAddressDao.findById(ipId);\n        ip.setAssociatedWithNetworkId(null);\n        _ipAddressDao.update(ipId, ip);\n\n        try {\n            boolean success = applyIpAssociations(network, false);\n            if (success) {\n                s_logger.debug(\"Successfully associated ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            } else {\n                s_logger.warn(\"Failed to associate ip address \" + ip.getAddress().addr() + \" to network \" + network);\n            }\n            return ip;\n        } finally {\n\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/IpAddressManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"N"}],"commitId":"0d8b4de1b2a63320d8865cda7eaf8887b0534e04","commitMessage":"@@@Cleaning up code and enhancing a few IP management logs (#4714)\n\n* Cleanup unnecessary code and enhance a few log messages at IpAddressManagerImpl\n\n* Add toString method for DataCenterVO\n\n* line too long","date":"2021-07-30 22:38:11","modifiedFileCount":"4","status":"M","submitter":"Gabriel Beims Br?scher"}]
