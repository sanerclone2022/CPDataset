[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void prepareNicForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        if(vm.getType().equals(VirtualMachine.Type.DomainRouter) && (vm.getHypervisorType().equals(HypervisorType.KVM) || vm.getHypervisorType().equals(HypervisorType.VMware))) {\n            \r\n            prepareAllNicsForMigration(vm, dest);\n            return;\n        }\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate, _networkModel.isSecurityGroupSupportedInNetwork(network),\n                    _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if (guru instanceof NetworkMigrationResponder) {\n                if (!((NetworkMigrationResponder)guru).prepareMigration(profile, network, vm, dest, context)) {\n                    s_logger.error(\"NetworkGuru \" + guru + \" prepareForMigration failed.\"); \r\n                }\n            }\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \"\n                                + network.getPhysicalNetworkId());\n                    }\n                    if (element instanceof NetworkMigrationResponder) {\n                        if (!((NetworkMigrationResponder)element).prepareMigration(profile, network, vm, dest, context)) {\n                            s_logger.error(\"NetworkElement \" + element + \" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1699,"groupId":"21476","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareNicForMigration","params":"(finalVirtualMachineProfilevm@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ce/c2e5926c174f9682d496fa78ab8a08777eece3.src","preCode":"    public void prepareNicForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        if(vm.getType().equals(VirtualMachine.Type.DomainRouter) && (vm.getHypervisorType().equals(HypervisorType.KVM) || vm.getHypervisorType().equals(HypervisorType.VMware))) {\n            \r\n            prepareAllNicsForMigration(vm, dest);\n            return;\n        }\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate, _networkModel.isSecurityGroupSupportedInNetwork(network),\n                    _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if (guru instanceof NetworkMigrationResponder) {\n                if (!((NetworkMigrationResponder)guru).prepareMigration(profile, network, vm, dest, context)) {\n                    s_logger.error(\"NetworkGuru \" + guru + \" prepareForMigration failed.\"); \r\n                }\n            }\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \"\n                                + network.getPhysicalNetworkId());\n                    }\n                    if (element instanceof NetworkMigrationResponder) {\n                        if (!((NetworkMigrationResponder)element).prepareMigration(profile, network, vm, dest, context)) {\n                            s_logger.error(\"NetworkElement \" + element + \" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1662,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void prepareAllNicsForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        Long guestNetworkId = null;\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            if(network.getTrafficType().equals(TrafficType.Guest) && network.getGuestType().equals(GuestType.Isolated)){\n                guestNetworkId = network.getId();\n            }\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate,\n                    _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if(guru instanceof NetworkMigrationResponder){\n                if(!((NetworkMigrationResponder) guru).prepareMigration(profile, network, vm, dest, context)){\n                    s_logger.error(\"NetworkGuru \"+guru+\" prepareForMigration failed.\"); \r\n                }\n            }\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \" + network.getPhysicalNetworkId());\n                    }\n                    if(element instanceof NetworkMigrationResponder){\n                        if(!((NetworkMigrationResponder) element).prepareMigration(profile, network, vm, dest, context)){\n                            s_logger.error(\"NetworkElement \"+element+\" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n\n        final List<String> addedURIs = new ArrayList<String>();\n        if(guestNetworkId != null){\n            final List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(guestNetworkId, null);\n            for (final IPAddressVO userIp : publicIps){\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(userIp, _vlanDao.findById(userIp.getVlanId()));\n                final URI broadcastUri = BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag());\n                final long ntwkId = publicIp.getNetworkId();\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(ntwkId, vm.getId(),\n                        broadcastUri.toString());\n                if(nic == null && !addedURIs.contains(broadcastUri.toString())){\n                    \r\n                    \r\n                    s_logger.debug(\"Creating nic profile for migration. BroadcastUri: \"+broadcastUri.toString()+\" NetworkId: \"+ntwkId+\" Vm: \"+vm.getId());\n                    final NetworkVO network = _networksDao.findById(ntwkId);\n                    _networkModel.getNetworkRate(network.getId(), vm.getId());\n                    final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n                    final NicProfile profile = new NicProfile();\n                    profile.setDeviceId(255); \r\n                    profile.setIPv4Address(userIp.getAddress().toString());\n                    profile.setIPv4Netmask(publicIp.getNetmask());\n                    profile.setIPv4Gateway(publicIp.getGateway());\n                    profile.setMacAddress(publicIp.getMacAddress());\n                    profile.setBroadcastType(network.getBroadcastDomainType());\n                    profile.setTrafficType(network.getTrafficType());\n                    profile.setBroadcastUri(broadcastUri);\n                    profile.setIsolationUri(Networks.IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    profile.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(network));\n                    profile.setName(_networkModel.getNetworkTag(vm.getHypervisorType(), network));\n                    profile.setNetworId(network.getId());\n\n                    guru.updateNicProfile(profile, network);\n                    vm.addNic(profile);\n                    addedURIs.add(broadcastUri.toString());\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1779,"groupId":"21476","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAllNicsForMigration","params":"(finalVirtualMachineProfilevm@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ce/c2e5926c174f9682d496fa78ab8a08777eece3.src","preCode":"    public void prepareAllNicsForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        Long guestNetworkId = null;\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            if(network.getTrafficType().equals(TrafficType.Guest) && network.getGuestType().equals(GuestType.Isolated)){\n                guestNetworkId = network.getId();\n            }\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate,\n                    _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if(guru instanceof NetworkMigrationResponder){\n                if(!((NetworkMigrationResponder) guru).prepareMigration(profile, network, vm, dest, context)){\n                    s_logger.error(\"NetworkGuru \"+guru+\" prepareForMigration failed.\"); \r\n                }\n            }\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \" + network.getPhysicalNetworkId());\n                    }\n                    if(element instanceof NetworkMigrationResponder){\n                        if(!((NetworkMigrationResponder) element).prepareMigration(profile, network, vm, dest, context)){\n                            s_logger.error(\"NetworkElement \"+element+\" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n\n        final List<String> addedURIs = new ArrayList<String>();\n        if(guestNetworkId != null){\n            final List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(guestNetworkId, null);\n            for (final IPAddressVO userIp : publicIps){\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(userIp, _vlanDao.findById(userIp.getVlanId()));\n                final URI broadcastUri = BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag());\n                final long ntwkId = publicIp.getNetworkId();\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(ntwkId, vm.getId(),\n                        broadcastUri.toString());\n                if(nic == null && !addedURIs.contains(broadcastUri.toString())){\n                    \r\n                    \r\n                    s_logger.debug(\"Creating nic profile for migration. BroadcastUri: \"+broadcastUri.toString()+\" NetworkId: \"+ntwkId+\" Vm: \"+vm.getId());\n                    final NetworkVO network = _networksDao.findById(ntwkId);\n                    _networkModel.getNetworkRate(network.getId(), vm.getId());\n                    final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n                    final NicProfile profile = new NicProfile();\n                    profile.setDeviceId(255); \r\n                    profile.setIPv4Address(userIp.getAddress().toString());\n                    profile.setIPv4Netmask(publicIp.getNetmask());\n                    profile.setIPv4Gateway(publicIp.getGateway());\n                    profile.setMacAddress(publicIp.getMacAddress());\n                    profile.setBroadcastType(network.getBroadcastDomainType());\n                    profile.setTrafficType(network.getTrafficType());\n                    profile.setBroadcastUri(broadcastUri);\n                    profile.setIsolationUri(Networks.IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    profile.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(network));\n                    profile.setName(_networkModel.getNetworkTag(vm.getHypervisorType(), network));\n                    profile.setNetworId(network.getId());\n\n                    guru.updateNicProfile(profile, network);\n                    vm.addNic(profile);\n                    addedURIs.add(broadcastUri.toString());\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1707,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-20 18:16:34","commitOrder":2,"curCode":"    public void prepareNicForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        if(vm.getType().equals(VirtualMachine.Type.DomainRouter) && (vm.getHypervisorType().equals(HypervisorType.KVM) || vm.getHypervisorType().equals(HypervisorType.VMware))) {\n            \r\n            prepareAllNicsForMigration(vm, dest);\n            return;\n        }\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate, _networkModel.isSecurityGroupSupportedInNetwork(network),\n                    _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if (guru instanceof NetworkMigrationResponder) {\n                if (!((NetworkMigrationResponder)guru).prepareMigration(profile, network, vm, dest, context)) {\n                    s_logger.error(\"NetworkGuru \" + guru + \" prepareForMigration failed.\"); \r\n                }\n            }\n\n            if (network.getGuestType() == Network.GuestType.L2 && vm.getType() == VirtualMachine.Type.User) {\n                _userVmMgr.setupVmForPvlan(false, vm.getVirtualMachine().getHostId(), profile);\n            }\n\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \"\n                                + network.getPhysicalNetworkId());\n                    }\n                    if (element instanceof NetworkMigrationResponder) {\n                        if (!((NetworkMigrationResponder)element).prepareMigration(profile, network, vm, dest, context)) {\n                            s_logger.error(\"NetworkElement \" + element + \" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n    }\n","date":"2020-08-20 18:16:34","endLine":1819,"groupId":"10608","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareNicForMigration","params":"(finalVirtualMachineProfilevm@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2c/6dbbe55b8617c65724f79c8431a5575142fe63.src","preCode":"    public void prepareNicForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        if(vm.getType().equals(VirtualMachine.Type.DomainRouter) && (vm.getHypervisorType().equals(HypervisorType.KVM) || vm.getHypervisorType().equals(HypervisorType.VMware))) {\n            \r\n            prepareAllNicsForMigration(vm, dest);\n            return;\n        }\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate, _networkModel.isSecurityGroupSupportedInNetwork(network),\n                    _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if (guru instanceof NetworkMigrationResponder) {\n                if (!((NetworkMigrationResponder)guru).prepareMigration(profile, network, vm, dest, context)) {\n                    s_logger.error(\"NetworkGuru \" + guru + \" prepareForMigration failed.\"); \r\n                }\n            }\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \"\n                                + network.getPhysicalNetworkId());\n                    }\n                    if (element instanceof NetworkMigrationResponder) {\n                        if (!((NetworkMigrationResponder)element).prepareMigration(profile, network, vm, dest, context)) {\n                            s_logger.error(\"NetworkElement \" + element + \" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1777,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void prepareAllNicsForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        Long guestNetworkId = null;\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            if(network.getTrafficType().equals(TrafficType.Guest) && network.getGuestType().equals(GuestType.Isolated)){\n                guestNetworkId = network.getId();\n            }\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate,\n                    _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if(guru instanceof NetworkMigrationResponder){\n                if(!((NetworkMigrationResponder) guru).prepareMigration(profile, network, vm, dest, context)){\n                    s_logger.error(\"NetworkGuru \"+guru+\" prepareForMigration failed.\"); \r\n                }\n            }\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \" + network.getPhysicalNetworkId());\n                    }\n                    if(element instanceof NetworkMigrationResponder){\n                        if(!((NetworkMigrationResponder) element).prepareMigration(profile, network, vm, dest, context)){\n                            s_logger.error(\"NetworkElement \"+element+\" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n\n        final List<String> addedURIs = new ArrayList<String>();\n        if(guestNetworkId != null){\n            final List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(guestNetworkId, null);\n            for (final IPAddressVO userIp : publicIps){\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(userIp, _vlanDao.findById(userIp.getVlanId()));\n                final URI broadcastUri = BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag());\n                final long ntwkId = publicIp.getNetworkId();\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(ntwkId, vm.getId(),\n                        broadcastUri.toString());\n                if(nic == null && !addedURIs.contains(broadcastUri.toString())){\n                    \r\n                    \r\n                    s_logger.debug(\"Creating nic profile for migration. BroadcastUri: \"+broadcastUri.toString()+\" NetworkId: \"+ntwkId+\" Vm: \"+vm.getId());\n                    final NetworkVO network = _networksDao.findById(ntwkId);\n                    _networkModel.getNetworkRate(network.getId(), vm.getId());\n                    final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n                    final NicProfile profile = new NicProfile();\n                    profile.setDeviceId(255); \r\n                    profile.setIPv4Address(userIp.getAddress().toString());\n                    profile.setIPv4Netmask(publicIp.getNetmask());\n                    profile.setIPv4Gateway(publicIp.getGateway());\n                    profile.setMacAddress(publicIp.getMacAddress());\n                    profile.setBroadcastType(network.getBroadcastDomainType());\n                    profile.setTrafficType(network.getTrafficType());\n                    profile.setBroadcastUri(broadcastUri);\n                    profile.setIsolationUri(Networks.IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    profile.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(network));\n                    profile.setName(_networkModel.getNetworkTag(vm.getHypervisorType(), network));\n                    profile.setNetworId(network.getId());\n\n                    guru.updateNicProfile(profile, network);\n                    vm.addNic(profile);\n                    addedURIs.add(broadcastUri.toString());\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1779,"groupId":"10608","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAllNicsForMigration","params":"(finalVirtualMachineProfilevm@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ce/c2e5926c174f9682d496fa78ab8a08777eece3.src","preCode":"    public void prepareAllNicsForMigration(final VirtualMachineProfile vm, final DeployDestination dest) {\n        final List<NicVO> nics = _nicDao.listByVmId(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(UUID.randomUUID().toString(), null, null);\n        Long guestNetworkId = null;\n        for (final NicVO nic : nics) {\n            final NetworkVO network = _networksDao.findById(nic.getNetworkId());\n            if(network.getTrafficType().equals(TrafficType.Guest) && network.getGuestType().equals(GuestType.Isolated)){\n                guestNetworkId = network.getId();\n            }\n            final Integer networkRate = _networkModel.getNetworkRate(network.getId(), vm.getId());\n\n            final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n            final NicProfile profile = new NicProfile(nic, network, nic.getBroadcastUri(), nic.getIsolationUri(), networkRate,\n                    _networkModel.isSecurityGroupSupportedInNetwork(network), _networkModel.getNetworkTag(vm.getHypervisorType(), network));\n            if(guru instanceof NetworkMigrationResponder){\n                if(!((NetworkMigrationResponder) guru).prepareMigration(profile, network, vm, dest, context)){\n                    s_logger.error(\"NetworkGuru \"+guru+\" prepareForMigration failed.\"); \r\n                }\n            }\n            final List<Provider> providersToImplement = getNetworkProviders(network.getId());\n            for (final NetworkElement element : networkElements) {\n                if (providersToImplement.contains(element.getProvider())) {\n                    if (!_networkModel.isProviderEnabledInPhysicalNetwork(_networkModel.getPhysicalNetworkId(network), element.getProvider().getName())) {\n                        throw new CloudRuntimeException(\"Service provider \" + element.getProvider().getName() + \" either doesn't exist or is not enabled in physical network id: \" + network.getPhysicalNetworkId());\n                    }\n                    if(element instanceof NetworkMigrationResponder){\n                        if(!((NetworkMigrationResponder) element).prepareMigration(profile, network, vm, dest, context)){\n                            s_logger.error(\"NetworkElement \"+element+\" prepareForMigration failed.\"); \r\n                        }\n                    }\n                }\n            }\n            guru.updateNicProfile(profile, network);\n            vm.addNic(profile);\n        }\n\n        final List<String> addedURIs = new ArrayList<String>();\n        if(guestNetworkId != null){\n            final List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(guestNetworkId, null);\n            for (final IPAddressVO userIp : publicIps){\n                final PublicIp publicIp = PublicIp.createFromAddrAndVlan(userIp, _vlanDao.findById(userIp.getVlanId()));\n                final URI broadcastUri = BroadcastDomainType.Vlan.toUri(publicIp.getVlanTag());\n                final long ntwkId = publicIp.getNetworkId();\n                final Nic nic = _nicDao.findByNetworkIdInstanceIdAndBroadcastUri(ntwkId, vm.getId(),\n                        broadcastUri.toString());\n                if(nic == null && !addedURIs.contains(broadcastUri.toString())){\n                    \r\n                    \r\n                    s_logger.debug(\"Creating nic profile for migration. BroadcastUri: \"+broadcastUri.toString()+\" NetworkId: \"+ntwkId+\" Vm: \"+vm.getId());\n                    final NetworkVO network = _networksDao.findById(ntwkId);\n                    _networkModel.getNetworkRate(network.getId(), vm.getId());\n                    final NetworkGuru guru = AdapterBase.getAdapterByName(networkGurus, network.getGuruName());\n                    final NicProfile profile = new NicProfile();\n                    profile.setDeviceId(255); \r\n                    profile.setIPv4Address(userIp.getAddress().toString());\n                    profile.setIPv4Netmask(publicIp.getNetmask());\n                    profile.setIPv4Gateway(publicIp.getGateway());\n                    profile.setMacAddress(publicIp.getMacAddress());\n                    profile.setBroadcastType(network.getBroadcastDomainType());\n                    profile.setTrafficType(network.getTrafficType());\n                    profile.setBroadcastUri(broadcastUri);\n                    profile.setIsolationUri(Networks.IsolationType.Vlan.toUri(publicIp.getVlanTag()));\n                    profile.setSecurityGroupEnabled(_networkModel.isSecurityGroupSupportedInNetwork(network));\n                    profile.setName(_networkModel.getNetworkTag(vm.getHypervisorType(), network));\n                    profile.setNetworId(network.getId());\n\n                    guru.updateNicProfile(profile, network);\n                    vm.addNic(profile);\n                    addedURIs.add(broadcastUri.toString());\n                }\n            }\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1707,"status":"N"}],"commitId":"3872bf1ff94659fb234a7dd938ccdf6254fad3e7","commitMessage":"@@@kvm: Enable PVLAN support on L2 networks (#4040)\n\nThis is an extention of #3732 for kvm.\nThis is restricted to ovs > 2.9.2\nSince Xen uses ovs 2.6.  pvlan is unsupported.\nThis also fixes issues of vms on the same pvlan unable to communicate if they're on the same host","date":"2020-08-20 18:16:34","modifiedFileCount":"14","status":"M","submitter":"davidjumani"}]
