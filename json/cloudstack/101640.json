[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private VmDataCommand generateVmDataCommand(String vmPrivateIpAddress, String userData, String serviceOffering, String zoneName, String guestIpAddress,\n        String vmName, String vmInstanceName, long vmId, String vmUuid, String publicKey) {\n        VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkMgr.getExecuteInSeqNtwkElmtCmd());\n        \r\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", serviceOffering);\n        cmd.addVmData(\"metadata\", \"availability-zone\", zoneName);\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", vmName);\n        cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"public-hostname\", guestIpAddress);\n        if (vmUuid == null) {\n            setVmInstanceId(vmInstanceName, vmId, cmd);\n        } else {\n            setVmInstanceId(vmUuid, cmd);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        return cmd;\n    }\n","date":"2018-01-20 05:49:27","endLine":168,"groupId":"10435","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateVmDataCommand","params":"(StringvmPrivateIpAddress@StringuserData@StringserviceOffering@StringzoneName@StringguestIpAddress@StringvmName@StringvmInstanceName@longvmId@StringvmUuid@StringpublicKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cb/3fac821e070807500def24334dc8b99cf67cf0.src","preCode":"    private VmDataCommand generateVmDataCommand(String vmPrivateIpAddress, String userData, String serviceOffering, String zoneName, String guestIpAddress,\n        String vmName, String vmInstanceName, long vmId, String vmUuid, String publicKey) {\n        VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkMgr.getExecuteInSeqNtwkElmtCmd());\n        \r\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", serviceOffering);\n        cmd.addVmData(\"metadata\", \"availability-zone\", zoneName);\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", vmName);\n        cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"public-hostname\", guestIpAddress);\n        if (vmUuid == null) {\n            setVmInstanceId(vmInstanceName, vmId, cmd);\n        } else {\n            setVmInstanceId(vmUuid, cmd);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        return cmd;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private VmDataCommand generateVmDataCommand(final VirtualRouter router, final String vmPrivateIpAddress, final String userData, final String serviceOffering,\n            final String zoneName, final String guestIpAddress, final String vmName, final String vmInstanceName, final long vmId, final String vmUuid, final String publicKey,\n            final long guestNetworkId) {\n        final VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkModel.getExecuteInSeqNtwkElmtCmd());\n\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(guestNetworkId, router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", StringUtils.unicodeEscape(serviceOffering));\n        cmd.addVmData(\"metadata\", \"availability-zone\", StringUtils.unicodeEscape(zoneName));\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", StringUtils.unicodeEscape(vmName));\n        if (dcVo.getNetworkType() == NetworkType.Basic) {\n            cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n            cmd.addVmData(\"metadata\", \"public-hostname\", StringUtils.unicodeEscape(vmName));\n        } else {\n            if (router.getPublicIpAddress() == null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n            } else {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", router.getPublicIpAddress());\n            }\n            cmd.addVmData(\"metadata\", \"public-hostname\", router.getPublicIpAddress());\n        }\n        if (vmUuid == null) {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmInstanceName);\n            cmd.addVmData(\"metadata\", \"vm-id\", String.valueOf(vmId));\n        } else {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmUuid);\n            cmd.addVmData(\"metadata\", \"vm-id\", vmUuid);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        String cloudIdentifier = _configDao.getValue(\"cloud.identifier\");\n        if (cloudIdentifier == null) {\n            cloudIdentifier = \"\";\n        } else {\n            cloudIdentifier = \"CloudStack-{\" + cloudIdentifier + \"}\";\n        }\n        cmd.addVmData(\"metadata\", \"cloud-identifier\", cloudIdentifier);\n\n        return cmd;\n    }\n","date":"2018-01-20 05:49:27","endLine":1053,"groupId":"9803","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateVmDataCommand","params":"(finalVirtualRouterrouter@finalStringvmPrivateIpAddress@finalStringuserData@finalStringserviceOffering@finalStringzoneName@finalStringguestIpAddress@finalStringvmName@finalStringvmInstanceName@finallongvmId@finalStringvmUuid@finalStringpublicKey@finallongguestNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    private VmDataCommand generateVmDataCommand(final VirtualRouter router, final String vmPrivateIpAddress, final String userData, final String serviceOffering,\n            final String zoneName, final String guestIpAddress, final String vmName, final String vmInstanceName, final long vmId, final String vmUuid, final String publicKey,\n            final long guestNetworkId) {\n        final VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkModel.getExecuteInSeqNtwkElmtCmd());\n\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(guestNetworkId, router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", StringUtils.unicodeEscape(serviceOffering));\n        cmd.addVmData(\"metadata\", \"availability-zone\", StringUtils.unicodeEscape(zoneName));\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", StringUtils.unicodeEscape(vmName));\n        if (dcVo.getNetworkType() == NetworkType.Basic) {\n            cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n            cmd.addVmData(\"metadata\", \"public-hostname\", StringUtils.unicodeEscape(vmName));\n        } else {\n            if (router.getPublicIpAddress() == null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n            } else {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", router.getPublicIpAddress());\n            }\n            cmd.addVmData(\"metadata\", \"public-hostname\", router.getPublicIpAddress());\n        }\n        if (vmUuid == null) {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmInstanceName);\n            cmd.addVmData(\"metadata\", \"vm-id\", String.valueOf(vmId));\n        } else {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmUuid);\n            cmd.addVmData(\"metadata\", \"vm-id\", vmUuid);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        String cloudIdentifier = _configDao.getValue(\"cloud.identifier\");\n        if (cloudIdentifier == null) {\n            cloudIdentifier = \"\";\n        } else {\n            cloudIdentifier = \"CloudStack-{\" + cloudIdentifier + \"}\";\n        }\n        cmd.addVmData(\"metadata\", \"cloud-identifier\", cloudIdentifier);\n\n        return cmd;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1007,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-03-05 19:49:17","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private VmDataCommand generateVmDataCommand(String vmPrivateIpAddress, String userData, String serviceOffering, String zoneName, String guestIpAddress,\n        String vmName, String vmInstanceName, long vmId, String vmUuid, String publicKey) {\n        VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkMgr.getExecuteInSeqNtwkElmtCmd());\n        \r\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", serviceOffering);\n        cmd.addVmData(\"metadata\", \"availability-zone\", zoneName);\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", vmName);\n        cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"public-hostname\", guestIpAddress);\n        if (vmUuid == null) {\n            setVmInstanceId(vmInstanceName, vmId, cmd);\n        } else {\n            setVmInstanceId(vmUuid, cmd);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        return cmd;\n    }\n","date":"2018-01-20 05:49:27","endLine":168,"groupId":"10435","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateVmDataCommand","params":"(StringvmPrivateIpAddress@StringuserData@StringserviceOffering@StringzoneName@StringguestIpAddress@StringvmName@StringvmInstanceName@longvmId@StringvmUuid@StringpublicKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cb/3fac821e070807500def24334dc8b99cf67cf0.src","preCode":"    private VmDataCommand generateVmDataCommand(String vmPrivateIpAddress, String userData, String serviceOffering, String zoneName, String guestIpAddress,\n        String vmName, String vmInstanceName, long vmId, String vmUuid, String publicKey) {\n        VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkMgr.getExecuteInSeqNtwkElmtCmd());\n        \r\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", serviceOffering);\n        cmd.addVmData(\"metadata\", \"availability-zone\", zoneName);\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", vmName);\n        cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"public-hostname\", guestIpAddress);\n        if (vmUuid == null) {\n            setVmInstanceId(vmInstanceName, vmId, cmd);\n        } else {\n            setVmInstanceId(vmUuid, cmd);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        return cmd;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"},{"authorDate":"2020-03-05 19:49:17","commitOrder":2,"curCode":"    private VmDataCommand generateVmDataCommand(final VirtualRouter router, final String vmPrivateIpAddress, final String userData, final String serviceOffering,\n            final String zoneName, final String publicIpAddress, final String vmName, final String vmInstanceName, final long vmId, final String vmUuid, final String publicKey,\n            final long guestNetworkId) {\n        final VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkModel.getExecuteInSeqNtwkElmtCmd());\n\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(guestNetworkId, router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", StringUtils.unicodeEscape(serviceOffering));\n        cmd.addVmData(\"metadata\", \"availability-zone\", StringUtils.unicodeEscape(zoneName));\n        cmd.addVmData(\"metadata\", \"local-ipv4\", vmPrivateIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", StringUtils.unicodeEscape(vmName));\n\n        Network network = _networkDao.findById(guestNetworkId);\n        if (dcVo.getNetworkType() == NetworkType.Basic || network.getGuestType() == Network.GuestType.Shared) {\n            cmd.addVmData(\"metadata\", \"public-ipv4\", vmPrivateIpAddress);\n            cmd.addVmData(\"metadata\", \"public-hostname\", StringUtils.unicodeEscape(vmName));\n        } else {\n            if (publicIpAddress != null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", publicIpAddress);\n                cmd.addVmData(\"metadata\", \"public-hostname\", publicIpAddress);\n            } else if (router.getPublicIpAddress() != null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", router.getPublicIpAddress());\n                cmd.addVmData(\"metadata\", \"public-hostname\", router.getPublicIpAddress());\n            }\n        }\n        if (vmUuid == null) {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmInstanceName);\n            cmd.addVmData(\"metadata\", \"vm-id\", String.valueOf(vmId));\n        } else {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmUuid);\n            cmd.addVmData(\"metadata\", \"vm-id\", vmUuid);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        String cloudIdentifier = _configDao.getValue(\"cloud.identifier\");\n        if (cloudIdentifier == null) {\n            cloudIdentifier = \"\";\n        } else {\n            cloudIdentifier = \"CloudStack-{\" + cloudIdentifier + \"}\";\n        }\n        cmd.addVmData(\"metadata\", \"cloud-identifier\", cloudIdentifier);\n\n        return cmd;\n    }\n","date":"2020-03-05 19:49:17","endLine":1088,"groupId":"9803","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateVmDataCommand","params":"(finalVirtualRouterrouter@finalStringvmPrivateIpAddress@finalStringuserData@finalStringserviceOffering@finalStringzoneName@finalStringpublicIpAddress@finalStringvmName@finalStringvmInstanceName@finallongvmId@finalStringvmUuid@finalStringpublicKey@finallongguestNetworkId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/63/e9d8025f35057095bbc86509d71a040102c8e1.src","preCode":"    private VmDataCommand generateVmDataCommand(final VirtualRouter router, final String vmPrivateIpAddress, final String userData, final String serviceOffering,\n            final String zoneName, final String guestIpAddress, final String vmName, final String vmInstanceName, final long vmId, final String vmUuid, final String publicKey,\n            final long guestNetworkId) {\n        final VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkModel.getExecuteInSeqNtwkElmtCmd());\n\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(guestNetworkId, router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", StringUtils.unicodeEscape(serviceOffering));\n        cmd.addVmData(\"metadata\", \"availability-zone\", StringUtils.unicodeEscape(zoneName));\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", StringUtils.unicodeEscape(vmName));\n        if (dcVo.getNetworkType() == NetworkType.Basic) {\n            cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n            cmd.addVmData(\"metadata\", \"public-hostname\", StringUtils.unicodeEscape(vmName));\n        } else {\n            if (router.getPublicIpAddress() == null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n            } else {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", router.getPublicIpAddress());\n            }\n            cmd.addVmData(\"metadata\", \"public-hostname\", router.getPublicIpAddress());\n        }\n        if (vmUuid == null) {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmInstanceName);\n            cmd.addVmData(\"metadata\", \"vm-id\", String.valueOf(vmId));\n        } else {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmUuid);\n            cmd.addVmData(\"metadata\", \"vm-id\", vmUuid);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        String cloudIdentifier = _configDao.getValue(\"cloud.identifier\");\n        if (cloudIdentifier == null) {\n            cloudIdentifier = \"\";\n        } else {\n            cloudIdentifier = \"CloudStack-{\" + cloudIdentifier + \"}\";\n        }\n        cmd.addVmData(\"metadata\", \"cloud-identifier\", cloudIdentifier);\n\n        return cmd;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1039,"status":"M"}],"commitId":"9c6b02fd8b2282ceb80a1b9205871a4e93a00682","commitMessage":"@@@Userdata to display static NAT as public ip instead of VR ip (#3862)\n\n* Userdata to display static NAT as public ip instead of VR ip\n\nIf static nat is enabled on VM then metadata service should return\nthe static nat instead of gateway IP.\nIf static not is not enabled then it should return the gateway IP\nas the public IP\n\nTest results:\n\nStep to reproduce:\n\n1. Create a vm\n2. Ssh to vm.\n3. Run the below command inside the vm\nwget http://<VR public ip>/latest/meta-data/public-ipv4\n\nNote down the output of the above command\n4. Now acquire a new public and enable static NAT on that IP to this vm\n5. Now run the same command mentioned above in the VM\nThis should display the static NAT ip instead of VR public IP\n\nOutput:\n\nBefore enabling static nat\n\nwget http://10.10.10.40/latest/meta-data/public-ipv4\n$ cat public-ipv4\n10.10.10.29\n\nAfter enabling static nat\n\nwget http://10.10.10.40/latest/meta-data/public-ipv4\n$ cat public-ipv4\n10.11.10.30\n\n* server: apply vm user data when release a public ip\n\nCo-authored-by: Wei Zhou <ustcweizhou@gmail.com>\n","date":"2020-03-05 19:49:17","modifiedFileCount":"2","status":"M","submitter":"Andrija Panic"},{"authorTime":"2020-07-01 11:14:11","codes":[{"authorDate":"2020-07-01 11:14:11","commitOrder":3,"curCode":"    private VmDataCommand generateVmDataCommand(String vmPrivateIpAddress, String userData, String serviceOffering, String zoneName, String guestIpAddress,\n        String vmName, String vmInstanceName, long vmId, String vmUuid, String publicKey, String hostname) {\n        VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkMgr.getExecuteInSeqNtwkElmtCmd());\n        \r\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", serviceOffering);\n        cmd.addVmData(\"metadata\", \"availability-zone\", zoneName);\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", vmName);\n        cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"public-hostname\", guestIpAddress);\n        if (vmUuid == null) {\n            setVmInstanceId(vmInstanceName, vmId, cmd);\n        } else {\n            setVmInstanceId(vmUuid, cmd);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n        cmd.addVmData(\"metadata\", \"hypervisor-host-name\", hostname);\n        return cmd;\n    }\n","date":"2020-07-01 11:14:11","endLine":169,"groupId":"101640","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"generateVmDataCommand","params":"(StringvmPrivateIpAddress@StringuserData@StringserviceOffering@StringzoneName@StringguestIpAddress@StringvmName@StringvmInstanceName@longvmId@StringvmUuid@StringpublicKey@Stringhostname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/d5fcc7d432f0113828f2631de8486bcba1c105.src","preCode":"    private VmDataCommand generateVmDataCommand(String vmPrivateIpAddress, String userData, String serviceOffering, String zoneName, String guestIpAddress,\n        String vmName, String vmInstanceName, long vmId, String vmUuid, String publicKey) {\n        VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkMgr.getExecuteInSeqNtwkElmtCmd());\n        \r\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", serviceOffering);\n        cmd.addVmData(\"metadata\", \"availability-zone\", zoneName);\n        cmd.addVmData(\"metadata\", \"local-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", vmName);\n        cmd.addVmData(\"metadata\", \"public-ipv4\", guestIpAddress);\n        cmd.addVmData(\"metadata\", \"public-hostname\", guestIpAddress);\n        if (vmUuid == null) {\n            setVmInstanceId(vmInstanceName, vmId, cmd);\n        } else {\n            setVmInstanceId(vmUuid, cmd);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        return cmd;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/CloudZonesNetworkElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2020-07-01 11:14:11","commitOrder":3,"curCode":"    private VmDataCommand generateVmDataCommand(final VirtualRouter router, final String vmPrivateIpAddress, final String userData, final String serviceOffering,\n            final String zoneName, final String publicIpAddress, final String vmName, final String vmInstanceName, final long vmId, final String vmUuid, final String publicKey,\n            final long guestNetworkId, String hostname) {\n        final VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkModel.getExecuteInSeqNtwkElmtCmd());\n\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(guestNetworkId, router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", StringUtils.unicodeEscape(serviceOffering));\n        cmd.addVmData(\"metadata\", \"availability-zone\", StringUtils.unicodeEscape(zoneName));\n        cmd.addVmData(\"metadata\", \"local-ipv4\", vmPrivateIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", StringUtils.unicodeEscape(vmName));\n\n        Network network = _networkDao.findById(guestNetworkId);\n        if (dcVo.getNetworkType() == NetworkType.Basic || network.getGuestType() == Network.GuestType.Shared) {\n            cmd.addVmData(\"metadata\", \"public-ipv4\", vmPrivateIpAddress);\n            cmd.addVmData(\"metadata\", \"public-hostname\", StringUtils.unicodeEscape(vmName));\n        } else {\n            if (publicIpAddress != null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", publicIpAddress);\n                cmd.addVmData(\"metadata\", \"public-hostname\", publicIpAddress);\n            } else if (router.getPublicIpAddress() != null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", router.getPublicIpAddress());\n                cmd.addVmData(\"metadata\", \"public-hostname\", router.getPublicIpAddress());\n            }\n        }\n        if (vmUuid == null) {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmInstanceName);\n            cmd.addVmData(\"metadata\", \"vm-id\", String.valueOf(vmId));\n        } else {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmUuid);\n            cmd.addVmData(\"metadata\", \"vm-id\", vmUuid);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        String cloudIdentifier = _configDao.getValue(\"cloud.identifier\");\n        if (cloudIdentifier == null) {\n            cloudIdentifier = \"\";\n        } else {\n            cloudIdentifier = \"CloudStack-{\" + cloudIdentifier + \"}\";\n        }\n        cmd.addVmData(\"metadata\", \"cloud-identifier\", cloudIdentifier);\n\n        cmd.addVmData(\"metadata\", \"hypervisor-host-name\", hostname);\n        return cmd;\n    }\n","date":"2020-07-01 11:14:11","endLine":1097,"groupId":"101640","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generateVmDataCommand","params":"(finalVirtualRouterrouter@finalStringvmPrivateIpAddress@finalStringuserData@finalStringserviceOffering@finalStringzoneName@finalStringpublicIpAddress@finalStringvmName@finalStringvmInstanceName@finallongvmId@finalStringvmUuid@finalStringpublicKey@finallongguestNetworkId@Stringhostname)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/00/da0d3a10259b12407a71774864cb20e75b4fd0.src","preCode":"    private VmDataCommand generateVmDataCommand(final VirtualRouter router, final String vmPrivateIpAddress, final String userData, final String serviceOffering,\n            final String zoneName, final String publicIpAddress, final String vmName, final String vmInstanceName, final long vmId, final String vmUuid, final String publicKey,\n            final long guestNetworkId) {\n        final VmDataCommand cmd = new VmDataCommand(vmPrivateIpAddress, vmName, _networkModel.getExecuteInSeqNtwkElmtCmd());\n\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(guestNetworkId, router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n        cmd.addVmData(\"userdata\", \"user-data\", userData);\n        cmd.addVmData(\"metadata\", \"service-offering\", StringUtils.unicodeEscape(serviceOffering));\n        cmd.addVmData(\"metadata\", \"availability-zone\", StringUtils.unicodeEscape(zoneName));\n        cmd.addVmData(\"metadata\", \"local-ipv4\", vmPrivateIpAddress);\n        cmd.addVmData(\"metadata\", \"local-hostname\", StringUtils.unicodeEscape(vmName));\n\n        Network network = _networkDao.findById(guestNetworkId);\n        if (dcVo.getNetworkType() == NetworkType.Basic || network.getGuestType() == Network.GuestType.Shared) {\n            cmd.addVmData(\"metadata\", \"public-ipv4\", vmPrivateIpAddress);\n            cmd.addVmData(\"metadata\", \"public-hostname\", StringUtils.unicodeEscape(vmName));\n        } else {\n            if (publicIpAddress != null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", publicIpAddress);\n                cmd.addVmData(\"metadata\", \"public-hostname\", publicIpAddress);\n            } else if (router.getPublicIpAddress() != null) {\n                cmd.addVmData(\"metadata\", \"public-ipv4\", router.getPublicIpAddress());\n                cmd.addVmData(\"metadata\", \"public-hostname\", router.getPublicIpAddress());\n            }\n        }\n        if (vmUuid == null) {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmInstanceName);\n            cmd.addVmData(\"metadata\", \"vm-id\", String.valueOf(vmId));\n        } else {\n            cmd.addVmData(\"metadata\", \"instance-id\", vmUuid);\n            cmd.addVmData(\"metadata\", \"vm-id\", vmUuid);\n        }\n        cmd.addVmData(\"metadata\", \"public-keys\", publicKey);\n\n        String cloudIdentifier = _configDao.getValue(\"cloud.identifier\");\n        if (cloudIdentifier == null) {\n            cloudIdentifier = \"\";\n        } else {\n            cloudIdentifier = \"CloudStack-{\" + cloudIdentifier + \"}\";\n        }\n        cmd.addVmData(\"metadata\", \"cloud-identifier\", cloudIdentifier);\n\n        return cmd;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1047,"status":"M"}],"commitId":"a73712ec4ea0deae58d0b43edcbe9ca5e8f33fd4","commitMessage":"@@@server: Enable sending hypervior host name via metadata - VR and Config Drive (#3976)\n\nEnable sending hypervisor host details via metadata for VR and Config Drive providers\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2020-07-01 11:14:11","modifiedFileCount":"23","status":"M","submitter":"Pearl Dsilva"}]
