[{"authorTime":"2018-01-23 19:19:36","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":81,"groupId":"21707","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/57/f4083c96ffdce39bfaefc891c6ee5be896b98c.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"NB"},{"authorDate":"2018-01-23 19:19:36","commitOrder":2,"curCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","date":"2018-01-23 19:19:36","endLine":124,"groupId":"21707","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findPluggedNic","params":"(LibvirtComputingResourcelibvirtComputingResource@NicTOnic@StringvmName@Connectconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/1e719aabea13c0d96634d645eeb3821181fea7.src","preCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"c591c5ad3e270e5e62166a7f1ff6f9895d4b102c","commitMessage":"@@@CLOUDSTACK-10248: Fix errors that appeared after #2283 (#2417)\n\nThis fixes move refactoring error introduced in #2283 \nFor instance.  the class DatadiskTO is supposed to be in com.cloud.agent.api.to package. However.  the folder structure it was placed in is com.cloud.agent.api.api.to.\n\nSkip tests for cloud-plugin-hypervisor-ovm3:\nFor some unknown reason.  there are quite a lot of broken test cases for cloud-plugin-hypervisor-ovm3. They might have appeared after some dependency upgrade and was overlooked by the person updating them. I checked them to see if they could be fixed.  but these tests are not developed in a clear and clean manner. On top of that.  we do not see (at least I) people using OVM3-hypervisor with ACS. Therefore.  I decided to skip them.\n\nIdentention corrected to use spaces instead of tabs in XML files\n","date":"2018-01-23 19:19:36","modifiedFileCount":"9","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-01-23 19:19:36","codes":[{"authorDate":"2020-02-19 22:02:12","commitOrder":3,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2020-02-19 22:02:12","endLine":84,"groupId":"21707","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/07/1352c5c9a0e0aa718e280967df3170f54f676a.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2018-01-23 19:19:36","commitOrder":3,"curCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","date":"2018-01-23 19:19:36","endLine":124,"groupId":"21707","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findPluggedNic","params":"(LibvirtComputingResourcelibvirtComputingResource@NicTOnic@StringvmName@Connectconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/1e719aabea13c0d96634d645eeb3821181fea7.src","preCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"458d3b5b4753b16b1f07bfa1fe667037cb2623d6","commitMessage":"@@@Multiple networks support for vms in advanced zone with securit? (#3639)\n\n","date":"2020-02-19 22:02:12","modifiedFileCount":"16","status":"M","submitter":"Wei Zhou"},{"authorTime":"2018-01-23 19:19:36","codes":[{"authorDate":"2021-04-05 17:07:11","commitOrder":4,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final Map<String, Boolean> vlanToPersistenceMap = command.getVlanToPersistenceMap();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    String vlanId = libvirtComputingResource.getVlanIdFromBridgeName(pluggedNic.getBrName());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic, libvirtComputingResource.shouldDeleteBridge(vlanToPersistenceMap, vlanId));\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2021-04-05 17:07:11","endLine":87,"groupId":"103349","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e4/0563b291bf9f232c4aed7f89b2002e888cac69.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2018-01-23 19:19:36","commitOrder":4,"curCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","date":"2018-01-23 19:19:36","endLine":124,"groupId":"103349","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findPluggedNic","params":"(LibvirtComputingResourcelibvirtComputingResource@NicTOnic@StringvmName@Connectconn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/1e719aabea13c0d96634d645eeb3821181fea7.src","preCode":"    private InterfaceDef findPluggedNic(LibvirtComputingResource libvirtComputingResource, NicTO nic, String vmName, Connect conn) {\n        InterfaceDef oldPluggedNic = null;\n\n        final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n        for (final InterfaceDef pluggedNic : pluggedNics) {\n            if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                oldPluggedNic = pluggedNic;\n            }\n        }\n\n        return oldPluggedNic;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtReplugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"0dbeb262e4f483e06ca335aadcee9664cf7f35c4","commitMessage":"@@@server: Support for persistence mode in L2 networks (#4561)\n\nThis PR aims at introducing persistence mode in L2 networks and enhancing the behavior in Isolated networks\nDoc PR apache/cloudstack-documentation#183\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2021-04-05 17:07:11","modifiedFileCount":"27","status":"M","submitter":"Pearl Dsilva"}]
