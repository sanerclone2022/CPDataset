[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Answer createTemplateFromSnapshot2(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO) cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO) cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        NfsTO destStore;\n        URI destUri;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n            String srType;\n\n            srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n            final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n\n            mountNfs(conn, destNfsPath, localDir);\n            makeDirectory(conn, localDir + \"/\" + destDir);\n\n            destSr = createFileSR(conn, localDir + \"/\" + destDir);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            final String nameLabel = \"cloud-\" + UUID.randomUUID().toString();\n\n            destVdi.setNameLabel(conn, nameLabel);\n\n            \r\n            destSr.scan(conn);\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, nameLabel, null, physicalSize, virtualSize,\n                    templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir\");\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final BadServerResponse e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to incomprehensible server response\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XenAPIException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to xenapi error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XmlRpcException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to rpc error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1205,"groupId":"18080","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTemplateFromSnapshot2","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ca/58e4a4154076b56881e85fdef5be58ca3aef24.src","preCode":"    private Answer createTemplateFromSnapshot2(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO) cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO) cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        NfsTO destStore;\n        URI destUri;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n            String srType;\n\n            srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n            final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n\n            mountNfs(conn, destNfsPath, localDir);\n            makeDirectory(conn, localDir + \"/\" + destDir);\n\n            destSr = createFileSR(conn, localDir + \"/\" + destDir);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            final String nameLabel = \"cloud-\" + UUID.randomUUID().toString();\n\n            destVdi.setNameLabel(conn, nameLabel);\n\n            \r\n            destSr.scan(conn);\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, nameLabel, null, physicalSize, virtualSize,\n                    templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir\");\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final BadServerResponse e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to incomprehensible server response\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XenAPIException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to xenapi error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XmlRpcException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to rpc error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1082,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer createTemplateFromSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO)cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO)cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        final String userSpecifiedTemplateName = templateObjTO.getName();\n\n        NfsTO destStore = null;\n        URI destUri = null;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n\n            if (!hypervisorResource.createSecondaryStorageFolder(conn, destNfsPath, destDir)) {\n                final String details = \" Failed to create folder \" + destDir + \" in secondary storage\";\n\n                s_logger.warn(details);\n\n                return new CopyCmdAnswer(details);\n            }\n\n            final URI templateUri = new URI(destStore.getUrl() + \"/\" + destDir);\n\n            destSr = hypervisorResource.createNfsSRbyURI(conn, templateUri, false);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            \r\n            destSr.scan(conn);\n\n            if (userSpecifiedTemplateName != null) {\n                destVdi.setNameLabel(conn, userSpecifiedTemplateName);\n            }\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, userSpecifiedTemplateName, null,\n                    physicalSize, virtualSize, templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir: \" + templateUri);\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final Exception ex) {\n            s_logger.error(\"Failed to create a template from a snapshot\", ex);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + ex.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1476,"groupId":"16789","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateFromSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/7c6a23e41517d2d2e166e1fecd2d9f65dd26cc.src","preCode":"    public Answer createTemplateFromSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO)cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO)cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        final String userSpecifiedTemplateName = templateObjTO.getName();\n\n        NfsTO destStore = null;\n        URI destUri = null;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n\n            if (!hypervisorResource.createSecondaryStorageFolder(conn, destNfsPath, destDir)) {\n                final String details = \" Failed to create folder \" + destDir + \" in secondary storage\";\n\n                s_logger.warn(details);\n\n                return new CopyCmdAnswer(details);\n            }\n\n            final URI templateUri = new URI(destStore.getUrl() + \"/\" + destDir);\n\n            destSr = hypervisorResource.createNfsSRbyURI(conn, templateUri, false);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            \r\n            destSr.scan(conn);\n\n            if (userSpecifiedTemplateName != null) {\n                destVdi.setNameLabel(conn, userSpecifiedTemplateName);\n            }\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, userSpecifiedTemplateName, null,\n                    physicalSize, virtualSize, templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir: \" + templateUri);\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final Exception ex) {\n            s_logger.error(\"Failed to create a template from a snapshot\", ex);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + ex.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1355,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-15 18:38:33","commitOrder":2,"curCode":"    private Answer createTemplateFromSnapshot2(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO)cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO)cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        NfsTO destStore;\n        URI destUri;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n            String srType;\n\n            srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n            final String localDir = BASE_MOUNT_POINT_ON_REMOTE + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n\n            mountNfs(conn, destNfsPath, localDir);\n            makeDirectory(conn, localDir + \"/\" + destDir);\n\n            destSr = createFileSR(conn, localDir + \"/\" + destDir);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            final String nameLabel = \"cloud-\" + UUID.randomUUID().toString();\n\n            destVdi.setNameLabel(conn, nameLabel);\n\n            \r\n            destSr.scan(conn);\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, nameLabel, null, physicalSize, virtualSize, templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir\");\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final BadServerResponse e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to incomprehensible server response\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XenAPIException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to xenapi error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XmlRpcException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to rpc error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","date":"2020-01-15 18:38:33","endLine":1297,"groupId":"102904","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTemplateFromSnapshot2","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/c8b708bf3ab0d71a1e86e80c4b04339107e3d3.src","preCode":"    private Answer createTemplateFromSnapshot2(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO)cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO)cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        NfsTO destStore;\n        URI destUri;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n            String srType;\n\n            srType = CitrixResourceBase.SRType.LVMOISCSI.toString();\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, false, srType, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n            final String localDir = \"/var/cloud_mount/\" + UUID.nameUUIDFromBytes(destNfsPath.getBytes());\n\n            mountNfs(conn, destNfsPath, localDir);\n            makeDirectory(conn, localDir + \"/\" + destDir);\n\n            destSr = createFileSR(conn, localDir + \"/\" + destDir);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            final String nameLabel = \"cloud-\" + UUID.randomUUID().toString();\n\n            destVdi.setNameLabel(conn, nameLabel);\n\n            \r\n            destSr.scan(conn);\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, nameLabel, null, physicalSize, virtualSize, templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir\");\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final BadServerResponse e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to incomprehensible server response\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XenAPIException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to xenapi error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } catch (final XmlRpcException e) {\n            s_logger.error(\"Failed to create a template from a snapshot due to rpc error\", e);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + e.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1175,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Answer createTemplateFromSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO)cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO)cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        final String userSpecifiedTemplateName = templateObjTO.getName();\n\n        NfsTO destStore = null;\n        URI destUri = null;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n\n            if (!hypervisorResource.createSecondaryStorageFolder(conn, destNfsPath, destDir)) {\n                final String details = \" Failed to create folder \" + destDir + \" in secondary storage\";\n\n                s_logger.warn(details);\n\n                return new CopyCmdAnswer(details);\n            }\n\n            final URI templateUri = new URI(destStore.getUrl() + \"/\" + destDir);\n\n            destSr = hypervisorResource.createNfsSRbyURI(conn, templateUri, false);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            \r\n            destSr.scan(conn);\n\n            if (userSpecifiedTemplateName != null) {\n                destVdi.setNameLabel(conn, userSpecifiedTemplateName);\n            }\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, userSpecifiedTemplateName, null,\n                    physicalSize, virtualSize, templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir: \" + templateUri);\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final Exception ex) {\n            s_logger.error(\"Failed to create a template from a snapshot\", ex);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + ex.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1476,"groupId":"102904","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateFromSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/25/7c6a23e41517d2d2e166e1fecd2d9f65dd26cc.src","preCode":"    public Answer createTemplateFromSnapshot(final CopyCommand cmd) {\n        final Connection conn = hypervisorResource.getConnection();\n\n        final SnapshotObjectTO snapshotObjTO = (SnapshotObjectTO)cmd.getSrcTO();\n        final TemplateObjectTO templateObjTO = (TemplateObjectTO)cmd.getDestTO();\n\n        if (!(snapshotObjTO.getDataStore() instanceof PrimaryDataStoreTO) || !(templateObjTO.getDataStore() instanceof NfsTO)) {\n            return null;\n        }\n\n        final String userSpecifiedTemplateName = templateObjTO.getName();\n\n        NfsTO destStore = null;\n        URI destUri = null;\n\n        try {\n            destStore = (NfsTO)templateObjTO.getDataStore();\n\n            destUri = new URI(destStore.getUrl());\n        } catch (final Exception ex) {\n            s_logger.debug(\"Invalid URI\", ex);\n\n            return new CopyCmdAnswer(\"Invalid URI: \" + ex.toString());\n        }\n\n        SR srcSr = null;\n        SR destSr = null;\n\n        final String destDir = templateObjTO.getPath();\n        VDI destVdi = null;\n\n        boolean result = false;\n\n        try {\n            final Map<String, String> srcDetails = cmd.getOptions();\n\n            final String iScsiName = srcDetails.get(DiskTO.IQN);\n            final String storageHost = srcDetails.get(DiskTO.STORAGE_HOST);\n            final String chapInitiatorUsername = srcDetails.get(DiskTO.CHAP_INITIATOR_USERNAME);\n            final String chapInitiatorSecret = srcDetails.get(DiskTO.CHAP_INITIATOR_SECRET);\n\n            srcSr = hypervisorResource.getIscsiSR(conn, iScsiName, storageHost, iScsiName, chapInitiatorUsername, chapInitiatorSecret, true);\n\n            final String destNfsPath = destUri.getHost() + \":\" + destUri.getPath();\n\n            if (!hypervisorResource.createSecondaryStorageFolder(conn, destNfsPath, destDir)) {\n                final String details = \" Failed to create folder \" + destDir + \" in secondary storage\";\n\n                s_logger.warn(details);\n\n                return new CopyCmdAnswer(details);\n            }\n\n            final URI templateUri = new URI(destStore.getUrl() + \"/\" + destDir);\n\n            destSr = hypervisorResource.createNfsSRbyURI(conn, templateUri, false);\n\n            \r\n            final VDI srcVdi = srcSr.getVDIs(conn).iterator().next();\n\n            destVdi = srcVdi.copy(conn, destSr);\n\n            \r\n            destSr.scan(conn);\n\n            if (userSpecifiedTemplateName != null) {\n                destVdi.setNameLabel(conn, userSpecifiedTemplateName);\n            }\n\n            final String templateUuid = destVdi.getUuid(conn);\n            final String templateFilename = templateUuid + \".vhd\";\n            final long virtualSize = destVdi.getVirtualSize(conn);\n            final long physicalSize = destVdi.getPhysicalUtilisation(conn);\n\n            \r\n            String templatePath = destNfsPath + \"/\" + destDir;\n\n            templatePath = templatePath.replaceAll(\"//\", \"/\");\n\n            result = hypervisorResource.postCreatePrivateTemplate(conn, templatePath, templateFilename, templateUuid, userSpecifiedTemplateName, null,\n                    physicalSize, virtualSize, templateObjTO.getId());\n\n            if (!result) {\n                throw new CloudRuntimeException(\"Could not create the template.properties file on secondary storage dir: \" + templateUri);\n            }\n\n            final TemplateObjectTO newTemplate = new TemplateObjectTO();\n\n            newTemplate.setPath(destDir + \"/\" + templateFilename);\n            newTemplate.setFormat(Storage.ImageFormat.VHD);\n            newTemplate.setHypervisorType(HypervisorType.XenServer);\n            newTemplate.setSize(virtualSize);\n            newTemplate.setPhysicalSize(physicalSize);\n            newTemplate.setName(templateUuid);\n\n            result = true;\n\n            return new CopyCmdAnswer(newTemplate);\n        } catch (final Exception ex) {\n            s_logger.error(\"Failed to create a template from a snapshot\", ex);\n\n            return new CopyCmdAnswer(\"Failed to create a template from a snapshot: \" + ex.toString());\n        } finally {\n            if (!result) {\n                if (destVdi != null) {\n                    try {\n                        destVdi.destroy(conn);\n                    } catch (final Exception e) {\n                        s_logger.debug(\"Cleaned up leftover VDI on destination storage due to failure: \", e);\n                    }\n                }\n            }\n\n            if (srcSr != null) {\n                hypervisorResource.removeSR(conn, srcSr);\n            }\n\n            if (destSr != null) {\n                hypervisorResource.removeSR(conn, destSr);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/xenserver/src/main/java/com/cloud/hypervisor/xenserver/resource/XenServerStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1355,"status":"N"}],"commitId":"be97470d83a0c6e834d97c9860354176016f2c64","commitMessage":"@@@Get Diagnostics: Download logs and diagnostics data from SSVM.  CPVM.  Router (#3350)\n\n* * Complete API implementation\n* Complete UI integration\n* Complete marvin test\n* Complete Secondary storage GC background task\n\n* improve UI labels\n\n* slight reword and add another missing description\n\n* improve download message clarity\n\n* Address comments\n\n* multiple fixes and cleanups\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* fix more bugs.  let it return ip rule list in another log file\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* fix missing iprule bug\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* add support for ARCHIVE type of object to be linked/setup on secstorage\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* Fix retrieving files for Xenserver\n\n* Update get_diagnostics_files.py\n\n* Fix bug where executable scripts weren't handled\n\n* Fixed error on script cmd generation\n\n* Do not filter name for log files as it would override similar prefix script names\n\n* Addressed code review comments\n\n* log error instead of printstacktrace\n\n* Treat script as executable and shell script\n\n* Check missing script name case and write to output instead of catching exception\n\n* Use shell = true instead of shlex to support any executable\n\n* fix xenserver bug\n\n* don't set dir permission for vmware\n\n* Code review comments - refactoring\n\n* Add check for possible NPE\n\n* Remove unused imoprt after rebase\n\n* Add better description for configs\n\nCo-authored-by: Nicolas Vazquez <nicovazquez90@gmail.com>\nCo-authored-by: Rohit Yadav <rohit@apache.org>\nCo-authored-by: Anurag Awasthi <anurag.awasthi@shapeblue.com>\n","date":"2020-01-15 18:38:33","modifiedFileCount":"15","status":"M","submitter":"Paul Angus"}]
