[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\");\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":85,"groupId":"16742","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2e/e9b953d84e4cf53791229414181daf462fe37f.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\");\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":81,"groupId":"21707","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/57/f4083c96ffdce39bfaefc891c6ee5be896b98c.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-11-07 20:29:01","commitOrder":2,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2018-11-07 20:29:01","endLine":85,"groupId":"16742","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1e/f32afccbfcb666d2cc18d12c6eac28b5e898cf.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\");\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":81,"groupId":"21707","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/57/f4083c96ffdce39bfaefc891c6ee5be896b98c.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"4de4eabd18386fdb5d4242f371ec780f6d9097a5","commitMessage":"@@@Enable DPDK support on KVM (#2839)\n\n* Enable DPDK support on KVM\n\n* Allow DPDK deployments on user VMs only\n\n* Fix port name ordering\n","date":"2018-11-07 20:29:01","modifiedFileCount":"21","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2020-02-19 22:02:12","codes":[{"authorDate":"2020-02-19 22:02:12","commitOrder":3,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2020-02-19 22:02:12","endLine":93,"groupId":"16742","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/55/3a71a30dfec1b0d168e9669e2b10044e090a18.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-02-19 22:02:12","commitOrder":3,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2020-02-19 22:02:12","endLine":84,"groupId":"21707","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/07/1352c5c9a0e0aa718e280967df3170f54f676a.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"458d3b5b4753b16b1f07bfa1fe667037cb2623d6","commitMessage":"@@@Multiple networks support for vms in advanced zone with securit? (#3639)\n\n","date":"2020-02-19 22:02:12","modifiedFileCount":"16","status":"M","submitter":"Wei Zhou"},{"authorTime":"2021-04-05 17:07:11","codes":[{"authorDate":"2020-02-19 22:02:12","commitOrder":4,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2020-02-19 22:02:12","endLine":93,"groupId":"16742","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/55/3a71a30dfec1b0d168e9669e2b10044e090a18.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2021-04-05 17:07:11","commitOrder":4,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final Map<String, Boolean> vlanToPersistenceMap = command.getVlanToPersistenceMap();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    String vlanId = libvirtComputingResource.getVlanIdFromBridgeName(pluggedNic.getBrName());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic, libvirtComputingResource.shouldDeleteBridge(vlanToPersistenceMap, vlanId));\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2021-04-05 17:07:11","endLine":87,"groupId":"21707","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e4/0563b291bf9f232c4aed7f89b2002e888cac69.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic);\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"0dbeb262e4f483e06ca335aadcee9664cf7f35c4","commitMessage":"@@@server: Support for persistence mode in L2 networks (#4561)\n\nThis PR aims at introducing persistence mode in L2 networks and enhancing the behavior in Isolated networks\nDoc PR apache/cloudstack-documentation#183\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2021-04-05 17:07:11","modifiedFileCount":"27","status":"M","submitter":"Pearl Dsilva"},{"authorTime":"2021-04-05 17:07:11","codes":[{"authorDate":"2021-07-15 16:32:49","commitOrder":5,"curCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            if (vmType == VirtualMachine.Type.User) {\n                libvirtComputingResource.detachAndAttachConfigDriveISO(conn, vmName);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2021-07-15 16:32:49","endLine":97,"groupId":"103347","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"(finalPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ca/78c718886ee86780a25c45f4f31d93995ffc57.src","preCode":"    public Answer execute(final PlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final VirtualMachine.Type vmType = command.getVMType();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n            Integer nicnum = 0;\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    s_logger.debug(\"found existing nic for mac \" + pluggedNic.getMacAddress() + \" at index \" + nicnum);\n                    return new PlugNicAnswer(command, true, \"success\");\n                }\n                nicnum++;\n            }\n            final VifDriver vifDriver = libvirtComputingResource.getVifDriver(nic.getType(), nic.getName());\n            final InterfaceDef interfaceDef = vifDriver.plug(nic, \"Other PV\", \"\", null);\n            vm.attachDevice(interfaceDef.toString());\n\n            \r\n            if (vmType == VirtualMachine.Type.User && nic.isSecurityGroupEnabled()) {\n                final Long vmId = Long.valueOf(vmName.split(\"-\")[2]);\n                libvirtComputingResource.applyDefaultNetworkRulesOnNic(conn, vmName, vmId, nic, false, false);\n            }\n\n            return new PlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } catch (final InternalErrorException e) {\n            final String msg = \" Plug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new PlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2021-04-05 17:07:11","commitOrder":5,"curCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final Map<String, Boolean> vlanToPersistenceMap = command.getVlanToPersistenceMap();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    String vlanId = libvirtComputingResource.getVlanIdFromBridgeName(pluggedNic.getBrName());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic, libvirtComputingResource.shouldDeleteBridge(vlanToPersistenceMap, vlanId));\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","date":"2021-04-05 17:07:11","endLine":87,"groupId":"103347","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"(finalUnPlugNicCommandcommand@finalLibvirtComputingResourcelibvirtComputingResource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e4/0563b291bf9f232c4aed7f89b2002e888cac69.src","preCode":"    public Answer execute(final UnPlugNicCommand command, final LibvirtComputingResource libvirtComputingResource) {\n        final NicTO nic = command.getNic();\n        final String vmName = command.getVmName();\n        final Map<String, Boolean> vlanToPersistenceMap = command.getVlanToPersistenceMap();\n        Domain vm = null;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(vmName);\n            vm = libvirtComputingResource.getDomain(conn, vmName);\n            final List<InterfaceDef> pluggedNics = libvirtComputingResource.getInterfaces(conn, vmName);\n\n            for (final InterfaceDef pluggedNic : pluggedNics) {\n                if (pluggedNic.getMacAddress().equalsIgnoreCase(nic.getMac())) {\n                    if (nic.isSecurityGroupEnabled()) {\n                        libvirtComputingResource.destroyNetworkRulesForNic(conn, vmName, nic);\n                    }\n                    vm.detachDevice(pluggedNic.toString());\n                    String vlanId = libvirtComputingResource.getVlanIdFromBridgeName(pluggedNic.getBrName());\n                    \r\n                    \r\n                    for (final VifDriver vifDriver : libvirtComputingResource.getAllVifDrivers()) {\n                        vifDriver.unplug(pluggedNic, libvirtComputingResource.shouldDeleteBridge(vlanToPersistenceMap, vlanId));\n                    }\n                    return new UnPlugNicAnswer(command, true, \"success\");\n                }\n            }\n            return new UnPlugNicAnswer(command, true, \"success\");\n        } catch (final LibvirtException e) {\n            final String msg = \" Unplug Nic failed due to \" + e.toString();\n            s_logger.warn(msg, e);\n            return new UnPlugNicAnswer(command, false, msg);\n        } finally {\n            if (vm != null) {\n                try {\n                    vm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtUnPlugNicCommandWrapper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"5ac184edd62b725a5254f2b2c268af29b0303d91","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15' into main\n","date":"2021-07-15 16:32:49","modifiedFileCount":"6","status":"M","submitter":"Abhishek Kumar"}]
