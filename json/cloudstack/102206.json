[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"        public static final String DummyPrivateIp = \"169.254.1.1\";\n    }\n\n    \r\n\n    public enum Mode {\n        None, Static, Dhcp, ExternalDhcp;\n    };\n\n    public enum AddressFormat {\n        Ip4, Ip6, DualStack\n    }\n\n    \r\n\n    public enum BroadcastDomainType {\n        Native(null, null) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        \r\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getAuthority();\n            }\n        },\n        Vswitch(\"vs\", String.class), LinkLocal(null, null), Vnet(\"vnet\", Long.class), Storage(\"storage\", Integer.class), Lswitch(\"lswitch\", String.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    return new URI(\"lswitch\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n\n            \r\n\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getSchemeSpecificPart();\n            }\n        },\n        Mido(\"mido\", String.class), Pvlan(\"pvlan\", String.class),\n        Vxlan(\"vxlan\", Long.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vxlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vcs(\"vcs\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vcs://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        UnDecided(null, null), OpenDaylight(\"opendaylight\", String.class),\n        Vsp(\"vsp\", String.class),;\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private BroadcastDomainType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        \r\n\r\n\n        public String scheme() {\n            return scheme;\n        }\n\n        \r\n\r\n\n        public Class<?> type() {\n            return type;\n        }\n\n        \r\n\r\n\r\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n            }\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType getSchemeValue(URI uri) {\n            return toEnumValue(uri.getScheme());\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static BroadcastDomainType getTypeOf(String str) throws URISyntaxException {\n            if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(str)) {\n                return Native;\n            }\n            return getSchemeValue(new URI(str));\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType toEnumValue(String scheme) {\n            \r\n            if (scheme == null) {\n                return UnDecided;\n            }\n            for (BroadcastDomainType type : values()) {\n                if (scheme.equalsIgnoreCase(type.scheme())) {\n                    return type;\n                }\n            }\n            return UnDecided;\n        }\n\n        \r\n\r\n\r\n\n        public String getValueFrom(URI uri) {\n            return uri.getHost();\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static String getValue(URI uri) {\n            return getSchemeValue(uri).getValueFrom(uri);\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\n        public static String getValue(String uriString) throws URISyntaxException {\n            return getValue(new URI(uriString));\n        }\n\n        \r\n\r\n\r\n\n        public static URI fromString(String candidate) {\n            try {\n                Long.parseLong(candidate);\n                return Vlan.toUri(candidate);\n            } catch (NumberFormatException nfe) {\n                if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(candidate)) {\n                    return Native.toUri(candidate);\n                }\n                try {\n                    URI uri = new URI(candidate);\n                    BroadcastDomainType tiep = getSchemeValue(uri);\n                    if (tiep.scheme != null && tiep.scheme.equals(uri.getScheme())) {\n                        return uri;\n                    } else {\n                        throw new CloudRuntimeException(\"string '\" + candidate + \"' has an unknown BroadcastDomainType.\");\n                    }\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"string is not a broadcast URI: \" + candidate);\n                }\n            }\n        }\n    };\n","date":"2018-01-20 05:49:27","endLine":272,"groupId":"6793","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"DummyPrivateIp","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/06/f4236eb7aed7314fe23a2639d1f3582d9240ac.src","preCode":"        public static final String DummyPrivateIp = \"169.254.1.1\";\n    }\n\n    \r\n\n    public enum Mode {\n        None, Static, Dhcp, ExternalDhcp;\n    };\n\n    public enum AddressFormat {\n        Ip4, Ip6, DualStack\n    }\n\n    \r\n\n    public enum BroadcastDomainType {\n        Native(null, null) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        \r\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getAuthority();\n            }\n        },\n        Vswitch(\"vs\", String.class), LinkLocal(null, null), Vnet(\"vnet\", Long.class), Storage(\"storage\", Integer.class), Lswitch(\"lswitch\", String.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    return new URI(\"lswitch\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n\n            \r\n\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getSchemeSpecificPart();\n            }\n        },\n        Mido(\"mido\", String.class), Pvlan(\"pvlan\", String.class),\n        Vxlan(\"vxlan\", Long.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vxlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vcs(\"vcs\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vcs://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        UnDecided(null, null), OpenDaylight(\"opendaylight\", String.class),\n        Vsp(\"vsp\", String.class),;\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private BroadcastDomainType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        \r\n\r\n\n        public String scheme() {\n            return scheme;\n        }\n\n        \r\n\r\n\n        public Class<?> type() {\n            return type;\n        }\n\n        \r\n\r\n\r\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n            }\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType getSchemeValue(URI uri) {\n            return toEnumValue(uri.getScheme());\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static BroadcastDomainType getTypeOf(String str) throws URISyntaxException {\n            if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(str)) {\n                return Native;\n            }\n            return getSchemeValue(new URI(str));\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType toEnumValue(String scheme) {\n            \r\n            if (scheme == null) {\n                return UnDecided;\n            }\n            for (BroadcastDomainType type : values()) {\n                if (scheme.equalsIgnoreCase(type.scheme())) {\n                    return type;\n                }\n            }\n            return UnDecided;\n        }\n\n        \r\n\r\n\r\n\n        public String getValueFrom(URI uri) {\n            return uri.getHost();\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static String getValue(URI uri) {\n            return getSchemeValue(uri).getValueFrom(uri);\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\n        public static String getValue(String uriString) throws URISyntaxException {\n            return getValue(new URI(uriString));\n        }\n\n        \r\n\r\n\r\n\n        public static URI fromString(String candidate) {\n            try {\n                Long.parseLong(candidate);\n                return Vlan.toUri(candidate);\n            } catch (NumberFormatException nfe) {\n                if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(candidate)) {\n                    return Native.toUri(candidate);\n                }\n                try {\n                    URI uri = new URI(candidate);\n                    BroadcastDomainType tiep = getSchemeValue(uri);\n                    if (tiep.scheme != null && tiep.scheme.equals(uri.getScheme())) {\n                        return uri;\n                    } else {\n                        throw new CloudRuntimeException(\"string '\" + candidate + \"' has an unknown BroadcastDomainType.\");\n                    }\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"string is not a broadcast URI: \" + candidate);\n                }\n            }\n        }\n    };\n","realPath":"api/src/main/java/com/cloud/network/Networks.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public enum IsolationType {\n        None(null, null), Ec2(\"ec2\", String.class), Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\":\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to isolation URI: \" + value);\n                }\n            }\n        },\n        Vswitch(\"vs\", String.class), Undecided(null, null), Vnet(\"vnet\", Long.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private IsolationType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        public String scheme() {\n            return scheme;\n        }\n\n        public Class<?> type() {\n            return type;\n        }\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to isolation type URI: \" + value);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":345,"groupId":"6793","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"IsolationType","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/06/f4236eb7aed7314fe23a2639d1f3582d9240ac.src","preCode":"    public enum IsolationType {\n        None(null, null), Ec2(\"ec2\", String.class), Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\":\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to isolation URI: \" + value);\n                }\n            }\n        },\n        Vswitch(\"vs\", String.class), Undecided(null, null), Vnet(\"vnet\", Long.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private IsolationType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        public String scheme() {\n            return scheme;\n        }\n\n        public Class<?> type() {\n            return type;\n        }\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to isolation type URI: \" + value);\n            }\n        }\n    }\n","realPath":"api/src/main/java/com/cloud/network/Networks.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-05-14 16:58:24","commitOrder":2,"curCode":"        public static final String DummyPrivateIp = \"169.254.1.1\";\n    }\n\n    \r\n\n    public enum Mode {\n        None, Static, Dhcp, ExternalDhcp;\n    };\n\n    public enum AddressFormat {\n        Ip4, Ip6, DualStack\n    }\n\n    \r\n\n    public enum BroadcastDomainType {\n        Native(null, null) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        \r\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getAuthority();\n            }\n        },\n        Vswitch(\"vs\", String.class), LinkLocal(null, null), Vnet(\"vnet\", Long.class), Storage(\"storage\", Integer.class), Lswitch(\"lswitch\", String.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    return new URI(\"lswitch\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n\n            \r\n\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getSchemeSpecificPart();\n            }\n        },\n        Mido(\"mido\", String.class), Pvlan(\"pvlan\", String.class),\n        Vxlan(\"vxlan\", Long.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vxlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vcs(\"vcs\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vcs://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        UnDecided(null, null),\n        OpenDaylight(\"opendaylight\", String.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private BroadcastDomainType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        \r\n\r\n\n        public String scheme() {\n            return scheme;\n        }\n\n        \r\n\r\n\n        public Class<?> type() {\n            return type;\n        }\n\n        \r\n\r\n\r\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n            }\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType getSchemeValue(URI uri) {\n            return toEnumValue(uri.getScheme());\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static BroadcastDomainType getTypeOf(String str) throws URISyntaxException {\n            if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(str)) {\n                return Native;\n            }\n            return getSchemeValue(new URI(str));\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType toEnumValue(String scheme) {\n            \r\n            if (scheme == null) {\n                return UnDecided;\n            }\n            for (BroadcastDomainType type : values()) {\n                if (scheme.equalsIgnoreCase(type.scheme())) {\n                    return type;\n                }\n            }\n            return UnDecided;\n        }\n\n        \r\n\r\n\r\n\n        public String getValueFrom(URI uri) {\n            return uri.getHost();\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static String getValue(URI uri) {\n            return getSchemeValue(uri).getValueFrom(uri);\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\n        public static String getValue(String uriString) throws URISyntaxException {\n            return getValue(new URI(uriString));\n        }\n\n        \r\n\r\n\r\n\n        public static URI fromString(String candidate) {\n            try {\n                Long.parseLong(candidate);\n                return Vlan.toUri(candidate);\n            } catch (NumberFormatException nfe) {\n                if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(candidate)) {\n                    return Native.toUri(candidate);\n                }\n                try {\n                    URI uri = new URI(candidate);\n                    BroadcastDomainType tiep = getSchemeValue(uri);\n                    if (tiep.scheme != null && tiep.scheme.equals(uri.getScheme())) {\n                        return uri;\n                    } else {\n                        throw new CloudRuntimeException(\"string '\" + candidate + \"' has an unknown BroadcastDomainType.\");\n                    }\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"string is not a broadcast URI: \" + candidate);\n                }\n            }\n        }\n    };\n","date":"2019-05-14 16:58:24","endLine":272,"groupId":"17520","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"DummyPrivateIp","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/55/9a369b4d94956c84e66b2440358e4b1bb26a7d.src","preCode":"        public static final String DummyPrivateIp = \"169.254.1.1\";\n    }\n\n    \r\n\n    public enum Mode {\n        None, Static, Dhcp, ExternalDhcp;\n    };\n\n    public enum AddressFormat {\n        Ip4, Ip6, DualStack\n    }\n\n    \r\n\n    public enum BroadcastDomainType {\n        Native(null, null) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        \r\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getAuthority();\n            }\n        },\n        Vswitch(\"vs\", String.class), LinkLocal(null, null), Vnet(\"vnet\", Long.class), Storage(\"storage\", Integer.class), Lswitch(\"lswitch\", String.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    return new URI(\"lswitch\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n\n            \r\n\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getSchemeSpecificPart();\n            }\n        },\n        Mido(\"mido\", String.class), Pvlan(\"pvlan\", String.class),\n        Vxlan(\"vxlan\", Long.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vxlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vcs(\"vcs\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vcs://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        UnDecided(null, null), OpenDaylight(\"opendaylight\", String.class),\n        Vsp(\"vsp\", String.class),;\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private BroadcastDomainType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        \r\n\r\n\n        public String scheme() {\n            return scheme;\n        }\n\n        \r\n\r\n\n        public Class<?> type() {\n            return type;\n        }\n\n        \r\n\r\n\r\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n            }\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType getSchemeValue(URI uri) {\n            return toEnumValue(uri.getScheme());\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static BroadcastDomainType getTypeOf(String str) throws URISyntaxException {\n            if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(str)) {\n                return Native;\n            }\n            return getSchemeValue(new URI(str));\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType toEnumValue(String scheme) {\n            \r\n            if (scheme == null) {\n                return UnDecided;\n            }\n            for (BroadcastDomainType type : values()) {\n                if (scheme.equalsIgnoreCase(type.scheme())) {\n                    return type;\n                }\n            }\n            return UnDecided;\n        }\n\n        \r\n\r\n\r\n\n        public String getValueFrom(URI uri) {\n            return uri.getHost();\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static String getValue(URI uri) {\n            return getSchemeValue(uri).getValueFrom(uri);\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\n        public static String getValue(String uriString) throws URISyntaxException {\n            return getValue(new URI(uriString));\n        }\n\n        \r\n\r\n\r\n\n        public static URI fromString(String candidate) {\n            try {\n                Long.parseLong(candidate);\n                return Vlan.toUri(candidate);\n            } catch (NumberFormatException nfe) {\n                if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(candidate)) {\n                    return Native.toUri(candidate);\n                }\n                try {\n                    URI uri = new URI(candidate);\n                    BroadcastDomainType tiep = getSchemeValue(uri);\n                    if (tiep.scheme != null && tiep.scheme.equals(uri.getScheme())) {\n                        return uri;\n                    } else {\n                        throw new CloudRuntimeException(\"string '\" + candidate + \"' has an unknown BroadcastDomainType.\");\n                    }\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"string is not a broadcast URI: \" + candidate);\n                }\n            }\n        }\n    };\n","realPath":"api/src/main/java/com/cloud/network/Networks.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public enum IsolationType {\n        None(null, null), Ec2(\"ec2\", String.class), Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\":\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to isolation URI: \" + value);\n                }\n            }\n        },\n        Vswitch(\"vs\", String.class), Undecided(null, null), Vnet(\"vnet\", Long.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private IsolationType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        public String scheme() {\n            return scheme;\n        }\n\n        public Class<?> type() {\n            return type;\n        }\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to isolation type URI: \" + value);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":345,"groupId":"6793","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"IsolationType","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/06/f4236eb7aed7314fe23a2639d1f3582d9240ac.src","preCode":"    public enum IsolationType {\n        None(null, null), Ec2(\"ec2\", String.class), Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\":\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to isolation URI: \" + value);\n                }\n            }\n        },\n        Vswitch(\"vs\", String.class), Undecided(null, null), Vnet(\"vnet\", Long.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private IsolationType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        public String scheme() {\n            return scheme;\n        }\n\n        public Class<?> type() {\n            return type;\n        }\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to isolation type URI: \" + value);\n            }\n        }\n    }\n","realPath":"api/src/main/java/com/cloud/network/Networks.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"N"}],"commitId":"e11f7ee1bad4f5a91b9cb82fdabb34231c04c102","commitMessage":"@@@RIP Nuage Cloudstack Plugin (#3146)\n\nmay it rest in peaces","date":"2019-05-14 16:58:24","modifiedFileCount":"16","status":"M","submitter":"Frank Maximus"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-09-24 14:50:29","commitOrder":3,"curCode":"        public static final String DummyPrivateIp = \"169.254.1.1\";\n    }\n\n    \r\n\n    public enum Mode {\n        None, Static, Dhcp, ExternalDhcp;\n    };\n\n    public enum AddressFormat {\n        Ip4, Ip6, DualStack\n    }\n\n    \r\n\n    public enum BroadcastDomainType {\n        Native(null, null) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        \r\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getAuthority();\n            }\n        },\n        Vswitch(\"vs\", String.class), LinkLocal(null, null), Vnet(\"vnet\", Long.class), Storage(\"storage\", Integer.class), Lswitch(\"lswitch\", String.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    return new URI(\"lswitch\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n\n            \r\n\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getSchemeSpecificPart();\n            }\n        },\n        Mido(\"mido\", String.class), Pvlan(\"pvlan\", String.class),\n        Vxlan(\"vxlan\", Long.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vxlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vcs(\"vcs\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vcs://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        UnDecided(null, null),\n        OpenDaylight(\"opendaylight\", String.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private BroadcastDomainType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        \r\n\r\n\n        public String scheme() {\n            return scheme;\n        }\n\n        \r\n\r\n\n        public Class<?> type() {\n            return type;\n        }\n\n        \r\n\r\n\r\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n            }\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType getSchemeValue(URI uri) {\n            return toEnumValue(uri.getScheme());\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static BroadcastDomainType getTypeOf(String str) throws URISyntaxException {\n            if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(str)) {\n                return Native;\n            }\n            return getSchemeValue(new URI(str));\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType toEnumValue(String scheme) {\n            \r\n            if (scheme == null) {\n                return UnDecided;\n            }\n            for (BroadcastDomainType type : values()) {\n                if (scheme.equalsIgnoreCase(type.scheme())) {\n                    return type;\n                }\n            }\n            return UnDecided;\n        }\n\n        \r\n\r\n\r\n\n        public String getValueFrom(URI uri) {\n            return uri.getHost();\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static String getValue(URI uri) {\n            return getSchemeValue(uri).getValueFrom(uri);\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\n        public static String getValue(String uriString) throws URISyntaxException {\n            return getValue(new URI(uriString));\n        }\n\n        \r\n\r\n\r\n\n        public static URI fromString(String candidate) {\n            try {\n                Long.parseLong(candidate);\n                return Vlan.toUri(candidate);\n            } catch (NumberFormatException nfe) {\n                return getVlanUriWhenNumberFormatException(candidate);\n            }\n        }\n\n        \r\n\n        private static URI getVlanUriWhenNumberFormatException(String candidate) {\n            if(StringUtils.isBlank(candidate)) {\n                throw new CloudRuntimeException(\"Expected VLAN or VXLAN but got a null isolation method\");\n            }\n            if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(candidate)) {\n                return Native.toUri(candidate);\n            }\n            try {\n                URI uri = new URI(candidate);\n                BroadcastDomainType tiep = getSchemeValue(uri);\n                if (tiep.scheme != null && tiep.scheme.equals(uri.getScheme())) {\n                    return uri;\n                } else {\n                    throw new CloudRuntimeException(\"string '\" + candidate + \"' has an unknown BroadcastDomainType.\");\n                }\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"string is not a broadcast URI: \" + candidate);\n            }\n        }\n\n        \r\n\n        public static URI encodeStringIntoBroadcastUri(String candidate, BroadcastDomainType isolationMethod) {\n            try{\n                Long.parseLong(candidate);\n                return isolationMethod.toUri(candidate);\n            } catch (NumberFormatException nfe) {\n                return getVlanUriWhenNumberFormatException(candidate);\n            }\n        }\n    };\n","date":"2020-09-24 14:50:29","endLine":295,"groupId":"102206","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"DummyPrivateIp","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f8/92e253b3593066fe47e593d07469a2d330f185.src","preCode":"        public static final String DummyPrivateIp = \"169.254.1.1\";\n    }\n\n    \r\n\n    public enum Mode {\n        None, Static, Dhcp, ExternalDhcp;\n    };\n\n    public enum AddressFormat {\n        Ip4, Ip6, DualStack\n    }\n\n    \r\n\n    public enum BroadcastDomainType {\n        Native(null, null) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        \r\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getAuthority();\n            }\n        },\n        Vswitch(\"vs\", String.class), LinkLocal(null, null), Vnet(\"vnet\", Long.class), Storage(\"storage\", Integer.class), Lswitch(\"lswitch\", String.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    return new URI(\"lswitch\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n\n            \r\n\n            @Override\n            public String getValueFrom(URI uri) {\n                return uri.getSchemeSpecificPart();\n            }\n        },\n        Mido(\"mido\", String.class), Pvlan(\"pvlan\", String.class),\n        Vxlan(\"vxlan\", Long.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vxlan://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        Vcs(\"vcs\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\"://\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vcs://\" + value.toString());\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n                }\n            }\n        },\n        UnDecided(null, null),\n        OpenDaylight(\"opendaylight\", String.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private BroadcastDomainType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        \r\n\r\n\n        public String scheme() {\n            return scheme;\n        }\n\n        \r\n\r\n\n        public Class<?> type() {\n            return type;\n        }\n\n        \r\n\r\n\r\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to broadcast URI: \" + value);\n            }\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType getSchemeValue(URI uri) {\n            return toEnumValue(uri.getScheme());\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static BroadcastDomainType getTypeOf(String str) throws URISyntaxException {\n            if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(str)) {\n                return Native;\n            }\n            return getSchemeValue(new URI(str));\n        }\n\n        \r\n\r\n\r\n\n        public static BroadcastDomainType toEnumValue(String scheme) {\n            \r\n            if (scheme == null) {\n                return UnDecided;\n            }\n            for (BroadcastDomainType type : values()) {\n                if (scheme.equalsIgnoreCase(type.scheme())) {\n                    return type;\n                }\n            }\n            return UnDecided;\n        }\n\n        \r\n\r\n\r\n\n        public String getValueFrom(URI uri) {\n            return uri.getHost();\n        }\n\n        \r\n\r\n\r\n\r\n\n        public static String getValue(URI uri) {\n            return getSchemeValue(uri).getValueFrom(uri);\n        }\n\n        \r\n\r\n\r\n\r\n\r\n\n        public static String getValue(String uriString) throws URISyntaxException {\n            return getValue(new URI(uriString));\n        }\n\n        \r\n\r\n\r\n\n        public static URI fromString(String candidate) {\n            try {\n                Long.parseLong(candidate);\n                return Vlan.toUri(candidate);\n            } catch (NumberFormatException nfe) {\n                if (com.cloud.dc.Vlan.UNTAGGED.equalsIgnoreCase(candidate)) {\n                    return Native.toUri(candidate);\n                }\n                try {\n                    URI uri = new URI(candidate);\n                    BroadcastDomainType tiep = getSchemeValue(uri);\n                    if (tiep.scheme != null && tiep.scheme.equals(uri.getScheme())) {\n                        return uri;\n                    } else {\n                        throw new CloudRuntimeException(\"string '\" + candidate + \"' has an unknown BroadcastDomainType.\");\n                    }\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"string is not a broadcast URI: \" + candidate);\n                }\n            }\n        }\n    };\n","realPath":"api/src/main/java/com/cloud/network/Networks.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public enum IsolationType {\n        None(null, null), Ec2(\"ec2\", String.class), Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\":\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to isolation URI: \" + value);\n                }\n            }\n        },\n        Vswitch(\"vs\", String.class), Undecided(null, null), Vnet(\"vnet\", Long.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private IsolationType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        public String scheme() {\n            return scheme;\n        }\n\n        public Class<?> type() {\n            return type;\n        }\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to isolation type URI: \" + value);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":345,"groupId":"102206","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"IsolationType","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/06/f4236eb7aed7314fe23a2639d1f3582d9240ac.src","preCode":"    public enum IsolationType {\n        None(null, null), Ec2(\"ec2\", String.class), Vlan(\"vlan\", Integer.class) {\n            @Override\n            public <T> URI toUri(T value) {\n                try {\n                    if (value.toString().contains(\":\"))\n                        return new URI(value.toString());\n                    else\n                        return new URI(\"vlan\", value.toString(), null, null);\n                } catch (URISyntaxException e) {\n                    throw new CloudRuntimeException(\"Unable to convert to isolation URI: \" + value);\n                }\n            }\n        },\n        Vswitch(\"vs\", String.class), Undecided(null, null), Vnet(\"vnet\", Long.class);\n\n        private final String scheme;\n        private final Class<?> type;\n\n        private IsolationType(String scheme, Class<?> type) {\n            this.scheme = scheme;\n            this.type = type;\n        }\n\n        public String scheme() {\n            return scheme;\n        }\n\n        public Class<?> type() {\n            return type;\n        }\n\n        public <T> URI toUri(T value) {\n            try {\n                return new URI(scheme + \"://\" + value.toString());\n            } catch (URISyntaxException e) {\n                throw new CloudRuntimeException(\"Unable to convert to isolation type URI: \" + value);\n            }\n        }\n    }\n","realPath":"api/src/main/java/com/cloud/network/Networks.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"N"}],"commitId":"86fcb142383c4bb5742225eb8352a41734fe787f","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2020-09-24 14:50:29","modifiedFileCount":"10","status":"M","submitter":"Rohit Yadav"}]
