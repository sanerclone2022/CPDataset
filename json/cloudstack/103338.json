[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean defaultNetworkRules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final String secIpStr) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() == 0 || intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        if (nic.getIp() != null) {\n            cmd.add(\"--vmip\", nic.getIp());\n        }\n        if (nic.getIp6Address() != null) {\n            cmd.add(\"--vmip6\", nic.getIp6Address());\n        }\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        cmd.add(\"--nicsecips\", secIpStr);\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":3454,"groupId":"10026","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultNetworkRules","params":"(finalConnectconn@finalStringvmName@finalNicTOnic@finalLongvmId@finalStringsecIpStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    public boolean defaultNetworkRules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final String secIpStr) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() == 0 || intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        if (nic.getIp() != null) {\n            cmd.add(\"--vmip\", nic.getIp());\n        }\n        if (nic.getIp6Address() != null) {\n            cmd.add(\"--vmip6\", nic.getIp6Address());\n        }\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        cmd.add(\"--nicsecips\", secIpStr);\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3421,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected boolean post_default_network_rules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final InetAddress dhcpServerIp, final String hostIp, final String hostMacAddr) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"post_default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        cmd.add(\"--vmip\", nic.getIp());\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        if (dhcpServerIp != null) {\n            cmd.add(\"--dhcpSvr\", dhcpServerIp.getHostAddress());\n        }\n\n        cmd.add(\"--hostIp\", hostIp);\n        cmd.add(\"--hostMacAddr\", hostMacAddr);\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":3489,"groupId":"11721","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"post_default_network_rules","params":"(finalConnectconn@finalStringvmName@finalNicTOnic@finalLongvmId@finalInetAddressdhcpServerIp@finalStringhostIp@finalStringhostMacAddr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    protected boolean post_default_network_rules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final InetAddress dhcpServerIp, final String hostIp, final String hostMacAddr) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"post_default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        cmd.add(\"--vmip\", nic.getIp());\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        if (dhcpServerIp != null) {\n            cmd.add(\"--dhcpSvr\", dhcpServerIp.getHostAddress());\n        }\n\n        cmd.add(\"--hostIp\", hostIp);\n        cmd.add(\"--hostMacAddr\", hostMacAddr);\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3456,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-02-19 22:02:12","commitOrder":2,"curCode":"    public boolean defaultNetworkRules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final String secIpStr, final boolean isFirstNic, final boolean checkBeforeApply) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() == 0 || intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        if (nic.getIp() != null) {\n            cmd.add(\"--vmip\", nic.getIp());\n        }\n        if (nic.getIp6Address() != null) {\n            cmd.add(\"--vmip6\", nic.getIp6Address());\n        }\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        cmd.add(\"--nicsecips\", secIpStr);\n        if (isFirstNic) {\n            cmd.add(\"--isFirstNic\");\n        }\n        if (checkBeforeApply) {\n            cmd.add(\"--check\");\n        }\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","date":"2020-02-19 22:02:12","endLine":3721,"groupId":"103338","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"defaultNetworkRules","params":"(finalConnectconn@finalStringvmName@finalNicTOnic@finalLongvmId@finalStringsecIpStr@finalbooleanisFirstNic@finalbooleancheckBeforeApply)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c7/506f57c40654902e14268dd331d59781d4cb63.src","preCode":"    public boolean defaultNetworkRules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final String secIpStr) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() == 0 || intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        if (nic.getIp() != null) {\n            cmd.add(\"--vmip\", nic.getIp());\n        }\n        if (nic.getIp6Address() != null) {\n            cmd.add(\"--vmip6\", nic.getIp6Address());\n        }\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        cmd.add(\"--nicsecips\", secIpStr);\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3682,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected boolean post_default_network_rules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final InetAddress dhcpServerIp, final String hostIp, final String hostMacAddr) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"post_default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        cmd.add(\"--vmip\", nic.getIp());\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        if (dhcpServerIp != null) {\n            cmd.add(\"--dhcpSvr\", dhcpServerIp.getHostAddress());\n        }\n\n        cmd.add(\"--hostIp\", hostIp);\n        cmd.add(\"--hostMacAddr\", hostMacAddr);\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":3489,"groupId":"103338","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"post_default_network_rules","params":"(finalConnectconn@finalStringvmName@finalNicTOnic@finalLongvmId@finalInetAddressdhcpServerIp@finalStringhostIp@finalStringhostMacAddr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    protected boolean post_default_network_rules(final Connect conn, final String vmName, final NicTO nic, final Long vmId, final InetAddress dhcpServerIp, final String hostIp, final String hostMacAddr) {\n        if (!_canBridgeFirewall) {\n            return false;\n        }\n\n        final List<InterfaceDef> intfs = getInterfaces(conn, vmName);\n        if (intfs.size() < nic.getDeviceId()) {\n            return false;\n        }\n\n        final InterfaceDef intf = intfs.get(nic.getDeviceId());\n        final String brname = intf.getBrName();\n        final String vif = intf.getDevName();\n\n        final Script cmd = new Script(_securityGroupPath, _timeout, s_logger);\n        cmd.add(\"post_default_network_rules\");\n        cmd.add(\"--vmname\", vmName);\n        cmd.add(\"--vmid\", vmId.toString());\n        cmd.add(\"--vmip\", nic.getIp());\n        cmd.add(\"--vmmac\", nic.getMac());\n        cmd.add(\"--vif\", vif);\n        cmd.add(\"--brname\", brname);\n        if (dhcpServerIp != null) {\n            cmd.add(\"--dhcpSvr\", dhcpServerIp.getHostAddress());\n        }\n\n        cmd.add(\"--hostIp\", hostIp);\n        cmd.add(\"--hostMacAddr\", hostMacAddr);\n        final String result = cmd.execute();\n        if (result != null) {\n            return false;\n        }\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3456,"status":"N"}],"commitId":"458d3b5b4753b16b1f07bfa1fe667037cb2623d6","commitMessage":"@@@Multiple networks support for vms in advanced zone with securit? (#3639)\n\n","date":"2020-02-19 22:02:12","modifiedFileCount":"16","status":"M","submitter":"Wei Zhou"}]
