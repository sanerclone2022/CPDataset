[{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    private NetworkVO createDefaultNetworkForAccount(DataCenter zone, Account owner, List<NetworkOfferingVO> requiredOfferings)\n            throws InsufficientCapacityException, ResourceAllocationException {\n        NetworkVO defaultNetwork = null;\n        long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0).getTrafficType());\n        \r\n        PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n        if (physicalNetwork == null) {\n            throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                    + requiredOfferings.get(0).getTags());\n        }\n        s_logger.debug(\"Creating network for account \" + owner + \" from the network offering id=\" + requiredOfferings.get(0).getId() + \" as a part of deployVM process\");\n        Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), owner.getAccountName() + \"-network\", owner.getAccountName() + \"-network\",\n                null, null, null, false, null, owner, null, physicalNetwork, zone.getId(), ACLType.Account, null, null, null, null, true, null, null,\n                null);\n        if (newNetwork != null) {\n            defaultNetwork = _networkDao.findById(newNetwork.getId());\n        }\n        return defaultNetwork;\n    }\n","date":"2020-10-26 21:24:14","endLine":3439,"groupId":"4158","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDefaultNetworkForAccount","params":"(DataCenterzone@Accountowner@List<NetworkOfferingVO>requiredOfferings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a9/31159ea21125aa8851b37d78b52e71ba6eff61.src","preCode":"    private NetworkVO createDefaultNetworkForAccount(DataCenter zone, Account owner, List<NetworkOfferingVO> requiredOfferings)\n            throws InsufficientCapacityException, ResourceAllocationException {\n        NetworkVO defaultNetwork = null;\n        long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0).getTrafficType());\n        \r\n        PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n        if (physicalNetwork == null) {\n            throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                    + requiredOfferings.get(0).getTags());\n        }\n        s_logger.debug(\"Creating network for account \" + owner + \" from the network offering id=\" + requiredOfferings.get(0).getId() + \" as a part of deployVM process\");\n        Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), owner.getAccountName() + \"-network\", owner.getAccountName() + \"-network\",\n                null, null, null, false, null, owner, null, physicalNetwork, zone.getId(), ACLType.Account, null, null, null, null, true, null, null,\n                null);\n        if (newNetwork != null) {\n            defaultNetwork = _networkDao.findById(newNetwork.getId());\n        }\n        return defaultNetwork;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3421,"status":"B"},{"authorDate":"2020-06-26 19:31:43","commitOrder":2,"curCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","date":"2020-06-26 19:31:43","endLine":7236,"groupId":"8118","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postProcessingUnmanageVMVolumes","params":"(List<VolumeVO>volumes@UserVmVOvm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/620443b0d6697027b553a81f854f05cd52e72f.src","preCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":7226,"status":"NB"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2020-06-26 19:31:43","codes":[{"authorDate":"2021-02-18 16:24:09","commitOrder":3,"curCode":"    private NetworkVO createDefaultNetworkForAccount(DataCenter zone, Account owner, List<NetworkOfferingVO> requiredOfferings)\n            throws InsufficientCapacityException, ResourceAllocationException {\n        NetworkVO defaultNetwork = null;\n        long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0).getTrafficType());\n        \r\n        PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n        if (physicalNetwork == null) {\n            throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                    + requiredOfferings.get(0).getTags());\n        }\n        s_logger.debug(\"Creating network for account \" + owner + \" from the network offering id=\" + requiredOfferings.get(0).getId() + \" as a part of deployVM process\");\n        Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), owner.getAccountName() + \"-network\", owner.getAccountName() + \"-network\",\n                null, null, null, false, null, owner, null, physicalNetwork, zone.getId(), ACLType.Account, null, null, null, null, true, null, null,\n                null, null, null);\n        if (newNetwork != null) {\n            defaultNetwork = _networkDao.findById(newNetwork.getId());\n        }\n        return defaultNetwork;\n    }\n","date":"2021-02-18 16:24:09","endLine":3496,"groupId":"101352","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDefaultNetworkForAccount","params":"(DataCenterzone@Accountowner@List<NetworkOfferingVO>requiredOfferings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8a/363c296b70ac7c43224932594923f02202ac69.src","preCode":"    private NetworkVO createDefaultNetworkForAccount(DataCenter zone, Account owner, List<NetworkOfferingVO> requiredOfferings)\n            throws InsufficientCapacityException, ResourceAllocationException {\n        NetworkVO defaultNetwork = null;\n        long physicalNetworkId = _networkModel.findPhysicalNetworkId(zone.getId(), requiredOfferings.get(0).getTags(), requiredOfferings.get(0).getTrafficType());\n        \r\n        PhysicalNetwork physicalNetwork = _physicalNetworkDao.findById(physicalNetworkId);\n        if (physicalNetwork == null) {\n            throw new InvalidParameterValueException(\"Unable to find physical network with id: \" + physicalNetworkId + \" and tag: \"\n                    + requiredOfferings.get(0).getTags());\n        }\n        s_logger.debug(\"Creating network for account \" + owner + \" from the network offering id=\" + requiredOfferings.get(0).getId() + \" as a part of deployVM process\");\n        Network newNetwork = _networkMgr.createGuestNetwork(requiredOfferings.get(0).getId(), owner.getAccountName() + \"-network\", owner.getAccountName() + \"-network\",\n                null, null, null, false, null, owner, null, physicalNetwork, zone.getId(), ACLType.Account, null, null, null, null, true, null, null,\n                null);\n        if (newNetwork != null) {\n            defaultNetwork = _networkDao.findById(newNetwork.getId());\n        }\n        return defaultNetwork;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3478,"status":"M"},{"authorDate":"2020-06-26 19:31:43","commitOrder":3,"curCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","date":"2020-06-26 19:31:43","endLine":7236,"groupId":"101352","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postProcessingUnmanageVMVolumes","params":"(List<VolumeVO>volumes@UserVmVOvm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/620443b0d6697027b553a81f854f05cd52e72f.src","preCode":"    private void postProcessingUnmanageVMVolumes(List<VolumeVO> volumes, UserVmVO vm) {\n        for (VolumeVO volume : volumes) {\n            if (volume.getVolumeType() == Volume.Type.ROOT) {\n                \r\n                UsageEventUtils.publishUsageEvent(EventTypes.EVENT_VOLUME_DELETE, volume.getAccountId(), volume.getDataCenterId(), volume.getId(), volume.getName(),\n                        Volume.class.getName(), volume.getUuid(), volume.isDisplayVolume());\n            }\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.volume);\n            _resourceLimitMgr.decrementResourceCount(vm.getAccountId(), ResourceType.primary_storage, new Long(volume.getSize()));\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":7226,"status":"N"}],"commitId":"aa01580381c931512d62edbc658865f776ce2efa","commitMessage":"@@@network: Specify IP for VR in shared networks (#4503)\n\nThis PR enables admins to specify IP for a VR in a shared network.","date":"2021-02-18 16:24:09","modifiedFileCount":"16","status":"M","submitter":"Pearl Dsilva"}]
