[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        final UserVmVO vm = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(vm);\n\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        \r\n        final NicVO domrGuestNic = nicDao.findByInstanceIdAndIpAddressAndVmtype(_router.getId(), nicDao.getIpAddress(_nic.getNetworkId(), _router.getId()),\n                VirtualMachine.Type.DomainRouter);\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (!NetUtils.sameSubnet(domrGuestNic.getIPv4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n            final NicIpAliasDao nicIpAliasDao = visitor.getVirtualNetworkApplianceFactory().getNicIpAliasDao();\n            final List<NicIpAliasVO> aliasIps = nicIpAliasDao.listByNetworkIdAndState(domrGuestNic.getNetworkId(), NicIpAlias.State.active);\n            boolean ipInVmsubnet = false;\n            for (final NicIpAliasVO alias : aliasIps) {\n                \r\n                if (NetUtils.sameSubnet(alias.getIp4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n                    ipInVmsubnet = true;\n                    break;\n                }\n            }\n\n            PublicIp routerPublicIP = null;\n            DataCenterDao dcDao = visitor.getVirtualNetworkApplianceFactory().getDcDao();\n            final DataCenter dc = dcDao.findById(_router.getDataCenterId());\n            if (ipInVmsubnet == false) {\n                try {\n                    if (_network.getTrafficType() == TrafficType.Guest && _network.getGuestType() == GuestType.Shared) {\n                        HostPodDao podDao = visitor.getVirtualNetworkApplianceFactory().getPodDao();\n                        podDao.findById(vm.getPodIdToDeployIn());\n                        final Account caller = CallContext.current().getCallingAccount();\n\n                        VlanDao vlanDao = visitor.getVirtualNetworkApplianceFactory().getVlanDao();\n                        final List<VlanVO> vlanList = vlanDao.listVlansByNetworkIdAndGateway(_network.getId(), _nic.getIPv4Gateway());\n                        final List<Long> vlanDbIdList = new ArrayList<Long>();\n                        for (final VlanVO vlan : vlanList) {\n                            vlanDbIdList.add(vlan.getId());\n                        }\n                        IpAddressManager ipAddrMgr = visitor.getVirtualNetworkApplianceFactory().getIpAddrMgr();\n                        if (dc.getNetworkType() == NetworkType.Basic) {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), vm.getPodIdToDeployIn(), caller, Vlan.VlanType.DirectAttached,\n                                    vlanDbIdList, _nic.getNetworkId(), null, false);\n                        } else {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), null, caller, Vlan.VlanType.DirectAttached, vlanDbIdList,\n                                    _nic.getNetworkId(), null, false);\n                        }\n\n                        _routerAliasIp = routerPublicIP.getAddress().addr();\n                    }\n                } catch (final InsufficientAddressCapacityException e) {\n                    s_logger.info(e.getMessage());\n                    s_logger.info(\"unable to configure dhcp for this VM.\");\n                    return false;\n                }\n                \r\n                _nicAlias = new NicIpAliasVO(domrGuestNic.getId(), _routerAliasIp, _router.getId(), CallContext.current().getCallingAccountId(), _network.getDomainId(),\n                        _nic.getNetworkId(), _nic.getIPv4Gateway(), _nic.getIPv4Netmask());\n                _nicAlias.setAliasCount(routerPublicIP.getIpMacAddress());\n                nicIpAliasDao.persist(_nicAlias);\n\n                final boolean result = visitor.visit(this);\n\n                if (result == false) {\n                    final NicIpAliasVO ipAliasVO = nicIpAliasDao.findByInstanceIdAndNetworkId(_network.getId(), _router.getId());\n                    final PublicIp routerPublicIPFinal = routerPublicIP;\n                    Transaction.execute(new TransactionCallbackNoReturn() {\n                        @Override\n                        public void doInTransactionWithoutResult(final TransactionStatus status) {\n                            nicIpAliasDao.expunge(ipAliasVO.getId());\n\n                            IPAddressDao ipAddressDao = visitor.getVirtualNetworkApplianceFactory().getIpAddressDao();\n                            ipAddressDao.unassignIpAddress(routerPublicIPFinal.getId());\n                        }\n                    });\n                    throw new CloudRuntimeException(\"failed to configure ip alias on the router as a part of dhcp config\");\n                }\n            }\n            return true;\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":165,"groupId":"20722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"accept","params":"(finalNetworkTopologyVisitorvisitor@finalVirtualRouterrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ed/5513795a3db84ed180b0ed8824e02e4f88af75.src","preCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        final UserVmVO vm = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(vm);\n\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        \r\n        final NicVO domrGuestNic = nicDao.findByInstanceIdAndIpAddressAndVmtype(_router.getId(), nicDao.getIpAddress(_nic.getNetworkId(), _router.getId()),\n                VirtualMachine.Type.DomainRouter);\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (!NetUtils.sameSubnet(domrGuestNic.getIPv4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n            final NicIpAliasDao nicIpAliasDao = visitor.getVirtualNetworkApplianceFactory().getNicIpAliasDao();\n            final List<NicIpAliasVO> aliasIps = nicIpAliasDao.listByNetworkIdAndState(domrGuestNic.getNetworkId(), NicIpAlias.State.active);\n            boolean ipInVmsubnet = false;\n            for (final NicIpAliasVO alias : aliasIps) {\n                \r\n                if (NetUtils.sameSubnet(alias.getIp4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n                    ipInVmsubnet = true;\n                    break;\n                }\n            }\n\n            PublicIp routerPublicIP = null;\n            DataCenterDao dcDao = visitor.getVirtualNetworkApplianceFactory().getDcDao();\n            final DataCenter dc = dcDao.findById(_router.getDataCenterId());\n            if (ipInVmsubnet == false) {\n                try {\n                    if (_network.getTrafficType() == TrafficType.Guest && _network.getGuestType() == GuestType.Shared) {\n                        HostPodDao podDao = visitor.getVirtualNetworkApplianceFactory().getPodDao();\n                        podDao.findById(vm.getPodIdToDeployIn());\n                        final Account caller = CallContext.current().getCallingAccount();\n\n                        VlanDao vlanDao = visitor.getVirtualNetworkApplianceFactory().getVlanDao();\n                        final List<VlanVO> vlanList = vlanDao.listVlansByNetworkIdAndGateway(_network.getId(), _nic.getIPv4Gateway());\n                        final List<Long> vlanDbIdList = new ArrayList<Long>();\n                        for (final VlanVO vlan : vlanList) {\n                            vlanDbIdList.add(vlan.getId());\n                        }\n                        IpAddressManager ipAddrMgr = visitor.getVirtualNetworkApplianceFactory().getIpAddrMgr();\n                        if (dc.getNetworkType() == NetworkType.Basic) {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), vm.getPodIdToDeployIn(), caller, Vlan.VlanType.DirectAttached,\n                                    vlanDbIdList, _nic.getNetworkId(), null, false);\n                        } else {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), null, caller, Vlan.VlanType.DirectAttached, vlanDbIdList,\n                                    _nic.getNetworkId(), null, false);\n                        }\n\n                        _routerAliasIp = routerPublicIP.getAddress().addr();\n                    }\n                } catch (final InsufficientAddressCapacityException e) {\n                    s_logger.info(e.getMessage());\n                    s_logger.info(\"unable to configure dhcp for this VM.\");\n                    return false;\n                }\n                \r\n                _nicAlias = new NicIpAliasVO(domrGuestNic.getId(), _routerAliasIp, _router.getId(), CallContext.current().getCallingAccountId(), _network.getDomainId(),\n                        _nic.getNetworkId(), _nic.getIPv4Gateway(), _nic.getIPv4Netmask());\n                _nicAlias.setAliasCount(routerPublicIP.getIpMacAddress());\n                nicIpAliasDao.persist(_nicAlias);\n\n                final boolean result = visitor.visit(this);\n\n                if (result == false) {\n                    final NicIpAliasVO ipAliasVO = nicIpAliasDao.findByInstanceIdAndNetworkId(_network.getId(), _router.getId());\n                    final PublicIp routerPublicIPFinal = routerPublicIP;\n                    Transaction.execute(new TransactionCallbackNoReturn() {\n                        @Override\n                        public void doInTransactionWithoutResult(final TransactionStatus status) {\n                            nicIpAliasDao.expunge(ipAliasVO.getId());\n\n                            IPAddressDao ipAddressDao = visitor.getVirtualNetworkApplianceFactory().getIpAddressDao();\n                            ipAddressDao.unassignIpAddress(routerPublicIPFinal.getId());\n                        }\n                    });\n                    throw new CloudRuntimeException(\"failed to configure ip alias on the router as a part of dhcp config\");\n                }\n            }\n            return true;\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/DhcpSubNetRules.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        _userVM = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(_userVM);\n\n        \r\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        _nicVo = nicDao.findById(_nic.getId());\n\n        return visitor.visit(this);\n    }\n","date":"2018-01-20 05:49:27","endLine":63,"groupId":"20722","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"accept","params":"(finalNetworkTopologyVisitorvisitor@finalVirtualRouterrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/62/774d4dfb7aaea0fcc6d41a886666f23bb02371.src","preCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        _userVM = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(_userVM);\n\n        \r\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        _nicVo = nicDao.findById(_nic.getId());\n\n        return visitor.visit(this);\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/UserdataPwdRules.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-05-18 17:49:20","commitOrder":2,"curCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        final UserVmVO vm = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(vm);\n\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        \r\n        final NicVO domrGuestNic = nicDao.findByInstanceIdAndIpAddressAndVmtype(_router.getId(), nicDao.getIpAddress(_nic.getNetworkId(), _router.getId()),\n                VirtualMachine.Type.DomainRouter);\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (!NetUtils.sameSubnet(domrGuestNic.getIPv4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n            final NicIpAliasDao nicIpAliasDao = visitor.getVirtualNetworkApplianceFactory().getNicIpAliasDao();\n            final List<NicIpAliasVO> aliasIps = nicIpAliasDao.listByNetworkIdAndState(domrGuestNic.getNetworkId(), NicIpAlias.State.active);\n            boolean ipInVmsubnet = false;\n            for (final NicIpAliasVO alias : aliasIps) {\n                \r\n                if (NetUtils.sameSubnet(alias.getIp4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n                    ipInVmsubnet = true;\n                    break;\n                }\n            }\n\n            PublicIp routerPublicIP = null;\n            DataCenterDao dcDao = visitor.getVirtualNetworkApplianceFactory().getDcDao();\n            final DataCenter dc = dcDao.findById(_router.getDataCenterId());\n            if (ipInVmsubnet == false) {\n                try {\n                    if (_network.getTrafficType() == TrafficType.Guest && _network.getGuestType() == GuestType.Shared) {\n                        HostPodDao podDao = visitor.getVirtualNetworkApplianceFactory().getPodDao();\n                        podDao.findById(vm.getPodIdToDeployIn());\n                        final Account caller = CallContext.current().getCallingAccount();\n\n                        VlanDao vlanDao = visitor.getVirtualNetworkApplianceFactory().getVlanDao();\n                        final List<VlanVO> vlanList = vlanDao.listVlansByNetworkIdAndGateway(_network.getId(), _nic.getIPv4Gateway());\n                        final List<Long> vlanDbIdList = new ArrayList<Long>();\n                        for (final VlanVO vlan : vlanList) {\n                            vlanDbIdList.add(vlan.getId());\n                        }\n                        IpAddressManager ipAddrMgr = visitor.getVirtualNetworkApplianceFactory().getIpAddrMgr();\n                        if (dc.getNetworkType() == NetworkType.Basic) {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), vm.getPodIdToDeployIn(), caller, Vlan.VlanType.DirectAttached,\n                                    vlanDbIdList, _nic.getNetworkId(), null, _nic.getIPv4Gateway(), false);\n                        } else {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), null, caller, Vlan.VlanType.DirectAttached, vlanDbIdList,\n                                    _nic.getNetworkId(), null, _nic.getIPv4Gateway(), false);\n                        }\n\n                        _routerAliasIp = routerPublicIP.getAddress().addr();\n                    }\n                } catch (final InsufficientAddressCapacityException e) {\n                    s_logger.info(e.getMessage());\n                    s_logger.info(\"unable to configure dhcp for this VM.\");\n                    return false;\n                }\n                \r\n                _nicAlias = new NicIpAliasVO(domrGuestNic.getId(), _routerAliasIp, _router.getId(), CallContext.current().getCallingAccountId(), _network.getDomainId(),\n                        _nic.getNetworkId(), _nic.getIPv4Gateway(), _nic.getIPv4Netmask());\n                _nicAlias.setAliasCount(routerPublicIP.getIpMacAddress());\n                nicIpAliasDao.persist(_nicAlias);\n\n                final boolean result = visitor.visit(this);\n\n                if (result == false) {\n                    final NicIpAliasVO ipAliasVO = nicIpAliasDao.findByInstanceIdAndNetworkId(_network.getId(), _router.getId());\n                    final PublicIp routerPublicIPFinal = routerPublicIP;\n                    Transaction.execute(new TransactionCallbackNoReturn() {\n                        @Override\n                        public void doInTransactionWithoutResult(final TransactionStatus status) {\n                            nicIpAliasDao.expunge(ipAliasVO.getId());\n\n                            IPAddressDao ipAddressDao = visitor.getVirtualNetworkApplianceFactory().getIpAddressDao();\n                            ipAddressDao.unassignIpAddress(routerPublicIPFinal.getId());\n                        }\n                    });\n                    throw new CloudRuntimeException(\"failed to configure ip alias on the router as a part of dhcp config\");\n                }\n            }\n            return true;\n        }\n        return true;\n    }\n","date":"2021-05-18 17:49:20","endLine":165,"groupId":"101748","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"accept","params":"(finalNetworkTopologyVisitorvisitor@finalVirtualRouterrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dd/12acd897299d62ddcb41e693823f1825a523c5.src","preCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        final UserVmVO vm = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(vm);\n\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        \r\n        final NicVO domrGuestNic = nicDao.findByInstanceIdAndIpAddressAndVmtype(_router.getId(), nicDao.getIpAddress(_nic.getNetworkId(), _router.getId()),\n                VirtualMachine.Type.DomainRouter);\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (!NetUtils.sameSubnet(domrGuestNic.getIPv4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n            final NicIpAliasDao nicIpAliasDao = visitor.getVirtualNetworkApplianceFactory().getNicIpAliasDao();\n            final List<NicIpAliasVO> aliasIps = nicIpAliasDao.listByNetworkIdAndState(domrGuestNic.getNetworkId(), NicIpAlias.State.active);\n            boolean ipInVmsubnet = false;\n            for (final NicIpAliasVO alias : aliasIps) {\n                \r\n                if (NetUtils.sameSubnet(alias.getIp4Address(), _nic.getIPv4Address(), _nic.getIPv4Netmask())) {\n                    ipInVmsubnet = true;\n                    break;\n                }\n            }\n\n            PublicIp routerPublicIP = null;\n            DataCenterDao dcDao = visitor.getVirtualNetworkApplianceFactory().getDcDao();\n            final DataCenter dc = dcDao.findById(_router.getDataCenterId());\n            if (ipInVmsubnet == false) {\n                try {\n                    if (_network.getTrafficType() == TrafficType.Guest && _network.getGuestType() == GuestType.Shared) {\n                        HostPodDao podDao = visitor.getVirtualNetworkApplianceFactory().getPodDao();\n                        podDao.findById(vm.getPodIdToDeployIn());\n                        final Account caller = CallContext.current().getCallingAccount();\n\n                        VlanDao vlanDao = visitor.getVirtualNetworkApplianceFactory().getVlanDao();\n                        final List<VlanVO> vlanList = vlanDao.listVlansByNetworkIdAndGateway(_network.getId(), _nic.getIPv4Gateway());\n                        final List<Long> vlanDbIdList = new ArrayList<Long>();\n                        for (final VlanVO vlan : vlanList) {\n                            vlanDbIdList.add(vlan.getId());\n                        }\n                        IpAddressManager ipAddrMgr = visitor.getVirtualNetworkApplianceFactory().getIpAddrMgr();\n                        if (dc.getNetworkType() == NetworkType.Basic) {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), vm.getPodIdToDeployIn(), caller, Vlan.VlanType.DirectAttached,\n                                    vlanDbIdList, _nic.getNetworkId(), null, false);\n                        } else {\n                            routerPublicIP = ipAddrMgr.assignPublicIpAddressFromVlans(_router.getDataCenterId(), null, caller, Vlan.VlanType.DirectAttached, vlanDbIdList,\n                                    _nic.getNetworkId(), null, false);\n                        }\n\n                        _routerAliasIp = routerPublicIP.getAddress().addr();\n                    }\n                } catch (final InsufficientAddressCapacityException e) {\n                    s_logger.info(e.getMessage());\n                    s_logger.info(\"unable to configure dhcp for this VM.\");\n                    return false;\n                }\n                \r\n                _nicAlias = new NicIpAliasVO(domrGuestNic.getId(), _routerAliasIp, _router.getId(), CallContext.current().getCallingAccountId(), _network.getDomainId(),\n                        _nic.getNetworkId(), _nic.getIPv4Gateway(), _nic.getIPv4Netmask());\n                _nicAlias.setAliasCount(routerPublicIP.getIpMacAddress());\n                nicIpAliasDao.persist(_nicAlias);\n\n                final boolean result = visitor.visit(this);\n\n                if (result == false) {\n                    final NicIpAliasVO ipAliasVO = nicIpAliasDao.findByInstanceIdAndNetworkId(_network.getId(), _router.getId());\n                    final PublicIp routerPublicIPFinal = routerPublicIP;\n                    Transaction.execute(new TransactionCallbackNoReturn() {\n                        @Override\n                        public void doInTransactionWithoutResult(final TransactionStatus status) {\n                            nicIpAliasDao.expunge(ipAliasVO.getId());\n\n                            IPAddressDao ipAddressDao = visitor.getVirtualNetworkApplianceFactory().getIpAddressDao();\n                            ipAddressDao.unassignIpAddress(routerPublicIPFinal.getId());\n                        }\n                    });\n                    throw new CloudRuntimeException(\"failed to configure ip alias on the router as a part of dhcp config\");\n                }\n            }\n            return true;\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/DhcpSubNetRules.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        _userVM = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(_userVM);\n\n        \r\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        _nicVo = nicDao.findById(_nic.getId());\n\n        return visitor.visit(this);\n    }\n","date":"2018-01-20 05:49:27","endLine":63,"groupId":"101748","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"accept","params":"(finalNetworkTopologyVisitorvisitor@finalVirtualRouterrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/62/774d4dfb7aaea0fcc6d41a886666f23bb02371.src","preCode":"    public boolean accept(final NetworkTopologyVisitor visitor, final VirtualRouter router) throws ResourceUnavailableException {\n        _router = router;\n\n        UserVmDao userVmDao = visitor.getVirtualNetworkApplianceFactory().getUserVmDao();\n        _userVM = userVmDao.findById(_profile.getId());\n        userVmDao.loadDetails(_userVM);\n\n        \r\n        NicDao nicDao = visitor.getVirtualNetworkApplianceFactory().getNicDao();\n        _nicVo = nicDao.findById(_nic.getId());\n\n        return visitor.visit(this);\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/UserdataPwdRules.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"426f14b6ed87c3dc072ee1d95d84892fc624bcf0","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15'\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2021-05-18 17:49:20","modifiedFileCount":"23","status":"M","submitter":"Abhishek Kumar"}]
