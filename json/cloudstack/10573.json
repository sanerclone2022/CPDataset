[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest) {\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkMigrate.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkMigrate.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkMigrate workInfo = new VmWorkMigrate(user.getId(), account.getId(), vm.getId(), VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, srcHostId, dest);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmStateSyncOutcome(workJob,\n                VirtualMachine.PowerState.PowerOn, vm.getId(), vm.getPowerHostId());\n    }\n","date":"2018-01-20 05:49:27","endLine":4586,"groupId":"21787","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"migrateVmThroughJobQueue","params":"(finalStringvmUuid@finallongsrcHostId@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest) {\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkMigrate.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkMigrate.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkMigrate workInfo = new VmWorkMigrate(user.getId(), account.getId(), vm.getId(), VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, srcHostId, dest);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmStateSyncOutcome(workJob,\n                VirtualMachine.PowerState.PowerOn, vm.getId(), vm.getPowerHostId());\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4547,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost) {\n\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkReconfigure.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkReconfigure.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkReconfigure workInfo = new VmWorkReconfigure(user.getId(), account.getId(), vm.getId(),\n                    VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, newServiceOffering.getId(), reconfiguringOnExistingHost);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n    }\n","date":"2018-01-20 05:49:27","endLine":4916,"groupId":"4645","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reconfigureVmThroughJobQueue","params":"(finalStringvmUuid@finalServiceOfferingnewServiceOffering@finalbooleanreconfiguringOnExistingHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost) {\n\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkReconfigure.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkReconfigure.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkReconfigure workInfo = new VmWorkReconfigure(user.getId(), account.getId(), vm.getId(),\n                    VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, newServiceOffering.getId(), reconfiguringOnExistingHost);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4876,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-01-25 20:05:13","commitOrder":2,"curCode":"    public Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest) {\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        Map<Volume, StoragePool> volumeStorageMap = dest.getStorageForDisks();\n        if (volumeStorageMap != null) {\n            for (Volume vol : volumeStorageMap.keySet()) {\n                checkConcurrentJobsPerDatastoreThreshhold(volumeStorageMap.get(vol));\n            }\n        }\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkMigrate.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkMigrate.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkMigrate workInfo = new VmWorkMigrate(user.getId(), account.getId(), vm.getId(), VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, srcHostId, dest);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmStateSyncOutcome(workJob,\n                VirtualMachine.PowerState.PowerOn, vm.getId(), vm.getPowerHostId());\n    }\n","date":"2019-01-25 20:05:13","endLine":4764,"groupId":"21787","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"migrateVmThroughJobQueue","params":"(finalStringvmUuid@finallongsrcHostId@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7d/218e226d50a4ea8ad6d0dfaf12d69bdb6d85fc.src","preCode":"    public Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest) {\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkMigrate.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkMigrate.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkMigrate workInfo = new VmWorkMigrate(user.getId(), account.getId(), vm.getId(), VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, srcHostId, dest);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmStateSyncOutcome(workJob,\n                VirtualMachine.PowerState.PowerOn, vm.getId(), vm.getPowerHostId());\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4718,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost) {\n\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkReconfigure.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkReconfigure.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkReconfigure workInfo = new VmWorkReconfigure(user.getId(), account.getId(), vm.getId(),\n                    VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, newServiceOffering.getId(), reconfiguringOnExistingHost);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n    }\n","date":"2018-01-20 05:49:27","endLine":4916,"groupId":"4645","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reconfigureVmThroughJobQueue","params":"(finalStringvmUuid@finalServiceOfferingnewServiceOffering@finalbooleanreconfiguringOnExistingHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost) {\n\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkReconfigure.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkReconfigure.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkReconfigure workInfo = new VmWorkReconfigure(user.getId(), account.getId(), vm.getId(),\n                    VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, newServiceOffering.getId(), reconfiguringOnExistingHost);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4876,"status":"N"}],"commitId":"b363fd49f70ac2092ebe6226a72a3d911dc99e1f","commitMessage":"@@@Vmware offline migration (#2848)\n\n* - Offline VM and Volume migration on Vmware hypervisor hosts\n- Also add VM disk consolidation call on successful VM migrations\n\n* Fix indentation of marvin test file and reformat against PEP8\n\n* * Fix few comment typos\n* Refactor debug messages to use String.format() when debug log level is enabled.\n\n* Send list of commands returned by hypervisor Guru instead of explicitly selecting the first one\n\n* Fix unhandled NPE during VM migration\n\n* Revert back to distinct event descriptions for VM to host or storage pool migration\n\n* Reformat test_primary_storage file against PEP-8 and Remove unused imports\n\n* Revert back the deprecation messages in the custom StringUtils class to favour the use of the ApacheUtils\n","date":"2019-01-25 20:05:13","modifiedFileCount":"35","status":"M","submitter":"dahn"},{"authorTime":"2020-06-16 14:53:23","codes":[{"authorDate":"2019-01-25 20:05:13","commitOrder":3,"curCode":"    public Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest) {\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        Map<Volume, StoragePool> volumeStorageMap = dest.getStorageForDisks();\n        if (volumeStorageMap != null) {\n            for (Volume vol : volumeStorageMap.keySet()) {\n                checkConcurrentJobsPerDatastoreThreshhold(volumeStorageMap.get(vol));\n            }\n        }\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkMigrate.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkMigrate.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkMigrate workInfo = new VmWorkMigrate(user.getId(), account.getId(), vm.getId(), VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, srcHostId, dest);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmStateSyncOutcome(workJob,\n                VirtualMachine.PowerState.PowerOn, vm.getId(), vm.getPowerHostId());\n    }\n","date":"2019-01-25 20:05:13","endLine":4764,"groupId":"10573","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"migrateVmThroughJobQueue","params":"(finalStringvmUuid@finallongsrcHostId@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7d/218e226d50a4ea8ad6d0dfaf12d69bdb6d85fc.src","preCode":"    public Outcome<VirtualMachine> migrateVmThroughJobQueue(final String vmUuid, final long srcHostId, final DeployDestination dest) {\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        Map<Volume, StoragePool> volumeStorageMap = dest.getStorageForDisks();\n        if (volumeStorageMap != null) {\n            for (Volume vol : volumeStorageMap.keySet()) {\n                checkConcurrentJobsPerDatastoreThreshhold(volumeStorageMap.get(vol));\n            }\n        }\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkMigrate.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkMigrate.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkMigrate workInfo = new VmWorkMigrate(user.getId(), account.getId(), vm.getId(), VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, srcHostId, dest);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmStateSyncOutcome(workJob,\n                VirtualMachine.PowerState.PowerOn, vm.getId(), vm.getPowerHostId());\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4718,"status":"N"},{"authorDate":"2020-06-16 14:53:23","commitOrder":3,"curCode":"    public Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering oldServiceOffering, final ServiceOffering newServiceOffering, Map<String, String> customParameters, final boolean reconfiguringOnExistingHost) {\n\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkReconfigure.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkReconfigure.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkReconfigure workInfo = new VmWorkReconfigure(user.getId(), account.getId(), vm.getId(),\n                    VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, oldServiceOffering.getId(), newServiceOffering.getId(), customParameters, reconfiguringOnExistingHost);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n    }\n","date":"2020-06-16 14:53:23","endLine":5304,"groupId":"10573","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"reconfigureVmThroughJobQueue","params":"(finalStringvmUuid@finalServiceOfferingoldServiceOffering@finalServiceOfferingnewServiceOffering@Map<String@String>customParameters@finalbooleanreconfiguringOnExistingHost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/20/750b33f7ef8c0e2ab2e6d193024f1fba68f8d7.src","preCode":"    public Outcome<VirtualMachine> reconfigureVmThroughJobQueue(\n            final String vmUuid, final ServiceOffering newServiceOffering, final boolean reconfiguringOnExistingHost) {\n\n        final CallContext context = CallContext.current();\n        final User user = context.getCallingUser();\n        final Account account = context.getCallingAccount();\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final List<VmWorkJobVO> pendingWorkJobs = _workJobDao.listPendingWorkJobs(\n                VirtualMachine.Type.Instance, vm.getId(),\n                VmWorkReconfigure.class.getName());\n\n        VmWorkJobVO workJob = null;\n        if (pendingWorkJobs != null && pendingWorkJobs.size() > 0) {\n            assert pendingWorkJobs.size() == 1;\n            workJob = pendingWorkJobs.get(0);\n        } else {\n\n            workJob = new VmWorkJobVO(context.getContextId());\n\n            workJob.setDispatcher(VmWorkConstants.VM_WORK_JOB_DISPATCHER);\n            workJob.setCmd(VmWorkReconfigure.class.getName());\n\n            workJob.setAccountId(account.getId());\n            workJob.setUserId(user.getId());\n            workJob.setVmType(VirtualMachine.Type.Instance);\n            workJob.setVmInstanceId(vm.getId());\n            workJob.setRelated(AsyncJobExecutionContext.getOriginJobId());\n\n            \r\n            final VmWorkReconfigure workInfo = new VmWorkReconfigure(user.getId(), account.getId(), vm.getId(),\n                    VirtualMachineManagerImpl.VM_WORK_JOB_HANDLER, newServiceOffering.getId(), reconfiguringOnExistingHost);\n            workJob.setCmdInfo(VmWorkSerializer.serialize(workInfo));\n\n            _jobMgr.submitAsyncJob(workJob, VmWorkConstants.VM_WORK_QUEUE, vm.getId());\n        }\n        AsyncJobExecutionContext.getCurrentExecutionContext().joinJob(workJob.getId());\n\n        return new VmJobVirtualMachineOutcome(workJob, vm.getId());\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5264,"status":"M"}],"commitId":"612100c84a540249a4c52522320d4fd25409f197","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-06-16 14:53:23","modifiedFileCount":"7","status":"M","submitter":"Rohit Yadav"}]
