[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testBackupSnapshotFromVmSnapshotF2() {\n        when(_vmDao.findById(anyLong())).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(anyLong())).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), anyLong(), anyLong())).thenReturn(null);\n        when(snapshotFactory.getSnapshot(anyLong(), Mockito.any(DataStore.class))).thenReturn(snapshotInfoMock);\n        when(storeMock.create(snapshotInfoMock)).thenReturn(snapshotInfoMock);\n        when(snapshotStoreDao.findBySnapshot(anyLong(), any(DataStoreRole.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.update(anyLong(), any(SnapshotDataStoreVO.class))).thenReturn(true);\n        when(_snapshotDao.update(anyLong(), any(SnapshotVO.class))).thenReturn(true);\n        when(vmMock.getAccountId()).thenReturn(2L);\n        when(snapshotStrategy.backupSnapshot(any(SnapshotInfo.class))).thenReturn(snapshotInfoMock);\n\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNotNull(snapshot);\n    }\n","date":"2018-01-20 05:49:27","endLine":325,"groupId":"17503","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBackupSnapshotFromVmSnapshotF2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/39/eb703300b0dfa337c70321e2b15b1f4e498086.src","preCode":"    public void testBackupSnapshotFromVmSnapshotF2() {\n        when(_vmDao.findById(anyLong())).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(anyLong())).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), anyLong(), anyLong())).thenReturn(null);\n        when(snapshotFactory.getSnapshot(anyLong(), Mockito.any(DataStore.class))).thenReturn(snapshotInfoMock);\n        when(storeMock.create(snapshotInfoMock)).thenReturn(snapshotInfoMock);\n        when(snapshotStoreDao.findBySnapshot(anyLong(), any(DataStoreRole.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.update(anyLong(), any(SnapshotDataStoreVO.class))).thenReturn(true);\n        when(_snapshotDao.update(anyLong(), any(SnapshotVO.class))).thenReturn(true);\n        when(vmMock.getAccountId()).thenReturn(2L);\n        when(snapshotStrategy.backupSnapshot(any(SnapshotInfo.class))).thenReturn(snapshotInfoMock);\n\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNotNull(snapshot);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/snapshot/SnapshotManagerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testBackupSnapshotFromVmSnapshotF3() {\n        when(_vmDao.findById(anyLong())).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(anyLong())).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), anyLong(), anyLong())).thenReturn(snapshotStoreMock);\n        when(snapshotStoreMock.getInstallPath()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        when(vmSnapshotMock.getName()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNull(snapshot);\n    }\n","date":"2018-01-20 05:49:27","endLine":338,"groupId":"18632","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackupSnapshotFromVmSnapshotF3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/39/eb703300b0dfa337c70321e2b15b1f4e498086.src","preCode":"    public void testBackupSnapshotFromVmSnapshotF3() {\n        when(_vmDao.findById(anyLong())).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(anyLong())).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), anyLong(), anyLong())).thenReturn(snapshotStoreMock);\n        when(snapshotStoreMock.getInstallPath()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        when(vmSnapshotMock.getName()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNull(snapshot);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/snapshot/SnapshotManagerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testBackupSnapshotFromVmSnapshotF2() {\n        when(_vmDao.findById(nullable(Long.class))).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(nullable(Long.class))).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(null);\n        when(snapshotFactory.getSnapshot(nullable(Long.class), nullable(DataStore.class))).thenReturn(snapshotInfoMock);\n        when(storeMock.create(snapshotInfoMock)).thenReturn(snapshotInfoMock);\n        when(snapshotStoreDao.findBySnapshot(nullable(Long.class), nullable(DataStoreRole.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.update(nullable(Long.class), nullable(SnapshotDataStoreVO.class))).thenReturn(true);\n        when(_snapshotDao.update(nullable(Long.class), nullable(SnapshotVO.class))).thenReturn(true);\n        when(vmMock.getAccountId()).thenReturn(2L);\n        when(snapshotStrategy.backupSnapshot(nullable(SnapshotInfo.class))).thenReturn(snapshotInfoMock);\n\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNotNull(snapshot);\n    }\n","date":"2020-02-12 15:28:25","endLine":327,"groupId":"17528","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBackupSnapshotFromVmSnapshotF2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2e/eb617622c06aae9a0157aca4201e5631dee0f9.src","preCode":"    public void testBackupSnapshotFromVmSnapshotF2() {\n        when(_vmDao.findById(anyLong())).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(anyLong())).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), anyLong(), anyLong())).thenReturn(null);\n        when(snapshotFactory.getSnapshot(anyLong(), Mockito.any(DataStore.class))).thenReturn(snapshotInfoMock);\n        when(storeMock.create(snapshotInfoMock)).thenReturn(snapshotInfoMock);\n        when(snapshotStoreDao.findBySnapshot(anyLong(), any(DataStoreRole.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.update(anyLong(), any(SnapshotDataStoreVO.class))).thenReturn(true);\n        when(_snapshotDao.update(anyLong(), any(SnapshotVO.class))).thenReturn(true);\n        when(vmMock.getAccountId()).thenReturn(2L);\n        when(snapshotStrategy.backupSnapshot(any(SnapshotInfo.class))).thenReturn(snapshotInfoMock);\n\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNotNull(snapshot);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/snapshot/SnapshotManagerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testBackupSnapshotFromVmSnapshotF3() {\n        when(_vmDao.findById(nullable(Long.class))).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(nullable(Long.class))).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.findBySnapshot(nullable(Long.class), nullable(DataStoreRole.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreMock.getInstallPath()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        when(vmSnapshotMock.getName()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNull(snapshot);\n    }\n","date":"2020-02-12 15:28:25","endLine":341,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackupSnapshotFromVmSnapshotF3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2e/eb617622c06aae9a0157aca4201e5631dee0f9.src","preCode":"    public void testBackupSnapshotFromVmSnapshotF3() {\n        when(_vmDao.findById(anyLong())).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(anyLong())).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), anyLong(), anyLong())).thenReturn(snapshotStoreMock);\n        when(snapshotStoreMock.getInstallPath()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        when(vmSnapshotMock.getName()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNull(snapshot);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/snapshot/SnapshotManagerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-10-29 16:56:32","codes":[{"authorDate":"2020-10-29 16:56:32","commitOrder":3,"curCode":"    public void testBackupSnapshotFromVmSnapshotF2() {\n        when(_vmDao.findById(nullable(Long.class))).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(nullable(Long.class))).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(null);\n        when(snapshotFactory.getSnapshot(nullable(Long.class), nullable(DataStore.class))).thenReturn(snapshotInfoMock);\n        when(storeMock.create(snapshotInfoMock)).thenReturn(snapshotInfoMock);\n        when(snapshotStoreDao.findByStoreSnapshot(nullable(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.update(nullable(Long.class), nullable(SnapshotDataStoreVO.class))).thenReturn(true);\n        when(_snapshotDao.update(nullable(Long.class), nullable(SnapshotVO.class))).thenReturn(true);\n        when(vmMock.getAccountId()).thenReturn(2L);\n        when(snapshotStrategy.backupSnapshot(nullable(SnapshotInfo.class))).thenReturn(snapshotInfoMock);\n\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNotNull(snapshot);\n    }\n","date":"2020-10-29 16:56:32","endLine":327,"groupId":"101159","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBackupSnapshotFromVmSnapshotF2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/bb44af6969f7d0913ff465d019e0639c691563.src","preCode":"    public void testBackupSnapshotFromVmSnapshotF2() {\n        when(_vmDao.findById(nullable(Long.class))).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(nullable(Long.class))).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(null);\n        when(snapshotFactory.getSnapshot(nullable(Long.class), nullable(DataStore.class))).thenReturn(snapshotInfoMock);\n        when(storeMock.create(snapshotInfoMock)).thenReturn(snapshotInfoMock);\n        when(snapshotStoreDao.findBySnapshot(nullable(Long.class), nullable(DataStoreRole.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.update(nullable(Long.class), nullable(SnapshotDataStoreVO.class))).thenReturn(true);\n        when(_snapshotDao.update(nullable(Long.class), nullable(SnapshotVO.class))).thenReturn(true);\n        when(vmMock.getAccountId()).thenReturn(2L);\n        when(snapshotStrategy.backupSnapshot(nullable(SnapshotInfo.class))).thenReturn(snapshotInfoMock);\n\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNotNull(snapshot);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/snapshot/SnapshotManagerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"},{"authorDate":"2020-10-29 16:56:32","commitOrder":3,"curCode":"    public void testBackupSnapshotFromVmSnapshotF3() {\n        when(_vmDao.findById(nullable(Long.class))).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(nullable(Long.class))).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.findByStoreSnapshot(nullable(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreMock.getInstallPath()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        when(vmSnapshotMock.getName()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNull(snapshot);\n    }\n","date":"2020-10-29 16:56:32","endLine":341,"groupId":"101159","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackupSnapshotFromVmSnapshotF3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/bb44af6969f7d0913ff465d019e0639c691563.src","preCode":"    public void testBackupSnapshotFromVmSnapshotF3() {\n        when(_vmDao.findById(nullable(Long.class))).thenReturn(vmMock);\n        when(vmMock.getHypervisorType()).thenReturn(Hypervisor.HypervisorType.KVM);\n        when(_vmSnapshotDao.findById(nullable(Long.class))).thenReturn(vmSnapshotMock);\n        when(snapshotStoreDao.findParent(any(DataStoreRole.class), nullable(Long.class), nullable(Long.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreDao.findBySnapshot(nullable(Long.class), nullable(DataStoreRole.class))).thenReturn(snapshotStoreMock);\n        when(snapshotStoreMock.getInstallPath()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        when(vmSnapshotMock.getName()).thenReturn(\"VM_SNAPSHOT_NAME\");\n        Snapshot snapshot = _snapshotMgr.backupSnapshotFromVmSnapshot(TEST_SNAPSHOT_ID, TEST_VM_ID, TEST_VOLUME_ID, TEST_VM_SNAPSHOT_ID);\n        Assert.assertNull(snapshot);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/snapshot/SnapshotManagerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"2d1989fd76c19a7c2a31a84d4e7a2f227a55254b","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-10-29 16:56:32","modifiedFileCount":"3","status":"M","submitter":"Daan Hoogland"}]
