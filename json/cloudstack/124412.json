[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException,\n    InsufficientCapacityException {\n        final CallContext cctx = CallContext.current();\n\n        s_logger.debug(\"Adding vm \" + vm + \" to network \" + network + \"; requested nic profile \" + requested);\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n\n        \r\n        if (vm.getState() == State.Running) {\n            \r\n            final NicProfile nic = _networkMgr.createNicForVm(network, requested, context, vmProfile, true);\n\n            \r\n            final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n            final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n            \r\n            final NicTO nicTO = toNicTO(nic, vmProfile.getVirtualMachine().getHypervisorType());\n\n            \r\n            s_logger.debug(\"Plugging nic for vm \" + vm + \" in network \" + network);\n\n            boolean result = false;\n            try {\n                result = plugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is plugged successfully for vm \" + vm + \" in network \" + network + \". Vm  is a part of network now\");\n                    final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                    \r\n                    if(VirtualMachine.Type.User.equals(vmVO.getType())) {\n                        \r\n                        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vmVO.getAccountId(), vmVO.getDataCenterId(), vmVO.getId(),\n                                Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vmVO.getUuid(), vm.isDisplay());\n                    }\n                    return nic;\n                } else {\n                    s_logger.warn(\"Failed to plug nic to the vm \" + vm + \" in network \" + network);\n                    return null;\n                }\n            } finally {\n                if (!result) {\n                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine() + \" as nic plug failed on the backend\");\n                    _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                }\n            }\n        } else if (vm.getState() == State.Stopped) {\n            \r\n            return _networkMgr.createNicForVm(network, requested, context, vmProfile, false);\n        } else {\n            s_logger.warn(\"Unable to add vm \" + vm + \" to network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to add vm \" + vm + \" to network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3345,"groupId":"8484","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateAddVmToNetwork","params":"(finalVirtualMachinevm@finalNetworknetwork@finalNicProfilerequested)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    private NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException,\n    InsufficientCapacityException {\n        final CallContext cctx = CallContext.current();\n\n        s_logger.debug(\"Adding vm \" + vm + \" to network \" + network + \"; requested nic profile \" + requested);\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n\n        \r\n        if (vm.getState() == State.Running) {\n            \r\n            final NicProfile nic = _networkMgr.createNicForVm(network, requested, context, vmProfile, true);\n\n            \r\n            final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n            final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n            \r\n            final NicTO nicTO = toNicTO(nic, vmProfile.getVirtualMachine().getHypervisorType());\n\n            \r\n            s_logger.debug(\"Plugging nic for vm \" + vm + \" in network \" + network);\n\n            boolean result = false;\n            try {\n                result = plugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is plugged successfully for vm \" + vm + \" in network \" + network + \". Vm  is a part of network now\");\n                    final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                    \r\n                    if(VirtualMachine.Type.User.equals(vmVO.getType())) {\n                        \r\n                        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vmVO.getAccountId(), vmVO.getDataCenterId(), vmVO.getId(),\n                                Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vmVO.getUuid(), vm.isDisplay());\n                    }\n                    return nic;\n                } else {\n                    s_logger.warn(\"Failed to plug nic to the vm \" + vm + \" in network \" + network);\n                    return null;\n                }\n            } finally {\n                if (!result) {\n                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine() + \" as nic plug failed on the backend\");\n                    _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                }\n            }\n        } else if (vm.getState() == State.Stopped) {\n            \r\n            return _networkMgr.createNicForVm(network, requested, context, vmProfile, false);\n        } else {\n            s_logger.warn(\"Unable to add vm \" + vm + \" to network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to add vm \" + vm + \" to network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3286,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static Map<NetworkOffering.Detail, String> getDefaultSecurityDetails() {\n        final Map<NetworkOffering.Detail, String> details = new HashMap<>();\n        details.put(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n        details.put(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n        details.put(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n        return details;\n    }\n","date":"2018-01-20 05:49:27","endLine":1111,"groupId":"25075","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDefaultSecurityDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ba/b697aaafc2120f9547512aabee428747ec875b.src","preCode":"    public static Map<NetworkOffering.Detail, String> getDefaultSecurityDetails() {\n        final Map<NetworkOffering.Detail, String> details = new HashMap<>();\n        details.put(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n        details.put(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n        details.put(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n        return details;\n    }\n","realPath":"vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1105,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-12-20 20:56:04","commitOrder":2,"curCode":"    private NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException,\n    InsufficientCapacityException {\n        final CallContext cctx = CallContext.current();\n\n        s_logger.debug(\"Adding vm \" + vm + \" to network \" + network + \"; requested nic profile \" + requested);\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n\n        \r\n        if (vm.getState() == State.Running) {\n            \r\n            final NicProfile nic = _networkMgr.createNicForVm(network, requested, context, vmProfile, true);\n\n            \r\n            final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n            final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n            \r\n            final NicTO nicTO = toNicTO(nic, vmProfile.getVirtualMachine().getHypervisorType());\n\n            if (network != null) {\n                final Map<NetworkOffering.Detail, String> details = networkOfferingDetailsDao.getNtwkOffDetails(network.getNetworkOfferingId());\n                if (details != null) {\n                    details.putIfAbsent(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n                    details.putIfAbsent(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n                    details.putIfAbsent(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n                }\n                nicTO.setDetails(details);\n            }\n\n            \r\n            s_logger.debug(\"Plugging nic for vm \" + vm + \" in network \" + network);\n\n            boolean result = false;\n            try {\n                result = plugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is plugged successfully for vm \" + vm + \" in network \" + network + \". Vm  is a part of network now\");\n                    final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                    \r\n                    if(VirtualMachine.Type.User.equals(vmVO.getType())) {\n                        \r\n                        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vmVO.getAccountId(), vmVO.getDataCenterId(), vmVO.getId(),\n                                Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vmVO.getUuid(), vm.isDisplay());\n                    }\n                    return nic;\n                } else {\n                    s_logger.warn(\"Failed to plug nic to the vm \" + vm + \" in network \" + network);\n                    return null;\n                }\n            } finally {\n                if (!result) {\n                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine() + \" as nic plug failed on the backend\");\n                    _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                }\n            }\n        } else if (vm.getState() == State.Stopped) {\n            \r\n            return _networkMgr.createNicForVm(network, requested, context, vmProfile, false);\n        } else {\n            s_logger.warn(\"Unable to add vm \" + vm + \" to network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to add vm \" + vm + \" to network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n    }\n","date":"2019-12-20 20:56:04","endLine":3525,"groupId":"7501","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateAddVmToNetwork","params":"(finalVirtualMachinevm@finalNetworknetwork@finalNicProfilerequested)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3a/3c760c71fc8af83d44c5417c7f565f0fd97eaf.src","preCode":"    private NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException,\n    InsufficientCapacityException {\n        final CallContext cctx = CallContext.current();\n\n        s_logger.debug(\"Adding vm \" + vm + \" to network \" + network + \"; requested nic profile \" + requested);\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n\n        \r\n        if (vm.getState() == State.Running) {\n            \r\n            final NicProfile nic = _networkMgr.createNicForVm(network, requested, context, vmProfile, true);\n\n            \r\n            final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n            final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n            \r\n            final NicTO nicTO = toNicTO(nic, vmProfile.getVirtualMachine().getHypervisorType());\n\n            \r\n            s_logger.debug(\"Plugging nic for vm \" + vm + \" in network \" + network);\n\n            boolean result = false;\n            try {\n                result = plugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is plugged successfully for vm \" + vm + \" in network \" + network + \". Vm  is a part of network now\");\n                    final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                    \r\n                    if(VirtualMachine.Type.User.equals(vmVO.getType())) {\n                        \r\n                        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vmVO.getAccountId(), vmVO.getDataCenterId(), vmVO.getId(),\n                                Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vmVO.getUuid(), vm.isDisplay());\n                    }\n                    return nic;\n                } else {\n                    s_logger.warn(\"Failed to plug nic to the vm \" + vm + \" in network \" + network);\n                    return null;\n                }\n            } finally {\n                if (!result) {\n                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine() + \" as nic plug failed on the backend\");\n                    _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                }\n            }\n        } else if (vm.getState() == State.Stopped) {\n            \r\n            return _networkMgr.createNicForVm(network, requested, context, vmProfile, false);\n        } else {\n            s_logger.warn(\"Unable to add vm \" + vm + \" to network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to add vm \" + vm + \" to network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3456,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public static Map<NetworkOffering.Detail, String> getDefaultSecurityDetails() {\n        final Map<NetworkOffering.Detail, String> details = new HashMap<>();\n        details.put(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n        details.put(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n        details.put(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n        return details;\n    }\n","date":"2018-01-20 05:49:27","endLine":1111,"groupId":"25075","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDefaultSecurityDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ba/b697aaafc2120f9547512aabee428747ec875b.src","preCode":"    public static Map<NetworkOffering.Detail, String> getDefaultSecurityDetails() {\n        final Map<NetworkOffering.Detail, String> details = new HashMap<>();\n        details.put(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n        details.put(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n        details.put(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n        return details;\n    }\n","realPath":"vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1105,"status":"N"}],"commitId":"06060399ba5641e49b1847208987a2ae1bc5da76","commitMessage":"@@@Honour promiscuous mode from networkOffering (#3765) (#3781)\n\nHonour promiscuous mode from networkOffering (#3765)","date":"2019-12-20 20:56:04","modifiedFileCount":"1","status":"M","submitter":"dahn"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-20 18:16:34","commitOrder":3,"curCode":"    private NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException,\n    InsufficientCapacityException {\n        final CallContext cctx = CallContext.current();\n\n        s_logger.debug(\"Adding vm \" + vm + \" to network \" + network + \"; requested nic profile \" + requested);\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n\n        \r\n        if (vm.getState() == State.Running) {\n            \r\n            final NicProfile nic = _networkMgr.createNicForVm(network, requested, context, vmProfile, true);\n\n            \r\n            final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n            final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n            \r\n            final NicTO nicTO = toNicTO(nic, vmProfile.getVirtualMachine().getHypervisorType());\n\n            if (network != null) {\n                final Map<NetworkOffering.Detail, String> details = networkOfferingDetailsDao.getNtwkOffDetails(network.getNetworkOfferingId());\n                if (details != null) {\n                    details.putIfAbsent(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n                    details.putIfAbsent(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n                    details.putIfAbsent(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n                }\n                nicTO.setDetails(details);\n            }\n\n            \r\n            s_logger.debug(\"Plugging nic for vm \" + vm + \" in network \" + network);\n\n            boolean result = false;\n            try {\n                result = plugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    _userVmMgr.setupVmForPvlan(true, vm.getHostId(), nic);\n                    s_logger.debug(\"Nic is plugged successfully for vm \" + vm + \" in network \" + network + \". Vm  is a part of network now\");\n                    final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                    \r\n                    if(VirtualMachine.Type.User.equals(vmVO.getType())) {\n                        \r\n                        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vmVO.getAccountId(), vmVO.getDataCenterId(), vmVO.getId(),\n                                Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vmVO.getUuid(), vm.isDisplay());\n                    }\n                    return nic;\n                } else {\n                    s_logger.warn(\"Failed to plug nic to the vm \" + vm + \" in network \" + network);\n                    return null;\n                }\n            } finally {\n                if (!result) {\n                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine() + \" as nic plug failed on the backend\");\n                    _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                }\n            }\n        } else if (vm.getState() == State.Stopped) {\n            \r\n            return _networkMgr.createNicForVm(network, requested, context, vmProfile, false);\n        } else {\n            s_logger.warn(\"Unable to add vm \" + vm + \" to network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to add vm \" + vm + \" to network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n    }\n","date":"2020-08-20 18:16:34","endLine":3786,"groupId":"124412","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateAddVmToNetwork","params":"(finalVirtualMachinevm@finalNetworknetwork@finalNicProfilerequested)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/722c92fdea686b3481103c2c74c1003de77777.src","preCode":"    private NicProfile orchestrateAddVmToNetwork(final VirtualMachine vm, final Network network, final NicProfile requested) throws ConcurrentOperationException, ResourceUnavailableException,\n    InsufficientCapacityException {\n        final CallContext cctx = CallContext.current();\n\n        s_logger.debug(\"Adding vm \" + vm + \" to network \" + network + \"; requested nic profile \" + requested);\n        final VMInstanceVO vmVO = _vmDao.findById(vm.getId());\n        final ReservationContext context = new ReservationContextImpl(null, null, cctx.getCallingUser(), cctx.getCallingAccount());\n\n        final VirtualMachineProfileImpl vmProfile = new VirtualMachineProfileImpl(vmVO, null, null, null, null);\n\n        final DataCenter dc = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n        final Host host = _hostDao.findById(vm.getHostId());\n        final DeployDestination dest = new DeployDestination(dc, null, null, host);\n\n        \r\n        if (vm.getState() == State.Running) {\n            \r\n            final NicProfile nic = _networkMgr.createNicForVm(network, requested, context, vmProfile, true);\n\n            \r\n            final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vmProfile.getVirtualMachine().getHypervisorType());\n            final VirtualMachineTO vmTO = hvGuru.implement(vmProfile);\n\n            \r\n            final NicTO nicTO = toNicTO(nic, vmProfile.getVirtualMachine().getHypervisorType());\n\n            if (network != null) {\n                final Map<NetworkOffering.Detail, String> details = networkOfferingDetailsDao.getNtwkOffDetails(network.getNetworkOfferingId());\n                if (details != null) {\n                    details.putIfAbsent(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n                    details.putIfAbsent(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n                    details.putIfAbsent(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n                }\n                nicTO.setDetails(details);\n            }\n\n            \r\n            s_logger.debug(\"Plugging nic for vm \" + vm + \" in network \" + network);\n\n            boolean result = false;\n            try {\n                result = plugNic(network, nicTO, vmTO, context, dest);\n                if (result) {\n                    s_logger.debug(\"Nic is plugged successfully for vm \" + vm + \" in network \" + network + \". Vm  is a part of network now\");\n                    final long isDefault = nic.isDefaultNic() ? 1 : 0;\n                    \r\n                    if(VirtualMachine.Type.User.equals(vmVO.getType())) {\n                        \r\n                        UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vmVO.getAccountId(), vmVO.getDataCenterId(), vmVO.getId(),\n                                Long.toString(nic.getId()), network.getNetworkOfferingId(), null, isDefault, VirtualMachine.class.getName(), vmVO.getUuid(), vm.isDisplay());\n                    }\n                    return nic;\n                } else {\n                    s_logger.warn(\"Failed to plug nic to the vm \" + vm + \" in network \" + network);\n                    return null;\n                }\n            } finally {\n                if (!result) {\n                    s_logger.debug(\"Removing nic \" + nic + \" from vm \" + vmProfile.getVirtualMachine() + \" as nic plug failed on the backend\");\n                    _networkMgr.removeNic(vmProfile, _nicsDao.findById(nic.getId()));\n                }\n            }\n        } else if (vm.getState() == State.Stopped) {\n            \r\n            return _networkMgr.createNicForVm(network, requested, context, vmProfile, false);\n        } else {\n            s_logger.warn(\"Unable to add vm \" + vm + \" to network  \" + network);\n            throw new ResourceUnavailableException(\"Unable to add vm \" + vm + \" to network, is not in the right state\", DataCenter.class, vm.getDataCenterId());\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3716,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public static Map<NetworkOffering.Detail, String> getDefaultSecurityDetails() {\n        final Map<NetworkOffering.Detail, String> details = new HashMap<>();\n        details.put(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n        details.put(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n        details.put(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n        return details;\n    }\n","date":"2018-01-20 05:49:27","endLine":1111,"groupId":"124412","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getDefaultSecurityDetails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ba/b697aaafc2120f9547512aabee428747ec875b.src","preCode":"    public static Map<NetworkOffering.Detail, String> getDefaultSecurityDetails() {\n        final Map<NetworkOffering.Detail, String> details = new HashMap<>();\n        details.put(NetworkOffering.Detail.PromiscuousMode, NetworkOrchestrationService.PromiscuousMode.value().toString());\n        details.put(NetworkOffering.Detail.MacAddressChanges, NetworkOrchestrationService.MacAddressChanges.value().toString());\n        details.put(NetworkOffering.Detail.ForgedTransmits, NetworkOrchestrationService.ForgedTransmits.value().toString());\n        return details;\n    }\n","realPath":"vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1105,"status":"N"}],"commitId":"3872bf1ff94659fb234a7dd938ccdf6254fad3e7","commitMessage":"@@@kvm: Enable PVLAN support on L2 networks (#4040)\n\nThis is an extention of #3732 for kvm.\nThis is restricted to ovs > 2.9.2\nSince Xen uses ovs 2.6.  pvlan is unsupported.\nThis also fixes issues of vms on the same pvlan unable to communicate if they're on the same host","date":"2020-08-20 18:16:34","modifiedFileCount":"14","status":"M","submitter":"davidjumani"}]
