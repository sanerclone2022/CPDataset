[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testInvalidRolePermissionsCheckAccess() {\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.<RolePermission>emptyList());\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), \"someApi\");\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":115,"groupId":"12102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidRolePermissionsCheckAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/12/ebbe56f5fe61d1016a0f8cdb517f785bfc33ae.src","preCode":"    public void testInvalidRolePermissionsCheckAccess() {\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.<RolePermission>emptyList());\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), \"someApi\");\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","realPath":"plugins/acl/dynamic-role-based/src/test/java/org/apache/cloudstack/acl/DynamicRoleBasedAPIAccessCheckerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testValidDenyRolePermissionWildcardCheckAccess() {\n        final String denyApiName = \"someDenyApi\";\n        final RolePermission permission = new RolePermissionVO(1L, \"*Deny*\", RolePermission.Permission.DENY, null);\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.singletonList(permission));\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), denyApiName);\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":155,"groupId":"12102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValidDenyRolePermissionWildcardCheckAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/12/ebbe56f5fe61d1016a0f8cdb517f785bfc33ae.src","preCode":"    public void testValidDenyRolePermissionWildcardCheckAccess() {\n        final String denyApiName = \"someDenyApi\";\n        final RolePermission permission = new RolePermissionVO(1L, \"*Deny*\", RolePermission.Permission.DENY, null);\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.singletonList(permission));\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), denyApiName);\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","realPath":"plugins/acl/dynamic-role-based/src/test/java/org/apache/cloudstack/acl/DynamicRoleBasedAPIAccessCheckerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-08-13 18:15:39","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void testInvalidRolePermissionsCheckAccess() {\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.<RolePermission>emptyList());\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), \"someApi\");\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":115,"groupId":"104397","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidRolePermissionsCheckAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/12/ebbe56f5fe61d1016a0f8cdb517f785bfc33ae.src","preCode":"    public void testInvalidRolePermissionsCheckAccess() {\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.<RolePermission>emptyList());\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), \"someApi\");\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","realPath":"plugins/acl/dynamic-role-based/src/test/java/org/apache/cloudstack/acl/DynamicRoleBasedAPIAccessCheckerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2020-08-13 18:15:39","commitOrder":2,"curCode":"    public void testValidDenyRolePermissionWildcardCheckAccess() {\n        final String denyApiName = \"someDenyApi\";\n        final RolePermission permission = new RolePermissionVO(1L, \"*Deny*\", Permission.DENY, null);\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.singletonList(permission));\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), denyApiName);\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","date":"2020-08-13 18:15:39","endLine":159,"groupId":"104397","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testValidDenyRolePermissionWildcardCheckAccess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6b/ae346512609e411dd8350ae50d365ea645ff33.src","preCode":"    public void testValidDenyRolePermissionWildcardCheckAccess() {\n        final String denyApiName = \"someDenyApi\";\n        final RolePermission permission = new RolePermissionVO(1L, \"*Deny*\", RolePermission.Permission.DENY, null);\n        Mockito.when(roleService.findAllPermissionsBy(Mockito.anyLong())).thenReturn(Collections.singletonList(permission));\n        try {\n            apiAccessChecker.checkAccess(getTestUser(), denyApiName);\n            fail(\"Exception was expected\");\n        } catch (PermissionDeniedException ignored) {\n        }\n    }\n","realPath":"plugins/acl/dynamic-role-based/src/test/java/org/apache/cloudstack/acl/DynamicRoleBasedAPIAccessCheckerTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"c578004fe5f049684830d4323422dc3953481ac7","commitMessage":"@@@projects: Role based users in Projects (#4128)\n\nEnabling Role Based users in projects\nPrimate PR related to the FR: apache/cloudstack-primate#382\nDoc PR: https://github.com/apache/cloudstack-documentation/pull/145\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>\nCo-authored-by: Suresh Kumar Anaparti <suresh.anaparti@shapeblue.com>","date":"2020-08-13 18:15:39","modifiedFileCount":"66","status":"M","submitter":"Pearl Dsilva"}]
