[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n\n        if (_configDao != null) {\n            Map<String, String> configs = _configDao.getConfiguration(params);\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                _allocationAlgorithm = allocationAlgorithm;\n            }\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":135,"groupId":"6707","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b0/40c74c28c8d74da31d207ae57b9c2fc817edea.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n\n        if (_configDao != null) {\n            Map<String, String> configs = _configDao.getConfiguration(params);\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                _allocationAlgorithm = allocationAlgorithm;\n            }\n        }\n        return true;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/ClusterScopeStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n        if(_configDao != null) {\n            Map<String, String> configs = _configDao.getConfiguration(null, params);\n            String globalStorageOverprovisioningFactor = configs.get(\"storage.overprovisioning.factor\");\n            _storageOverprovisioningFactor = new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor, 2.0f));\n            _extraBytesPerVolume = 0;\n            _rand = new Random(System.currentTimeMillis());\n            _dontMatter = Boolean.parseBoolean(configs.get(\"storage.overwrite.provisioning\"));\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                _allocationAlgorithm = allocationAlgorithm;\n            }\n            return true;\n        }\n        return false;\n    }\n","date":"2018-01-20 05:49:27","endLine":97,"groupId":"5906","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/19/4f7bd857c509e32e87beb97af80afa052261f0.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n        if(_configDao != null) {\n            Map<String, String> configs = _configDao.getConfiguration(null, params);\n            String globalStorageOverprovisioningFactor = configs.get(\"storage.overprovisioning.factor\");\n            _storageOverprovisioningFactor = new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor, 2.0f));\n            _extraBytesPerVolume = 0;\n            _rand = new Random(System.currentTimeMillis());\n            _dontMatter = Boolean.parseBoolean(configs.get(\"storage.overwrite.provisioning\"));\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                _allocationAlgorithm = allocationAlgorithm;\n            }\n            return true;\n        }\n        return false;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-09-11 22:23:19","codes":[{"authorDate":"2018-09-11 22:23:19","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n\n        if (configDao != null) {\n            Map<String, String> configs = configDao.getConfiguration(params);\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                this.allocationAlgorithm = allocationAlgorithm;\n            }\n        }\n        return true;\n    }\n","date":"2018-09-11 22:23:19","endLine":130,"groupId":"10802","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/12/884d5d62e57b5705741d2db516071e7809a378.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n\n        if (_configDao != null) {\n            Map<String, String> configs = _configDao.getConfiguration(params);\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                _allocationAlgorithm = allocationAlgorithm;\n            }\n        }\n        return true;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/ClusterScopeStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-09-11 22:23:19","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n        if(configDao != null) {\n            Map<String, String> configs = configDao.getConfiguration(null, params);\n            String globalStorageOverprovisioningFactor = configs.get(\"storage.overprovisioning.factor\");\n            storageOverprovisioningFactor = new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor, 2.0f));\n            extraBytesPerVolume = 0;\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                this.allocationAlgorithm = allocationAlgorithm;\n            }\n            return true;\n        }\n        return false;\n    }\n","date":"2018-09-11 22:23:19","endLine":85,"groupId":"10802","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ef/5e21d8899ee537a97cf76156876cc19e9d033b.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        super.configure(name, params);\n        if(_configDao != null) {\n            Map<String, String> configs = _configDao.getConfiguration(null, params);\n            String globalStorageOverprovisioningFactor = configs.get(\"storage.overprovisioning.factor\");\n            _storageOverprovisioningFactor = new BigDecimal(NumbersUtil.parseFloat(globalStorageOverprovisioningFactor, 2.0f));\n            _extraBytesPerVolume = 0;\n            _rand = new Random(System.currentTimeMillis());\n            _dontMatter = Boolean.parseBoolean(configs.get(\"storage.overwrite.provisioning\"));\n            String allocationAlgorithm = configs.get(\"vm.allocation.algorithm\");\n            if (allocationAlgorithm != null) {\n                _allocationAlgorithm = allocationAlgorithm;\n            }\n            return true;\n        }\n        return false;\n    }\n","realPath":"engine/storage/src/main/java/org/apache/cloudstack/storage/allocator/AbstractStoragePoolAllocator.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"d12c106a47db1e2fc5634a9f8dc8c521eba65bfc","commitMessage":"@@@Restrict the number of managed clustered file systems per compute cluster (#2500)\n\n* Restrict the number of managed clustered file systems per compute cluster","date":"2018-09-11 22:23:19","modifiedFileCount":"8","status":"M","submitter":"Mike Tutkowski"}]
