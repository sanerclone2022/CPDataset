[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        _name = name;\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            s_logger.info(\"DownloadManager: starting additional services since we are inside system vm\");\n            _nfsVersion = NfsSecondaryStorageResource.retrieveNfsVersionFromParams(params);\n            startAdditionalServices();\n            blockOutgoingOnPrivate();\n        }\n\n        value = (String)params.get(\"install.timeout.pergig\");\n        installTimeoutPerGig = NumbersUtil.parseInt(value, 15 * 60) * 1000;\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        listTmpltScr = Script.findScript(scriptsDir, \"listvmtmplt.sh\");\n        if (listTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvmtmplt.sh\");\n        }\n        s_logger.info(\"listvmtmplt.sh found in \" + listTmpltScr);\n\n        createTmpltScr = Script.findScript(scriptsDir, \"createtmplt.sh\");\n        if (createTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find createtmplt.sh\");\n        }\n        s_logger.info(\"createtmplt.sh found in \" + createTmpltScr);\n\n        listVolScr = Script.findScript(scriptsDir, \"listvolume.sh\");\n        if (listVolScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvolume.sh\");\n        }\n        s_logger.info(\"listvolume.sh found in \" + listVolScr);\n\n        createVolScr = Script.findScript(scriptsDir, \"createvolume.sh\");\n        if (createVolScr == null) {\n            throw new ConfigurationException(\"Unable to find createvolume.sh\");\n        }\n        s_logger.info(\"createvolume.sh found in \" + createVolScr);\n\n        _processors = new HashMap<String, Processor>();\n\n        Processor processor = new VhdProcessor();\n        processor.configure(\"VHD Processor\", params);\n        _processors.put(\"VHD Processor\", processor);\n\n        processor = new IsoProcessor();\n        processor.configure(\"ISO Processor\", params);\n        _processors.put(\"ISO Processor\", processor);\n\n        processor = new QCOW2Processor();\n        processor.configure(\"QCOW2 Processor\", params);\n        _processors.put(\"QCOW2 Processor\", processor);\n\n        processor = new OVAProcessor();\n        processor.configure(\"OVA Processor\", params);\n        _processors.put(\"OVA Processor\", processor);\n\n        processor = new VmdkProcessor();\n        processor.configure(\"VMDK Processor\", params);\n        _processors.put(\"VMDK Processor\", processor);\n\n        processor = new RawImageProcessor();\n        processor.configure(\"Raw Image Processor\", params);\n        _processors.put(\"Raw Image Processor\", processor);\n\n        processor = new TARProcessor();\n        processor.configure(\"TAR Processor\", params);\n        _processors.put(\"TAR Processor\", processor);\n\n        _templateDir = (String)params.get(\"public.templates.root.dir\");\n        if (_templateDir == null) {\n            _templateDir = TemplateConstants.DEFAULT_TMPLT_ROOT_DIR;\n        }\n        _templateDir += File.separator + TemplateConstants.DEFAULT_TMPLT_FIRST_LEVEL_DIR;\n        _volumeDir = TemplateConstants.DEFAULT_VOLUME_ROOT_DIR + File.separator;\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1044,"groupId":"22883","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5f/a13a34cfc35830fdd76799838ab8af27b720d9.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        _name = name;\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            s_logger.info(\"DownloadManager: starting additional services since we are inside system vm\");\n            _nfsVersion = NfsSecondaryStorageResource.retrieveNfsVersionFromParams(params);\n            startAdditionalServices();\n            blockOutgoingOnPrivate();\n        }\n\n        value = (String)params.get(\"install.timeout.pergig\");\n        installTimeoutPerGig = NumbersUtil.parseInt(value, 15 * 60) * 1000;\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        listTmpltScr = Script.findScript(scriptsDir, \"listvmtmplt.sh\");\n        if (listTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvmtmplt.sh\");\n        }\n        s_logger.info(\"listvmtmplt.sh found in \" + listTmpltScr);\n\n        createTmpltScr = Script.findScript(scriptsDir, \"createtmplt.sh\");\n        if (createTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find createtmplt.sh\");\n        }\n        s_logger.info(\"createtmplt.sh found in \" + createTmpltScr);\n\n        listVolScr = Script.findScript(scriptsDir, \"listvolume.sh\");\n        if (listVolScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvolume.sh\");\n        }\n        s_logger.info(\"listvolume.sh found in \" + listVolScr);\n\n        createVolScr = Script.findScript(scriptsDir, \"createvolume.sh\");\n        if (createVolScr == null) {\n            throw new ConfigurationException(\"Unable to find createvolume.sh\");\n        }\n        s_logger.info(\"createvolume.sh found in \" + createVolScr);\n\n        _processors = new HashMap<String, Processor>();\n\n        Processor processor = new VhdProcessor();\n        processor.configure(\"VHD Processor\", params);\n        _processors.put(\"VHD Processor\", processor);\n\n        processor = new IsoProcessor();\n        processor.configure(\"ISO Processor\", params);\n        _processors.put(\"ISO Processor\", processor);\n\n        processor = new QCOW2Processor();\n        processor.configure(\"QCOW2 Processor\", params);\n        _processors.put(\"QCOW2 Processor\", processor);\n\n        processor = new OVAProcessor();\n        processor.configure(\"OVA Processor\", params);\n        _processors.put(\"OVA Processor\", processor);\n\n        processor = new VmdkProcessor();\n        processor.configure(\"VMDK Processor\", params);\n        _processors.put(\"VMDK Processor\", processor);\n\n        processor = new RawImageProcessor();\n        processor.configure(\"Raw Image Processor\", params);\n        _processors.put(\"Raw Image Processor\", processor);\n\n        processor = new TARProcessor();\n        processor.configure(\"TAR Processor\", params);\n        _processors.put(\"TAR Processor\", processor);\n\n        _templateDir = (String)params.get(\"public.templates.root.dir\");\n        if (_templateDir == null) {\n            _templateDir = TemplateConstants.DEFAULT_TMPLT_ROOT_DIR;\n        }\n        _templateDir += File.separator + TemplateConstants.DEFAULT_TMPLT_FIRST_LEVEL_DIR;\n        _volumeDir = TemplateConstants.DEFAULT_VOLUME_ROOT_DIR + File.separator;\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n        return true;\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/DownloadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":937,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            s_logger.info(\"UploadManager: starting additional services since we are inside system vm\");\n            startAdditionalServices();\n            \r\n        }\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":394,"groupId":"22883","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/29/eb4b13e307d7f267358990ae9ff26520b91b74.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            s_logger.info(\"UploadManager: starting additional services since we are inside system vm\");\n            startAdditionalServices();\n            \r\n        }\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n\n        return true;\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/UploadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-31 16:48:11","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        _name = name;\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            LOGGER.info(\"DownloadManager: starting additional services since we are inside system vm\");\n            _nfsVersion = NfsSecondaryStorageResource.retrieveNfsVersionFromParams(params);\n            startAdditionalServices();\n            blockOutgoingOnPrivate();\n        }\n\n        value = (String)params.get(\"install.timeout.pergig\");\n        installTimeoutPerGig = NumbersUtil.parseInt(value, 15 * 60) * 1000;\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        listTmpltScr = Script.findScript(scriptsDir, \"listvmtmplt.sh\");\n        if (listTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvmtmplt.sh\");\n        }\n        LOGGER.info(\"listvmtmplt.sh found in \" + listTmpltScr);\n\n        createTmpltScr = Script.findScript(scriptsDir, \"createtmplt.sh\");\n        if (createTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find createtmplt.sh\");\n        }\n        LOGGER.info(\"createtmplt.sh found in \" + createTmpltScr);\n\n        listVolScr = Script.findScript(scriptsDir, \"listvolume.sh\");\n        if (listVolScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvolume.sh\");\n        }\n        LOGGER.info(\"listvolume.sh found in \" + listVolScr);\n\n        createVolScr = Script.findScript(scriptsDir, \"createvolume.sh\");\n        if (createVolScr == null) {\n            throw new ConfigurationException(\"Unable to find createvolume.sh\");\n        }\n        LOGGER.info(\"createvolume.sh found in \" + createVolScr);\n\n        _processors = new HashMap<String, Processor>();\n\n        Processor processor = new VhdProcessor();\n        processor.configure(\"VHD Processor\", params);\n        _processors.put(\"VHD Processor\", processor);\n\n        processor = new IsoProcessor();\n        processor.configure(\"ISO Processor\", params);\n        _processors.put(\"ISO Processor\", processor);\n\n        processor = new QCOW2Processor();\n        processor.configure(\"QCOW2 Processor\", params);\n        _processors.put(\"QCOW2 Processor\", processor);\n\n        processor = new OVAProcessor();\n        processor.configure(\"OVA Processor\", params);\n        _processors.put(\"OVA Processor\", processor);\n\n        processor = new VmdkProcessor();\n        processor.configure(\"VMDK Processor\", params);\n        _processors.put(\"VMDK Processor\", processor);\n\n        processor = new RawImageProcessor();\n        processor.configure(\"Raw Image Processor\", params);\n        _processors.put(\"Raw Image Processor\", processor);\n\n        processor = new TARProcessor();\n        processor.configure(\"TAR Processor\", params);\n        _processors.put(\"TAR Processor\", processor);\n\n        _templateDir = (String)params.get(\"public.templates.root.dir\");\n        if (_templateDir == null) {\n            _templateDir = TemplateConstants.DEFAULT_TMPLT_ROOT_DIR;\n        }\n        _templateDir += File.separator + TemplateConstants.DEFAULT_TMPLT_FIRST_LEVEL_DIR;\n        _volumeDir = TemplateConstants.DEFAULT_VOLUME_ROOT_DIR + File.separator;\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n        return true;\n    }\n","date":"2020-01-31 16:48:11","endLine":1103,"groupId":"104696","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f6/de4c3d0e8c5387602680cee62560b33a0683e7.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        _name = name;\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            s_logger.info(\"DownloadManager: starting additional services since we are inside system vm\");\n            _nfsVersion = NfsSecondaryStorageResource.retrieveNfsVersionFromParams(params);\n            startAdditionalServices();\n            blockOutgoingOnPrivate();\n        }\n\n        value = (String)params.get(\"install.timeout.pergig\");\n        installTimeoutPerGig = NumbersUtil.parseInt(value, 15 * 60) * 1000;\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        listTmpltScr = Script.findScript(scriptsDir, \"listvmtmplt.sh\");\n        if (listTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvmtmplt.sh\");\n        }\n        s_logger.info(\"listvmtmplt.sh found in \" + listTmpltScr);\n\n        createTmpltScr = Script.findScript(scriptsDir, \"createtmplt.sh\");\n        if (createTmpltScr == null) {\n            throw new ConfigurationException(\"Unable to find createtmplt.sh\");\n        }\n        s_logger.info(\"createtmplt.sh found in \" + createTmpltScr);\n\n        listVolScr = Script.findScript(scriptsDir, \"listvolume.sh\");\n        if (listVolScr == null) {\n            throw new ConfigurationException(\"Unable to find the listvolume.sh\");\n        }\n        s_logger.info(\"listvolume.sh found in \" + listVolScr);\n\n        createVolScr = Script.findScript(scriptsDir, \"createvolume.sh\");\n        if (createVolScr == null) {\n            throw new ConfigurationException(\"Unable to find createvolume.sh\");\n        }\n        s_logger.info(\"createvolume.sh found in \" + createVolScr);\n\n        _processors = new HashMap<String, Processor>();\n\n        Processor processor = new VhdProcessor();\n        processor.configure(\"VHD Processor\", params);\n        _processors.put(\"VHD Processor\", processor);\n\n        processor = new IsoProcessor();\n        processor.configure(\"ISO Processor\", params);\n        _processors.put(\"ISO Processor\", processor);\n\n        processor = new QCOW2Processor();\n        processor.configure(\"QCOW2 Processor\", params);\n        _processors.put(\"QCOW2 Processor\", processor);\n\n        processor = new OVAProcessor();\n        processor.configure(\"OVA Processor\", params);\n        _processors.put(\"OVA Processor\", processor);\n\n        processor = new VmdkProcessor();\n        processor.configure(\"VMDK Processor\", params);\n        _processors.put(\"VMDK Processor\", processor);\n\n        processor = new RawImageProcessor();\n        processor.configure(\"Raw Image Processor\", params);\n        _processors.put(\"Raw Image Processor\", processor);\n\n        processor = new TARProcessor();\n        processor.configure(\"TAR Processor\", params);\n        _processors.put(\"TAR Processor\", processor);\n\n        _templateDir = (String)params.get(\"public.templates.root.dir\");\n        if (_templateDir == null) {\n            _templateDir = TemplateConstants.DEFAULT_TMPLT_ROOT_DIR;\n        }\n        _templateDir += File.separator + TemplateConstants.DEFAULT_TMPLT_FIRST_LEVEL_DIR;\n        _volumeDir = TemplateConstants.DEFAULT_VOLUME_ROOT_DIR + File.separator;\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n        return true;\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/DownloadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":996,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            s_logger.info(\"UploadManager: starting additional services since we are inside system vm\");\n            startAdditionalServices();\n            \r\n        }\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":394,"groupId":"104696","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/29/eb4b13e307d7f267358990ae9ff26520b91b74.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        String value = null;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            value = (String)params.get(StorageLayer.ClassConfigKey);\n            if (value == null) {\n                throw new ConfigurationException(\"Unable to find the storage layer\");\n            }\n\n            Class<StorageLayer> clazz;\n            try {\n                clazz = (Class<StorageLayer>)Class.forName(value);\n                _storage = clazz.newInstance();\n            } catch (ClassNotFoundException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (InstantiationException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            } catch (IllegalAccessException e) {\n                throw new ConfigurationException(\"Unable to instantiate \" + value);\n            }\n        }\n\n        String inSystemVM = (String)params.get(\"secondary.storage.vm\");\n        if (inSystemVM != null && \"true\".equalsIgnoreCase(inSystemVM)) {\n            s_logger.info(\"UploadManager: starting additional services since we are inside system vm\");\n            startAdditionalServices();\n            \r\n        }\n\n        value = (String)params.get(\"install.numthreads\");\n        final int numInstallThreads = NumbersUtil.parseInt(value, 10);\n\n        String scriptsDir = (String)params.get(\"template.scripts.dir\");\n        if (scriptsDir == null) {\n            scriptsDir = \"scripts/storage/secondary\";\n        }\n\n        \r\n        threadPool = Executors.newFixedThreadPool(numInstallThreads);\n\n        return true;\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/UploadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"N"}],"commitId":"424f10cc7778ca929f7cf90972f0bb34a80026ad","commitMessage":"@@@Merge remote-tracking branch 'origin/4.13'\n","date":"2020-01-31 16:48:11","modifiedFileCount":"5","status":"M","submitter":"Rohit Yadav"}]
