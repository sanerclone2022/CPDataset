[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Vm Disk usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageVmDiskVO> sc = s_usageVmDiskDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageVmDiskVO> usageVmDiskVOs = s_usageVmDiskDao.search(sc, null);\n\n        Map<String, VmDiskInfo> vmDiskUsageByZone = new HashMap<String, VmDiskInfo>();\n\n        \r\n        for (UsageVmDiskVO usageVmDisk : usageVmDiskVOs) {\n            long zoneId = usageVmDisk.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageVmDisk.getVmId() != 0) {\n                key += \"-Vm-\" + usageVmDisk.getVmId() + \"-Disk-\" + usageVmDisk.getVolumeId();\n            }\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n\n            long ioRead = usageVmDisk.getIORead();\n            long ioWrite = usageVmDisk.getIOWrite();\n            long bytesRead = usageVmDisk.getBytesRead();\n            long bytesWrite = usageVmDisk.getBytesWrite();\n            if (vmDiskInfo != null) {\n                ioRead += vmDiskInfo.getIORead();\n                ioWrite += vmDiskInfo.getIOWrite();\n                bytesRead += vmDiskInfo.getBytesRead();\n                bytesWrite += vmDiskInfo.getBytesWrite();\n            }\n\n            vmDiskUsageByZone.put(key, new VmDiskInfo(zoneId, usageVmDisk.getVmId(), usageVmDisk.getVolumeId(), ioRead, ioWrite, bytesRead, bytesWrite));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : vmDiskUsageByZone.keySet()) {\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n            long ioRead = vmDiskInfo.getIORead();\n            long ioWrite = vmDiskInfo.getIOWrite();\n            long bytesRead = vmDiskInfo.getBytesRead();\n            long bytesWrite = vmDiskInfo.getBytesWrite();\n\n            if ((ioRead > 0L) || (ioWrite > 0L) || (bytesRead > 0L) || (bytesWrite > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating vm disk usage record, io read:\" + ioRead + \", io write: \" + ioWrite + \"bytes read:\" + bytesRead + \", bytes write: \" +\n                        bytesWrite + \"for account: \" + account.getId() + \" in availability zone \" + vmDiskInfo.getZoneId() + \", start: \" + startDate + \", end: \" +\n                        endDate);\n                }\n\n                Long vmId = null;\n                Long volumeId = null;\n\n                \r\n                String usageDesc = \"disk I/O read (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    vmId = vmDiskInfo.getVmId();\n                    volumeId = vmDiskInfo.getVolumeId();\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                UsageVO usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioRead + \" io read\", UsageTypes.VM_DISK_IO_READ, new Double(\n                        ioRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioWrite + \" io write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(ioWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O read (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesRead + \" bytes read\", UsageTypes.VM_DISK_BYTES_READ,\n                        new Double(bytesRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesWrite + \" bytes write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(bytesWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No vm disk usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":170,"groupId":"19179","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/60/22a3e7004f962ae676e87d0c181c0cc63332de.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Vm Disk usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageVmDiskVO> sc = s_usageVmDiskDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageVmDiskVO> usageVmDiskVOs = s_usageVmDiskDao.search(sc, null);\n\n        Map<String, VmDiskInfo> vmDiskUsageByZone = new HashMap<String, VmDiskInfo>();\n\n        \r\n        for (UsageVmDiskVO usageVmDisk : usageVmDiskVOs) {\n            long zoneId = usageVmDisk.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageVmDisk.getVmId() != 0) {\n                key += \"-Vm-\" + usageVmDisk.getVmId() + \"-Disk-\" + usageVmDisk.getVolumeId();\n            }\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n\n            long ioRead = usageVmDisk.getIORead();\n            long ioWrite = usageVmDisk.getIOWrite();\n            long bytesRead = usageVmDisk.getBytesRead();\n            long bytesWrite = usageVmDisk.getBytesWrite();\n            if (vmDiskInfo != null) {\n                ioRead += vmDiskInfo.getIORead();\n                ioWrite += vmDiskInfo.getIOWrite();\n                bytesRead += vmDiskInfo.getBytesRead();\n                bytesWrite += vmDiskInfo.getBytesWrite();\n            }\n\n            vmDiskUsageByZone.put(key, new VmDiskInfo(zoneId, usageVmDisk.getVmId(), usageVmDisk.getVolumeId(), ioRead, ioWrite, bytesRead, bytesWrite));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : vmDiskUsageByZone.keySet()) {\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n            long ioRead = vmDiskInfo.getIORead();\n            long ioWrite = vmDiskInfo.getIOWrite();\n            long bytesRead = vmDiskInfo.getBytesRead();\n            long bytesWrite = vmDiskInfo.getBytesWrite();\n\n            if ((ioRead > 0L) || (ioWrite > 0L) || (bytesRead > 0L) || (bytesWrite > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating vm disk usage record, io read:\" + ioRead + \", io write: \" + ioWrite + \"bytes read:\" + bytesRead + \", bytes write: \" +\n                        bytesWrite + \"for account: \" + account.getId() + \" in availability zone \" + vmDiskInfo.getZoneId() + \", start: \" + startDate + \", end: \" +\n                        endDate);\n                }\n\n                Long vmId = null;\n                Long volumeId = null;\n\n                \r\n                String usageDesc = \"disk I/O read (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    vmId = vmDiskInfo.getVmId();\n                    volumeId = vmDiskInfo.getVolumeId();\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                UsageVO usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioRead + \" io read\", UsageTypes.VM_DISK_IO_READ, new Double(\n                        ioRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioWrite + \" io write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(ioWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O read (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesRead + \" bytes read\", UsageTypes.VM_DISK_BYTES_READ,\n                        new Double(bytesRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesWrite + \" bytes write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(bytesWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No vm disk usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VmDiskUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Network usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageNetworkVO> sc = s_usageNetworkDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageNetworkVO> usageNetworkVOs = s_usageNetworkDao.search(sc, null);\n\n        Map<String, NetworkInfo> networkUsageByZone = new HashMap<String, NetworkInfo>();\n\n        \r\n        for (UsageNetworkVO usageNetwork : usageNetworkVOs) {\n            long zoneId = usageNetwork.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageNetwork.getHostId() != 0) {\n                key += \"-Host\" + usageNetwork.getHostId();\n            }\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n\n            long bytesSent = usageNetwork.getBytesSent();\n            long bytesReceived = usageNetwork.getBytesReceived();\n            if (networkInfo != null) {\n                bytesSent += networkInfo.getBytesSent();\n                bytesReceived += networkInfo.getBytesRcvd();\n            }\n\n            networkUsageByZone.put(key, new NetworkInfo(zoneId, usageNetwork.getHostId(), usageNetwork.getHostType(), usageNetwork.getNetworkId(), bytesSent,\n                bytesReceived));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : networkUsageByZone.keySet()) {\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n            long totalBytesSent = networkInfo.getBytesSent();\n            long totalBytesReceived = networkInfo.getBytesRcvd();\n\n            if ((totalBytesSent > 0L) || (totalBytesReceived > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating usage record, total bytes sent:\" + totalBytesSent + \", total bytes received: \" + totalBytesReceived + \" for account: \" +\n                        account.getId() + \" in availability zone \" + networkInfo.getZoneId() + \", start: \" + startDate + \", end: \" + endDate);\n                }\n\n                Long hostId = null;\n\n                \r\n                String usageDesc = \"network bytes sent\";\n                if (networkInfo.getHostId() != 0) {\n                    hostId = networkInfo.getHostId();\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                UsageVO usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesSent + \" bytes sent\",\n                        UsageTypes.NETWORK_BYTES_SENT, new Double(totalBytesSent), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate, endDate);\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"network bytes received\";\n                if (networkInfo.getHostId() != 0) {\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesReceived + \" bytes received\",\n                        UsageTypes.NETWORK_BYTES_RECEIVED, new Double(totalBytesReceived), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate,\n                        endDate);\n                usageRecords.add(usageRecord);\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":142,"groupId":"93","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a5/4cb3e466b650941cdf4afc414c42fdc7c53bec.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Network usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageNetworkVO> sc = s_usageNetworkDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageNetworkVO> usageNetworkVOs = s_usageNetworkDao.search(sc, null);\n\n        Map<String, NetworkInfo> networkUsageByZone = new HashMap<String, NetworkInfo>();\n\n        \r\n        for (UsageNetworkVO usageNetwork : usageNetworkVOs) {\n            long zoneId = usageNetwork.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageNetwork.getHostId() != 0) {\n                key += \"-Host\" + usageNetwork.getHostId();\n            }\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n\n            long bytesSent = usageNetwork.getBytesSent();\n            long bytesReceived = usageNetwork.getBytesReceived();\n            if (networkInfo != null) {\n                bytesSent += networkInfo.getBytesSent();\n                bytesReceived += networkInfo.getBytesRcvd();\n            }\n\n            networkUsageByZone.put(key, new NetworkInfo(zoneId, usageNetwork.getHostId(), usageNetwork.getHostType(), usageNetwork.getNetworkId(), bytesSent,\n                bytesReceived));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : networkUsageByZone.keySet()) {\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n            long totalBytesSent = networkInfo.getBytesSent();\n            long totalBytesReceived = networkInfo.getBytesRcvd();\n\n            if ((totalBytesSent > 0L) || (totalBytesReceived > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating usage record, total bytes sent:\" + totalBytesSent + \", total bytes received: \" + totalBytesReceived + \" for account: \" +\n                        account.getId() + \" in availability zone \" + networkInfo.getZoneId() + \", start: \" + startDate + \", end: \" + endDate);\n                }\n\n                Long hostId = null;\n\n                \r\n                String usageDesc = \"network bytes sent\";\n                if (networkInfo.getHostId() != 0) {\n                    hostId = networkInfo.getHostId();\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                UsageVO usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesSent + \" bytes sent\",\n                        UsageTypes.NETWORK_BYTES_SENT, new Double(totalBytesSent), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate, endDate);\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"network bytes received\";\n                if (networkInfo.getHostId() != 0) {\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesReceived + \" bytes received\",\n                        UsageTypes.NETWORK_BYTES_RECEIVED, new Double(totalBytesReceived), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate,\n                        endDate);\n                usageRecords.add(usageRecord);\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/NetworkUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-08-13 18:25:16","codes":[{"authorDate":"2020-08-13 18:25:16","commitOrder":2,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Vm Disk usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageVmDiskVO> sc = s_usageVmDiskDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageVmDiskVO> usageVmDiskVOs = s_usageVmDiskDao.search(sc, null);\n\n        Map<String, VmDiskInfo> vmDiskUsageByZone = new HashMap<String, VmDiskInfo>();\n\n        \r\n        for (UsageVmDiskVO usageVmDisk : usageVmDiskVOs) {\n            long zoneId = usageVmDisk.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageVmDisk.getVmId() != 0) {\n                key += \"-Vm-\" + usageVmDisk.getVmId() + \"-Disk-\" + usageVmDisk.getVolumeId();\n            }\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n\n            long ioRead = usageVmDisk.getIORead();\n            long ioWrite = usageVmDisk.getIOWrite();\n            long bytesRead = usageVmDisk.getBytesRead();\n            long bytesWrite = usageVmDisk.getBytesWrite();\n            if (vmDiskInfo != null) {\n                ioRead += vmDiskInfo.getIORead();\n                ioWrite += vmDiskInfo.getIOWrite();\n                bytesRead += vmDiskInfo.getBytesRead();\n                bytesWrite += vmDiskInfo.getBytesWrite();\n            }\n\n            vmDiskUsageByZone.put(key, new VmDiskInfo(zoneId, usageVmDisk.getVmId(), usageVmDisk.getVolumeId(), ioRead, ioWrite, bytesRead, bytesWrite));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : vmDiskUsageByZone.keySet()) {\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n            long ioRead = vmDiskInfo.getIORead();\n            long ioWrite = vmDiskInfo.getIOWrite();\n            long bytesRead = vmDiskInfo.getBytesRead();\n            long bytesWrite = vmDiskInfo.getBytesWrite();\n\n            if ((ioRead > 0L) || (ioWrite > 0L) || (bytesRead > 0L) || (bytesWrite > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating vm disk usage record, io read:\" + toHumanReadableSize(ioRead) + \", io write: \" + toHumanReadableSize(ioWrite) + \", bytes read:\" + toHumanReadableSize(bytesRead) + \", bytes write: \" +\n                            toHumanReadableSize(bytesWrite) + \" for account: \" + account.getId() + \" in availability zone \" + vmDiskInfo.getZoneId() + \", start: \" + startDate + \", end: \" +\n                        endDate);\n                }\n\n                Long vmId = null;\n                Long volumeId = null;\n\n                \r\n                String usageDesc = \"disk I/O read (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    vmId = vmDiskInfo.getVmId();\n                    volumeId = vmDiskInfo.getVolumeId();\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                UsageVO usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioRead + \" io read\", UsageTypes.VM_DISK_IO_READ, new Double(\n                        ioRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioWrite + \" io write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(ioWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O read (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesRead + \" bytes read\", UsageTypes.VM_DISK_BYTES_READ,\n                        new Double(bytesRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesWrite + \" bytes write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(bytesWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No vm disk usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","date":"2020-08-13 18:25:16","endLine":172,"groupId":"19179","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d3/c8394dbbbd547078c8cbd181efd3d38f278ce1.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Vm Disk usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageVmDiskVO> sc = s_usageVmDiskDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageVmDiskVO> usageVmDiskVOs = s_usageVmDiskDao.search(sc, null);\n\n        Map<String, VmDiskInfo> vmDiskUsageByZone = new HashMap<String, VmDiskInfo>();\n\n        \r\n        for (UsageVmDiskVO usageVmDisk : usageVmDiskVOs) {\n            long zoneId = usageVmDisk.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageVmDisk.getVmId() != 0) {\n                key += \"-Vm-\" + usageVmDisk.getVmId() + \"-Disk-\" + usageVmDisk.getVolumeId();\n            }\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n\n            long ioRead = usageVmDisk.getIORead();\n            long ioWrite = usageVmDisk.getIOWrite();\n            long bytesRead = usageVmDisk.getBytesRead();\n            long bytesWrite = usageVmDisk.getBytesWrite();\n            if (vmDiskInfo != null) {\n                ioRead += vmDiskInfo.getIORead();\n                ioWrite += vmDiskInfo.getIOWrite();\n                bytesRead += vmDiskInfo.getBytesRead();\n                bytesWrite += vmDiskInfo.getBytesWrite();\n            }\n\n            vmDiskUsageByZone.put(key, new VmDiskInfo(zoneId, usageVmDisk.getVmId(), usageVmDisk.getVolumeId(), ioRead, ioWrite, bytesRead, bytesWrite));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : vmDiskUsageByZone.keySet()) {\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n            long ioRead = vmDiskInfo.getIORead();\n            long ioWrite = vmDiskInfo.getIOWrite();\n            long bytesRead = vmDiskInfo.getBytesRead();\n            long bytesWrite = vmDiskInfo.getBytesWrite();\n\n            if ((ioRead > 0L) || (ioWrite > 0L) || (bytesRead > 0L) || (bytesWrite > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating vm disk usage record, io read:\" + ioRead + \", io write: \" + ioWrite + \"bytes read:\" + bytesRead + \", bytes write: \" +\n                        bytesWrite + \"for account: \" + account.getId() + \" in availability zone \" + vmDiskInfo.getZoneId() + \", start: \" + startDate + \", end: \" +\n                        endDate);\n                }\n\n                Long vmId = null;\n                Long volumeId = null;\n\n                \r\n                String usageDesc = \"disk I/O read (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    vmId = vmDiskInfo.getVmId();\n                    volumeId = vmDiskInfo.getVolumeId();\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                UsageVO usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioRead + \" io read\", UsageTypes.VM_DISK_IO_READ, new Double(\n                        ioRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioWrite + \" io write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(ioWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O read (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesRead + \" bytes read\", UsageTypes.VM_DISK_BYTES_READ,\n                        new Double(bytesRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesWrite + \" bytes write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(bytesWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No vm disk usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VmDiskUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-08-13 18:25:16","commitOrder":2,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Network usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageNetworkVO> sc = s_usageNetworkDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageNetworkVO> usageNetworkVOs = s_usageNetworkDao.search(sc, null);\n\n        Map<String, NetworkInfo> networkUsageByZone = new HashMap<String, NetworkInfo>();\n\n        \r\n        for (UsageNetworkVO usageNetwork : usageNetworkVOs) {\n            long zoneId = usageNetwork.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageNetwork.getHostId() != 0) {\n                key += \"-Host\" + usageNetwork.getHostId();\n            }\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n\n            long bytesSent = usageNetwork.getBytesSent();\n            long bytesReceived = usageNetwork.getBytesReceived();\n            if (networkInfo != null) {\n                bytesSent += networkInfo.getBytesSent();\n                bytesReceived += networkInfo.getBytesRcvd();\n            }\n\n            networkUsageByZone.put(key, new NetworkInfo(zoneId, usageNetwork.getHostId(), usageNetwork.getHostType(), usageNetwork.getNetworkId(), bytesSent,\n                bytesReceived));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : networkUsageByZone.keySet()) {\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n            long totalBytesSent = networkInfo.getBytesSent();\n            long totalBytesReceived = networkInfo.getBytesRcvd();\n\n            if ((totalBytesSent > 0L) || (totalBytesReceived > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating usage record, total bytes sent: \" + toHumanReadableSize(totalBytesSent) + \", total bytes received: \" + toHumanReadableSize(totalBytesReceived) + \" for account: \" +\n                        account.getId() + \" in availability zone \" + networkInfo.getZoneId() + \", start: \" + startDate + \", end: \" + endDate);\n                }\n\n                Long hostId = null;\n\n                \r\n                String usageDesc = \"network bytes sent\";\n                if (networkInfo.getHostId() != 0) {\n                    hostId = networkInfo.getHostId();\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                UsageVO usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesSent + \" bytes sent\",\n                        UsageTypes.NETWORK_BYTES_SENT, new Double(totalBytesSent), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate, endDate);\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"network bytes received\";\n                if (networkInfo.getHostId() != 0) {\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesReceived + \" bytes received\",\n                        UsageTypes.NETWORK_BYTES_RECEIVED, new Double(totalBytesReceived), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate,\n                        endDate);\n                usageRecords.add(usageRecord);\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","date":"2020-08-13 18:25:16","endLine":144,"groupId":"93","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/9f62169f8cb9a6f2efd52fb06d7754044db3e4.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Network usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageNetworkVO> sc = s_usageNetworkDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageNetworkVO> usageNetworkVOs = s_usageNetworkDao.search(sc, null);\n\n        Map<String, NetworkInfo> networkUsageByZone = new HashMap<String, NetworkInfo>();\n\n        \r\n        for (UsageNetworkVO usageNetwork : usageNetworkVOs) {\n            long zoneId = usageNetwork.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageNetwork.getHostId() != 0) {\n                key += \"-Host\" + usageNetwork.getHostId();\n            }\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n\n            long bytesSent = usageNetwork.getBytesSent();\n            long bytesReceived = usageNetwork.getBytesReceived();\n            if (networkInfo != null) {\n                bytesSent += networkInfo.getBytesSent();\n                bytesReceived += networkInfo.getBytesRcvd();\n            }\n\n            networkUsageByZone.put(key, new NetworkInfo(zoneId, usageNetwork.getHostId(), usageNetwork.getHostType(), usageNetwork.getNetworkId(), bytesSent,\n                bytesReceived));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : networkUsageByZone.keySet()) {\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n            long totalBytesSent = networkInfo.getBytesSent();\n            long totalBytesReceived = networkInfo.getBytesRcvd();\n\n            if ((totalBytesSent > 0L) || (totalBytesReceived > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating usage record, total bytes sent:\" + totalBytesSent + \", total bytes received: \" + totalBytesReceived + \" for account: \" +\n                        account.getId() + \" in availability zone \" + networkInfo.getZoneId() + \", start: \" + startDate + \", end: \" + endDate);\n                }\n\n                Long hostId = null;\n\n                \r\n                String usageDesc = \"network bytes sent\";\n                if (networkInfo.getHostId() != 0) {\n                    hostId = networkInfo.getHostId();\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                UsageVO usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesSent + \" bytes sent\",\n                        UsageTypes.NETWORK_BYTES_SENT, new Double(totalBytesSent), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate, endDate);\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"network bytes received\";\n                if (networkInfo.getHostId() != 0) {\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesReceived + \" bytes received\",\n                        UsageTypes.NETWORK_BYTES_RECEIVED, new Double(totalBytesReceived), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate,\n                        endDate);\n                usageRecords.add(usageRecord);\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/NetworkUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"b586eb22f1b31f3cab2f2cb1aaeafca4f4646abd","commitMessage":"@@@Human readable sizes in logs (#4207)\n\nThis PR adds outputting human readable byte sizes in the management server logs.  agent logs.  and usage records. A non-dynamic global variable is added (display.human.readable.sizes) to control switching this feature on and off. This setting is sent to the agent on connection and is only read from the database when the management server is started up. The setting is kept in memory by the use of a static field on the NumbersUtil class and is available throughout the codebase.\n\nInstead of seeing things like:\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"106496\". \"bytesReceived\":\"0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nThe KB MB and GB values will be printed out:\n\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"(104.00 KB) 106496\". \"bytesReceived\":\"(0 bytes) 0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Human+Readable+Byte+sizes","date":"2020-08-13 18:25:16","modifiedFileCount":"55","status":"M","submitter":"Spaceman1984"},{"authorTime":"2021-09-15 10:54:34","codes":[{"authorDate":"2020-08-13 18:25:16","commitOrder":3,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Vm Disk usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageVmDiskVO> sc = s_usageVmDiskDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageVmDiskVO> usageVmDiskVOs = s_usageVmDiskDao.search(sc, null);\n\n        Map<String, VmDiskInfo> vmDiskUsageByZone = new HashMap<String, VmDiskInfo>();\n\n        \r\n        for (UsageVmDiskVO usageVmDisk : usageVmDiskVOs) {\n            long zoneId = usageVmDisk.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageVmDisk.getVmId() != 0) {\n                key += \"-Vm-\" + usageVmDisk.getVmId() + \"-Disk-\" + usageVmDisk.getVolumeId();\n            }\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n\n            long ioRead = usageVmDisk.getIORead();\n            long ioWrite = usageVmDisk.getIOWrite();\n            long bytesRead = usageVmDisk.getBytesRead();\n            long bytesWrite = usageVmDisk.getBytesWrite();\n            if (vmDiskInfo != null) {\n                ioRead += vmDiskInfo.getIORead();\n                ioWrite += vmDiskInfo.getIOWrite();\n                bytesRead += vmDiskInfo.getBytesRead();\n                bytesWrite += vmDiskInfo.getBytesWrite();\n            }\n\n            vmDiskUsageByZone.put(key, new VmDiskInfo(zoneId, usageVmDisk.getVmId(), usageVmDisk.getVolumeId(), ioRead, ioWrite, bytesRead, bytesWrite));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : vmDiskUsageByZone.keySet()) {\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n            long ioRead = vmDiskInfo.getIORead();\n            long ioWrite = vmDiskInfo.getIOWrite();\n            long bytesRead = vmDiskInfo.getBytesRead();\n            long bytesWrite = vmDiskInfo.getBytesWrite();\n\n            if ((ioRead > 0L) || (ioWrite > 0L) || (bytesRead > 0L) || (bytesWrite > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating vm disk usage record, io read:\" + toHumanReadableSize(ioRead) + \", io write: \" + toHumanReadableSize(ioWrite) + \", bytes read:\" + toHumanReadableSize(bytesRead) + \", bytes write: \" +\n                            toHumanReadableSize(bytesWrite) + \" for account: \" + account.getId() + \" in availability zone \" + vmDiskInfo.getZoneId() + \", start: \" + startDate + \", end: \" +\n                        endDate);\n                }\n\n                Long vmId = null;\n                Long volumeId = null;\n\n                \r\n                String usageDesc = \"disk I/O read (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    vmId = vmDiskInfo.getVmId();\n                    volumeId = vmDiskInfo.getVolumeId();\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                UsageVO usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioRead + \" io read\", UsageTypes.VM_DISK_IO_READ, new Double(\n                        ioRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioWrite + \" io write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(ioWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O read (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesRead + \" bytes read\", UsageTypes.VM_DISK_BYTES_READ,\n                        new Double(bytesRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesWrite + \" bytes write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(bytesWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No vm disk usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","date":"2020-08-13 18:25:16","endLine":172,"groupId":"10918","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d3/c8394dbbbd547078c8cbd181efd3d38f278ce1.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Vm Disk usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageVmDiskVO> sc = s_usageVmDiskDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageVmDiskVO> usageVmDiskVOs = s_usageVmDiskDao.search(sc, null);\n\n        Map<String, VmDiskInfo> vmDiskUsageByZone = new HashMap<String, VmDiskInfo>();\n\n        \r\n        for (UsageVmDiskVO usageVmDisk : usageVmDiskVOs) {\n            long zoneId = usageVmDisk.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageVmDisk.getVmId() != 0) {\n                key += \"-Vm-\" + usageVmDisk.getVmId() + \"-Disk-\" + usageVmDisk.getVolumeId();\n            }\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n\n            long ioRead = usageVmDisk.getIORead();\n            long ioWrite = usageVmDisk.getIOWrite();\n            long bytesRead = usageVmDisk.getBytesRead();\n            long bytesWrite = usageVmDisk.getBytesWrite();\n            if (vmDiskInfo != null) {\n                ioRead += vmDiskInfo.getIORead();\n                ioWrite += vmDiskInfo.getIOWrite();\n                bytesRead += vmDiskInfo.getBytesRead();\n                bytesWrite += vmDiskInfo.getBytesWrite();\n            }\n\n            vmDiskUsageByZone.put(key, new VmDiskInfo(zoneId, usageVmDisk.getVmId(), usageVmDisk.getVolumeId(), ioRead, ioWrite, bytesRead, bytesWrite));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : vmDiskUsageByZone.keySet()) {\n            VmDiskInfo vmDiskInfo = vmDiskUsageByZone.get(key);\n            long ioRead = vmDiskInfo.getIORead();\n            long ioWrite = vmDiskInfo.getIOWrite();\n            long bytesRead = vmDiskInfo.getBytesRead();\n            long bytesWrite = vmDiskInfo.getBytesWrite();\n\n            if ((ioRead > 0L) || (ioWrite > 0L) || (bytesRead > 0L) || (bytesWrite > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating vm disk usage record, io read:\" + toHumanReadableSize(ioRead) + \", io write: \" + toHumanReadableSize(ioWrite) + \", bytes read:\" + toHumanReadableSize(bytesRead) + \", bytes write: \" +\n                            toHumanReadableSize(bytesWrite) + \" for account: \" + account.getId() + \" in availability zone \" + vmDiskInfo.getZoneId() + \", start: \" + startDate + \", end: \" +\n                        endDate);\n                }\n\n                Long vmId = null;\n                Long volumeId = null;\n\n                \r\n                String usageDesc = \"disk I/O read (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    vmId = vmDiskInfo.getVmId();\n                    volumeId = vmDiskInfo.getVolumeId();\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                UsageVO usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioRead + \" io read\", UsageTypes.VM_DISK_IO_READ, new Double(\n                        ioRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (io requests)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, ioWrite + \" io write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(ioWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O read (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesRead + \" bytes read\", UsageTypes.VM_DISK_BYTES_READ,\n                        new Double(bytesRead), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"disk I/O write (bytes)\";\n                if ((vmDiskInfo.getVmId() != 0) && (vmDiskInfo.getVolumeId() != 0)) {\n                    usageDesc += \" for Vm: \" + vmId + \" and Volume: \" + volumeId;\n                }\n                usageRecord =\n                    new UsageVO(vmDiskInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, bytesWrite + \" bytes write\", UsageTypes.VM_DISK_BYTES_WRITE,\n                        new Double(bytesWrite), vmId, null, null, null, vmDiskInfo.getVolumeId(), startDate, endDate, \"VirtualMachine\");\n                usageRecords.add(usageRecord);\n\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No vm disk usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/VmDiskUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-09-15 10:54:34","commitOrder":3,"curCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Network usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageNetworkVO> sc = s_usageNetworkDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageNetworkVO> usageNetworkVOs = s_usageNetworkDao.search(sc, null);\n\n        Map<String, NetworkInfo> networkUsageByZone = new HashMap<String, NetworkInfo>();\n\n        \r\n        for (UsageNetworkVO usageNetwork : usageNetworkVOs) {\n            long zoneId = usageNetwork.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageNetwork.getHostId() != 0) {\n                key += \"-Host\" + usageNetwork.getHostId() + \"-Network-\" + usageNetwork.getNetworkId();\n            }\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n\n            long bytesSent = usageNetwork.getBytesSent();\n            long bytesReceived = usageNetwork.getBytesReceived();\n            if (networkInfo != null) {\n                bytesSent += networkInfo.getBytesSent();\n                bytesReceived += networkInfo.getBytesRcvd();\n            }\n\n            networkUsageByZone.put(key, new NetworkInfo(zoneId, usageNetwork.getHostId(), usageNetwork.getHostType(), usageNetwork.getNetworkId(), bytesSent,\n                bytesReceived));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : networkUsageByZone.keySet()) {\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n            long totalBytesSent = networkInfo.getBytesSent();\n            long totalBytesReceived = networkInfo.getBytesRcvd();\n\n            if ((totalBytesSent > 0L) || (totalBytesReceived > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating usage record, total bytes sent: \" + toHumanReadableSize(totalBytesSent) + \", total bytes received: \" + toHumanReadableSize(totalBytesReceived) + \" for account: \" +\n                        account.getId() + \" in availability zone \" + networkInfo.getZoneId() + \", start: \" + startDate + \", end: \" + endDate);\n                }\n\n                Long hostId = null;\n\n                \r\n                String usageDesc = \"network bytes sent\";\n                if (networkInfo.getHostId() != 0) {\n                    hostId = networkInfo.getHostId();\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                UsageVO usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesSent + \" bytes sent\",\n                        UsageTypes.NETWORK_BYTES_SENT, new Double(totalBytesSent), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate, endDate);\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"network bytes received\";\n                if (networkInfo.getHostId() != 0) {\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesReceived + \" bytes received\",\n                        UsageTypes.NETWORK_BYTES_RECEIVED, new Double(totalBytesReceived), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate,\n                        endDate);\n                usageRecords.add(usageRecord);\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","date":"2021-09-15 10:54:34","endLine":144,"groupId":"10918","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"parse","params":"(AccountVOaccount@DatestartDate@DateendDate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d8/49e6acfdcec667b9d2426ebb01ac7eec230a79.src","preCode":"    public static boolean parse(AccountVO account, Date startDate, Date endDate) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Parsing all Network usage events for account: \" + account.getId());\n        }\n\n        if ((endDate == null) || endDate.after(new Date())) {\n            endDate = new Date();\n        }\n\n        \r\n        \r\n        SearchCriteria<UsageNetworkVO> sc = s_usageNetworkDao.createSearchCriteria();\n        sc.addAnd(\"accountId\", SearchCriteria.Op.EQ, account.getId());\n        sc.addAnd(\"eventTimeMillis\", SearchCriteria.Op.BETWEEN, startDate.getTime(), endDate.getTime());\n        List<UsageNetworkVO> usageNetworkVOs = s_usageNetworkDao.search(sc, null);\n\n        Map<String, NetworkInfo> networkUsageByZone = new HashMap<String, NetworkInfo>();\n\n        \r\n        for (UsageNetworkVO usageNetwork : usageNetworkVOs) {\n            long zoneId = usageNetwork.getZoneId();\n            String key = \"\" + zoneId;\n            if (usageNetwork.getHostId() != 0) {\n                key += \"-Host\" + usageNetwork.getHostId();\n            }\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n\n            long bytesSent = usageNetwork.getBytesSent();\n            long bytesReceived = usageNetwork.getBytesReceived();\n            if (networkInfo != null) {\n                bytesSent += networkInfo.getBytesSent();\n                bytesReceived += networkInfo.getBytesRcvd();\n            }\n\n            networkUsageByZone.put(key, new NetworkInfo(zoneId, usageNetwork.getHostId(), usageNetwork.getHostType(), usageNetwork.getNetworkId(), bytesSent,\n                bytesReceived));\n        }\n\n        List<UsageVO> usageRecords = new ArrayList<UsageVO>();\n        for (String key : networkUsageByZone.keySet()) {\n            NetworkInfo networkInfo = networkUsageByZone.get(key);\n            long totalBytesSent = networkInfo.getBytesSent();\n            long totalBytesReceived = networkInfo.getBytesRcvd();\n\n            if ((totalBytesSent > 0L) || (totalBytesReceived > 0L)) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Creating usage record, total bytes sent: \" + toHumanReadableSize(totalBytesSent) + \", total bytes received: \" + toHumanReadableSize(totalBytesReceived) + \" for account: \" +\n                        account.getId() + \" in availability zone \" + networkInfo.getZoneId() + \", start: \" + startDate + \", end: \" + endDate);\n                }\n\n                Long hostId = null;\n\n                \r\n                String usageDesc = \"network bytes sent\";\n                if (networkInfo.getHostId() != 0) {\n                    hostId = networkInfo.getHostId();\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                UsageVO usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesSent + \" bytes sent\",\n                        UsageTypes.NETWORK_BYTES_SENT, new Double(totalBytesSent), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate, endDate);\n                usageRecords.add(usageRecord);\n\n                \r\n                usageDesc = \"network bytes received\";\n                if (networkInfo.getHostId() != 0) {\n                    usageDesc += \" for Host: \" + networkInfo.getHostId();\n                }\n                usageRecord =\n                    new UsageVO(networkInfo.getZoneId(), account.getId(), account.getDomainId(), usageDesc, totalBytesReceived + \" bytes received\",\n                        UsageTypes.NETWORK_BYTES_RECEIVED, new Double(totalBytesReceived), hostId, networkInfo.getHostType(), networkInfo.getNetworkId(), startDate,\n                        endDate);\n                usageRecords.add(usageRecord);\n            } else {\n                \r\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"No usage record (0 bytes used) generated for account: \" + account.getId());\n                }\n            }\n        }\n\n        s_usageDao.saveUsageRecords(usageRecords);\n\n        return true;\n    }\n","realPath":"usage/src/main/java/com/cloud/usage/parser/NetworkUsageParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"3c2360c9d28fab1f9092dd5f275231427716937d","commitMessage":"@@@VM has wrong network statistics with multiple nics in shared networks (#4741)\n\nIf vm has multiple nics belonging to different shared networks then\nwrong statistics will be collected since network id is not considred\nas primary key. Make the change so that primary key contains network\nid so that traffic belonging to that corresponding network is shown\n\nIf network id is not added to primary key then all the traffic of all\nshared networks will show up in one nic.\n\nCo-authored-by: Rakesh Venkatesh <rakeshv@apache.org>","date":"2021-09-15 10:54:34","modifiedFileCount":"3","status":"M","submitter":"Rakesh"}]
