[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public IpAddress allocateIP(Account ipOwner, long zoneId, Long networkId, Boolean displayIp) throws ResourceAllocationException, InsufficientAddressCapacityException,\n            ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        } else {\n            _accountMgr.checkAccess(caller, null, false, ipOwner);\n        }\n\n        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp);\n    }\n","date":"2018-01-20 05:49:27","endLine":555,"groupId":"16487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"allocateIP","params":"(AccountipOwner@longzoneId@LongnetworkId@BooleandisplayIp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    public IpAddress allocateIP(Account ipOwner, long zoneId, Long networkId, Boolean displayIp) throws ResourceAllocationException, InsufficientAddressCapacityException,\n            ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        } else {\n            _accountMgr.checkAccess(caller, null, false, ipOwner);\n        }\n\n        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp);\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public IpAddress allocatePortableIP(Account ipOwner, int regionId, Long zoneId, Long networkId, Long vpcId) throws ResourceAllocationException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if ((networkId == null && vpcId == null) || (networkId != null && vpcId != null)) {\n            throw new InvalidParameterValueException(\"One of Network id or VPC is should be passed\");\n        }\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, networkId, null);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        }\n\n        if (vpcId != null) {\n            Vpc vpc = _vpcDao.findById(vpcId);\n            if (vpc == null) {\n                throw new InvalidParameterValueException(\"Invalid vpc id is given\");\n            }\n        }\n\n        _accountMgr.checkAccess(caller, null, false, ipOwner);\n\n        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, null, null);\n    }\n","date":"2018-01-20 05:49:27","endLine":605,"groupId":"13545","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"allocatePortableIP","params":"(AccountipOwner@intregionId@LongzoneId@LongnetworkId@LongvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    public IpAddress allocatePortableIP(Account ipOwner, int regionId, Long zoneId, Long networkId, Long vpcId) throws ResourceAllocationException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if ((networkId == null && vpcId == null) || (networkId != null && vpcId != null)) {\n            throw new InvalidParameterValueException(\"One of Network id or VPC is should be passed\");\n        }\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, networkId, null);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        }\n\n        if (vpcId != null) {\n            Vpc vpc = _vpcDao.findById(vpcId);\n            if (vpc == null) {\n                throw new InvalidParameterValueException(\"Invalid vpc id is given\");\n            }\n        }\n\n        _accountMgr.checkAccess(caller, null, false, ipOwner);\n\n        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, null, null);\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-12-24 17:08:53","commitOrder":2,"curCode":"    public IpAddress allocateIP(Account ipOwner, long zoneId, Long networkId, Boolean displayIp, String ipaddress)\n            throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp, ipaddress);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        } else {\n            _accountMgr.checkAccess(caller, null, false, ipOwner);\n        }\n\n        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp, ipaddress);\n    }\n","date":"2019-12-24 17:08:53","endLine":559,"groupId":"101879","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"allocateIP","params":"(AccountipOwner@longzoneId@LongnetworkId@BooleandisplayIp@Stringipaddress)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1e/9eb2d325f51dc58eccd49d3f83d4ec4d24f6a6.src","preCode":"    public IpAddress allocateIP(Account ipOwner, long zoneId, Long networkId, Boolean displayIp)\n            throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {\n\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        } else {\n            _accountMgr.checkAccess(caller, null, false, ipOwner);\n        }\n\n        return _ipAddrMgr.allocateIp(ipOwner, false, caller, callerUserId, zone, displayIp);\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public IpAddress allocatePortableIP(Account ipOwner, int regionId, Long zoneId, Long networkId, Long vpcId) throws ResourceAllocationException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if ((networkId == null && vpcId == null) || (networkId != null && vpcId != null)) {\n            throw new InvalidParameterValueException(\"One of Network id or VPC is should be passed\");\n        }\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, networkId, null);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        }\n\n        if (vpcId != null) {\n            Vpc vpc = _vpcDao.findById(vpcId);\n            if (vpc == null) {\n                throw new InvalidParameterValueException(\"Invalid vpc id is given\");\n            }\n        }\n\n        _accountMgr.checkAccess(caller, null, false, ipOwner);\n\n        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, null, null);\n    }\n","date":"2018-01-20 05:49:27","endLine":605,"groupId":"101879","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"allocatePortableIP","params":"(AccountipOwner@intregionId@LongzoneId@LongnetworkId@LongvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    public IpAddress allocatePortableIP(Account ipOwner, int regionId, Long zoneId, Long networkId, Long vpcId) throws ResourceAllocationException,\n            InsufficientAddressCapacityException, ConcurrentOperationException {\n        Account caller = CallContext.current().getCallingAccount();\n        long callerUserId = CallContext.current().getCallingUserId();\n        DataCenter zone = _entityMgr.findById(DataCenter.class, zoneId);\n\n        if ((networkId == null && vpcId == null) || (networkId != null && vpcId != null)) {\n            throw new InvalidParameterValueException(\"One of Network id or VPC is should be passed\");\n        }\n\n        if (networkId != null) {\n            Network network = _networksDao.findById(networkId);\n            if (network == null) {\n                throw new InvalidParameterValueException(\"Invalid network id is given\");\n            }\n\n            if (network.getGuestType() == Network.GuestType.Shared) {\n                if (zone == null) {\n                    throw new InvalidParameterValueException(\"Invalid zone Id is given\");\n                }\n                \r\n                if (zone.getNetworkType() == NetworkType.Advanced) {\n                    if (isSharedNetworkOfferingWithServices(network.getNetworkOfferingId())) {\n                        _accountMgr.checkAccess(caller, AccessType.UseEntry, false, network);\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Associate IP address called by the user \" + callerUserId + \" account \" + ipOwner.getId());\n                        }\n                        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, networkId, null);\n                    } else {\n                        throw new InvalidParameterValueException(\"Associate IP address can only be called on the shared networks in the advanced zone\"\n                                + \" with Firewall/Source Nat/Static Nat/Port Forwarding/Load balancing services enabled\");\n                    }\n                }\n            }\n        }\n\n        if (vpcId != null) {\n            Vpc vpc = _vpcDao.findById(vpcId);\n            if (vpc == null) {\n                throw new InvalidParameterValueException(\"Invalid vpc id is given\");\n            }\n        }\n\n        _accountMgr.checkAccess(caller, null, false, ipOwner);\n\n        return _ipAddrMgr.allocatePortableIp(ipOwner, caller, zoneId, null, null);\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"N"}],"commitId":"482e7ebf9a2fed69ea7cb75dfd0fc2c5149aade5","commitMessage":"@@@New feature: Acquire specific public IP for network (#3775)\n\nCurrently in cloudstack.  when we click on \"Acquire New Ip\".  it will\nrandomly acquire IP from the pool. With this enhancement.  it is\npossible to select the IP from the drop down IP list of that network.\nSame thing applies for a VPC as well.","date":"2019-12-24 17:08:53","modifiedFileCount":"7","status":"M","submitter":"Rakesh"}]
