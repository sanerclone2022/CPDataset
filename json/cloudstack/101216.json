[{"authorTime":"2018-05-02 20:19:06","codes":[{"authorDate":"2018-05-02 20:19:06","commitOrder":1,"curCode":"    public void validateUserPasswordAndUpdateIfNeededTestRootAdminUpdatingUserPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(true).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, null);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(0)).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","date":"2018-05-02 20:19:06","endLine":583,"groupId":"25615","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateUserPasswordAndUpdateIfNeededTestRootAdminUpdatingUserPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fc/b0c57278b0deaf34b9c3cd7e3a796314e20699.src","preCode":"    public void validateUserPasswordAndUpdateIfNeededTestRootAdminUpdatingUserPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(true).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, null);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(0)).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"B"},{"authorDate":"2018-05-02 20:19:06","commitOrder":1,"curCode":"    public void validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(false).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        String currentPassword = \"theCurrentPassword\";\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, currentPassword);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(1)).validateCurrentPassword(userVoMock, currentPassword);\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","date":"2018-05-02 20:19:06","endLine":619,"groupId":"25616","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fc/b0c57278b0deaf34b9c3cd7e3a796314e20699.src","preCode":"    public void validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(false).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        String currentPassword = \"theCurrentPassword\";\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, currentPassword);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(1)).validateCurrentPassword(userVoMock, currentPassword);\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"B"}],"commitId":"3adc2b8485d8a56634a3d4c54074321431bf2fda","commitMessage":"@@@[CLOUDSTACK-5235] ask users current password when they are executing a password update (#2574)\n\n* [CLOUDSTACK-5235] Force users to enter old password when updating password\n\n* Formatting for checkstyle\n\n* Remove an unused import in AccountManagerImpl\n\n* Apply Nitin's suggestions\n\n* Change 'oldPassword' to 'currentPassword'\n\n* Second review of Resmo\n\n* Fix typos found by Nitin\n","date":"2018-05-02 20:19:06","modifiedFileCount":"11","status":"B","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-05-02 20:19:06","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void validateUserPasswordAndUpdateIfNeededTestRootAdminUpdatingUserPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(true).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.lenient().doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, null);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(0)).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","date":"2020-02-12 15:28:25","endLine":587,"groupId":"101216","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateUserPasswordAndUpdateIfNeededTestRootAdminUpdatingUserPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d8/415ff59564dce365b63290aad22adebd73ec5f.src","preCode":"    public void validateUserPasswordAndUpdateIfNeededTestRootAdminUpdatingUserPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(true).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, null);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(0)).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"},{"authorDate":"2018-05-02 20:19:06","commitOrder":2,"curCode":"    public void validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(false).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        String currentPassword = \"theCurrentPassword\";\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, currentPassword);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(1)).validateCurrentPassword(userVoMock, currentPassword);\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","date":"2018-05-02 20:19:06","endLine":619,"groupId":"101216","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fc/b0c57278b0deaf34b9c3cd7e3a796314e20699.src","preCode":"    public void validateUserPasswordAndUpdateIfNeededTestUserUpdatingHisPassword() {\n        Mockito.doReturn(accountMock).when(accountManagerImpl).getCurrentCallingAccount();\n        Mockito.doReturn(false).when(accountManagerImpl).isRootAdmin(accountMockId);\n        Mockito.doReturn(false).when(accountManagerImpl).isDomainAdmin(accountMockId);\n\n        String newPassword = \"newPassword\";\n        String expectedUserPasswordAfterEncoded = configureUserMockAuthenticators(newPassword);\n\n        Mockito.doNothing().when(accountManagerImpl).validateCurrentPassword(Mockito.eq(userVoMock), Mockito.anyString());\n\n        String currentPassword = \"theCurrentPassword\";\n        accountManagerImpl.validateUserPasswordAndUpdateIfNeeded(newPassword, userVoMock, currentPassword);\n\n        Mockito.verify(accountManagerImpl, Mockito.times(1)).validateCurrentPassword(userVoMock, currentPassword);\n        Mockito.verify(userVoMock, Mockito.times(1)).setPassword(expectedUserPasswordAfterEncoded);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
