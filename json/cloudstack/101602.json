[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!isForced && host.getResourceState() != ResourceState.Maintenance) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(\"Cannot transmit host \" + host.getId() + \" to Enabled state\", e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(\"Local storage id=\" + poolId + \" is removed as a part of host removal id=\" + hostId);\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":944,"groupId":"16586","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doDeleteHost","params":"(finallonghostId@finalbooleanisForced@finalbooleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/29/66d41d8bf8b4f6167bb53b5b267fba58a7fdbf.src","preCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!isForced && host.getResourceState() != ResourceState.Maintenance) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(\"Cannot transmit host \" + host.getId() + \" to Enabled state\", e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(\"Local storage id=\" + poolId + \" is removed as a part of host removal id=\" + hostId);\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/resource/ResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":824,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"9415","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteHost","params":"(HostVOhost@booleanisForced@booleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/adecda0dd254c79913e21e3fc00537d720799b.src","preCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkUsageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-10-28 17:28:10","commitOrder":2,"curCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!isForced && host.getResourceState() != ResourceState.Maintenance) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(\"Cannot transmit host \" + host.getId() + \" to Enabled state\", e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(\"Local storage id=\" + poolId + \" is removed as a part of host removal id=\" + hostId);\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY, Capacity.CAPACITY_TYPE_CPU_CORE};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","date":"2020-10-28 17:28:10","endLine":954,"groupId":"16586","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doDeleteHost","params":"(finallonghostId@finalbooleanisForced@finalbooleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f2/a3caa60004c23e8516ed468e0fd61ba7ec74d8.src","preCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!isForced && host.getResourceState() != ResourceState.Maintenance) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(\"Cannot transmit host \" + host.getId() + \" to Enabled state\", e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(\"Local storage id=\" + poolId + \" is removed as a part of host removal id=\" + hostId);\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/resource/ResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":835,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"9415","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteHost","params":"(HostVOhost@booleanisForced@booleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/adecda0dd254c79913e21e3fc00537d720799b.src","preCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkUsageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"c1fb6b4cb90afd0b16971b52f1d9431a68374e75","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-10-28 17:28:10","modifiedFileCount":"2","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-07-14 04:35:59","commitOrder":3,"curCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!isForced && host.getResourceState() != ResourceState.Maintenance) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                Host hostRemoved = _hostDao.findById(hostId);\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(String.format(\"Cannot transit %s to Enabled state\", host), e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(String.format(\"Local storage [id: %s] is removed as a part of %s removal\", poolId, hostRemoved.toString()));\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY, Capacity.CAPACITY_TYPE_CPU_CORE};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","date":"2021-07-14 04:35:59","endLine":974,"groupId":"18092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doDeleteHost","params":"(finallonghostId@finalbooleanisForced@finalbooleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/48/8be99e32dacf52bb331777462659a3411cd761.src","preCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!isForced && host.getResourceState() != ResourceState.Maintenance) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(\"Cannot transmit host \" + host.getId() + \" to Enabled state\", e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(\"Local storage id=\" + poolId + \" is removed as a part of host removal id=\" + hostId);\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY, Capacity.CAPACITY_TYPE_CPU_CORE};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/resource/ResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":854,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"9415","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteHost","params":"(HostVOhost@booleanisForced@booleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/adecda0dd254c79913e21e3fc00537d720799b.src","preCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkUsageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"ca78f5b38687bee264d9df2212e8ae4d0cac9a4c","commitMessage":"@@@Enhance log messages with host name (#4575)\n\n* Enhance log messages with hostName\n\n* Use host.toString() on most of host logs.\n\n* Remove redundant \"Host\" in logs and enhance logs\n\n* duplicated \"for\"\n\n* Adopt String.format.  and enhance code\n\n* Address reviews enhancing log messages\n\nUpdate server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n    -- server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n    -- server/src/main/java/com/cloud/resource/RollingMaintenanceManagerImpl.java\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <38945620+GutoVeronezi@users.noreply.github.com>\n\n* Fix String.format issue and change log message from debug to warn\n\n* Fix checkstyle issue\n\n* Fix string.format log\n\n* Address review: enhance logs\n\n* Enhance log of hosts in maintenance avoid list\n\n* Remove \"VM\" on logs as vm.toString() already appends VM-<details>\n\n* Add more details of the VM when postStateTransitionEvent\n\n* Address reviewer and enhance VMInstanceVO.toString()\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <38945620+GutoVeronezi@users.noreply.github.com>","date":"2021-07-14 04:35:59","modifiedFileCount":"11","status":"M","submitter":"Gabriel Beims Br?scher"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-08-09 03:38:06","commitOrder":4,"curCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!canDeleteHost(host) && !isForced) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                Host hostRemoved = _hostDao.findById(hostId);\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(String.format(\"Cannot transit %s to Enabled state\", host), e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(String.format(\"Local storage [id: %s] is removed as a part of %s removal\", poolId, hostRemoved.toString()));\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY, Capacity.CAPACITY_TYPE_CPU_CORE};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","date":"2021-08-09 03:38:06","endLine":977,"groupId":"18092","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doDeleteHost","params":"(finallonghostId@finalbooleanisForced@finalbooleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ad/0190ffbad839b11690cf16f029ff26fb57eab5.src","preCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!isForced && host.getResourceState() != ResourceState.Maintenance) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                Host hostRemoved = _hostDao.findById(hostId);\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(String.format(\"Cannot transit %s to Enabled state\", host), e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(String.format(\"Local storage [id: %s] is removed as a part of %s removal\", poolId, hostRemoved.toString()));\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY, Capacity.CAPACITY_TYPE_CPU_CORE};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/resource/ResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"9415","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteHost","params":"(HostVOhost@booleanisForced@booleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/adecda0dd254c79913e21e3fc00537d720799b.src","preCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkUsageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"43c8da2d0e8466a45b9de31221c17748003d6a0c","commitMessage":"@@@API-call to declare host as Degraded (#4111)\n\n* Declare host as dead\n\n* Enhance DeclareHostAsDeadCmd and add CancelHostAsDeadCmd\n\n* Stop VMs on Dead Host\n- Enhance code\n\n* Add \"since\" on API.  enhance description; change API cmds response handling\n\n* Replace the ResourceState and command names from 'Dead' to 'Degraded'\n\n* Replace missing 'Dead' word to 'Degraded'\n\n* Update API version for 4.16.0.0","date":"2021-08-09 03:38:06","modifiedFileCount":"9","status":"M","submitter":"Gabriel Beims Br?scher"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":5,"curCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!canDeleteHost(host) && !isForced) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                Host hostRemoved = _hostDao.findById(hostId);\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(String.format(\"Cannot transit %s to Enabled state\", host), e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(String.format(\"Local storage [id: %s] is removed as a part of %s removal\", poolId, hostRemoved.toString()));\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY, Capacity.CAPACITY_TYPE_CPU_CORE};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n\n                \r\n                annotationDao.removeByEntityType(AnnotationService.EntityType.HOST.name(), host.getUuid());\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","date":"2021-09-08 12:44:06","endLine":994,"groupId":"101602","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doDeleteHost","params":"(finallonghostId@finalbooleanisForced@finalbooleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/82/f0c8141ace87569bc45120c5bd2dc9eddb66cf.src","preCode":"    protected boolean doDeleteHost(final long hostId, final boolean isForced, final boolean isForceDeleteStorage) {\n        _accountMgr.getActiveUser(CallContext.current().getCallingUserId());\n        \r\n        final HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), host.getDataCenterId());\n\n        if (!canDeleteHost(host) && !isForced) {\n            throw new CloudRuntimeException(\"Host \" + host.getUuid() +\n                    \" cannot be deleted as it is not in maintenance mode. Either put the host into maintenance or perform a forced deletion.\");\n        }\n        \r\n        \r\n        final List<StoragePoolHostVO> pools = _storagePoolHostDao.listByHostIdIncludingRemoved(hostId);\n\n        final ResourceStateAdapter.DeleteHostAnswer answer =\n                (ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST, false, host, isForced,\n                        isForceDeleteStorage);\n\n        if (answer == null) {\n            throw new CloudRuntimeException(\"No resource adapter respond to DELETE_HOST event for \" + host.getName() + \" id = \" + hostId + \", hypervisorType is \" +\n                    host.getHypervisorType() + \", host type is \" + host.getType());\n        }\n\n        if (answer.getIsException()) {\n            return false;\n        }\n\n        if (!answer.getIsContinue()) {\n            return true;\n        }\n\n        Long clusterId = host.getClusterId();\n\n        _agentMgr.notifyMonitorsOfHostAboutToBeRemoved(host.getId());\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(final TransactionStatus status) {\n                _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(), host.getDataCenterId(), null);\n                _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n\n                \r\n                _hostDetailsDao.deleteDetails(hostId);\n\n                \r\n                _hostGpuGroupsDao.deleteGpuEntries(hostId);\n\n                \r\n                _hostTagsDao.deleteTags(hostId);\n\n                host.setGuid(null);\n                final Long clusterId = host.getClusterId();\n                host.setClusterId(null);\n                _hostDao.update(host.getId(), host);\n\n                Host hostRemoved = _hostDao.findById(hostId);\n                _hostDao.remove(hostId);\n                if (clusterId != null) {\n                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);\n                    if (hosts.size() == 0) {\n                        final ClusterVO cluster = _clusterDao.findById(clusterId);\n                        cluster.setGuid(null);\n                        _clusterDao.update(clusterId, cluster);\n                    }\n                }\n\n                try {\n                    resourceStateTransitTo(host, ResourceState.Event.DeleteHost, _nodeId);\n                } catch (final NoTransitionException e) {\n                    s_logger.debug(String.format(\"Cannot transit %s to Enabled state\", host), e);\n                }\n\n                \r\n                _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);\n\n                \r\n                final List<VMInstanceVO> vms = _vmDao.listByHostId(hostId);\n                for (final VMInstanceVO vm : vms) {\n                    \r\n                    vm.setState(State.Stopped);\n                    vm.setHostId(null);\n                    _vmDao.persist(vm);\n                }\n\n                \r\n                \r\n                for (final StoragePoolHostVO pool : pools) {\n                    final Long poolId = pool.getPoolId();\n                    final StoragePoolVO storagePool = _storagePoolDao.findById(poolId);\n                    if (storagePool.isLocal() && isForceDeleteStorage) {\n                        storagePool.setUuid(null);\n                        storagePool.setClusterId(null);\n                        _storagePoolDao.update(poolId, storagePool);\n                        _storagePoolDao.remove(poolId);\n                        s_logger.debug(String.format(\"Local storage [id: %s] is removed as a part of %s removal\", poolId, hostRemoved.toString()));\n                    }\n                }\n\n                \r\n                final Object[] capacityTypes = {Capacity.CAPACITY_TYPE_CPU, Capacity.CAPACITY_TYPE_MEMORY, Capacity.CAPACITY_TYPE_CPU_CORE};\n                final SearchCriteria<CapacityVO> hostCapacitySC = _capacityDao.createSearchCriteria();\n                hostCapacitySC.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, hostId);\n                hostCapacitySC.addAnd(\"capacityType\", SearchCriteria.Op.IN, capacityTypes);\n                _capacityDao.remove(hostCapacitySC);\n                \r\n                final DedicatedResourceVO dr = _dedicatedDao.findByHostId(hostId);\n                if (dr != null) {\n                    _dedicatedDao.remove(dr.getId());\n                }\n            }\n        });\n\n        if (clusterId != null) {\n            _agentMgr.notifyMonitorsOfRemovedHost(host.getId(), clusterId);\n        }\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/resource/ResourceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","date":"2018-01-20 05:49:27","endLine":559,"groupId":"101602","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteHost","params":"(HostVOhost@booleanisForced@booleanisForceDeleteStorage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/adecda0dd254c79913e21e3fc00537d720799b.src","preCode":"    public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage) throws UnableDeleteHostException {\n        if (host.getType() != Host.Type.TrafficMonitor) {\n            return null;\n        }\n\n        long hostId = host.getId();\n        _agentMgr.disconnectWithoutInvestigation(hostId, Status.Event.Remove);\n        _detailsDao.deleteDetails(hostId);\n        _hostGpuGroupsDao.deleteGpuEntries(hostId);\n        host.setGuid(null);\n        _hostDao.update(hostId, host);\n        _hostDao.remove(hostId);\n        return new DeleteHostAnswer(false);\n\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkUsageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"}]
