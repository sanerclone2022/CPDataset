[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)\n        throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        final DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            s_logger.debug(\"Not handling network implement in zone of type \" + NetworkType.Basic);\n            return false;\n        }\n\n        if (!canHandle(network)) {\n            return false;\n        }\n\n        final List<CiscoVnmcControllerVO> devices = _ciscoVnmcDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        List<CiscoAsa1000vDeviceVO> asaList = _ciscoAsa1000vDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (asaList.isEmpty()) {\n            s_logger.debug(\"No Cisco ASA 1000v device on network \" + network.getName());\n            return false;\n        }\n\n        NetworkAsa1000vMapVO asaForNetwork = _networkAsa1000vMapDao.findByNetworkId(network.getId());\n        if (asaForNetwork != null) {\n            s_logger.debug(\"Cisco ASA 1000v device already associated with network \" + network.getName());\n            return true;\n        }\n\n        if (!_networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.CiscoVnmc)) {\n            s_logger.error(\"SourceNat service is not provided by Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        try {\n            \r\n            CiscoAsa1000vDevice assignedAsa = assignAsa1000vToNetwork(network);\n            if (assignedAsa == null) {\n                s_logger.error(\"Unable to assign ASA 1000v device to network \" + network.getName());\n                throw new CloudRuntimeException(\"Unable to assign ASA 1000v device to network \" + network.getName());\n            }\n\n            ClusterVO asaCluster = _clusterDao.findById(assignedAsa.getClusterId());\n            ClusterVSMMapVO clusterVsmMap = _clusterVsmMapDao.findByClusterId(assignedAsa.getClusterId());\n            if (clusterVsmMap == null) {\n                s_logger.error(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n                throw new CloudRuntimeException(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n            }\n\n            CiscoNexusVSMDeviceVO vsmDevice = _vsmDeviceDao.findById(clusterVsmMap.getVsmId());\n            if (vsmDevice == null) {\n                s_logger.error(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n                throw new CloudRuntimeException(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n            }\n\n            CiscoVnmcControllerVO ciscoVnmcDevice = devices.get(0);\n            HostVO ciscoVnmcHost = _hostDao.findById(ciscoVnmcDevice.getHostId());\n            _hostDao.loadDetails(ciscoVnmcHost);\n            Account owner = context.getAccount();\n            PublicIp sourceNatIp = _ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            long vlanId = Long.parseLong(BroadcastDomainType.getValue(network.getBroadcastUri()));\n\n            List<VlanVO> vlanVOList = _vlanDao.listVlansByPhysicalNetworkId(network.getPhysicalNetworkId());\n            List<String> publicGateways = new ArrayList<String>();\n            for (VlanVO vlanVO : vlanVOList) {\n                publicGateways.add(vlanVO.getVlanGateway());\n            }\n\n            \r\n            \r\n            \r\n            \r\n            IpAddress outsideIp = null;\n            List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(network.getId(), null);\n            for (IPAddressVO ip : publicIps) {\n                if (!ip.isSourceNat()) {\n                    outsideIp = ip;\n                    break;\n                }\n            }\n            if (outsideIp == null) { \r\n                try {\n                    Account caller = CallContext.current().getCallingAccount();\n                    long callerUserId = CallContext.current().getCallingUserId();\n                    outsideIp = _ipAddrMgr.allocateIp(owner, false, caller, callerUserId, zone, true);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                }\n\n                try {\n                    outsideIp = _ipAddrMgr.associateIPToGuestNetwork(outsideIp.getId(), network.getId(), true);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" + vlanId +\n                        \". Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" +\n                        vlanId + \". Exception details \" + e);\n                }\n            }\n\n            \r\n            String gatewayNetmask = NetUtils.getCidrNetmask(network.getCidr());\n            \r\n            \r\n            if (!createLogicalEdgeFirewall(vlanId, network.getGateway(), gatewayNetmask, outsideIp.getAddress().addr(), sourceNatIp.getNetmask(), publicGateways,\n                ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureNexusVsmForAsa(vlanId, network.getGateway(), vsmDevice.getUserName(), vsmDevice.getPassword(), vsmDevice.getipaddr(),\n                assignedAsa.getInPortProfile(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureSourceNat(vlanId, network.getCidr(), sourceNatIp, ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!associateAsaWithLogicalEdgeFirewall(vlanId, assignedAsa.getManagementIp(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() + \") with logical edge firewall in VNMC for network \" +\n                    network.getName());\n                throw new CloudRuntimeException(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() +\n                    \") with logical edge firewall in VNMC for network \" + network.getName());\n            }\n        } catch (CloudRuntimeException e) {\n            unassignAsa1000vFromNetwork(network);\n            s_logger.error(\"CiscoVnmcElement failed\", e);\n            return false;\n        } catch (Exception e) {\n            unassignAsa1000vFromNetwork(network);\n            ExceptionUtil.rethrowRuntime(e);\n            ExceptionUtil.rethrow(e, InsufficientAddressCapacityException.class);\n            ExceptionUtil.rethrow(e, ResourceUnavailableException.class);\n            throw new IllegalStateException(e);\n        }\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"23545","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"implement","params":"(finalNetworknetwork@finalNetworkOfferingoffering@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/23/c9c29b4b3ee902c77531262419c0acf6fdf505.src","preCode":"    public boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)\n        throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        final DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            s_logger.debug(\"Not handling network implement in zone of type \" + NetworkType.Basic);\n            return false;\n        }\n\n        if (!canHandle(network)) {\n            return false;\n        }\n\n        final List<CiscoVnmcControllerVO> devices = _ciscoVnmcDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        List<CiscoAsa1000vDeviceVO> asaList = _ciscoAsa1000vDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (asaList.isEmpty()) {\n            s_logger.debug(\"No Cisco ASA 1000v device on network \" + network.getName());\n            return false;\n        }\n\n        NetworkAsa1000vMapVO asaForNetwork = _networkAsa1000vMapDao.findByNetworkId(network.getId());\n        if (asaForNetwork != null) {\n            s_logger.debug(\"Cisco ASA 1000v device already associated with network \" + network.getName());\n            return true;\n        }\n\n        if (!_networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.CiscoVnmc)) {\n            s_logger.error(\"SourceNat service is not provided by Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        try {\n            \r\n            CiscoAsa1000vDevice assignedAsa = assignAsa1000vToNetwork(network);\n            if (assignedAsa == null) {\n                s_logger.error(\"Unable to assign ASA 1000v device to network \" + network.getName());\n                throw new CloudRuntimeException(\"Unable to assign ASA 1000v device to network \" + network.getName());\n            }\n\n            ClusterVO asaCluster = _clusterDao.findById(assignedAsa.getClusterId());\n            ClusterVSMMapVO clusterVsmMap = _clusterVsmMapDao.findByClusterId(assignedAsa.getClusterId());\n            if (clusterVsmMap == null) {\n                s_logger.error(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n                throw new CloudRuntimeException(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n            }\n\n            CiscoNexusVSMDeviceVO vsmDevice = _vsmDeviceDao.findById(clusterVsmMap.getVsmId());\n            if (vsmDevice == null) {\n                s_logger.error(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n                throw new CloudRuntimeException(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n            }\n\n            CiscoVnmcControllerVO ciscoVnmcDevice = devices.get(0);\n            HostVO ciscoVnmcHost = _hostDao.findById(ciscoVnmcDevice.getHostId());\n            _hostDao.loadDetails(ciscoVnmcHost);\n            Account owner = context.getAccount();\n            PublicIp sourceNatIp = _ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            long vlanId = Long.parseLong(BroadcastDomainType.getValue(network.getBroadcastUri()));\n\n            List<VlanVO> vlanVOList = _vlanDao.listVlansByPhysicalNetworkId(network.getPhysicalNetworkId());\n            List<String> publicGateways = new ArrayList<String>();\n            for (VlanVO vlanVO : vlanVOList) {\n                publicGateways.add(vlanVO.getVlanGateway());\n            }\n\n            \r\n            \r\n            \r\n            \r\n            IpAddress outsideIp = null;\n            List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(network.getId(), null);\n            for (IPAddressVO ip : publicIps) {\n                if (!ip.isSourceNat()) {\n                    outsideIp = ip;\n                    break;\n                }\n            }\n            if (outsideIp == null) { \r\n                try {\n                    Account caller = CallContext.current().getCallingAccount();\n                    long callerUserId = CallContext.current().getCallingUserId();\n                    outsideIp = _ipAddrMgr.allocateIp(owner, false, caller, callerUserId, zone, true);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                }\n\n                try {\n                    outsideIp = _ipAddrMgr.associateIPToGuestNetwork(outsideIp.getId(), network.getId(), true);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" + vlanId +\n                        \". Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" +\n                        vlanId + \". Exception details \" + e);\n                }\n            }\n\n            \r\n            String gatewayNetmask = NetUtils.getCidrNetmask(network.getCidr());\n            \r\n            \r\n            if (!createLogicalEdgeFirewall(vlanId, network.getGateway(), gatewayNetmask, outsideIp.getAddress().addr(), sourceNatIp.getNetmask(), publicGateways,\n                ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureNexusVsmForAsa(vlanId, network.getGateway(), vsmDevice.getUserName(), vsmDevice.getPassword(), vsmDevice.getipaddr(),\n                assignedAsa.getInPortProfile(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureSourceNat(vlanId, network.getCidr(), sourceNatIp, ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!associateAsaWithLogicalEdgeFirewall(vlanId, assignedAsa.getManagementIp(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() + \") with logical edge firewall in VNMC for network \" +\n                    network.getName());\n                throw new CloudRuntimeException(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() +\n                    \") with logical edge firewall in VNMC for network \" + network.getName());\n            }\n        } catch (CloudRuntimeException e) {\n            unassignAsa1000vFromNetwork(network);\n            s_logger.error(\"CiscoVnmcElement failed\", e);\n            return false;\n        } catch (Exception e) {\n            unassignAsa1000vFromNetwork(network);\n            ExceptionUtil.rethrowRuntime(e);\n            ExceptionUtil.rethrow(e, InsufficientAddressCapacityException.class);\n            ExceptionUtil.rethrow(e, ResourceUnavailableException.class);\n            throw new IllegalStateException(e);\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/cisco-vnmc/src/main/java/com/cloud/network/element/CiscoVnmcElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public IpDeployer getIpDeployer(Network network) {\n        ExternalLoadBalancerDeviceVO lbDevice = getExternalLoadBalancerForNetwork(network);\n        if (lbDevice == null) {\n            s_logger.error(\"Cannot find external load balanacer for network \" + network.getName());\n            s_logger.error(\"Make F5 as dummy ip deployer, since we likely met this when clean up resource after shutdown network\");\n            return this;\n        }\n        if (_networkManager.isNetworkInlineMode(network)) {\n            return getIpDeployerForInlineMode(network);\n        }\n        return this;\n    }\n","date":"2018-01-20 05:49:27","endLine":526,"groupId":"141","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"getIpDeployer","params":"(Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/54d954b8dbba036ba8f2033eb73c62a21ffee6.src","preCode":"    public IpDeployer getIpDeployer(Network network) {\n        ExternalLoadBalancerDeviceVO lbDevice = getExternalLoadBalancerForNetwork(network);\n        if (lbDevice == null) {\n            s_logger.error(\"Cannot find external load balanacer for network \" + network.getName());\n            s_logger.error(\"Make F5 as dummy ip deployer, since we likely met this when clean up resource after shutdown network\");\n            return this;\n        }\n        if (_networkManager.isNetworkInlineMode(network)) {\n            return getIpDeployerForInlineMode(network);\n        }\n        return this;\n    }\n","realPath":"plugins/network-elements/f5/src/main/java/com/cloud/network/element/F5ExternalLoadBalancerElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-12-24 17:08:53","commitOrder":2,"curCode":"    public boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)\n        throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        final DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            s_logger.debug(\"Not handling network implement in zone of type \" + NetworkType.Basic);\n            return false;\n        }\n\n        if (!canHandle(network)) {\n            return false;\n        }\n\n        final List<CiscoVnmcControllerVO> devices = _ciscoVnmcDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        List<CiscoAsa1000vDeviceVO> asaList = _ciscoAsa1000vDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (asaList.isEmpty()) {\n            s_logger.debug(\"No Cisco ASA 1000v device on network \" + network.getName());\n            return false;\n        }\n\n        NetworkAsa1000vMapVO asaForNetwork = _networkAsa1000vMapDao.findByNetworkId(network.getId());\n        if (asaForNetwork != null) {\n            s_logger.debug(\"Cisco ASA 1000v device already associated with network \" + network.getName());\n            return true;\n        }\n\n        if (!_networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.CiscoVnmc)) {\n            s_logger.error(\"SourceNat service is not provided by Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        try {\n            \r\n            CiscoAsa1000vDevice assignedAsa = assignAsa1000vToNetwork(network);\n            if (assignedAsa == null) {\n                s_logger.error(\"Unable to assign ASA 1000v device to network \" + network.getName());\n                throw new CloudRuntimeException(\"Unable to assign ASA 1000v device to network \" + network.getName());\n            }\n\n            ClusterVO asaCluster = _clusterDao.findById(assignedAsa.getClusterId());\n            ClusterVSMMapVO clusterVsmMap = _clusterVsmMapDao.findByClusterId(assignedAsa.getClusterId());\n            if (clusterVsmMap == null) {\n                s_logger.error(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n                throw new CloudRuntimeException(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n            }\n\n            CiscoNexusVSMDeviceVO vsmDevice = _vsmDeviceDao.findById(clusterVsmMap.getVsmId());\n            if (vsmDevice == null) {\n                s_logger.error(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n                throw new CloudRuntimeException(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n            }\n\n            CiscoVnmcControllerVO ciscoVnmcDevice = devices.get(0);\n            HostVO ciscoVnmcHost = _hostDao.findById(ciscoVnmcDevice.getHostId());\n            _hostDao.loadDetails(ciscoVnmcHost);\n            Account owner = context.getAccount();\n            PublicIp sourceNatIp = _ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            long vlanId = Long.parseLong(BroadcastDomainType.getValue(network.getBroadcastUri()));\n\n            List<VlanVO> vlanVOList = _vlanDao.listVlansByPhysicalNetworkId(network.getPhysicalNetworkId());\n            List<String> publicGateways = new ArrayList<String>();\n            for (VlanVO vlanVO : vlanVOList) {\n                publicGateways.add(vlanVO.getVlanGateway());\n            }\n\n            \r\n            \r\n            \r\n            \r\n            IpAddress outsideIp = null;\n            List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(network.getId(), null);\n            for (IPAddressVO ip : publicIps) {\n                if (!ip.isSourceNat()) {\n                    outsideIp = ip;\n                    break;\n                }\n            }\n            if (outsideIp == null) { \r\n                try {\n                    Account caller = CallContext.current().getCallingAccount();\n                    long callerUserId = CallContext.current().getCallingUserId();\n                    outsideIp = _ipAddrMgr.allocateIp(owner, false, caller, callerUserId, zone, true, null);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                }\n\n                try {\n                    outsideIp = _ipAddrMgr.associateIPToGuestNetwork(outsideIp.getId(), network.getId(), true);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" + vlanId +\n                        \". Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" +\n                        vlanId + \". Exception details \" + e);\n                }\n            }\n\n            \r\n            String gatewayNetmask = NetUtils.getCidrNetmask(network.getCidr());\n            \r\n            \r\n            if (!createLogicalEdgeFirewall(vlanId, network.getGateway(), gatewayNetmask, outsideIp.getAddress().addr(), sourceNatIp.getNetmask(), publicGateways,\n                ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureNexusVsmForAsa(vlanId, network.getGateway(), vsmDevice.getUserName(), vsmDevice.getPassword(), vsmDevice.getipaddr(),\n                assignedAsa.getInPortProfile(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureSourceNat(vlanId, network.getCidr(), sourceNatIp, ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!associateAsaWithLogicalEdgeFirewall(vlanId, assignedAsa.getManagementIp(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() + \") with logical edge firewall in VNMC for network \" +\n                    network.getName());\n                throw new CloudRuntimeException(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() +\n                    \") with logical edge firewall in VNMC for network \" + network.getName());\n            }\n        } catch (CloudRuntimeException e) {\n            unassignAsa1000vFromNetwork(network);\n            s_logger.error(\"CiscoVnmcElement failed\", e);\n            return false;\n        } catch (Exception e) {\n            unassignAsa1000vFromNetwork(network);\n            ExceptionUtil.rethrowRuntime(e);\n            ExceptionUtil.rethrow(e, InsufficientAddressCapacityException.class);\n            ExceptionUtil.rethrow(e, ResourceUnavailableException.class);\n            throw new IllegalStateException(e);\n        }\n\n        return true;\n    }\n","date":"2019-12-24 17:08:53","endLine":415,"groupId":"103935","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"implement","params":"(finalNetworknetwork@finalNetworkOfferingoffering@finalDeployDestinationdest@finalReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ed/650022d0cd16574621fd5636491c96cfb82427.src","preCode":"    public boolean implement(final Network network, final NetworkOffering offering, final DeployDestination dest, final ReservationContext context)\n        throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        final DataCenter zone = _entityMgr.findById(DataCenter.class, network.getDataCenterId());\n\n        if (zone.getNetworkType() == NetworkType.Basic) {\n            s_logger.debug(\"Not handling network implement in zone of type \" + NetworkType.Basic);\n            return false;\n        }\n\n        if (!canHandle(network)) {\n            return false;\n        }\n\n        final List<CiscoVnmcControllerVO> devices = _ciscoVnmcDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        List<CiscoAsa1000vDeviceVO> asaList = _ciscoAsa1000vDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (asaList.isEmpty()) {\n            s_logger.debug(\"No Cisco ASA 1000v device on network \" + network.getName());\n            return false;\n        }\n\n        NetworkAsa1000vMapVO asaForNetwork = _networkAsa1000vMapDao.findByNetworkId(network.getId());\n        if (asaForNetwork != null) {\n            s_logger.debug(\"Cisco ASA 1000v device already associated with network \" + network.getName());\n            return true;\n        }\n\n        if (!_networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.CiscoVnmc)) {\n            s_logger.error(\"SourceNat service is not provided by Cisco Vnmc device on network \" + network.getName());\n            return false;\n        }\n\n        try {\n            \r\n            CiscoAsa1000vDevice assignedAsa = assignAsa1000vToNetwork(network);\n            if (assignedAsa == null) {\n                s_logger.error(\"Unable to assign ASA 1000v device to network \" + network.getName());\n                throw new CloudRuntimeException(\"Unable to assign ASA 1000v device to network \" + network.getName());\n            }\n\n            ClusterVO asaCluster = _clusterDao.findById(assignedAsa.getClusterId());\n            ClusterVSMMapVO clusterVsmMap = _clusterVsmMapDao.findByClusterId(assignedAsa.getClusterId());\n            if (clusterVsmMap == null) {\n                s_logger.error(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n                throw new CloudRuntimeException(\"Vmware cluster \" + asaCluster.getName() + \" has no Cisco Nexus VSM device associated with it\");\n            }\n\n            CiscoNexusVSMDeviceVO vsmDevice = _vsmDeviceDao.findById(clusterVsmMap.getVsmId());\n            if (vsmDevice == null) {\n                s_logger.error(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n                throw new CloudRuntimeException(\"Unable to load details of Cisco Nexus VSM device associated with cluster \" + asaCluster.getName());\n            }\n\n            CiscoVnmcControllerVO ciscoVnmcDevice = devices.get(0);\n            HostVO ciscoVnmcHost = _hostDao.findById(ciscoVnmcDevice.getHostId());\n            _hostDao.loadDetails(ciscoVnmcHost);\n            Account owner = context.getAccount();\n            PublicIp sourceNatIp = _ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            long vlanId = Long.parseLong(BroadcastDomainType.getValue(network.getBroadcastUri()));\n\n            List<VlanVO> vlanVOList = _vlanDao.listVlansByPhysicalNetworkId(network.getPhysicalNetworkId());\n            List<String> publicGateways = new ArrayList<String>();\n            for (VlanVO vlanVO : vlanVOList) {\n                publicGateways.add(vlanVO.getVlanGateway());\n            }\n\n            \r\n            \r\n            \r\n            \r\n            IpAddress outsideIp = null;\n            List<IPAddressVO> publicIps = _ipAddressDao.listByAssociatedNetwork(network.getId(), null);\n            for (IPAddressVO ip : publicIps) {\n                if (!ip.isSourceNat()) {\n                    outsideIp = ip;\n                    break;\n                }\n            }\n            if (outsideIp == null) { \r\n                try {\n                    Account caller = CallContext.current().getCallingAccount();\n                    long callerUserId = CallContext.current().getCallingUserId();\n                    outsideIp = _ipAddrMgr.allocateIp(owner, false, caller, callerUserId, zone, true);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to allocate additional public Ip address. Exception details \" + e);\n                }\n\n                try {\n                    outsideIp = _ipAddrMgr.associateIPToGuestNetwork(outsideIp.getId(), network.getId(), true);\n                } catch (ResourceAllocationException e) {\n                    s_logger.error(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" + vlanId +\n                        \". Exception details \" + e);\n                    throw new CloudRuntimeException(\"Unable to assign allocated additional public Ip \" + outsideIp.getAddress().addr() + \" to network with vlan \" +\n                        vlanId + \". Exception details \" + e);\n                }\n            }\n\n            \r\n            String gatewayNetmask = NetUtils.getCidrNetmask(network.getCidr());\n            \r\n            \r\n            if (!createLogicalEdgeFirewall(vlanId, network.getGateway(), gatewayNetmask, outsideIp.getAddress().addr(), sourceNatIp.getNetmask(), publicGateways,\n                ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to create logical edge firewall in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureNexusVsmForAsa(vlanId, network.getGateway(), vsmDevice.getUserName(), vsmDevice.getPassword(), vsmDevice.getipaddr(),\n                assignedAsa.getInPortProfile(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure Cisco Nexus VSM \" + vsmDevice.getipaddr() + \" for ASA device for network \" + network.getName());\n            }\n\n            \r\n            if (!configureSourceNat(vlanId, network.getCidr(), sourceNatIp, ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n                throw new CloudRuntimeException(\"Failed to configure source NAT in Cisco VNMC device for network \" + network.getName());\n            }\n\n            \r\n            if (!associateAsaWithLogicalEdgeFirewall(vlanId, assignedAsa.getManagementIp(), ciscoVnmcHost.getId())) {\n                s_logger.error(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() + \") with logical edge firewall in VNMC for network \" +\n                    network.getName());\n                throw new CloudRuntimeException(\"Failed to associate Cisco ASA 1000v (\" + assignedAsa.getManagementIp() +\n                    \") with logical edge firewall in VNMC for network \" + network.getName());\n            }\n        } catch (CloudRuntimeException e) {\n            unassignAsa1000vFromNetwork(network);\n            s_logger.error(\"CiscoVnmcElement failed\", e);\n            return false;\n        } catch (Exception e) {\n            unassignAsa1000vFromNetwork(network);\n            ExceptionUtil.rethrowRuntime(e);\n            ExceptionUtil.rethrow(e, InsufficientAddressCapacityException.class);\n            ExceptionUtil.rethrow(e, ResourceUnavailableException.class);\n            throw new IllegalStateException(e);\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/cisco-vnmc/src/main/java/com/cloud/network/element/CiscoVnmcElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public IpDeployer getIpDeployer(Network network) {\n        ExternalLoadBalancerDeviceVO lbDevice = getExternalLoadBalancerForNetwork(network);\n        if (lbDevice == null) {\n            s_logger.error(\"Cannot find external load balanacer for network \" + network.getName());\n            s_logger.error(\"Make F5 as dummy ip deployer, since we likely met this when clean up resource after shutdown network\");\n            return this;\n        }\n        if (_networkManager.isNetworkInlineMode(network)) {\n            return getIpDeployerForInlineMode(network);\n        }\n        return this;\n    }\n","date":"2018-01-20 05:49:27","endLine":526,"groupId":"103935","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getIpDeployer","params":"(Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/54d954b8dbba036ba8f2033eb73c62a21ffee6.src","preCode":"    public IpDeployer getIpDeployer(Network network) {\n        ExternalLoadBalancerDeviceVO lbDevice = getExternalLoadBalancerForNetwork(network);\n        if (lbDevice == null) {\n            s_logger.error(\"Cannot find external load balanacer for network \" + network.getName());\n            s_logger.error(\"Make F5 as dummy ip deployer, since we likely met this when clean up resource after shutdown network\");\n            return this;\n        }\n        if (_networkManager.isNetworkInlineMode(network)) {\n            return getIpDeployerForInlineMode(network);\n        }\n        return this;\n    }\n","realPath":"plugins/network-elements/f5/src/main/java/com/cloud/network/element/F5ExternalLoadBalancerElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"N"}],"commitId":"482e7ebf9a2fed69ea7cb75dfd0fc2c5149aade5","commitMessage":"@@@New feature: Acquire specific public IP for network (#3775)\n\nCurrently in cloudstack.  when we click on \"Acquire New Ip\".  it will\nrandomly acquire IP from the pool. With this enhancement.  it is\npossible to select the IP from the drop down IP list of that network.\nSame thing applies for a VPC as well.","date":"2019-12-24 17:08:53","modifiedFileCount":"7","status":"M","submitter":"Rakesh"}]
