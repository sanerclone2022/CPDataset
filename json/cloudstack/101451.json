[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        VpcOfferingResponse response = new VpcOfferingResponse();\n        response.setId(offering.getUuid());\n        response.setName(offering.getName());\n        response.setDisplayText(offering.getDisplayText());\n        response.setIsDefault(offering.isDefault());\n        response.setState(offering.getState().name());\n        response.setSupportsDistributedRouter(offering.supportsDistributedRouter());\n        response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        response.setObjectName(\"vpcoffering\");\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":2849,"groupId":"2819","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createVpcOfferingResponse","params":"(VpcOfferingoffering)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        VpcOfferingResponse response = new VpcOfferingResponse();\n        response.setId(offering.getUuid());\n        response.setName(offering.getName());\n        response.setDisplayText(offering.getDisplayText());\n        response.setIsDefault(offering.isDefault());\n        response.setState(offering.getState().name());\n        response.setSupportsDistributedRouter(offering.supportsDistributedRouter());\n        response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        response.setObjectName(\"vpcoffering\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2812,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":2921,"groupId":"20695","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcResponse","params":"(ResponseViewview@Vpcvpc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2852,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":2,"curCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        if (!(offering instanceof VpcOfferingJoinVO)) {\n            offering = ApiDBUtils.newVpcOfferingView(offering);\n        }\n        VpcOfferingResponse response = ApiDBUtils.newVpcOfferingResponse(offering);\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        return response;\n    }\n","date":"2019-07-16 17:25:35","endLine":2855,"groupId":"2819","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createVpcOfferingResponse","params":"(VpcOfferingoffering)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/52/4e109a2b12fd288af189282ca89599fb3b3a80.src","preCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        VpcOfferingResponse response = new VpcOfferingResponse();\n        response.setId(offering.getUuid());\n        response.setName(offering.getName());\n        response.setDisplayText(offering.getDisplayText());\n        response.setIsDefault(offering.isDefault());\n        response.setState(offering.getState().name());\n        response.setSupportsDistributedRouter(offering.supportsDistributedRouter());\n        response.setSupportsRegionLevelVpc(offering.offersRegionLevelVPC());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        response.setObjectName(\"vpcoffering\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2824,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","date":"2018-01-20 05:49:27","endLine":2921,"groupId":"20695","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcResponse","params":"(ResponseViewview@Vpcvpc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/da6342b81c2d0bce453fe1373aa836d5b6a569.src","preCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2852,"status":"N"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"},{"authorTime":"2020-06-25 13:18:02","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":3,"curCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        if (!(offering instanceof VpcOfferingJoinVO)) {\n            offering = ApiDBUtils.newVpcOfferingView(offering);\n        }\n        VpcOfferingResponse response = ApiDBUtils.newVpcOfferingResponse(offering);\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        return response;\n    }\n","date":"2019-07-16 17:25:35","endLine":2855,"groupId":"2819","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createVpcOfferingResponse","params":"(VpcOfferingoffering)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/52/4e109a2b12fd288af189282ca89599fb3b3a80.src","preCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        if (!(offering instanceof VpcOfferingJoinVO)) {\n            offering = ApiDBUtils.newVpcOfferingView(offering);\n        }\n        VpcOfferingResponse response = ApiDBUtils.newVpcOfferingResponse(offering);\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2824,"status":"N"},{"authorDate":"2020-06-25 13:18:02","commitOrder":3,"curCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n            response.setVpcOfferingName(voff.getName());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","date":"2020-06-25 13:18:02","endLine":2968,"groupId":"20695","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcResponse","params":"(ResponseViewview@Vpcvpc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/5cbcb99b9c41c031f54b1a1d6d9689c38c169a.src","preCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2898,"status":"M"}],"commitId":"3ede1eaa4985f78fc52016f14b138d3a1a367b26","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-06-25 13:18:02","modifiedFileCount":"13","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-07-21 05:04:13","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":4,"curCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        if (!(offering instanceof VpcOfferingJoinVO)) {\n            offering = ApiDBUtils.newVpcOfferingView(offering);\n        }\n        VpcOfferingResponse response = ApiDBUtils.newVpcOfferingResponse(offering);\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        return response;\n    }\n","date":"2019-07-16 17:25:35","endLine":2855,"groupId":"2819","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createVpcOfferingResponse","params":"(VpcOfferingoffering)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/52/4e109a2b12fd288af189282ca89599fb3b3a80.src","preCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        if (!(offering instanceof VpcOfferingJoinVO)) {\n            offering = ApiDBUtils.newVpcOfferingView(offering);\n        }\n        VpcOfferingResponse response = ApiDBUtils.newVpcOfferingResponse(offering);\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2824,"status":"N"},{"authorDate":"2021-07-21 05:04:13","commitOrder":4,"curCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setCreated(vpc.getCreated());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n            response.setVpcOfferingName(voff.getName());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","date":"2021-07-21 05:04:13","endLine":3033,"groupId":"20695","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcResponse","params":"(ResponseViewview@Vpcvpc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/2d9405b6e27a11e689b3e5239117fe41bf09ae.src","preCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n            response.setVpcOfferingName(voff.getName());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2962,"status":"M"}],"commitId":"1f743e911a17626d441872eebf66135771761c83","commitMessage":"@@@api: Add 'created' field to API response (#5210)\n\n* api: Add 'created' field to API response\n\n* address comments","date":"2021-07-21 05:04:13","modifiedFileCount":"10","status":"M","submitter":"Pearl Dsilva"},{"authorTime":"2021-09-08 12:44:06","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":5,"curCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        if (!(offering instanceof VpcOfferingJoinVO)) {\n            offering = ApiDBUtils.newVpcOfferingView(offering);\n        }\n        VpcOfferingResponse response = ApiDBUtils.newVpcOfferingResponse(offering);\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        return response;\n    }\n","date":"2019-07-16 17:25:35","endLine":2855,"groupId":"101451","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createVpcOfferingResponse","params":"(VpcOfferingoffering)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/52/4e109a2b12fd288af189282ca89599fb3b3a80.src","preCode":"    public VpcOfferingResponse createVpcOfferingResponse(VpcOffering offering) {\n        if (!(offering instanceof VpcOfferingJoinVO)) {\n            offering = ApiDBUtils.newVpcOfferingView(offering);\n        }\n        VpcOfferingResponse response = ApiDBUtils.newVpcOfferingResponse(offering);\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(offering.getId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service, Set<Provider>> entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> srvc_providers = entry.getValue();\n\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : srvc_providers) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n        response.setServices(serviceResponses);\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2824,"status":"N"},{"authorDate":"2021-09-08 12:44:06","commitOrder":5,"curCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setCreated(vpc.getCreated());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n            response.setVpcOfferingName(voff.getName());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setHasAnnotation(annotationDao.hasAnnotations(vpc.getUuid(), AnnotationService.EntityType.VPC.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","date":"2021-09-08 12:44:06","endLine":3074,"groupId":"101451","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcResponse","params":"(ResponseViewview@Vpcvpc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/09/057e64277064de5378a7fe24c49ae6e03c0ae7.src","preCode":"    public VpcResponse createVpcResponse(ResponseView view, Vpc vpc) {\n        VpcResponse response = new VpcResponse();\n        response.setId(vpc.getUuid());\n        response.setName(vpc.getName());\n        response.setDisplayText(vpc.getDisplayText());\n        response.setCreated(vpc.getCreated());\n        response.setState(vpc.getState().name());\n        VpcOffering voff = ApiDBUtils.findVpcOfferingById(vpc.getVpcOfferingId());\n        if (voff != null) {\n            response.setVpcOfferingId(voff.getUuid());\n            response.setVpcOfferingName(voff.getName());\n        }\n        response.setCidr(vpc.getCidr());\n        response.setRestartRequired(vpc.isRestartRequired());\n        response.setNetworkDomain(vpc.getNetworkDomain());\n        response.setForDisplay(vpc.isDisplay());\n        response.setUsesDistributedRouter(vpc.usesDistributedRouter());\n        response.setRedundantRouter(vpc.isRedundant());\n        response.setRegionLevelVpc(vpc.isRegionLevelVpc());\n\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listVpcOffServices(vpc.getVpcOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        for (Map.Entry<Service,Set<Provider>>entry : serviceProviderMap.entrySet()) {\n            Service service = entry.getKey();\n            Set<Provider> serviceProviders = entry.getValue();\n            ServiceResponse svcRsp = new ServiceResponse();\n            \r\n            if (service == Service.Gateway) {\n                continue;\n            }\n            svcRsp.setName(service.getName());\n            List<ProviderResponse> providers = new ArrayList<ProviderResponse>();\n            for (Provider provider : serviceProviders) {\n                if (provider != null) {\n                    ProviderResponse providerRsp = new ProviderResponse();\n                    providerRsp.setName(provider.getName());\n                    providers.add(providerRsp);\n                }\n            }\n            svcRsp.setProviders(providers);\n\n            serviceResponses.add(svcRsp);\n        }\n\n        List<NetworkResponse> networkResponses = new ArrayList<NetworkResponse>();\n        List<? extends Network> networks = ApiDBUtils.listVpcNetworks(vpc.getId());\n        for (Network network : networks) {\n            NetworkResponse ntwkRsp = createNetworkResponse(view, network);\n            networkResponses.add(ntwkRsp);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(vpc.getZoneId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n\n        response.setNetworks(networkResponses);\n        response.setServices(serviceResponses);\n        populateOwner(response, vpc);\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Vpc, vpc.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setObjectName(\"vpc\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3001,"status":"M"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"}]
