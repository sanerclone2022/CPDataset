[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean deleteImageStore(DeleteImageStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Image store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listByStoreId(storeId, DataStoreRole.Image);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active snapshots backup!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listByStoreId(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active volumes backup!\");\n        }\n\n        \r\n        List<TemplateJoinVO> templates = _templateViewDao.listActiveTemplates(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active templates backup!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.Image);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":2190,"groupId":"3257","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteImageStore","params":"(DeleteImageStoreCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public boolean deleteImageStore(DeleteImageStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Image store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listByStoreId(storeId, DataStoreRole.Image);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active snapshots backup!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listByStoreId(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active volumes backup!\");\n        }\n\n        \r\n        List<TemplateJoinVO> templates = _templateViewDao.listActiveTemplates(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active templates backup!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.Image);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2148,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean deleteSecondaryStagingStore(DeleteSecondaryStagingStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Cache store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listActiveOnCache(storeId);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging snapshots currently in use!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listActiveOnCache(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging volumes currently in use!\");\n        }\n\n        List<TemplateDataStoreVO> templates = _templateStoreDao.listActiveOnCache(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging templates currently in use!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.ImageCache);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":2302,"groupId":"23330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteSecondaryStagingStore","params":"(DeleteSecondaryStagingStoreCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public boolean deleteSecondaryStagingStore(DeleteSecondaryStagingStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Cache store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listActiveOnCache(storeId);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging snapshots currently in use!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listActiveOnCache(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging volumes currently in use!\");\n        }\n\n        List<TemplateDataStoreVO> templates = _templateStoreDao.listActiveOnCache(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging templates currently in use!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.ImageCache);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2261,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":2,"curCode":"    public boolean deleteImageStore(DeleteImageStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Image store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listByStoreId(storeId, DataStoreRole.Image);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active snapshots backup!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listByStoreId(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active volumes backup!\");\n        }\n\n        \r\n        List<TemplateJoinVO> templates = _templateViewDao.listActiveTemplates(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active templates backup!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.Image);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                annotationDao.removeByEntityType(AnnotationService.EntityType.SECONDARY_STORAGE.name(), store.getUuid());\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","date":"2021-09-08 12:44:06","endLine":2938,"groupId":"101923","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteImageStore","params":"(DeleteImageStoreCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/55/07475274785bafdb1a5f8f4029bc21ab7dcd3e.src","preCode":"    public boolean deleteImageStore(DeleteImageStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Image store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listByStoreId(storeId, DataStoreRole.Image);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active snapshots backup!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listByStoreId(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active volumes backup!\");\n        }\n\n        \r\n        List<TemplateJoinVO> templates = _templateViewDao.listActiveTemplates(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete image store with active templates backup!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.Image);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2895,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean deleteSecondaryStagingStore(DeleteSecondaryStagingStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Cache store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listActiveOnCache(storeId);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging snapshots currently in use!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listActiveOnCache(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging volumes currently in use!\");\n        }\n\n        List<TemplateDataStoreVO> templates = _templateStoreDao.listActiveOnCache(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging templates currently in use!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.ImageCache);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":2302,"groupId":"101923","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteSecondaryStagingStore","params":"(DeleteSecondaryStagingStoreCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public boolean deleteSecondaryStagingStore(DeleteSecondaryStagingStoreCmd cmd) {\n        final long storeId = cmd.getId();\n        \r\n        ImageStoreVO store = _imageStoreDao.findById(storeId);\n        if (store == null) {\n            throw new InvalidParameterValueException(\"Cache store with id \" + storeId + \" doesn't exist\");\n        }\n        _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), store.getDataCenterId());\n\n        \r\n        \r\n        List<SnapshotDataStoreVO> snapshots = _snapshotStoreDao.listActiveOnCache(storeId);\n        if (snapshots != null && snapshots.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging snapshots currently in use!\");\n        }\n        List<VolumeDataStoreVO> volumes = _volumeStoreDao.listActiveOnCache(storeId);\n        if (volumes != null && volumes.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging volumes currently in use!\");\n        }\n\n        List<TemplateDataStoreVO> templates = _templateStoreDao.listActiveOnCache(storeId);\n        if (templates != null && templates.size() > 0) {\n            throw new InvalidParameterValueException(\"Cannot delete cache store with staging templates currently in use!\");\n        }\n\n        \r\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                \r\n                \r\n                \r\n                _imageStoreDetailsDao.deleteDetails(storeId);\n                _snapshotStoreDao.deletePrimaryRecordsForStore(storeId, DataStoreRole.ImageCache);\n                _volumeStoreDao.deletePrimaryRecordsForStore(storeId);\n                _templateStoreDao.deletePrimaryRecordsForStore(storeId);\n                _imageStoreDao.remove(storeId);\n            }\n        });\n\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2261,"status":"N"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"}]
