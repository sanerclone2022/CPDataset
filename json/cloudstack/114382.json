[{"authorTime":"2020-01-20 23:02:33","codes":[{"authorDate":"2020-01-20 23:02:33","commitOrder":2,"curCode":"    boolean isACloudstackUser(final LdapUser ldapUser) {\n        boolean rc = false;\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack\", ldapUser.getUsername()));\n                    }\n\n                    rc = true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return rc;\n    }\n","date":"2020-01-20 23:02:33","endLine":234,"groupId":"2576","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isACloudstackUser","params":"(finalLdapUserldapUser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ae/601742ed45f168a228c81baf6755476a95752a.src","preCode":"    boolean isACloudstackUser(final LdapUser ldapUser) {\n        boolean rc = false;\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack\", ldapUser.getUsername()));\n                    }\n\n                    rc = true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return rc;\n    }\n","realPath":"plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/api/command/LdapListUsersCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"MB"},{"authorDate":"2020-01-20 23:02:33","commitOrder":2,"curCode":"    boolean isACloudstackUser(final LdapUserResponse ldapUser) {\n        if(s_logger.isTraceEnabled()) {\n            s_logger.trace(\"checking response : \" + ldapUser.toString());\n        }\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null && cloudstackUsers.size() != 0) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack\", ldapUser.getUsername()));\n                    }\n                    return true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return false;\n    }\n","date":"2020-01-20 23:02:33","endLine":256,"groupId":"2576","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isACloudstackUser","params":"(finalLdapUserResponseldapUser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ae/601742ed45f168a228c81baf6755476a95752a.src","preCode":"    boolean isACloudstackUser(final LdapUserResponse ldapUser) {\n        if(s_logger.isTraceEnabled()) {\n            s_logger.trace(\"checking response : \" + ldapUser.toString());\n        }\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null && cloudstackUsers.size() != 0) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack\", ldapUser.getUsername()));\n                    }\n                    return true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return false;\n    }\n","realPath":"plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/api/command/LdapListUsersCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"5ff932eb868e88f298b2fb54af8bbcc688a4cc29","commitMessage":"@@@Ldap fixes (#3694)\n\n* pass domainid for list users\n\n* passing arg in wizzard\n\n* adding userfilter to list ldap users and usersource to response\n\n  port of list ldap users tests to java\n\n* assertion of differnt junit ldap methods\n\n* broken test for directory server (and others)\n\n* embedded context loading\n\n* add user and query test\n\n* UI: filter options passing filter and domain and onchange trigger\n\n* disable tests that only work in ide\n\nprereqs for domain-linkage fixed\n\nmove trigger to the right location in code\n\ntrigger for changing domain\n\n* logging.  comments and refactor\n\nimplement search users per domain\n\nretrieve appropriate list of users to filter\n\nget domain specific ldap provider\n\n* query cloudstack users with now db filter\n\n* recreate ldap linked account should succeed\n\n* disable auto import users that don't exist\n\n* ui choice and text\n\n* import filter and potential remove from list bug fixed\n\n* fix rights for domain admins\n\n* list only member of linked groups not of principle group\n\n* Do not show ldap user filter if not importing from ldap\n  do not delete un-needed items from dialog permanently\n  delete from temp object not from global one\n\n* localdomain should not filterout users not imported from ldap\n\n* several types of authentication handling errors fixed and unit tested\n\n* conflict in output name\n\n* add conflict source field to generic import dialog\n\n* replace reflextion by enum member call\n\n* conflict is now called conflict :tada:\n","date":"2020-01-20 23:02:33","modifiedFileCount":"13","status":"M","submitter":"dahn"},{"authorTime":"2020-06-12 12:58:04","codes":[{"authorDate":"2020-06-12 12:58:04","commitOrder":3,"curCode":"    boolean isACloudstackUser(final LdapUser ldapUser) {\n        boolean rc = false;\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack\", ldapUser.getUsername()));\n                    }\n\n                    rc = true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user %s\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return rc;\n    }\n","date":"2020-06-12 12:58:04","endLine":234,"groupId":"114382","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"isACloudstackUser","params":"(finalLdapUserldapUser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0b/46489633ee397da613ff55acbd6a26ee2c9fed.src","preCode":"    boolean isACloudstackUser(final LdapUser ldapUser) {\n        boolean rc = false;\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack\", ldapUser.getUsername()));\n                    }\n\n                    rc = true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return rc;\n    }\n","realPath":"plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/api/command/LdapListUsersCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2020-06-12 12:58:04","commitOrder":3,"curCode":"    boolean isACloudstackUser(final LdapUserResponse ldapUser) {\n        if(s_logger.isTraceEnabled()) {\n            s_logger.trace(\"checking response : \" + ldapUser.toString());\n        }\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null && cloudstackUsers.size() != 0) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack user %s\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                    return true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user %s\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return false;\n    }\n","date":"2020-06-12 12:58:04","endLine":256,"groupId":"114382","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"isACloudstackUser","params":"(finalLdapUserResponseldapUser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0b/46489633ee397da613ff55acbd6a26ee2c9fed.src","preCode":"    boolean isACloudstackUser(final LdapUserResponse ldapUser) {\n        if(s_logger.isTraceEnabled()) {\n            s_logger.trace(\"checking response : \" + ldapUser.toString());\n        }\n        final List<UserResponse> cloudstackUsers = getCloudstackUsers();\n        if (cloudstackUsers != null && cloudstackUsers.size() != 0) {\n            for (final UserResponse cloudstackUser : cloudstackUsers) {\n                if (ldapUser.getUsername().equals(cloudstackUser.getUsername())) {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"found user %s in cloudstack\", ldapUser.getUsername()));\n                    }\n                    return true;\n                } else {\n                    if(s_logger.isTraceEnabled()) {\n                        s_logger.trace(String.format(\"ldap user %s does not match cloudstack user\", ldapUser.getUsername(), cloudstackUser.getUsername()));\n                    }\n                }\n            }\n        }\n        return false;\n    }\n","realPath":"plugins/user-authenticators/ldap/src/main/java/org/apache/cloudstack/api/command/LdapListUsersCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"6e47c49fbf5ae4a7ab521409dd6fd4751189f902","commitMessage":"@@@server: Fix String.format arguments (#3980)\n\nSimple log fix. I have found out a few log messages that hold unused/misused arguments on their respective String.format building.","date":"2020-06-12 12:58:04","modifiedFileCount":"3","status":"M","submitter":"Gabriel Beims Br?scher"}]
