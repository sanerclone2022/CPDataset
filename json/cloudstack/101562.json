[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            if (view == ResponseView.Full) {\n                VolumeStats vs = null;\n                if (vr.getFormat() == ImageFormat.QCOW2) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n                }\n                else if (vr.getFormat() == ImageFormat.VHD){\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n                }\n                else if (vr.getFormat() == ImageFormat.OVA){\n                    if (vrData.getChainInfo() != null) {\n                        vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                    }\n                }\n                if (vs != null){\n                    long vsz = vs.getVirtualSize();\n                    long psz = vs.getPhysicalSize() ;\n                    double util = (double)psz/vsz;\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                    vrData.setUtilization(df.format(util));\n                }\n            }\n\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","date":"2018-01-20 05:49:27","endLine":312,"groupId":"15064","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createVolumeResponse","params":"(ResponseViewview@VolumeJoinVO...volumes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/94/9bc1733b282687c95e34aca80d9148421a50f5.src","preCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            if (view == ResponseView.Full) {\n                VolumeStats vs = null;\n                if (vr.getFormat() == ImageFormat.QCOW2) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n                }\n                else if (vr.getFormat() == ImageFormat.VHD){\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n                }\n                else if (vr.getFormat() == ImageFormat.OVA){\n                    if (vrData.getChainInfo() != null) {\n                        vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                    }\n                }\n                if (vs != null){\n                    long vsz = vs.getVirtualSize();\n                    long psz = vs.getPhysicalSize() ;\n                    double util = (double)psz/vsz;\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                    vrData.setUtilization(df.format(util));\n                }\n            }\n\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","date":"2018-01-20 05:49:27","endLine":614,"groupId":"4173","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateUpdateResponse","params":"(ResponseViewview@TemplateJoinVO...templates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/94/9bc1733b282687c95e34aca80d9148421a50f5.src","preCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-19 19:34:26","commitOrder":2,"curCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n            }\n            else if (vr.getFormat() == ImageFormat.VHD){\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA){\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","date":"2019-06-19 19:34:26","endLine":313,"groupId":"9993","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createVolumeResponse","params":"(ResponseViewview@VolumeJoinVO...volumes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3a/c9c8fa70f6b358cfe8f595c26292ca2aa935e8.src","preCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            if (view == ResponseView.Full) {\n                VolumeStats vs = null;\n                if (vr.getFormat() == ImageFormat.QCOW2) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n                }\n                else if (vr.getFormat() == ImageFormat.VHD){\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n                }\n                else if (vr.getFormat() == ImageFormat.OVA){\n                    if (vrData.getChainInfo() != null) {\n                        vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                    }\n                }\n                if (vs != null){\n                    long vsz = vs.getVirtualSize();\n                    long psz = vs.getPhysicalSize() ;\n                    double util = (double)psz/vsz;\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                    vrData.setUtilization(df.format(util));\n                }\n            }\n\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","date":"2018-01-20 05:49:27","endLine":614,"groupId":"4173","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateUpdateResponse","params":"(ResponseViewview@TemplateJoinVO...templates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/94/9bc1733b282687c95e34aca80d9148421a50f5.src","preCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"N"}],"commitId":"0d6cae6339a3eddff9d116064b36ca6b88e4a3c5","commitMessage":"@@@ volume: fix volume metrics view from returning sensitive info to end user (#3222)\n\nProblem: The listVolumeMetrics API response does not honor the volume detail visibility restrictions set for normal users and returns sensitive information which should only be visible to the root admin.\n\nRoot Cause: The listVolumeMetrics API response extends the ListVolumesByAdmin API internally and this results in a full display view response that is only meant for the root admin.\n\nSolution: This has been fixed by rectifying the API response to not show ?physical size?.  'storage type'.  and ?storage pool? information. The UI has also been fixed to hide these columns for normal users.","date":"2019-06-19 19:34:26","modifiedFileCount":"5","status":"M","submitter":"Dingane Hlaluku"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-05 17:16:13","commitOrder":3,"curCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.0%\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n            }\n            else if (vr.getFormat() == ImageFormat.VHD){\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA){\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","date":"2020-08-05 17:16:13","endLine":310,"groupId":"9993","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createVolumeResponse","params":"(ResponseViewview@VolumeJoinVO...volumes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/af25cfca3a0fe0ff70d7d96da508b99d9a9bf9.src","preCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n            }\n            else if (vr.getFormat() == ImageFormat.VHD){\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA){\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","date":"2018-01-20 05:49:27","endLine":614,"groupId":"4173","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateUpdateResponse","params":"(ResponseViewview@TemplateJoinVO...templates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/94/9bc1733b282687c95e34aca80d9148421a50f5.src","preCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"N"}],"commitId":"db665fa8dfa5e83a198e6c40d95495135dad879d","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n\n Conflicts:\n\tengine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2020-08-05 17:16:13","modifiedFileCount":"5","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-08-05 17:16:13","commitOrder":4,"curCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.0%\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n            }\n            else if (vr.getFormat() == ImageFormat.VHD){\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA){\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","date":"2020-08-05 17:16:13","endLine":310,"groupId":"9993","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createVolumeResponse","params":"(ResponseViewview@VolumeJoinVO...volumes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/af25cfca3a0fe0ff70d7d96da508b99d9a9bf9.src","preCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.0%\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n            }\n            else if (vr.getFormat() == ImageFormat.VHD){\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA){\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"N"},{"authorDate":"2020-10-26 21:24:14","commitOrder":4,"curCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(EnumSet.of(DomainDetails.all), view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","date":"2020-10-26 21:24:14","endLine":618,"groupId":"4173","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateUpdateResponse","params":"(ResponseViewview@TemplateJoinVO...templates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d9/1fa7bf480e5fb167b8dbd878ceb4b82c44652c.src","preCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-10-30 23:58:12","commitOrder":5,"curCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.0%\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.VHD || vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA) {\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","date":"2020-10-30 23:58:12","endLine":313,"groupId":"9993","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createVolumeResponse","params":"(ResponseViewview@VolumeJoinVO...volumes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a4/de3663cf9405018e338c06c34231c3e3a262df.src","preCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.0%\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getId());\n            }\n            else if (vr.getFormat() == ImageFormat.VHD){\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA){\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":5,"curCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(EnumSet.of(DomainDetails.all), view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","date":"2020-10-26 21:24:14","endLine":618,"groupId":"4173","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateUpdateResponse","params":"(ResponseViewview@TemplateJoinVO...templates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d9/1fa7bf480e5fb167b8dbd878ceb4b82c44652c.src","preCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(EnumSet.of(DomainDetails.all), view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"}],"commitId":"3ab43e2edbad0543d9e62f0c1399c4be5b8ba029","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-10-30 23:58:12","modifiedFileCount":"4","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2021-02-24 17:28:33","commitOrder":6,"curCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.0%\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.VHD || vr.getFormat() == ImageFormat.QCOW2 || vr.getFormat() == ImageFormat.RAW) {\n                if (vrData.getPath() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n                }\n            } else if (vr.getFormat() == ImageFormat.OVA) {\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null) {\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","date":"2021-02-24 17:28:33","endLine":314,"groupId":"101562","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createVolumeResponse","params":"(ResponseViewview@VolumeJoinVO...volumes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/10/67ff2ed472783eca4893782dffaac860a17ee0.src","preCode":"    public static List<VolumeResponse> createVolumeResponse(ResponseView view, VolumeJoinVO... volumes) {\n        Hashtable<Long, VolumeResponse> vrDataList = new Hashtable<Long, VolumeResponse>();\n        DecimalFormat df = new DecimalFormat(\"0.0%\");\n        for (VolumeJoinVO vr : volumes) {\n            VolumeResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newVolumeResponse(view, vr);\n            }\n            else{\n                \r\n                vrData = ApiDBUtils.fillVolumeDetails(view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n\n            VolumeStats vs = null;\n            if (vr.getFormat() == ImageFormat.VHD || vr.getFormat() == ImageFormat.QCOW2) {\n                vs = ApiDBUtils.getVolumeStatistics(vrData.getPath());\n            }\n            else if (vr.getFormat() == ImageFormat.OVA) {\n                if (vrData.getChainInfo() != null) {\n                    vs = ApiDBUtils.getVolumeStatistics(vrData.getChainInfo());\n                }\n            }\n\n            if (vs != null){\n                long vsz = vs.getVirtualSize();\n                long psz = vs.getPhysicalSize() ;\n                double util = (double)psz/vsz;\n                vrData.setUtilization(df.format(util));\n\n                if (view == ResponseView.Full) {\n                    vrData.setVirtualsize(vsz);\n                    vrData.setPhysicalsize(psz);\n                }\n            }\n        }\n        return new ArrayList<VolumeResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":6,"curCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(EnumSet.of(DomainDetails.all), view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","date":"2020-10-26 21:24:14","endLine":618,"groupId":"101562","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createTemplateUpdateResponse","params":"(ResponseViewview@TemplateJoinVO...templates)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d9/1fa7bf480e5fb167b8dbd878ceb4b82c44652c.src","preCode":"    public static List<TemplateResponse> createTemplateUpdateResponse(ResponseView view, TemplateJoinVO... templates) {\n        Hashtable<Long, TemplateResponse> vrDataList = new Hashtable<Long, TemplateResponse>();\n        for (TemplateJoinVO vr : templates) {\n            TemplateResponse vrData = vrDataList.get(vr.getId());\n            if (vrData == null) {\n                \r\n                vrData = ApiDBUtils.newTemplateUpdateResponse(vr);\n            } else {\n                \r\n                vrData = ApiDBUtils.fillTemplateDetails(EnumSet.of(DomainDetails.all), view, vrData, vr);\n            }\n            vrDataList.put(vr.getId(), vrData);\n        }\n        return new ArrayList<TemplateResponse>(vrDataList.values());\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/ViewResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"N"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"}]
