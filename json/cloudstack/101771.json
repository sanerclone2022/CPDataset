[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-26 10:32:19","commitOrder":2,"curCode":"    private VpcOffering updateVpcOfferingInternal(long vpcOffId, String vpcOfferingName, String displayText, String state, Integer sortKey) {\n        CallContext.current().setEventDetails(\" Id: \" + vpcOffId);\n\n        \r\n        final VpcOfferingVO offeringToUpdate = _vpcOffDao.findById(vpcOffId);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"Unable to find vpc offering \" + vpcOffId);\n        }\n\n        final VpcOfferingVO offering = _vpcOffDao.createForUpdate(vpcOffId);\n\n        if (vpcOfferingName != null) {\n            offering.setName(vpcOfferingName);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (state != null) {\n            boolean validState = false;\n            for (final VpcOffering.State st : VpcOffering.State.values()) {\n                if (st.name().equalsIgnoreCase(state)) {\n                    validState = true;\n                    offering.setState(st);\n                }\n            }\n            if (!validState) {\n                throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n            }\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        if (_vpcOffDao.update(vpcOffId, offering)) {\n            s_logger.debug(\"Updated VPC offeirng id=\" + vpcOffId);\n            return _vpcOffDao.findById(vpcOffId);\n        } else {\n            return null;\n        }\n    }\n","date":"2019-06-26 10:32:19","endLine":756,"groupId":"10179","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateVpcOfferingInternal","params":"(longvpcOffId@StringvpcOfferingName@StringdisplayText@Stringstate@IntegersortKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/33/ae1cc08cd09ebc13682bba43d2f53a4c01db2a.src","preCode":"    private VpcOffering updateVpcOfferingInternal(long vpcOffId, String vpcOfferingName, String displayText, String state, Integer sortKey) {\n        CallContext.current().setEventDetails(\" Id: \" + vpcOffId);\n\n        \r\n        final VpcOfferingVO offeringToUpdate = _vpcOffDao.findById(vpcOffId);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"Unable to find vpc offering \" + vpcOffId);\n        }\n\n        final VpcOfferingVO offering = _vpcOffDao.createForUpdate(vpcOffId);\n\n        if (vpcOfferingName != null) {\n            offering.setName(vpcOfferingName);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (state != null) {\n            boolean validState = false;\n            for (final VpcOffering.State st : VpcOffering.State.values()) {\n                if (st.name().equalsIgnoreCase(state)) {\n                    validState = true;\n                    offering.setState(st);\n                }\n            }\n            if (!validState) {\n                throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n            }\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        if (_vpcOffDao.update(vpcOffId, offering)) {\n            s_logger.debug(\"Updated VPC offeirng id=\" + vpcOffId);\n            return _vpcOffDao.findById(vpcOffId);\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":714,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public NetworkOffering updateNetworkOffering(final UpdateNetworkOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getNetworkOfferingName();\n        final String availabilityStr = cmd.getAvailability();\n        final Integer sortKey = cmd.getSortKey();\n        final Integer maxconn = cmd.getMaxconnections();\n        Availability availability = null;\n        final String state = cmd.getState();\n        final String tags = cmd.getTags();\n        CallContext.current().setEventDetails(\" Id: \" + id);\n\n        \r\n        final NetworkOfferingVO offeringToUpdate = _networkOfferingDao.findById(id);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"unable to find network offering \" + id);\n        }\n\n        \r\n        if (offeringToUpdate.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system network offerings\");\n        }\n\n        final NetworkOfferingVO offering = _networkOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        if (state != null) {\n            boolean validState = false;\n            for (final NetworkOffering.State st : NetworkOffering.State.values()) {\n                if (st.name().equalsIgnoreCase(state)) {\n                    validState = true;\n                    offering.setState(st);\n                }\n            }\n            if (!validState) {\n                throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n            }\n        }\n\n        if (tags != null) {\n            List<DataCenterVO> dataCenters = _zoneDao.listAll();\n            TrafficType trafficType = offeringToUpdate.getTrafficType();\n            String oldTags = offeringToUpdate.getTags();\n\n            for (DataCenterVO dataCenter : dataCenters) {\n                long zoneId = dataCenter.getId();\n                long newPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, tags, trafficType);\n                if (oldTags != null) {\n                    long oldPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, oldTags, trafficType);\n                    if (newPhysicalNetworkId != oldPhysicalNetworkId) {\n                        throw new InvalidParameterValueException(\"New tags: selects different physical network for zone \" + zoneId);\n                    }\n                }\n            }\n\n            offering.setTags(tags);\n        }\n\n        \r\n        if (availabilityStr != null) {\n            for (final Availability avlb : Availability.values()) {\n                if (avlb.name().equalsIgnoreCase(availabilityStr)) {\n                    availability = avlb;\n                }\n            }\n            if (availability == null) {\n                throw new InvalidParameterValueException(\"Invalid value for Availability. Supported types: \" + Availability.Required + \", \" + Availability.Optional);\n            } else {\n                if (availability == NetworkOffering.Availability.Required) {\n                    final boolean canOffBeRequired = offeringToUpdate.getGuestType() == GuestType.Isolated && _networkModel.areServicesSupportedByNetworkOffering(\n                            offeringToUpdate.getId(), Service.SourceNat);\n                    if (!canOffBeRequired) {\n                        throw new InvalidParameterValueException(\"Availability can be \" + NetworkOffering.Availability.Required + \" only for networkOfferings of type \"\n                                + GuestType.Isolated + \" and with \" + Service.SourceNat.getName() + \" enabled\");\n                    }\n\n                    \r\n                    final List<NetworkOfferingVO> offerings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (!offerings.isEmpty() && offerings.get(0).getId() != offeringToUpdate.getId()) {\n                        throw new InvalidParameterValueException(\"System already has network offering id=\" + offerings.get(0).getId() + \" with availability \"\n                                + Availability.Required);\n                    }\n                }\n                offering.setAvailability(availability);\n            }\n        }\n        if (_ntwkOffServiceMapDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.Lb)) {\n            if (maxconn != null) {\n                offering.setConcurrentConnections(maxconn);\n            }\n        }\n\n        if (_networkOfferingDao.update(id, offering)) {\n            return _networkOfferingDao.findById(id);\n        } else {\n            return null;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":5252,"groupId":"3703","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateNetworkOffering","params":"(finalUpdateNetworkOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/16/32da95f95466df841e198f84f058240ae8968b.src","preCode":"    public NetworkOffering updateNetworkOffering(final UpdateNetworkOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getNetworkOfferingName();\n        final String availabilityStr = cmd.getAvailability();\n        final Integer sortKey = cmd.getSortKey();\n        final Integer maxconn = cmd.getMaxconnections();\n        Availability availability = null;\n        final String state = cmd.getState();\n        final String tags = cmd.getTags();\n        CallContext.current().setEventDetails(\" Id: \" + id);\n\n        \r\n        final NetworkOfferingVO offeringToUpdate = _networkOfferingDao.findById(id);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"unable to find network offering \" + id);\n        }\n\n        \r\n        if (offeringToUpdate.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system network offerings\");\n        }\n\n        final NetworkOfferingVO offering = _networkOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        if (state != null) {\n            boolean validState = false;\n            for (final NetworkOffering.State st : NetworkOffering.State.values()) {\n                if (st.name().equalsIgnoreCase(state)) {\n                    validState = true;\n                    offering.setState(st);\n                }\n            }\n            if (!validState) {\n                throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n            }\n        }\n\n        if (tags != null) {\n            List<DataCenterVO> dataCenters = _zoneDao.listAll();\n            TrafficType trafficType = offeringToUpdate.getTrafficType();\n            String oldTags = offeringToUpdate.getTags();\n\n            for (DataCenterVO dataCenter : dataCenters) {\n                long zoneId = dataCenter.getId();\n                long newPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, tags, trafficType);\n                if (oldTags != null) {\n                    long oldPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, oldTags, trafficType);\n                    if (newPhysicalNetworkId != oldPhysicalNetworkId) {\n                        throw new InvalidParameterValueException(\"New tags: selects different physical network for zone \" + zoneId);\n                    }\n                }\n            }\n\n            offering.setTags(tags);\n        }\n\n        \r\n        if (availabilityStr != null) {\n            for (final Availability avlb : Availability.values()) {\n                if (avlb.name().equalsIgnoreCase(availabilityStr)) {\n                    availability = avlb;\n                }\n            }\n            if (availability == null) {\n                throw new InvalidParameterValueException(\"Invalid value for Availability. Supported types: \" + Availability.Required + \", \" + Availability.Optional);\n            } else {\n                if (availability == NetworkOffering.Availability.Required) {\n                    final boolean canOffBeRequired = offeringToUpdate.getGuestType() == GuestType.Isolated && _networkModel.areServicesSupportedByNetworkOffering(\n                            offeringToUpdate.getId(), Service.SourceNat);\n                    if (!canOffBeRequired) {\n                        throw new InvalidParameterValueException(\"Availability can be \" + NetworkOffering.Availability.Required + \" only for networkOfferings of type \"\n                                + GuestType.Isolated + \" and with \" + Service.SourceNat.getName() + \" enabled\");\n                    }\n\n                    \r\n                    final List<NetworkOfferingVO> offerings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (!offerings.isEmpty() && offerings.get(0).getId() != offeringToUpdate.getId()) {\n                        throw new InvalidParameterValueException(\"System already has network offering id=\" + offerings.get(0).getId() + \" with availability \"\n                                + Availability.Required);\n                    }\n                }\n                offering.setAvailability(availability);\n            }\n        }\n        if (_ntwkOffServiceMapDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.Lb)) {\n            if (maxconn != null) {\n                offering.setConcurrentConnections(maxconn);\n            }\n        }\n\n        if (_networkOfferingDao.update(id, offering)) {\n            return _networkOfferingDao.findById(id);\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5144,"status":"NB"}],"commitId":"f653e6149c53c9316bcccaf23f407c1be19eecb3","commitMessage":"@@@server: support sort_key for vpc_offerings table (#3268)\n\nFixes #2742\n\nUI Supported ordering VPC Offerings but the API did not have that\nsupport implemented. This makes the change in updateVPCOfferings\nand listVPCOfferings API calls.  along with necessary database\nchanges for supporting sorting of VPC Offerings.\n","date":"2019-06-26 10:32:19","modifiedFileCount":"4","status":"M","submitter":"Anurag Awasthi"},{"authorTime":"2019-07-16 17:25:35","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":3,"curCode":"    private VpcOffering updateVpcOfferingInternal(long vpcOffId, String vpcOfferingName, String displayText, String state, Integer sortKey, final List<Long> domainIds, final List<Long> zoneIds) {\n        CallContext.current().setEventDetails(\" Id: \" + vpcOffId);\n\n        \r\n        final VpcOfferingVO offeringToUpdate = _vpcOffDao.findById(vpcOffId);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"Unable to find vpc offering \" + vpcOffId);\n        }\n\n        List<Long> existingDomainIds = vpcOfferingDetailsDao.findDomainIds(vpcOffId);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = vpcOfferingDetailsDao.findZoneIds(vpcOffId);\n        Collections.sort(existingZoneIds);\n\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        final boolean updateNeeded = vpcOfferingName != null || displayText != null || state != null || sortKey != null;\n\n        final VpcOfferingVO offering = _vpcOffDao.createForUpdate(vpcOffId);\n\n        if (updateNeeded) {\n            if (vpcOfferingName != null) {\n                offering.setName(vpcOfferingName);\n            }\n            if (displayText != null) {\n                offering.setDisplayText(displayText);\n            }\n            if (state != null) {\n                boolean validState = false;\n                for (final VpcOffering.State st : VpcOffering.State.values()) {\n                    if (st.name().equalsIgnoreCase(state)) {\n                        validState = true;\n                        offering.setState(st);\n                    }\n                }\n                if (!validState) {\n                    throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n                }\n            }\n            if (sortKey != null) {\n                offering.setSortKey(sortKey);\n            }\n\n            if (!_vpcOffDao.update(vpcOffId, offering)) {\n                return  null;\n            }\n        }\n        List<VpcOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(!filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds)) {\n            SearchBuilder<VpcOfferingDetailsVO> sb = vpcOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<VpcOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(vpcOffId));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                vpcOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new VpcOfferingDetailsVO(vpcOffId, ApiConstants.DOMAIN_ID, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                vpcOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new VpcOfferingDetailsVO(vpcOffId, ApiConstants.ZONE_ID, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (VpcOfferingDetailsVO detailVO : detailsVO) {\n                vpcOfferingDetailsDao.persist(detailVO);\n            }\n        }\n        s_logger.debug(\"Updated VPC offeirng id=\" + vpcOffId);\n        return _vpcOffDao.findById(vpcOffId);\n    }\n","date":"2019-07-16 17:25:35","endLine":927,"groupId":"101771","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateVpcOfferingInternal","params":"(longvpcOffId@StringvpcOfferingName@StringdisplayText@Stringstate@IntegersortKey@finalList<Long>domainIds@finalList<Long>zoneIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b1/b1059c1236a2c9572449c96fd61668a3567f02.src","preCode":"    private VpcOffering updateVpcOfferingInternal(long vpcOffId, String vpcOfferingName, String displayText, String state, Integer sortKey) {\n        CallContext.current().setEventDetails(\" Id: \" + vpcOffId);\n\n        \r\n        final VpcOfferingVO offeringToUpdate = _vpcOffDao.findById(vpcOffId);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"Unable to find vpc offering \" + vpcOffId);\n        }\n\n        final VpcOfferingVO offering = _vpcOffDao.createForUpdate(vpcOffId);\n\n        if (vpcOfferingName != null) {\n            offering.setName(vpcOfferingName);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (state != null) {\n            boolean validState = false;\n            for (final VpcOffering.State st : VpcOffering.State.values()) {\n                if (st.name().equalsIgnoreCase(state)) {\n                    validState = true;\n                    offering.setState(st);\n                }\n            }\n            if (!validState) {\n                throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n            }\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        if (_vpcOffDao.update(vpcOffId, offering)) {\n            s_logger.debug(\"Updated VPC offeirng id=\" + vpcOffId);\n            return _vpcOffDao.findById(vpcOffId);\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpc/VpcManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":840,"status":"M"},{"authorDate":"2019-07-16 17:25:35","commitOrder":3,"curCode":"    public NetworkOffering updateNetworkOffering(final UpdateNetworkOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getNetworkOfferingName();\n        final String availabilityStr = cmd.getAvailability();\n        final Integer sortKey = cmd.getSortKey();\n        final Integer maxconn = cmd.getMaxconnections();\n        Availability availability = null;\n        final String state = cmd.getState();\n        final String tags = cmd.getTags();\n        final List<Long> domainIds = cmd.getDomainIds();\n        final List<Long> zoneIds = cmd.getZoneIds();\n        CallContext.current().setEventDetails(\" Id: \" + id);\n\n        \r\n        final NetworkOfferingVO offeringToUpdate = _networkOfferingDao.findById(id);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"unable to find network offering \" + id);\n        }\n\n        List<Long> existingDomainIds = networkOfferingDetailsDao.findDomainIds(id);\n        Collections.sort(existingDomainIds);\n\n        List<Long> existingZoneIds = networkOfferingDetailsDao.findZoneIds(id);\n        Collections.sort(existingZoneIds);\n\n        \r\n        if (offeringToUpdate.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system network offerings\");\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(domainIds)) {\n            for (final Long domainId: domainIds) {\n                if (_domainDao.findById(domainId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid domain id\");\n                }\n            }\n        }\n\n        \r\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            for (Long zoneId : zoneIds) {\n                if (_zoneDao.findById(zoneId) == null)\n                    throw new InvalidParameterValueException(\"Please specify a valid zone id\");\n            }\n        }\n\n        \r\n        List<Long> filteredDomainIds = filterChildSubDomains(domainIds);\n        Collections.sort(filteredDomainIds);\n\n        List<Long> filteredZoneIds = new ArrayList<>();\n        if (CollectionUtils.isNotEmpty(zoneIds)) {\n            filteredZoneIds.addAll(zoneIds);\n        }\n        Collections.sort(filteredZoneIds);\n\n        final NetworkOfferingVO offering = _networkOfferingDao.createForUpdate(id);\n\n        boolean updateNeeded = name != null || displayText != null || sortKey != null ||\n                state != null || tags != null || availabilityStr != null || maxconn != null;\n\n        if(updateNeeded) {\n            if (name != null) {\n                offering.setName(name);\n            }\n\n            if (displayText != null) {\n                offering.setDisplayText(displayText);\n            }\n\n            if (sortKey != null) {\n                offering.setSortKey(sortKey);\n            }\n\n            if (state != null) {\n                boolean validState = false;\n                for (final NetworkOffering.State st : NetworkOffering.State.values()) {\n                    if (st.name().equalsIgnoreCase(state)) {\n                        validState = true;\n                        offering.setState(st);\n                    }\n                }\n                if (!validState) {\n                    throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n                }\n            }\n\n            if (tags != null) {\n                List<DataCenterVO> dataCenters = _zoneDao.listAll();\n                TrafficType trafficType = offeringToUpdate.getTrafficType();\n                String oldTags = offeringToUpdate.getTags();\n\n                for (DataCenterVO dataCenter : dataCenters) {\n                    long zoneId = dataCenter.getId();\n                    long newPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, tags, trafficType);\n                    if (oldTags != null) {\n                        long oldPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, oldTags, trafficType);\n                        if (newPhysicalNetworkId != oldPhysicalNetworkId) {\n                            throw new InvalidParameterValueException(\"New tags: selects different physical network for zone \" + zoneId);\n                        }\n                    }\n                }\n\n                offering.setTags(tags);\n            }\n\n            \r\n            if (availabilityStr != null) {\n                for (final Availability avlb : Availability.values()) {\n                    if (avlb.name().equalsIgnoreCase(availabilityStr)) {\n                        availability = avlb;\n                    }\n                }\n                if (availability == null) {\n                    throw new InvalidParameterValueException(\"Invalid value for Availability. Supported types: \" + Availability.Required + \", \" + Availability.Optional);\n                } else {\n                    if (availability == NetworkOffering.Availability.Required) {\n                        final boolean canOffBeRequired = offeringToUpdate.getGuestType() == GuestType.Isolated && _networkModel.areServicesSupportedByNetworkOffering(\n                                offeringToUpdate.getId(), Service.SourceNat);\n                        if (!canOffBeRequired) {\n                            throw new InvalidParameterValueException(\"Availability can be \" + NetworkOffering.Availability.Required + \" only for networkOfferings of type \"\n                                    + GuestType.Isolated + \" and with \" + Service.SourceNat.getName() + \" enabled\");\n                        }\n\n                        \r\n                        final List<NetworkOfferingVO> offerings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                        if (!offerings.isEmpty() && offerings.get(0).getId() != offeringToUpdate.getId()) {\n                            throw new InvalidParameterValueException(\"System already has network offering id=\" + offerings.get(0).getId() + \" with availability \"\n                                    + Availability.Required);\n                        }\n                    }\n                    offering.setAvailability(availability);\n                }\n            }\n            if (_ntwkOffServiceMapDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.Lb)) {\n                if (maxconn != null) {\n                    offering.setConcurrentConnections(maxconn);\n                }\n            }\n\n            if (!_networkOfferingDao.update(id, offering)) {\n                return null;\n            }\n        }\n\n        List<NetworkOfferingDetailsVO> detailsVO = new ArrayList<>();\n        if(!filteredDomainIds.equals(existingDomainIds) || !filteredZoneIds.equals(existingZoneIds)) {\n            SearchBuilder<NetworkOfferingDetailsVO> sb = networkOfferingDetailsDao.createSearchBuilder();\n            sb.and(\"offeringId\", sb.entity().getResourceId(), SearchCriteria.Op.EQ);\n            sb.and(\"detailName\", sb.entity().getName(), SearchCriteria.Op.EQ);\n            sb.done();\n            SearchCriteria<NetworkOfferingDetailsVO> sc = sb.create();\n            sc.setParameters(\"offeringId\", String.valueOf(id));\n            if(!filteredDomainIds.equals(existingDomainIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.DOMAIN_ID);\n                networkOfferingDetailsDao.remove(sc);\n                for (Long domainId : filteredDomainIds) {\n                    detailsVO.add(new NetworkOfferingDetailsVO(id, Detail.domainid, String.valueOf(domainId), false));\n                }\n            }\n            if(!filteredZoneIds.equals(existingZoneIds)) {\n                sc.setParameters(\"detailName\", ApiConstants.ZONE_ID);\n                networkOfferingDetailsDao.remove(sc);\n                for (Long zoneId : filteredZoneIds) {\n                    detailsVO.add(new NetworkOfferingDetailsVO(id, Detail.zoneid, String.valueOf(zoneId), false));\n                }\n            }\n        }\n        if (!detailsVO.isEmpty()) {\n            for (NetworkOfferingDetailsVO detailVO : detailsVO) {\n                networkOfferingDetailsDao.persist(detailVO);\n            }\n        }\n\n        return _networkOfferingDao.findById(id);\n    }\n","date":"2019-07-16 17:25:35","endLine":5784,"groupId":"101771","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateNetworkOffering","params":"(finalUpdateNetworkOfferingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/238b0a7255951e2e8502ab50894397ce10784e.src","preCode":"    public NetworkOffering updateNetworkOffering(final UpdateNetworkOfferingCmd cmd) {\n        final String displayText = cmd.getDisplayText();\n        final Long id = cmd.getId();\n        final String name = cmd.getNetworkOfferingName();\n        final String availabilityStr = cmd.getAvailability();\n        final Integer sortKey = cmd.getSortKey();\n        final Integer maxconn = cmd.getMaxconnections();\n        Availability availability = null;\n        final String state = cmd.getState();\n        final String tags = cmd.getTags();\n        CallContext.current().setEventDetails(\" Id: \" + id);\n\n        \r\n        final NetworkOfferingVO offeringToUpdate = _networkOfferingDao.findById(id);\n        if (offeringToUpdate == null) {\n            throw new InvalidParameterValueException(\"unable to find network offering \" + id);\n        }\n\n        \r\n        if (offeringToUpdate.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system network offerings\");\n        }\n\n        final NetworkOfferingVO offering = _networkOfferingDao.createForUpdate(id);\n\n        if (name != null) {\n            offering.setName(name);\n        }\n\n        if (displayText != null) {\n            offering.setDisplayText(displayText);\n        }\n\n        if (sortKey != null) {\n            offering.setSortKey(sortKey);\n        }\n\n        if (state != null) {\n            boolean validState = false;\n            for (final NetworkOffering.State st : NetworkOffering.State.values()) {\n                if (st.name().equalsIgnoreCase(state)) {\n                    validState = true;\n                    offering.setState(st);\n                }\n            }\n            if (!validState) {\n                throw new InvalidParameterValueException(\"Incorrect state value: \" + state);\n            }\n        }\n\n        if (tags != null) {\n            List<DataCenterVO> dataCenters = _zoneDao.listAll();\n            TrafficType trafficType = offeringToUpdate.getTrafficType();\n            String oldTags = offeringToUpdate.getTags();\n\n            for (DataCenterVO dataCenter : dataCenters) {\n                long zoneId = dataCenter.getId();\n                long newPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, tags, trafficType);\n                if (oldTags != null) {\n                    long oldPhysicalNetworkId = _networkModel.findPhysicalNetworkId(zoneId, oldTags, trafficType);\n                    if (newPhysicalNetworkId != oldPhysicalNetworkId) {\n                        throw new InvalidParameterValueException(\"New tags: selects different physical network for zone \" + zoneId);\n                    }\n                }\n            }\n\n            offering.setTags(tags);\n        }\n\n        \r\n        if (availabilityStr != null) {\n            for (final Availability avlb : Availability.values()) {\n                if (avlb.name().equalsIgnoreCase(availabilityStr)) {\n                    availability = avlb;\n                }\n            }\n            if (availability == null) {\n                throw new InvalidParameterValueException(\"Invalid value for Availability. Supported types: \" + Availability.Required + \", \" + Availability.Optional);\n            } else {\n                if (availability == NetworkOffering.Availability.Required) {\n                    final boolean canOffBeRequired = offeringToUpdate.getGuestType() == GuestType.Isolated && _networkModel.areServicesSupportedByNetworkOffering(\n                            offeringToUpdate.getId(), Service.SourceNat);\n                    if (!canOffBeRequired) {\n                        throw new InvalidParameterValueException(\"Availability can be \" + NetworkOffering.Availability.Required + \" only for networkOfferings of type \"\n                                + GuestType.Isolated + \" and with \" + Service.SourceNat.getName() + \" enabled\");\n                    }\n\n                    \r\n                    final List<NetworkOfferingVO> offerings = _networkOfferingDao.listByAvailability(Availability.Required, false);\n                    if (!offerings.isEmpty() && offerings.get(0).getId() != offeringToUpdate.getId()) {\n                        throw new InvalidParameterValueException(\"System already has network offering id=\" + offerings.get(0).getId() + \" with availability \"\n                                + Availability.Required);\n                    }\n                }\n                offering.setAvailability(availability);\n            }\n        }\n        if (_ntwkOffServiceMapDao.areServicesSupportedByNetworkOffering(offering.getId(), Service.Lb)) {\n            if (maxconn != null) {\n                offering.setConcurrentConnections(maxconn);\n            }\n        }\n\n        if (_networkOfferingDao.update(id, offering)) {\n            return _networkOfferingDao.findById(id);\n        } else {\n            return null;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/configuration/ConfigurationManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":5607,"status":"M"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"}]
