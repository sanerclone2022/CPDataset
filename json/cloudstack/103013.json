[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n            String backupName, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":921,"groupId":"24381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@IntegernfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/2410f4afebe2deec57f964a9d3c21b6e2251a1.src","preCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n            String backupName, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":863,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":3325,"groupId":"22046","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@longwait@IntegernfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3262,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-08-19 17:23:38","codes":[{"authorDate":"2020-08-19 17:23:38","commitOrder":2,"curCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2020-08-19 17:23:38","endLine":929,"groupId":"24381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/9e5b6ef6e5900494119a28d2c95d115969a2e2.src","preCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n            String backupName, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"M"},{"authorDate":"2020-08-19 17:23:38","commitOrder":2,"curCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2020-08-19 17:23:38","endLine":3447,"groupId":"22046","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@longwait@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/fae17ed5156753feec1c44bd2b5a019a77be08.src","preCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3384,"status":"M"}],"commitId":"d57aa835174c9dd045930d1396ce4bee9a275a60","commitMessage":"@@@server: Added nfs minor version support (#4180)\n\nThis PR adds minor version support when mounting nfs on the SSVM as requested in #2861\n\nThe global setting \"secstorage.nfs.version\" has been changed to use the String data type which allows any minor version to be specified.","date":"2020-08-19 17:23:38","modifiedFileCount":"30","status":"M","submitter":"Spaceman1984"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":3,"curCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":929,"groupId":"24381","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/2b5a02f6c741bc3cd7910996c540a2ddfe6a91.src","preCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":3,"curCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            if(!primaryDsMo.getDatastoreType().equalsIgnoreCase(\"VVOL\")) {\n                clonedVm.moveAllVmDiskFiles(primaryDsMo, HypervisorHostHelper.VSPHERE_DATASTORE_BASE_FOLDER, false);\n            }\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":3783,"groupId":"22046","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@longwait@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/aacd34f42c8bccea920b949c272fc6721f4cf2.src","preCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\");\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3718,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2021-06-02 16:33:54","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":4,"curCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":929,"groupId":"24381","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/2b5a02f6c741bc3cd7910996c540a2ddfe6a91.src","preCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"N"},{"authorDate":"2021-06-02 16:33:54","commitOrder":4,"curCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            if(!primaryDsMo.getDatastoreType().equalsIgnoreCase(\"VVOL\")) {\n                HypervisorHostHelper.createBaseFolderInDatastore(primaryDsMo, primaryDsMo.getDataCenterMor());\n                clonedVm.moveAllVmDiskFiles(primaryDsMo, HypervisorHostHelper.VSPHERE_DATASTORE_BASE_FOLDER, false);\n            }\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","date":"2021-06-02 16:33:54","endLine":3786,"groupId":"22046","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@longwait@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/da/6713746b840fffc422edc6406dd753252110ce.src","preCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            if(!primaryDsMo.getDatastoreType().equalsIgnoreCase(\"VVOL\")) {\n                clonedVm.moveAllVmDiskFiles(primaryDsMo, HypervisorHostHelper.VSPHERE_DATASTORE_BASE_FOLDER, false);\n            }\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3720,"status":"M"}],"commitId":"5aefd3e2049b99bdaa0d3451704b6859dd431873","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-06-02 16:33:54","modifiedFileCount":"8","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-09-02 18:43:33","codes":[{"authorDate":"2021-09-02 18:43:33","commitOrder":5,"curCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","date":"2021-09-02 18:43:33","endLine":927,"groupId":"24381","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/d1f7d157953d800633d3fce0f3d69921e0e37b.src","preCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"M"},{"authorDate":"2021-09-02 18:43:33","commitOrder":5,"curCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            if(!primaryDsMo.getDatastoreType().equalsIgnoreCase(\"VVOL\")) {\n                HypervisorHostHelper.createBaseFolderInDatastore(primaryDsMo, primaryDsMo.getDataCenterMor());\n                clonedVm.moveAllVmDiskFiles(primaryDsMo, HypervisorHostHelper.VSPHERE_DATASTORE_BASE_FOLDER, false);\n            }\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","date":"2021-09-02 18:43:33","endLine":3771,"groupId":"22046","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@longwait@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/81/0f355662ad1cc9201a5d818e6a8e758c76960b.src","preCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            if(!primaryDsMo.getDatastoreType().equalsIgnoreCase(\"VVOL\")) {\n                HypervisorHostHelper.createBaseFolderInDatastore(primaryDsMo, primaryDsMo.getDataCenterMor());\n                clonedVm.moveAllVmDiskFiles(primaryDsMo, HypervisorHostHelper.VSPHERE_DATASTORE_BASE_FOLDER, false);\n            }\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisks();\n                clonedVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3706,"status":"M"}],"commitId":"56f4da6dce8aefc106c4697d9fbbfe47755336ca","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15' into main\n","date":"2021-09-02 18:43:33","modifiedFileCount":"15","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2021-09-03 09:04:12","codes":[{"authorDate":"2021-09-02 18:43:33","commitOrder":6,"curCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","date":"2021-09-02 18:43:33","endLine":927,"groupId":"103013","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/d1f7d157953d800633d3fce0f3d69921e0e37b.src","preCode":"    private void restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n        String srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            } else {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            clonedVm.moveAllVmDiskFiles(primaryDsMo, \"\", false);\n            clonedVm.detachAllDisks();\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"N"},{"authorDate":"2021-09-03 09:04:12","commitOrder":6,"curCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO workerVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            workerVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (workerVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n            workerVm.tagAsWorkerVM();\n\n            if(!primaryDsMo.getDatastoreType().equalsIgnoreCase(\"VVOL\")) {\n                HypervisorHostHelper.createBaseFolderInDatastore(primaryDsMo, primaryDsMo.getDataCenterMor());\n                workerVm.moveAllVmDiskFiles(primaryDsMo, HypervisorHostHelper.VSPHERE_DATASTORE_BASE_FOLDER, false);\n            }\n            workerVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (workerVm != null) {\n                workerVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","date":"2021-09-03 09:04:12","endLine":3774,"groupId":"103013","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"restoreVolumeFromSecStorage","params":"(VmwareHypervisorHosthyperHost@DatastoreMOprimaryDsMo@StringnewVolumeName@StringsecStorageUrl@StringsecStorageDir@StringbackupName@longwait@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7e/d4e2f4f1be8df00a60e647aaf38e4274da2afe.src","preCode":"    private Long restoreVolumeFromSecStorage(VmwareHypervisorHost hyperHost, DatastoreMO primaryDsMo, String newVolumeName, String secStorageUrl, String secStorageDir,\n                                             String backupName, long wait, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = mountService.getMountPoint(secStorageUrl, null);\n        String srcOVAFileName;\n        String srcOVFFileName;\n\n        srcOVAFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".\" + ImageFormat.OVA.getFileExtension();\n        srcOVFFileName = secondaryMountPoint + \"/\" + secStorageDir + \"/\" + backupName + \".ovf\";\n\n        String snapshotDir = \"\";\n        if (backupName.contains(\"/\")) {\n            snapshotDir = backupName.split(\"/\")[0];\n        }\n\n        File ovafile = new File(srcOVAFileName);\n\n        File ovfFile = new File(srcOVFFileName);\n        \r\n        if (!ovfFile.exists()) {\n            srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            if (srcOVFFileName == null && ovafile.exists()) {  \r\n                Script command = new Script(\"tar\", wait, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", srcOVAFileName);\n                command.setWorkDir(secondaryMountPoint + \"/\" + secStorageDir + \"/\" + snapshotDir);\n                s_logger.info(\"Executing command: \" + command.toString());\n                String result = command.execute();\n                if (result != null) {\n                    String msg = \"Unable to unpack snapshot OVA file at: \" + srcOVAFileName;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n                srcOVFFileName = getOVFFilePath(srcOVAFileName);\n            } else if (srcOVFFileName == null) {\n                String msg = \"Unable to find snapshot OVA file at: \" + srcOVAFileName;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n        if (srcOVFFileName == null) {\n            String msg = \"Unable to locate OVF file in template package directory: \" + srcOVAFileName;\n            s_logger.error(msg);\n            throw new Exception(msg);\n        }\n\n        VirtualMachineMO clonedVm = null;\n        try {\n            hyperHost.importVmFromOVF(srcOVFFileName, newVolumeName, primaryDsMo, \"thin\", null);\n            clonedVm = hyperHost.findVmOnHyperHost(newVolumeName);\n            if (clonedVm == null) {\n                throw new Exception(\"Unable to create container VM for volume creation\");\n            }\n\n            if(!primaryDsMo.getDatastoreType().equalsIgnoreCase(\"VVOL\")) {\n                HypervisorHostHelper.createBaseFolderInDatastore(primaryDsMo, primaryDsMo.getDataCenterMor());\n                clonedVm.moveAllVmDiskFiles(primaryDsMo, HypervisorHostHelper.VSPHERE_DATASTORE_BASE_FOLDER, false);\n            }\n            clonedVm.detachAllDisks();\n            return _storage.getSize(srcOVFFileName);\n        } finally {\n            if (clonedVm != null) {\n                clonedVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3708,"status":"M"}],"commitId":"4de35426c459fc90848c28c693576cc9ae6793a3","commitMessage":"@@@Merge branch '4.15' into main\n","date":"2021-09-03 09:04:12","modifiedFileCount":"3","status":"M","submitter":"nicolas"}]
