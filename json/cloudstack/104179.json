[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<ClusterMetricsResponse> listClusterMetrics(List<ClusterResponse> clusterResponses) {\n        final List<ClusterMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ClusterResponse clusterResponse: clusterResponses) {\n            ClusterMetricsResponse metricsResponse = new ClusterMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, clusterResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate cluster metrics response\");\n            }\n\n            final Cluster cluster = clusterDao.findByUuid(clusterResponse.getId());\n            if (cluster == null) {\n                continue;\n            }\n            final Long clusterId = cluster.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.valueIn(clusterId);\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.valueIn(clusterId);\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.valueIn(clusterId);\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.valueIn(clusterId);\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, null, clusterId);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, null, clusterId);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Host host: hostDao.findByClusterId(clusterId)) {\n                if (host == null || host.getType() != Host.Type.Routing) {\n                    continue;\n                }\n                if (host.getStatus() == Status.Up) {\n                    metrics.incrUpResources();\n                }\n                metrics.incrTotalResources();\n                updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n            }\n\n            metricsResponse.setState(clusterResponse.getAllocationState(), clusterResponse.getManagedState());\n            metricsResponse.setResources(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","date":"2018-01-20 05:49:27","endLine":365,"groupId":"17220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listClusterMetrics","params":"(List<ClusterResponse>clusterResponses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8b/76a1770a3c543f07393a56b3cd8f82744e996f.src","preCode":"    public List<ClusterMetricsResponse> listClusterMetrics(List<ClusterResponse> clusterResponses) {\n        final List<ClusterMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ClusterResponse clusterResponse: clusterResponses) {\n            ClusterMetricsResponse metricsResponse = new ClusterMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, clusterResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate cluster metrics response\");\n            }\n\n            final Cluster cluster = clusterDao.findByUuid(clusterResponse.getId());\n            if (cluster == null) {\n                continue;\n            }\n            final Long clusterId = cluster.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.valueIn(clusterId);\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.valueIn(clusterId);\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.valueIn(clusterId);\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.valueIn(clusterId);\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, null, clusterId);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, null, clusterId);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Host host: hostDao.findByClusterId(clusterId)) {\n                if (host == null || host.getType() != Host.Type.Routing) {\n                    continue;\n                }\n                if (host.getStatus() == Status.Up) {\n                    metrics.incrUpResources();\n                }\n                metrics.incrTotalResources();\n                updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n            }\n\n            metricsResponse.setState(clusterResponse.getAllocationState(), clusterResponse.getManagedState());\n            metricsResponse.setResources(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","realPath":"plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<ZoneMetricsResponse> listZoneMetrics(List<ZoneResponse> zoneResponses) {\n        final List<ZoneMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ZoneResponse zoneResponse: zoneResponses) {\n            ZoneMetricsResponse metricsResponse = new ZoneMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, zoneResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate zone metrics response\");\n            }\n\n            final DataCenter zone = dataCenterDao.findByUuid(zoneResponse.getId());\n            if (zone == null) {\n                continue;\n            }\n            final Long zoneId = zone.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.value();\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.value();\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.value();\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.value();\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, zoneId, null);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, zoneId, null);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Cluster cluster : clusterDao.listClustersByDcId(zoneId)) {\n                if (cluster == null) {\n                    continue;\n                }\n                metrics.incrTotalResources();\n                if (cluster.getAllocationState() == Grouping.AllocationState.Enabled\n                        && cluster.getManagedState() == Managed.ManagedState.Managed) {\n                    metrics.incrUpResources();\n                }\n\n                for (final Host host: hostDao.findByClusterId(cluster.getId())) {\n                    if (host == null || host.getType() != Host.Type.Routing) {\n                        continue;\n                    }\n                    updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n                }\n            }\n\n            metricsResponse.setState(zoneResponse.getAllocationState());\n            metricsResponse.setResource(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","date":"2018-01-20 05:49:27","endLine":444,"groupId":"20429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listZoneMetrics","params":"(List<ZoneResponse>zoneResponses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8b/76a1770a3c543f07393a56b3cd8f82744e996f.src","preCode":"    public List<ZoneMetricsResponse> listZoneMetrics(List<ZoneResponse> zoneResponses) {\n        final List<ZoneMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ZoneResponse zoneResponse: zoneResponses) {\n            ZoneMetricsResponse metricsResponse = new ZoneMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, zoneResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate zone metrics response\");\n            }\n\n            final DataCenter zone = dataCenterDao.findByUuid(zoneResponse.getId());\n            if (zone == null) {\n                continue;\n            }\n            final Long zoneId = zone.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.value();\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.value();\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.value();\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.value();\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, zoneId, null);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, zoneId, null);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Cluster cluster : clusterDao.listClustersByDcId(zoneId)) {\n                if (cluster == null) {\n                    continue;\n                }\n                metrics.incrTotalResources();\n                if (cluster.getAllocationState() == Grouping.AllocationState.Enabled\n                        && cluster.getManagedState() == Managed.ManagedState.Managed) {\n                    metrics.incrUpResources();\n                }\n\n                for (final Host host: hostDao.findByClusterId(cluster.getId())) {\n                    if (host == null || host.getType() != Host.Type.Routing) {\n                        continue;\n                    }\n                    updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n                }\n            }\n\n            metricsResponse.setState(zoneResponse.getAllocationState());\n            metricsResponse.setResource(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","realPath":"plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-02-26 23:18:41","commitOrder":2,"curCode":"    public List<ClusterMetricsResponse> listClusterMetrics(Pair<List<ClusterResponse>, Integer> clusterResponses) {\n        final List<ClusterMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ClusterResponse clusterResponse: clusterResponses.first()) {\n            ClusterMetricsResponse metricsResponse = new ClusterMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, clusterResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate cluster metrics response\");\n            }\n\n            final Cluster cluster = clusterDao.findByUuid(clusterResponse.getId());\n            if (cluster == null) {\n                continue;\n            }\n            final Long clusterId = cluster.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.valueIn(clusterId);\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.valueIn(clusterId);\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.valueIn(clusterId);\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.valueIn(clusterId);\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, null, clusterId);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, null, clusterId);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Host host: hostDao.findByClusterId(clusterId)) {\n                if (host == null || host.getType() != Host.Type.Routing) {\n                    continue;\n                }\n                if (host.getStatus() == Status.Up) {\n                    metrics.incrUpResources();\n                }\n                metrics.incrTotalResources();\n                updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n            }\n\n            metricsResponse.setState(clusterResponse.getAllocationState(), clusterResponse.getManagedState());\n            metricsResponse.setResources(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","date":"2020-02-26 23:18:41","endLine":388,"groupId":"17220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listClusterMetrics","params":"(Pair<List<ClusterResponse>@Integer>clusterResponses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/14/ee29c08dcde6bca916e0e4bb3ed54f1e26b65f.src","preCode":"    public List<ClusterMetricsResponse> listClusterMetrics(List<ClusterResponse> clusterResponses) {\n        final List<ClusterMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ClusterResponse clusterResponse: clusterResponses) {\n            ClusterMetricsResponse metricsResponse = new ClusterMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, clusterResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate cluster metrics response\");\n            }\n\n            final Cluster cluster = clusterDao.findByUuid(clusterResponse.getId());\n            if (cluster == null) {\n                continue;\n            }\n            final Long clusterId = cluster.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.valueIn(clusterId);\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.valueIn(clusterId);\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.valueIn(clusterId);\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.valueIn(clusterId);\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, null, clusterId);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, null, clusterId);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Host host: hostDao.findByClusterId(clusterId)) {\n                if (host == null || host.getType() != Host.Type.Routing) {\n                    continue;\n                }\n                if (host.getStatus() == Status.Up) {\n                    metrics.incrUpResources();\n                }\n                metrics.incrTotalResources();\n                updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n            }\n\n            metricsResponse.setState(clusterResponse.getAllocationState(), clusterResponse.getManagedState());\n            metricsResponse.setResources(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","realPath":"plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public List<ZoneMetricsResponse> listZoneMetrics(List<ZoneResponse> zoneResponses) {\n        final List<ZoneMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ZoneResponse zoneResponse: zoneResponses) {\n            ZoneMetricsResponse metricsResponse = new ZoneMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, zoneResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate zone metrics response\");\n            }\n\n            final DataCenter zone = dataCenterDao.findByUuid(zoneResponse.getId());\n            if (zone == null) {\n                continue;\n            }\n            final Long zoneId = zone.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.value();\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.value();\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.value();\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.value();\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, zoneId, null);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, zoneId, null);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Cluster cluster : clusterDao.listClustersByDcId(zoneId)) {\n                if (cluster == null) {\n                    continue;\n                }\n                metrics.incrTotalResources();\n                if (cluster.getAllocationState() == Grouping.AllocationState.Enabled\n                        && cluster.getManagedState() == Managed.ManagedState.Managed) {\n                    metrics.incrUpResources();\n                }\n\n                for (final Host host: hostDao.findByClusterId(cluster.getId())) {\n                    if (host == null || host.getType() != Host.Type.Routing) {\n                        continue;\n                    }\n                    updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n                }\n            }\n\n            metricsResponse.setState(zoneResponse.getAllocationState());\n            metricsResponse.setResource(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","date":"2018-01-20 05:49:27","endLine":444,"groupId":"20429","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listZoneMetrics","params":"(List<ZoneResponse>zoneResponses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8b/76a1770a3c543f07393a56b3cd8f82744e996f.src","preCode":"    public List<ZoneMetricsResponse> listZoneMetrics(List<ZoneResponse> zoneResponses) {\n        final List<ZoneMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ZoneResponse zoneResponse: zoneResponses) {\n            ZoneMetricsResponse metricsResponse = new ZoneMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, zoneResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate zone metrics response\");\n            }\n\n            final DataCenter zone = dataCenterDao.findByUuid(zoneResponse.getId());\n            if (zone == null) {\n                continue;\n            }\n            final Long zoneId = zone.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.value();\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.value();\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.value();\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.value();\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, zoneId, null);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, zoneId, null);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Cluster cluster : clusterDao.listClustersByDcId(zoneId)) {\n                if (cluster == null) {\n                    continue;\n                }\n                metrics.incrTotalResources();\n                if (cluster.getAllocationState() == Grouping.AllocationState.Enabled\n                        && cluster.getManagedState() == Managed.ManagedState.Managed) {\n                    metrics.incrUpResources();\n                }\n\n                for (final Host host: hostDao.findByClusterId(cluster.getId())) {\n                    if (host == null || host.getType() != Host.Type.Routing) {\n                        continue;\n                    }\n                    updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n                }\n            }\n\n            metricsResponse.setState(zoneResponse.getAllocationState());\n            metricsResponse.setResource(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","realPath":"plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"N"}],"commitId":"a62a10c81439fc0af18ddd604c29b2314ff725cc","commitMessage":"@@@Merge branch '4.13'\n","date":"2020-02-26 23:18:41","modifiedFileCount":"23","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2021-09-08 12:44:06","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":3,"curCode":"    public List<ClusterMetricsResponse> listClusterMetrics(Pair<List<ClusterResponse>, Integer> clusterResponses) {\n        final List<ClusterMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ClusterResponse clusterResponse: clusterResponses.first()) {\n            ClusterMetricsResponse metricsResponse = new ClusterMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, clusterResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate cluster metrics response\");\n            }\n\n            final Cluster cluster = clusterDao.findByUuid(clusterResponse.getId());\n            if (cluster == null) {\n                continue;\n            }\n            final Long clusterId = cluster.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.valueIn(clusterId);\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.valueIn(clusterId);\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.valueIn(clusterId);\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.valueIn(clusterId);\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, null, clusterId);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, null, clusterId);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Host host: hostDao.findByClusterId(clusterId)) {\n                if (host == null || host.getType() != Host.Type.Routing) {\n                    continue;\n                }\n                if (host.getStatus() == Status.Up) {\n                    metrics.incrUpResources();\n                }\n                metrics.incrTotalResources();\n                updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n            }\n\n            metricsResponse.setState(clusterResponse.getAllocationState(), clusterResponse.getManagedState());\n            metricsResponse.setResources(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponse.setHasAnnotation(clusterResponse.hasAnnotation());\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","date":"2021-09-08 12:44:06","endLine":391,"groupId":"104179","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"listClusterMetrics","params":"(Pair<List<ClusterResponse>@Integer>clusterResponses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cb/16501ed8d5851edc0f8ca6f597c59310bf106a.src","preCode":"    public List<ClusterMetricsResponse> listClusterMetrics(Pair<List<ClusterResponse>, Integer> clusterResponses) {\n        final List<ClusterMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ClusterResponse clusterResponse: clusterResponses.first()) {\n            ClusterMetricsResponse metricsResponse = new ClusterMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, clusterResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate cluster metrics response\");\n            }\n\n            final Cluster cluster = clusterDao.findByUuid(clusterResponse.getId());\n            if (cluster == null) {\n                continue;\n            }\n            final Long clusterId = cluster.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.valueIn(clusterId);\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.valueIn(clusterId);\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.valueIn(clusterId);\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.valueIn(clusterId);\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, null, clusterId);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, null, clusterId);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Host host: hostDao.findByClusterId(clusterId)) {\n                if (host == null || host.getType() != Host.Type.Routing) {\n                    continue;\n                }\n                if (host.getStatus() == Status.Up) {\n                    metrics.incrUpResources();\n                }\n                metrics.incrTotalResources();\n                updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n            }\n\n            metricsResponse.setState(clusterResponse.getAllocationState(), clusterResponse.getManagedState());\n            metricsResponse.setResources(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","realPath":"plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2021-09-08 12:44:06","commitOrder":3,"curCode":"    public List<ZoneMetricsResponse> listZoneMetrics(List<ZoneResponse> zoneResponses) {\n        final List<ZoneMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ZoneResponse zoneResponse: zoneResponses) {\n            ZoneMetricsResponse metricsResponse = new ZoneMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, zoneResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate zone metrics response\");\n            }\n\n            final DataCenter zone = dataCenterDao.findByUuid(zoneResponse.getId());\n            if (zone == null) {\n                continue;\n            }\n            final Long zoneId = zone.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.value();\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.value();\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.value();\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.value();\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, zoneId, null);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, zoneId, null);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Cluster cluster : clusterDao.listClustersByDcId(zoneId)) {\n                if (cluster == null) {\n                    continue;\n                }\n                metrics.incrTotalResources();\n                if (cluster.getAllocationState() == Grouping.AllocationState.Enabled\n                        && cluster.getManagedState() == Managed.ManagedState.Managed) {\n                    metrics.incrUpResources();\n                }\n\n                for (final Host host: hostDao.findByClusterId(cluster.getId())) {\n                    if (host == null || host.getType() != Host.Type.Routing) {\n                        continue;\n                    }\n                    updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n                }\n            }\n\n            metricsResponse.setHasAnnotation(zoneResponse.hasAnnotation());\n            metricsResponse.setState(zoneResponse.getAllocationState());\n            metricsResponse.setResource(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","date":"2021-09-08 12:44:06","endLine":471,"groupId":"104179","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"listZoneMetrics","params":"(List<ZoneResponse>zoneResponses)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cb/16501ed8d5851edc0f8ca6f597c59310bf106a.src","preCode":"    public List<ZoneMetricsResponse> listZoneMetrics(List<ZoneResponse> zoneResponses) {\n        final List<ZoneMetricsResponse> metricsResponses = new ArrayList<>();\n        for (final ZoneResponse zoneResponse: zoneResponses) {\n            ZoneMetricsResponse metricsResponse = new ZoneMetricsResponse();\n\n            try {\n                BeanUtils.copyProperties(metricsResponse, zoneResponse);\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to generate zone metrics response\");\n            }\n\n            final DataCenter zone = dataCenterDao.findByUuid(zoneResponse.getId());\n            if (zone == null) {\n                continue;\n            }\n            final Long zoneId = zone.getId();\n\n            \r\n            final Double cpuThreshold = AlertManager.CPUCapacityThreshold.value();\n            final Double memoryThreshold = AlertManager.MemoryCapacityThreshold.value();\n            final Float cpuDisableThreshold = DeploymentClusterPlanner.ClusterCPUCapacityDisableThreshold.value();\n            final Float memoryDisableThreshold = DeploymentClusterPlanner.ClusterMemoryCapacityDisableThreshold.value();\n\n            \r\n            final CapacityDaoImpl.SummedCapacity cpuCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_CPU, zoneId, null);\n            final CapacityDaoImpl.SummedCapacity memoryCapacity = getCapacity((int) Capacity.CAPACITY_TYPE_MEMORY, zoneId, null);\n            final Metrics metrics = new Metrics(cpuCapacity, memoryCapacity);\n\n            for (final Cluster cluster : clusterDao.listClustersByDcId(zoneId)) {\n                if (cluster == null) {\n                    continue;\n                }\n                metrics.incrTotalResources();\n                if (cluster.getAllocationState() == Grouping.AllocationState.Enabled\n                        && cluster.getManagedState() == Managed.ManagedState.Managed) {\n                    metrics.incrUpResources();\n                }\n\n                for (final Host host: hostDao.findByClusterId(cluster.getId())) {\n                    if (host == null || host.getType() != Host.Type.Routing) {\n                        continue;\n                    }\n                    updateHostMetrics(metrics, hostJoinDao.findById(host.getId()));\n                }\n            }\n\n            metricsResponse.setState(zoneResponse.getAllocationState());\n            metricsResponse.setResource(metrics.getUpResources(), metrics.getTotalResources());\n            \r\n            metricsResponse.setCpuTotal(metrics.getTotalCpu());\n            metricsResponse.setCpuAllocated(metrics.getCpuAllocated(), metrics.getTotalCpu());\n            if (metrics.getCpuUsedPercentage() > 0L) {\n                metricsResponse.setCpuUsed(metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n                metricsResponse.setCpuMaxDeviation(metrics.getMaximumCpuUsage(), metrics.getCpuUsedPercentage(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setMemTotal(metrics.getTotalMemory());\n            metricsResponse.setMemAllocated(metrics.getMemoryAllocated(), metrics.getTotalMemory());\n            if (metrics.getMemoryUsed() > 0L) {\n                metricsResponse.setMemUsed(metrics.getMemoryUsed(), metrics.getTotalMemory());\n                metricsResponse.setMemMaxDeviation(metrics.getMaximumMemoryUsage(), metrics.getMemoryUsed(), metrics.getTotalHosts());\n            }\n            \r\n            metricsResponse.setCpuUsageThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuThreshold);\n            metricsResponse.setCpuUsageDisableThreshold(metrics.getCpuUsedPercentage(), metrics.getTotalHosts(), cpuDisableThreshold);\n            metricsResponse.setCpuAllocatedThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuThreshold);\n            metricsResponse.setCpuAllocatedDisableThreshold(metrics.getCpuAllocated(), metrics.getTotalCpu(), cpuDisableThreshold);\n            \r\n            metricsResponse.setMemoryUsageThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryUsageDisableThreshold(metrics.getMemoryUsed(), metrics.getTotalMemory(), memoryDisableThreshold);\n            metricsResponse.setMemoryAllocatedThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryThreshold);\n            metricsResponse.setMemoryAllocatedDisableThreshold(metrics.getMemoryAllocated(), metrics.getTotalMemory(), memoryDisableThreshold);\n\n            metricsResponses.add(metricsResponse);\n        }\n        return metricsResponses;\n    }\n","realPath":"plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"}]
