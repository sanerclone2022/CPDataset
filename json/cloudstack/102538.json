[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void execute() {\n        try {\n            final boolean result = _vpcService.restartVpc(getId(), getCleanup(), getMakeredundant());\n            if (result) {\n                final SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to restart VPC\");\n            }\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (final ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (final InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":118,"groupId":"18705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ea/34c6a95807a84604a3c106f875519bb97c09a6.src","preCode":"    public void execute() {\n        try {\n            final boolean result = _vpcService.restartVpc(getId(), getCleanup(), getMakeredundant());\n            if (result) {\n                final SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to restart VPC\");\n            }\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (final ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (final InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/RestartVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void execute() {\n        try {\n            boolean result = _vpcService.deleteVpc(getId());\n            if (result) {\n                SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to delete VPC\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":90,"groupId":"18705","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/13b63e6a226bcf2117b5dff82b017b685b1e48.src","preCode":"    public void execute() {\n        try {\n            boolean result = _vpcService.deleteVpc(getId());\n            if (result) {\n                SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to delete VPC\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/DeleteVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-30 19:39:03","commitOrder":2,"curCode":"    public void execute() {\n        try {\n            final boolean result = _vpcService.restartVpc(this);\n            if (result) {\n                final SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to restart VPC\");\n            }\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (final ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (final InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n    }\n","date":"2020-01-30 19:39:03","endLine":112,"groupId":"102538","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8e/d2ab26a225fda1014bdf5d8d19219865e07b1a.src","preCode":"    public void execute() {\n        try {\n            final boolean result = _vpcService.restartVpc(getId(), getCleanup(), getMakeredundant());\n            if (result) {\n                final SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to restart VPC\");\n            }\n        } catch (final ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (final ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (final InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/RestartVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void execute() {\n        try {\n            boolean result = _vpcService.deleteVpc(getId());\n            if (result) {\n                SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to delete VPC\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":90,"groupId":"102538","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/13b63e6a226bcf2117b5dff82b017b685b1e48.src","preCode":"    public void execute() {\n        try {\n            boolean result = _vpcService.deleteVpc(getId());\n            if (result) {\n                SuccessResponse response = new SuccessResponse(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to delete VPC\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/DeleteVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"c0abfce8fa3bd1603a4b1ea6fe9908623e04a827","commitMessage":"@@@Health check feature for virtual router (#3575)\n\n\n","date":"2020-01-30 19:39:03","modifiedFileCount":"39","status":"M","submitter":"Anurag Awasthi"}]
