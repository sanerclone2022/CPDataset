[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public String downloadS3Template(S3TO s3, long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n\n        URI uri;\n        try {\n            uri = new URI(url);\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n        }\n        TemplateDownloader td;\n        if ((uri != null) && (uri.getScheme() != null)) {\n            if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                td = new S3TemplateDownloader(s3, url, installPathPrefix, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n            } else {\n                throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n            }\n        } else {\n            throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n        }\n        DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n        dj.setTmpltPath(installPathPrefix);\n        jobs.put(jobId, dj);\n        threadPool.execute(td);\n\n        return jobId;\n    }\n","date":"2018-01-20 05:49:27","endLine":526,"groupId":"13243","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"downloadS3Template","params":"(S3TOs3@longid@Stringurl@Stringname@ImageFormatformat@booleanhvm@LongaccountId@Stringdescr@Stringcksum@StringinstallPathPrefix@Stringuser@Stringpassword@longmaxTemplateSizeInBytes@Proxyproxy@ResourceTyperesourceType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5f/a13a34cfc35830fdd76799838ab8af27b720d9.src","preCode":"    public String downloadS3Template(S3TO s3, long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n\n        URI uri;\n        try {\n            uri = new URI(url);\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n        }\n        TemplateDownloader td;\n        if ((uri != null) && (uri.getScheme() != null)) {\n            if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                td = new S3TemplateDownloader(s3, url, installPathPrefix, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n            } else {\n                throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n            }\n        } else {\n            throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n        }\n        DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n        dj.setTmpltPath(installPathPrefix);\n        jobs.put(jobId, dj);\n        threadPool.execute(td);\n\n        return jobId;\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/DownloadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public String downloadPublicTemplate(long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String templatePath, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n        String tmpDir = installPathPrefix;\n\n        try {\n\n            if (!_storage.mkdirs(tmpDir)) {\n                s_logger.warn(\"Unable to create \" + tmpDir);\n                return \"Unable to create \" + tmpDir;\n            }\n            \r\n            File file =\n                    ResourceType.TEMPLATE == resourceType ? _storage.getFile(tmpDir + File.separator + TemplateLocation.Filename) : _storage.getFile(tmpDir + File.separator +\n                            \"volume.properties\");\n                    if (file.exists()) {\n                        if(! file.delete()) {\n                            s_logger.warn(\"Deletion of file '\" + file.getAbsolutePath() + \"' failed.\");\n                        }\n                    }\n\n                    if (!file.createNewFile()) {\n                        s_logger.warn(\"Unable to create new file: \" + file.getAbsolutePath());\n                        return \"Unable to create new file: \" + file.getAbsolutePath();\n                    }\n\n                    URI uri;\n                    try {\n                        uri = new URI(url);\n                    } catch (URISyntaxException e) {\n                        throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n                    }\n                    TemplateDownloader td;\n                    if ((uri != null) && (uri.getScheme() != null)) {\n                        if (uri.getPath().endsWith(\".metalink\")) {\n                            td = new MetalinkTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                            td = new HttpTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"file\")) {\n                            td = new LocalTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"scp\")) {\n                            td = new ScpTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"nfs\") || uri.getScheme().equalsIgnoreCase(\"cifs\")) {\n                            td = null;\n                            \r\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        } else {\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        }\n                    } else {\n                        throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n                    }\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n                    dj.setTmpltPath(templatePath);\n                    jobs.put(jobId, dj);\n                    threadPool.execute(td);\n\n                    return jobId;\n        } catch (IOException e) {\n            s_logger.warn(\"Unable to download to \" + tmpDir, e);\n            return null;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":597,"groupId":"10702","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"downloadPublicTemplate","params":"(longid@Stringurl@Stringname@ImageFormatformat@booleanhvm@LongaccountId@Stringdescr@Stringcksum@StringinstallPathPrefix@StringtemplatePath@Stringuser@Stringpassword@longmaxTemplateSizeInBytes@Proxyproxy@ResourceTyperesourceType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5f/a13a34cfc35830fdd76799838ab8af27b720d9.src","preCode":"    public String downloadPublicTemplate(long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String templatePath, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n        String tmpDir = installPathPrefix;\n\n        try {\n\n            if (!_storage.mkdirs(tmpDir)) {\n                s_logger.warn(\"Unable to create \" + tmpDir);\n                return \"Unable to create \" + tmpDir;\n            }\n            \r\n            File file =\n                    ResourceType.TEMPLATE == resourceType ? _storage.getFile(tmpDir + File.separator + TemplateLocation.Filename) : _storage.getFile(tmpDir + File.separator +\n                            \"volume.properties\");\n                    if (file.exists()) {\n                        if(! file.delete()) {\n                            s_logger.warn(\"Deletion of file '\" + file.getAbsolutePath() + \"' failed.\");\n                        }\n                    }\n\n                    if (!file.createNewFile()) {\n                        s_logger.warn(\"Unable to create new file: \" + file.getAbsolutePath());\n                        return \"Unable to create new file: \" + file.getAbsolutePath();\n                    }\n\n                    URI uri;\n                    try {\n                        uri = new URI(url);\n                    } catch (URISyntaxException e) {\n                        throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n                    }\n                    TemplateDownloader td;\n                    if ((uri != null) && (uri.getScheme() != null)) {\n                        if (uri.getPath().endsWith(\".metalink\")) {\n                            td = new MetalinkTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                            td = new HttpTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"file\")) {\n                            td = new LocalTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"scp\")) {\n                            td = new ScpTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"nfs\") || uri.getScheme().equalsIgnoreCase(\"cifs\")) {\n                            td = null;\n                            \r\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        } else {\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        }\n                    } else {\n                        throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n                    }\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n                    dj.setTmpltPath(templatePath);\n                    jobs.put(jobId, dj);\n                    threadPool.execute(td);\n\n                    return jobId;\n        } catch (IOException e) {\n            s_logger.warn(\"Unable to download to \" + tmpDir, e);\n            return null;\n        }\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/DownloadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-01-31 16:48:11","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public String downloadS3Template(S3TO s3, long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n\n        URI uri;\n        try {\n            uri = new URI(url);\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n        }\n        TemplateDownloader td;\n        if ((uri != null) && (uri.getScheme() != null)) {\n            if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                td = new S3TemplateDownloader(s3, url, installPathPrefix, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n            } else {\n                throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n            }\n        } else {\n            throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n        }\n        DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n        dj.setTmpltPath(installPathPrefix);\n        jobs.put(jobId, dj);\n        threadPool.execute(td);\n\n        return jobId;\n    }\n","date":"2018-01-20 05:49:27","endLine":526,"groupId":"104691","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"downloadS3Template","params":"(S3TOs3@longid@Stringurl@Stringname@ImageFormatformat@booleanhvm@LongaccountId@Stringdescr@Stringcksum@StringinstallPathPrefix@Stringuser@Stringpassword@longmaxTemplateSizeInBytes@Proxyproxy@ResourceTyperesourceType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5f/a13a34cfc35830fdd76799838ab8af27b720d9.src","preCode":"    public String downloadS3Template(S3TO s3, long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n\n        URI uri;\n        try {\n            uri = new URI(url);\n        } catch (URISyntaxException e) {\n            throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n        }\n        TemplateDownloader td;\n        if ((uri != null) && (uri.getScheme() != null)) {\n            if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                td = new S3TemplateDownloader(s3, url, installPathPrefix, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n            } else {\n                throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n            }\n        } else {\n            throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n        }\n        DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n        dj.setTmpltPath(installPathPrefix);\n        jobs.put(jobId, dj);\n        threadPool.execute(td);\n\n        return jobId;\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/DownloadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"N"},{"authorDate":"2020-01-31 16:48:11","commitOrder":2,"curCode":"    public String downloadPublicTemplate(long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String templatePath, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n        String tmpDir = installPathPrefix;\n\n        try {\n\n            if (!_storage.mkdirs(tmpDir)) {\n                LOGGER.warn(\"Unable to create \" + tmpDir);\n                return \"Unable to create \" + tmpDir;\n            }\n            \r\n            File file =\n                    ResourceType.TEMPLATE == resourceType ? _storage.getFile(tmpDir + File.separator + TemplateLocation.Filename) : _storage.getFile(tmpDir + File.separator +\n                            \"volume.properties\");\n                    if (file.exists()) {\n                        if(! file.delete()) {\n                            LOGGER.warn(\"Deletion of file '\" + file.getAbsolutePath() + \"' failed.\");\n                        }\n                    }\n\n                    if (!file.createNewFile()) {\n                        LOGGER.warn(\"Unable to create new file: \" + file.getAbsolutePath());\n                        return \"Unable to create new file: \" + file.getAbsolutePath();\n                    }\n\n                    URI uri;\n                    try {\n                        uri = new URI(url);\n                    } catch (URISyntaxException e) {\n                        throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n                    }\n                    TemplateDownloader td;\n                    if ((uri != null) && (uri.getScheme() != null)) {\n                        if (uri.getPath().endsWith(\".metalink\")) {\n                            td = new MetalinkTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                            td = new HttpTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"file\")) {\n                            td = new LocalTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"scp\")) {\n                            td = new ScpTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"nfs\") || uri.getScheme().equalsIgnoreCase(\"cifs\")) {\n                            td = null;\n                            \r\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        } else {\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        }\n                    } else {\n                        throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n                    }\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n                    dj.setTmpltPath(templatePath);\n                    jobs.put(jobId, dj);\n                    threadPool.execute(td);\n\n                    return jobId;\n        } catch (IOException e) {\n            LOGGER.warn(\"Unable to download to \" + tmpDir, e);\n            return null;\n        }\n    }\n","date":"2020-01-31 16:48:11","endLine":651,"groupId":"104691","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"downloadPublicTemplate","params":"(longid@Stringurl@Stringname@ImageFormatformat@booleanhvm@LongaccountId@Stringdescr@Stringcksum@StringinstallPathPrefix@StringtemplatePath@Stringuser@Stringpassword@longmaxTemplateSizeInBytes@Proxyproxy@ResourceTyperesourceType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f6/de4c3d0e8c5387602680cee62560b33a0683e7.src","preCode":"    public String downloadPublicTemplate(long id, String url, String name, ImageFormat format, boolean hvm, Long accountId, String descr, String cksum,\n            String installPathPrefix, String templatePath, String user, String password, long maxTemplateSizeInBytes, Proxy proxy, ResourceType resourceType) {\n        UUID uuid = UUID.randomUUID();\n        String jobId = uuid.toString();\n        String tmpDir = installPathPrefix;\n\n        try {\n\n            if (!_storage.mkdirs(tmpDir)) {\n                s_logger.warn(\"Unable to create \" + tmpDir);\n                return \"Unable to create \" + tmpDir;\n            }\n            \r\n            File file =\n                    ResourceType.TEMPLATE == resourceType ? _storage.getFile(tmpDir + File.separator + TemplateLocation.Filename) : _storage.getFile(tmpDir + File.separator +\n                            \"volume.properties\");\n                    if (file.exists()) {\n                        if(! file.delete()) {\n                            s_logger.warn(\"Deletion of file '\" + file.getAbsolutePath() + \"' failed.\");\n                        }\n                    }\n\n                    if (!file.createNewFile()) {\n                        s_logger.warn(\"Unable to create new file: \" + file.getAbsolutePath());\n                        return \"Unable to create new file: \" + file.getAbsolutePath();\n                    }\n\n                    URI uri;\n                    try {\n                        uri = new URI(url);\n                    } catch (URISyntaxException e) {\n                        throw new CloudRuntimeException(\"URI is incorrect: \" + url);\n                    }\n                    TemplateDownloader td;\n                    if ((uri != null) && (uri.getScheme() != null)) {\n                        if (uri.getPath().endsWith(\".metalink\")) {\n                            td = new MetalinkTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"http\") || uri.getScheme().equalsIgnoreCase(\"https\")) {\n                            td = new HttpTemplateDownloader(_storage, url, tmpDir, new Completion(jobId), maxTemplateSizeInBytes, user, password, proxy, resourceType);\n                        } else if (uri.getScheme().equalsIgnoreCase(\"file\")) {\n                            td = new LocalTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"scp\")) {\n                            td = new ScpTemplateDownloader(_storage, url, tmpDir, maxTemplateSizeInBytes, new Completion(jobId));\n                        } else if (uri.getScheme().equalsIgnoreCase(\"nfs\") || uri.getScheme().equalsIgnoreCase(\"cifs\")) {\n                            td = null;\n                            \r\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        } else {\n                            throw new CloudRuntimeException(\"Scheme is not supported \" + url);\n                        }\n                    } else {\n                        throw new CloudRuntimeException(\"Unable to download from URL: \" + url);\n                    }\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    DownloadJob dj = new DownloadJob(td, jobId, id, name, format, hvm, accountId, descr, cksum, installPathPrefix, resourceType);\n                    dj.setTmpltPath(templatePath);\n                    jobs.put(jobId, dj);\n                    threadPool.execute(td);\n\n                    return jobId;\n        } catch (IOException e) {\n            s_logger.warn(\"Unable to download to \" + tmpDir, e);\n            return null;\n        }\n    }\n","realPath":"services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/template/DownloadManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"M"}],"commitId":"424f10cc7778ca929f7cf90972f0bb34a80026ad","commitMessage":"@@@Merge remote-tracking branch 'origin/4.13'\n","date":"2020-01-31 16:48:11","modifiedFileCount":"5","status":"M","submitter":"Rohit Yadav"}]
