[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n            String poolId, String volumePath, String secStorageUrl, String workerVmName, Integer nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n            }\n\n            vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n\n            exportVolumeToSecondaryStroage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            vmMo.removeSnapshot(exportName, false);\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1027,"groupId":"17063","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyVolumeCommandcmd@StringvmName@longvolumeId@StringpoolId@StringvolumePath@StringsecStorageUrl@StringworkerVmName@IntegernfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/2410f4afebe2deec57f964a9d3c21b6e2251a1.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n            String poolId, String volumePath, String secStorageUrl, String workerVmName, Integer nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n            }\n\n            vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n\n            exportVolumeToSecondaryStroage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            vmMo.removeSnapshot(exportName, false);\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":976,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n            }\n\n            vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n\n            exportVolumeToSecondaryStroage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            vmMo.removeSnapshot(exportName, false);\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1016,"groupId":"7213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyCommandcmd@StringvmName@StringpoolId@StringvolumePath@StringdestVolumePath@StringsecStorageUrl@StringworkerVmName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n            }\n\n            vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n\n            exportVolumeToSecondaryStroage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            vmMo.removeSnapshot(exportName, false);\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":969,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-05-23 19:18:30","codes":[{"authorDate":"2019-05-23 19:18:30","commitOrder":2,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n            String poolId, String volumePath, String secStorageUrl, String workerVmName, Integer nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2019-05-23 19:18:29","endLine":1040,"groupId":"4926","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyVolumeCommandcmd@StringvmName@longvolumeId@StringpoolId@StringvolumePath@StringsecStorageUrl@StringworkerVmName@IntegernfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/3d25050c067e84284d8a741180b09090ae0e99.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n            String poolId, String volumePath, String secStorageUrl, String workerVmName, Integer nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n            }\n\n            vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n\n            exportVolumeToSecondaryStroage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            vmMo.removeSnapshot(exportName, false);\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":985,"status":"M"},{"authorDate":"2019-05-23 19:18:30","commitOrder":2,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2019-05-23 19:18:29","endLine":1021,"groupId":"11031","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyCommandcmd@StringvmName@StringpoolId@StringvolumePath@StringdestVolumePath@StringsecStorageUrl@StringworkerVmName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/6aca4f03c33977a5aec21efb5521dfdf324ba8.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n            }\n\n            vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n\n            exportVolumeToSecondaryStroage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            vmMo.removeSnapshot(exportName, false);\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":970,"status":"M"}],"commitId":"4f356392ab8b5ac064966af9b2e29e10f5867132","commitMessage":"@@@vmware: don't use redundant worker VM to extract volume (#3218)\n\nThis fixes the issue that VM with VMsnapshots fails to start after\nextract volume is done on a stopped VM.  on VMware.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-05-23 19:18:29","modifiedFileCount":"2","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-05-23 19:18:30","codes":[{"authorDate":"2020-08-19 17:23:38","commitOrder":3,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n                                                        String poolId, String volumePath, String secStorageUrl, String workerVmName, String nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2020-08-19 17:23:38","endLine":1042,"groupId":"4926","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyVolumeCommandcmd@StringvmName@longvolumeId@StringpoolId@StringvolumePath@StringsecStorageUrl@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/9e5b6ef6e5900494119a28d2c95d115969a2e2.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n            String poolId, String volumePath, String secStorageUrl, String workerVmName, Integer nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":987,"status":"M"},{"authorDate":"2019-05-23 19:18:30","commitOrder":3,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2019-05-23 19:18:29","endLine":1021,"groupId":"11031","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyCommandcmd@StringvmName@StringpoolId@StringvolumePath@StringdestVolumePath@StringsecStorageUrl@StringworkerVmName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/6aca4f03c33977a5aec21efb5521dfdf324ba8.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":970,"status":"N"}],"commitId":"d57aa835174c9dd045930d1396ce4bee9a275a60","commitMessage":"@@@server: Added nfs minor version support (#4180)\n\nThis PR adds minor version support when mounting nfs on the SSVM as requested in #2861\n\nThe global setting \"secstorage.nfs.version\" has been changed to use the String data type which allows any minor version to be specified.","date":"2020-08-19 17:23:38","modifiedFileCount":"30","status":"M","submitter":"Spaceman1984"},{"authorTime":"2020-10-09 23:06:07","codes":[{"authorDate":"2020-10-09 23:06:07","commitOrder":4,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n                                                        String poolId, String volumePath, String secStorageUrl, String workerVmName, String nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-09 23:06:07","endLine":1042,"groupId":"4926","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyVolumeCommandcmd@StringvmName@longvolumeId@StringpoolId@StringvolumePath@StringsecStorageUrl@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d5/9fcfbdf12171557d6a73a8a242fbea6a33b3c3.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n                                                        String poolId, String volumePath, String secStorageUrl, String workerVmName, String nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":987,"status":"M"},{"authorDate":"2020-10-09 23:06:07","commitOrder":4,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-09 23:06:07","endLine":1028,"groupId":"703","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyCommandcmd@StringvmName@StringpoolId@StringvolumePath@StringdestVolumePath@StringsecStorageUrl@StringworkerVmName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/df/780e76216e329f36a9a70488fde3e5ea99618b.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":977,"status":"M"}],"commitId":"479ef8aafaa6162daa1d26058d225d885065f4cc","commitMessage":"@@@VMware: match hardware version for worker VM when taking a snapshot (#4321)\n\n* Add hardware version to worker VM\n\n* Added worker VM hardware version when creating a template from a volume and migrating a detached volume\n\n* Add null parameter back that was removed by merge","date":"2020-10-09 23:06:07","modifiedFileCount":"5","status":"M","submitter":"Spaceman1984"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":5,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n                                                        String poolId, String volumePath, String secStorageUrl, String workerVmName, String nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1, null),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":1042,"groupId":"4926","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyVolumeCommandcmd@StringvmName@longvolumeId@StringpoolId@StringvolumePath@StringsecStorageUrl@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/2b5a02f6c741bc3cd7910996c540a2ddfe6a91.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n                                                        String poolId, String volumePath, String secStorageUrl, String workerVmName, String nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":987,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":5,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            }\n\n            exportVolumeToSecondaryStorage(hyperHost.getContext(), vmMo, hyperHost, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1, null), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":1138,"groupId":"15322","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyCommandcmd@StringvmName@StringpoolId@StringvolumePath@StringdestVolumePath@StringsecStorageUrl@StringworkerVmName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/85/aacd34f42c8bccea920b949c272fc6721f4cf2.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2021-09-02 18:43:33","codes":[{"authorDate":"2021-09-02 18:43:33","commitOrder":6,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n                                                        String poolId, String volumePath, String secStorageUrl, String workerVmName, String nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1, null),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","date":"2021-09-02 18:43:33","endLine":1039,"groupId":"103015","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyVolumeCommandcmd@StringvmName@longvolumeId@StringpoolId@StringvolumePath@StringsecStorageUrl@StringworkerVmName@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/d1f7d157953d800633d3fce0f3d69921e0e37b.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyVolumeCommand cmd, String vmName, long volumeId,\n                                                        String poolId, String volumePath, String secStorageUrl, String workerVmName, String nfsVersion) throws Exception {\n\n        String volumeFolder = String.valueOf(volumeId) + \"/\";\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString();\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            } else {\n                vmMo.createSnapshot(exportName, \"Temporary snapshot for copy-volume command\", false, false);\n            }\n\n            exportVolumeToSecondaryStorage(vmMo, volumePath, secStorageUrl, \"volumes/\" + volumeFolder, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1, null),\n                    nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<String, String>(volumeFolder, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":985,"status":"M"},{"authorDate":"2021-09-02 18:43:33","commitOrder":6,"curCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            }\n\n            exportVolumeToSecondaryStorage(hyperHost.getContext(), vmMo, hyperHost, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1, null), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisksAndDestroy();\n            }\n        }\n    }\n","date":"2021-09-02 18:43:33","endLine":1143,"groupId":"103015","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"copyVolumeToSecStorage","params":"(VmwareHostServicehostService@VmwareHypervisorHosthyperHost@CopyCommandcmd@StringvmName@StringpoolId@StringvolumePath@StringdestVolumePath@StringsecStorageUrl@StringworkerVmName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/81/0f355662ad1cc9201a5d818e6a8e758c76960b.src","preCode":"    private Pair<String, String> copyVolumeToSecStorage(VmwareHostService hostService, VmwareHypervisorHost hyperHost, CopyCommand cmd, String vmName, String poolId,\n                                                        String volumePath, String destVolumePath, String secStorageUrl, String workerVmName) throws Exception {\n        VirtualMachineMO workerVm = null;\n        VirtualMachineMO vmMo = null;\n        String exportName = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String searchExcludedFolders = cmd.getContextParam(\"searchexludefolders\");\n\n        try {\n            ManagedObjectReference morDs = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, poolId);\n\n            if (morDs == null) {\n                String msg = \"Unable to find volumes's storage pool for copy volume operation\";\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n\n            boolean clonedWorkerVMNeeded = true;\n            vmMo = hyperHost.findVmOnHyperHost(vmName);\n            if (vmMo == null || VmwareResource.getVmState(vmMo) == PowerState.PowerOff) {\n                \r\n                DatastoreMO dsMo = new DatastoreMO(hyperHost.getContext(), morDs);\n                workerVm = HypervisorHostHelper.createWorkerVM(hyperHost, dsMo, workerVmName, null);\n\n                if (workerVm == null) {\n                    String msg = \"Unable to create worker VM to execute CopyVolumeCommand\";\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                String datastoreVolumePath = getVolumePathInDatastore(dsMo, volumePath + \".vmdk\", searchExcludedFolders);\n                workerVm.attachDisk(new String[] {datastoreVolumePath}, morDs);\n                vmMo = workerVm;\n                clonedWorkerVMNeeded = false;\n            }\n\n            exportVolumeToSecondaryStorage(hyperHost.getContext(), vmMo, hyperHost, volumePath, secStorageUrl, destVolumePath, exportName, hostService.getWorkerName(hyperHost.getContext(), cmd, 1, null), _nfsVersion, clonedWorkerVMNeeded);\n            return new Pair<>(destVolumePath, exportName);\n\n        } finally {\n            if (vmMo != null && vmMo.getSnapshotMor(exportName) != null) {\n                vmMo.removeSnapshot(exportName, false);\n            }\n            if (workerVm != null) {\n                \r\n                workerVm.detachAllDisks();\n                workerVm.destroy();\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1095,"status":"M"}],"commitId":"56f4da6dce8aefc106c4697d9fbbfe47755336ca","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15' into main\n","date":"2021-09-02 18:43:33","modifiedFileCount":"15","status":"M","submitter":"Abhishek Kumar"}]
