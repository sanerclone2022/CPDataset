[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":152,"groupId":"15099","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/99/c1719e1b685aa4ccd4055780c9b332f51cb5f8.src","preCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(ResponseView.Restricted, vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":184,"groupId":"15099","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/e50178d9b86d35e9a62d63e7d04636fbb329cd.src","preCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(ResponseView.Restricted, vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/CreateVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2019-07-27 22:51:43","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":152,"groupId":"15099","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/99/c1719e1b685aa4ccd4055780c9b332f51cb5f8.src","preCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"},{"authorDate":"2019-07-27 22:51:43","commitOrder":2,"curCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(getResponseView(), vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","date":"2019-07-27 22:51:43","endLine":185,"groupId":"15099","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/6568fbe59438dbe01b85602f02562702bbfdee.src","preCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(ResponseView.Restricted, vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/CreateVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"7a27e35a612f13a0ce43459b22e01d9b69627220","commitMessage":"@@@Refactoring to remove duplicate code. (#3152)\n\nMake use of Java 8 default implementation in interfaces. \nto remove code duplication between XxxCmd and XxxCmdAsAdmin.\n\nRefactor checkFormat by pre-calculating the supported\nextensions. Also make use of this in ImageStoreUtil.\nMakes it easier to add new file and compression formats.\n","date":"2019-07-27 22:51:43","modifiedFileCount":"111","status":"M","submitter":"Frank Maximus"},{"authorTime":"2019-08-02 20:19:44","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":152,"groupId":"15099","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/99/c1719e1b685aa4ccd4055780c9b332f51cb5f8.src","preCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"},{"authorDate":"2019-08-02 20:19:44","commitOrder":3,"curCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(ResponseView.Restricted, vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","date":"2019-08-02 20:19:44","endLine":184,"groupId":"15099","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e5/e50178d9b86d35e9a62d63e7d04636fbb329cd.src","preCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(getResponseView(), vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/CreateVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"3dad7f313404546a7a6f46951e44c91240df5b84","commitMessage":"@@@Merge pull request #3537 from shapeblue/upload-iso-template-fix\n\nRevert #3152","date":"2019-08-02 20:19:44","modifiedFileCount":"111","status":"M","submitter":"Andrija Panic"},{"authorTime":"2019-09-25 12:51:35","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":152,"groupId":"102352","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/99/c1719e1b685aa4ccd4055780c9b332f51cb5f8.src","preCode":"    public void execute() {\n        VpcOffering vpc = _vpcProvSvc.getVpcOffering(getEntityId());\n        if (vpc != null) {\n            VpcOfferingResponse response = _responseGenerator.createVpcOfferingResponse(vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC offering\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vpc/CreateVPCOfferingCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"},{"authorDate":"2019-09-25 12:51:35","commitOrder":4,"curCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(getResponseView(), vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","date":"2019-09-25 12:51:35","endLine":185,"groupId":"102352","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/6568fbe59438dbe01b85602f02562702bbfdee.src","preCode":"    public void execute() {\n        Vpc vpc = null;\n        try {\n            if (isStart()) {\n                _vpcService.startVpc(getEntityId(), true);\n            } else {\n                s_logger.debug(\"Not starting VPC as \" + ApiConstants.START + \"=false was passed to the API\");\n             }\n            vpc = _entityMgr.findById(Vpc.class, getEntityId());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        }\n\n        if (vpc != null) {\n            VpcResponse response = _responseGenerator.createVpcResponse(ResponseView.Restricted, vpc);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create VPC\");\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vpc/CreateVPCCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"7f91964aa918657c77156915020c24d496658e5d","commitMessage":"@@@refactoring: Remove duplicate code (by Frank/Nuage) (#3538)\n\nRefactor: Cleanup duplicate code\n\nMake use of Java 8 default implementation in interfaces. \nto remove code duplication between XxxCmd and XxxCmdAsAdmin.\nRefactor checkFormat by pre-calculating the supported\nextensions. Also make use of this in ImageStoreUtil.\nMakes it easier to add new file and compression formats.","date":"2019-09-25 12:51:35","modifiedFileCount":"112","status":"M","submitter":"Rohit Yadav"}]
