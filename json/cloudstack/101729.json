[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.getUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1363,"groupId":"24966","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewVM","params":"(AutoScaleVmGroupVOasGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0d/5da2ff5b4952e185fd52ee538c89aa94a05be8.src","preCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.getUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1288,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":597,"groupId":"24966","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/81/61fb2564b17a4698d6c597799e5eb0d32ed8fd.src","preCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/DeployVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":2,"curCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.isUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-09-22 23:20:48","endLine":1363,"groupId":"24966","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewVM","params":"(AutoScaleVmGroupVOasGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f3/81ce093eea35ea422a6a5d048b5ef14286ce1d.src","preCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.getUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1288,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":597,"groupId":"24966","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/81/61fb2564b17a4698d6c597799e5eb0d32ed8fd.src","preCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/DeployVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"N"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-08-09 18:44:46","commitOrder":3,"curCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.isUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null, null);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null, null);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null, null);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2019-08-09 18:44:46","endLine":1363,"groupId":"24966","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createNewVM","params":"(AutoScaleVmGroupVOasGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1b/936e10d822eb2f0abf884da44a8a9468e9825d.src","preCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.isUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1288,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":597,"groupId":"24966","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/81/61fb2564b17a4698d6c597799e5eb0d32ed8fd.src","preCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/DeployVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"N"}],"commitId":"3c2af55d81dbfaf17a3bf0b6247ecd830df12996","commitMessage":"@@@vmware: allow configuring appliances on the VM instance wizard when OVF properties are available (#3271)\n\nProblem: In Vmware.  appliances that have options that are required to be answered before deployments are configurable through vSphere vCenter user interface but it is not possible from the CloudStack user interface.\n\nRoot cause: CloudStack does not handle vApp configuration options during deployments if the appliance contains configurable options. These configurations are mandatory for VM deployment from the appliance on Vmware vSphere vCenter. As shown in the image below.  Vmware detects there are mandatory configurations that the administrator must set before deploy the VM from the appliance (in red on the image below):\n\nSolution:\nOn template registration.  after it is downloaded to secondary storage.  the OVF file is examined and OVF properties are extracted from the file when available.\nOVF properties extracted from templates after being downloaded to secondary storage are stored on the new table 'template_ovf_properties'.\nA new optional section is added to the VM deployment wizard in the UI:\nIf the selected template does not contain OVF properties.  then the optional section is not displayed on the wizard.\nIf the selected template contains OVF properties.  then the optional new section is displayed. Each OVF property is displayed and the user must complete every property before proceeding to the next section.\nIf any configuration property is empty.  then a dialog is displayed indicating that there are empty properties which must be set before proceeding\nimage\nThe specific OVF properties set on deployment are stored on the 'user_vm_details' table with the prefix: 'ovfproperties-'.\nThe VM is configured with the vApp configuration section containing the values that the user provided on the wizard.","date":"2019-08-09 18:44:46","modifiedFileCount":"26","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-06-08 19:40:00","commitOrder":4,"curCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.isUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null, null, true);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null, null, true);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null, null, true);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2021-06-08 19:40:00","endLine":1363,"groupId":"101729","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createNewVM","params":"(AutoScaleVmGroupVOasGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5e/7f0a9526434359794aba33315df68c83534459.src","preCode":"    private long createNewVM(AutoScaleVmGroupVO asGroup) {\n        AutoScaleVmProfileVO profileVo = _autoScaleVmProfileDao.findById(asGroup.getProfileId());\n        long templateId = profileVo.getTemplateId();\n        long serviceOfferingId = profileVo.getServiceOfferingId();\n        if (templateId == -1) {\n            return -1;\n        }\n        \r\n        try {\n            \r\n            Account owner = _accountService.getActiveAccountById(profileVo.getAccountId());\n\n            DataCenter zone = _entityMgr.findById(DataCenter.class, profileVo.getZoneId());\n            if (zone == null) {\n                throw new InvalidParameterValueException(\"Unable to find zone by id=\" + profileVo.getZoneId());\n            }\n\n            ServiceOffering serviceOffering = _entityMgr.findById(ServiceOffering.class, serviceOfferingId);\n            if (serviceOffering == null) {\n                throw new InvalidParameterValueException(\"Unable to find service offering: \" + serviceOfferingId);\n            }\n\n            VirtualMachineTemplate template = _entityMgr.findById(VirtualMachineTemplate.class, templateId);\n            \r\n            if (template == null) {\n                throw new InvalidParameterValueException(\"Unable to use template \" + templateId);\n            }\n\n            if (!zone.isLocalStorageEnabled()) {\n                if (serviceOffering.isUseLocalStorage()) {\n                    throw new InvalidParameterValueException(\"Zone is not configured to use local storage but service offering \" + serviceOffering.getName() + \" uses it\");\n                }\n            }\n\n            UserVm vm = null;\n            IpAddresses addrs = new IpAddresses(null, null);\n            if (zone.getNetworkType() == NetworkType.Basic) {\n                vm = _userVmService.createBasicSecurityGroupVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                    getCurrentTimeStampString(),\n                    \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null,\n                    null, true, null, null, null, null, null, null, null);\n            } else {\n                if (zone.isSecurityGroupEnabled()) {\n                    vm = _userVmService.createAdvancedSecurityGroupVirtualMachine(zone, serviceOffering, template, null, null,\n                        owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(), null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null,\n                        null, null, true, null, null, null, null, null, null, null);\n\n                } else {\n                    vm = _userVmService.createAdvancedVirtualMachine(zone, serviceOffering, template, null, owner, \"autoScaleVm-\" + asGroup.getId() + \"-\" +\n                        getCurrentTimeStampString(), \"autoScaleVm-\" + asGroup.getId() + \"-\" + getCurrentTimeStampString(),\n                        null, null, null, HypervisorType.XenServer, HTTPMethod.GET, null, null, null, addrs, true, null, null, null, null, null, null, null);\n\n                }\n            }\n\n            if (vm != null) {\n                return vm.getId();\n            } else {\n                return -1;\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/as/AutoScaleManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1288,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":597,"groupId":"101729","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/81/61fb2564b17a4698d6c597799e5eb0d32ed8fd.src","preCode":"    public void create() throws ResourceAllocationException {\n        try {\n            UserVm vm = _userVmService.createVirtualMachine(this);\n\n            if (vm != null) {\n                setEntityId(vm.getId());\n                setEntityUuid(vm.getUuid());\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to deploy vm\");\n            }\n        } catch (InsufficientCapacityException ex) {\n            s_logger.info(ex);\n            s_logger.trace(ex.getMessage(), ex);\n            throw new ServerApiException(ApiErrorCode.INSUFFICIENT_CAPACITY_ERROR, ex.getMessage());\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        }  catch (ConcurrentOperationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());\n        } catch (ResourceAllocationException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_ALLOCATION_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/vm/DeployVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"N"}],"commitId":"083646b3c3f05f4100c5de0c28b231109ebc98c3","commitMessage":"@@@server: VM dynamic scaling option granularity (#4643)\n\nThis PR introduces new granularity levels to configure VM dynamic scalability. Previously VM is configured to be dynamically scalable based on the template and global setting. Now we bringing this option to configure at service offering and VM level also.\n\nVM can dynamically scale only when all flags are ON at VM level.  template.  service offering and global setting. If any of the flags is set to false then VM cannot be scalable. This result will be persisted in DB for each VM and will be honoured for that VM till it is updated.\n\nWe are introducing 'dynamicscalingallowed' parameter with permitted values of true or false for deployVM API and createServiceOffering API.\n\nFollowing are the API parameter changes:\ncreateServiceOffering API: \n          dynamicscalingenabled: an optional parameter of type Boolean with default value ?true?.\ndeployVirtualMachine API: \n          dynamicscalingenabled: an optional parameter of type Boolean with default value ?true?.\n\nFollowing are the UI changes:\nService offering creation has ON/OFF switch for dynamic scaling enabled with default value true","date":"2021-06-08 19:40:00","modifiedFileCount":"26","status":"M","submitter":"Harikrishna"}]
