[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroups(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":255,"groupId":"2525","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4c/b8a76940e631941f693635404f28d27d4d8e3b.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroups(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":388,"groupId":"6446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4c/b8a76940e631941f693635404f28d27d4d8e3b.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-12-17 17:37:05","commitOrder":2,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroups(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2019-12-17 17:37:05","endLine":256,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/35/dc89887d96ff3c0c3fdd427592b13afd6d383f.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroups(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":388,"groupId":"6446","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4c/b8a76940e631941f693635404f28d27d4d8e3b.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"N"}],"commitId":"2e8c069dd2f70beadd6c532831f34ece531ac102","commitMessage":"@@@Load Average for KVM (#3738)\n\n* Avgload (#2)\n\n* Adding avgload for kvm\n\n* Fix coding style issue\n\n* Add getter/setter\n\n* Fix several small errors\n\n* Add override\n\n* Uncomment getAverageLoad\n\n* Override getAverageLoad()\n\n* Checkstyle bug?\n\n* Delete trailing spaces\n\n* Renaming function\n\n* Change interface to match\n\n* Rename method in GetHostStatsAnswer\n\n* Change method call name\n\n* Convert double to long\n\n* Remove trailing whitespace\n\n* Change names around\n\n* Make load visible to return it\n\n* Parse string to double\n\n* Change Long to Double\n\n* Fix getter\n\n* Unify naming to cpuloadaverage\n\n* Change cpuloadaverage String to Double in listHostsMetrics\nRemove some unnecessary whitespaces\n\n* Add CPU_LOAD_AVERAGE to ApiConstants\n","date":"2019-12-17 17:37:05","modifiedFileCount":"10","status":"M","submitter":"Dennis Konrad"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-30 13:43:14","commitOrder":3,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-01-30 13:43:14","endLine":256,"groupId":"6450","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ff/5d254e9b738477cd281b78fd433f99b0bd3d1b.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroups(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":388,"groupId":"6446","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4c/b8a76940e631941f693635404f28d27d4d8e3b.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"N"}],"commitId":"518ed5379c33c47a017976bb3cf6740a98ad0827","commitMessage":"@@@Merge remote-tracking branch 'origin/4.13'\n","date":"2020-01-30 13:43:14","modifiedFileCount":"9","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-07-29 16:38:02","commitOrder":4,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-07-29 16:38:02","endLine":266,"groupId":"6450","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6f/16462f4f34958449d925a2a440a7d6cd659e95.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2018-01-20 05:49:27","endLine":388,"groupId":"6446","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4c/b8a76940e631941f693635404f28d27d4d8e3b.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"N"}],"commitId":"36ef85012f69af59657c87ad88184769549d8792","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2020-07-29 16:38:02","modifiedFileCount":"13","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-08-05 17:16:13","codes":[{"authorDate":"2020-08-05 17:16:13","commitOrder":5,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(Float.toString(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-08-05 17:16:13","endLine":265,"groupId":"6450","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/59/7cc1ca446c86e5af508fe9e9c668cece362c9b.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-08-05 17:16:13","commitOrder":5,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(Float.toString(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-08-05 17:16:13","endLine":397,"groupId":"6446","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/59/7cc1ca446c86e5af508fe9e9c668cece362c9b.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuReservedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning.toString());\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"}],"commitId":"db665fa8dfa5e83a198e6c40d95495135dad879d","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n\n Conflicts:\n\tengine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2020-08-05 17:16:13","modifiedFileCount":"5","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-10-30 17:05:24","codes":[{"authorDate":"2020-10-30 17:05:24","commitOrder":6,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(totalMemorywithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-10-30 17:05:24","endLine":265,"groupId":"17912","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8b/4220c88388d32a50cfbada528341d1f34bb4fb.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(totalMemorywithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(Float.toString(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-10-30 17:05:24","commitOrder":6,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-10-30 17:05:24","endLine":397,"groupId":"14796","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8b/4220c88388d32a50cfbada528341d1f34bb4fb.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(memWithOverprovisioning.toString());\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(Float.toString(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"}],"commitId":"2b220b5624719b84cb26bb79250cf88fc0ff764b","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-10-30 17:05:24","modifiedFileCount":"4","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-11-20 19:43:20","codes":[{"authorDate":"2020-11-20 19:43:20","commitOrder":7,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-11-20 19:43:20","endLine":268,"groupId":"17912","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9f/5bfee0dd4ce0058ff2aba51eed00c7b2d403b4.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float totalMemorywithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(totalMemorywithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-11-20 19:43:20","commitOrder":7,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-11-20 19:43:20","endLine":403,"groupId":"17914","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9f/5bfee0dd4ce0058ff2aba51eed00c7b2d403b4.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\");\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"492962238e3ce376392c6efa353b78d4232b90bf","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-11-20 19:43:20","modifiedFileCount":"3","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-12-01 16:34:53","codes":[{"authorDate":"2020-12-01 16:34:53","commitOrder":8,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-12-01 16:34:53","endLine":272,"groupId":"17912","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f7/373a7687ac356c1d886709139527c29d31c5b6.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-12-01 16:34:53","commitOrder":8,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2020-12-01 16:34:53","endLine":411,"groupId":"17914","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f7/373a7687ac356c1d886709139527c29d31c5b6.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocated(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"df07e27921997f2333a0d4c8c8c2e53148a21f61","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-12-01 16:34:53","modifiedFileCount":"4","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-04-01 17:05:01","codes":[{"authorDate":"2021-04-01 17:05:01","commitOrder":9,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-04-01 17:05:01","endLine":267,"groupId":"17912","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/87a0a0d5f032c69e4f1e7c6dcffab176df4b84.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-04-01 17:05:01","commitOrder":9,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-04-01 17:05:01","endLine":409,"groupId":"14796","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/87a0a0d5f032c69e4f1e7c6dcffab176df4b84.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(host.getTag());\n\n                String haTag = ApiDBUtils.getHaTag();\n                if (haTag != null && !haTag.isEmpty() && hostTags != null && !hostTags.isEmpty()) {\n                    if (haTag.equalsIgnoreCase(hostTags)) {\n                        hostResponse.setHaHost(true);\n                    } else {\n                        hostResponse.setHaHost(false);\n                    }\n                } else {\n                    hostResponse.setHaHost(false);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"d4635e3442eab8d482e8a61131e951a1b6219b55","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-04-01 17:05:01","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-04-01 17:05:01","codes":[{"authorDate":"2021-05-18 17:49:20","commitOrder":10,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            float cpuOverprovisioningFactor = ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n            hostResponse.setCpuNumber((int)(host.getCpus() * cpuOverprovisioningFactor));\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemoryTotal(memWithOverprovisioning.longValue());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * cpuOverprovisioningFactor;\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAllocated = calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning);\n                hostResponse.setCpuAllocated(cpuAllocated);\n                hostResponse.setCpuAllocatedPercentage(cpuAllocated);\n                hostResponse.setCpuAllocatedWithOverprovisioning(cpuAllocated);\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-05-18 17:49:20","endLine":269,"groupId":"17912","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/32/236093f03c7413c791f0c183ce2d61cb4f766f.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-04-01 17:05:01","commitOrder":10,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-04-01 17:05:01","endLine":409,"groupId":"14796","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/87a0a0d5f032c69e4f1e7c6dcffab176df4b84.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"426f14b6ed87c3dc072ee1d95d84892fc624bcf0","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15'\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2021-05-18 17:49:20","modifiedFileCount":"23","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2021-07-01 22:00:51","codes":[{"authorDate":"2021-07-01 22:00:51","commitOrder":11,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            float cpuOverprovisioningFactor = ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n            hostResponse.setCpuNumber((int)(host.getCpus() * cpuOverprovisioningFactor));\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemoryTotal(memWithOverprovisioning.longValue());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n                hostResponse.setHaHost(containsHostHATag(hostTags));\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * cpuOverprovisioningFactor;\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAllocated = calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning);\n                hostResponse.setCpuAllocated(cpuAllocated);\n                hostResponse.setCpuAllocatedPercentage(cpuAllocated);\n                hostResponse.setCpuAllocatedWithOverprovisioning(cpuAllocated);\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-07-01 22:00:51","endLine":276,"groupId":"17912","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/392a254022b12e3ad5709e7a7c907b1e46a506.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            float cpuOverprovisioningFactor = ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n            hostResponse.setCpuNumber((int)(host.getCpus() * cpuOverprovisioningFactor));\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemoryTotal(memWithOverprovisioning.longValue());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * cpuOverprovisioningFactor;\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAllocated = calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning);\n                hostResponse.setCpuAllocated(cpuAllocated);\n                hostResponse.setCpuAllocatedPercentage(cpuAllocated);\n                hostResponse.setCpuAllocatedWithOverprovisioning(cpuAllocated);\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-07-01 22:00:51","commitOrder":11,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n                hostResponse.setHaHost(containsHostHATag(hostTags));\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-07-01 22:00:51","endLine":392,"groupId":"14796","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/392a254022b12e3ad5709e7a7c907b1e46a506.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n\n                hostResponse.setHaHost(false);\n                String haTag = ApiDBUtils.getHaTag();\n                if (StringUtils.isNotEmpty(haTag) && StringUtils.isNotEmpty(hostTags) &&\n                        haTag.equalsIgnoreCase(hostTags)) {\n                    hostResponse.setHaHost(true);\n                }\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"5fd970d88f25a7b4be01b4f6eb8b0421088b83a3","commitMessage":"@@@db.  server: refactor host_view to prevent duplicate entries (#4796)\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-07-01 22:00:51","modifiedFileCount":"4","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2021-07-01 22:00:51","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":12,"curCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            float cpuOverprovisioningFactor = ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n            hostResponse.setCpuNumber((int)(host.getCpus() * cpuOverprovisioningFactor));\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemoryTotal(memWithOverprovisioning.longValue());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n                hostResponse.setHaHost(containsHostHATag(hostTags));\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * cpuOverprovisioningFactor;\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAllocated = calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning);\n                hostResponse.setCpuAllocated(cpuAllocated);\n                hostResponse.setCpuAllocatedPercentage(cpuAllocated);\n                hostResponse.setCpuAllocatedWithOverprovisioning(cpuAllocated);\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setHasAnnotation(annotationDao.hasAnnotations(host.getUuid(), AnnotationService.EntityType.HOST.name(),\n                accountManager.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-09-08 12:44:06","endLine":286,"groupId":"101490","id":23,"instanceNumber":1,"isCurCommit":1,"methodName":"newHostResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/75/71ffb6053470f1e9d572aed65e743903516433.src","preCode":"    public HostResponse newHostResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostResponse hostResponse = new HostResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuSockets(host.getCpuSockets());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        Long mshostId = host.getManagementServerId();\n        if (mshostId != null) {\n            ManagementServerHostVO managementServer = managementServerHostDao.findByMsid(host.getManagementServerId());\n            if (managementServer != null) {\n                hostResponse.setManagementServerId(managementServer.getUuid());\n            }\n        }\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        List<HostGpuGroupsVO> gpuGroups = ApiDBUtils.getGpuGroups(host.getId());\n        if (gpuGroups != null && !gpuGroups.isEmpty()) {\n            List<GpuResponse> gpus = new ArrayList<GpuResponse>();\n            for (HostGpuGroupsVO entry : gpuGroups) {\n                GpuResponse gpuResponse = new GpuResponse();\n                gpuResponse.setGpuGroupName(entry.getGroupName());\n                List<VGPUTypesVO> vgpuTypes = ApiDBUtils.getVgpus(entry.getId());\n                if (vgpuTypes != null && !vgpuTypes.isEmpty()) {\n                    List<VgpuResponse> vgpus = new ArrayList<VgpuResponse>();\n                    for (VGPUTypesVO vgpuType : vgpuTypes) {\n                        VgpuResponse vgpuResponse = new VgpuResponse();\n                        vgpuResponse.setName(vgpuType.getVgpuType());\n                        vgpuResponse.setVideoRam(vgpuType.getVideoRam());\n                        vgpuResponse.setMaxHeads(vgpuType.getMaxHeads());\n                        vgpuResponse.setMaxResolutionX(vgpuType.getMaxResolutionX());\n                        vgpuResponse.setMaxResolutionY(vgpuType.getMaxResolutionY());\n                        vgpuResponse.setMaxVgpuPerPgpu(vgpuType.getMaxVgpuPerPgpu());\n                        vgpuResponse.setRemainingCapacity(vgpuType.getRemainingCapacity());\n                        vgpuResponse.setmaxCapacity(vgpuType.getMaxCapacity());\n                        vgpus.add(vgpuResponse);\n                    }\n                    gpuResponse.setVgpu(vgpus);\n                }\n                gpus.add(gpuResponse);\n            }\n            hostResponse.setGpuGroup(gpus);\n        }\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            float cpuOverprovisioningFactor = ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n            hostResponse.setCpuNumber((int)(host.getCpus() * cpuOverprovisioningFactor));\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemoryTotal(memWithOverprovisioning.longValue());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                hostResponse.setMemoryAllocated(mem);\n                hostResponse.setMemoryAllocatedBytes(mem);\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n                hostResponse.setHaHost(containsHostHATag(hostTags));\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * cpuOverprovisioningFactor;\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAllocated = calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning);\n                hostResponse.setCpuAllocated(cpuAllocated);\n                hostResponse.setCpuAllocatedPercentage(cpuAllocated);\n                hostResponse.setCpuAllocatedWithOverprovisioning(cpuAllocated);\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setCpuAverageLoad(hostStats.getLoadAverage());\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n            if (details.contains(HostDetails.all) && host.getHypervisorType() == Hypervisor.HypervisorType.KVM) {\n                \r\n                try {\n                    hostResponse.setDetails(hostDetailsDao.findDetails(host.getId()));\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to get host details\", e);\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setHostHAResponse(haConfigDao.findHAResource(host.getId(), HAResource.ResourceType.Host));\n        hostResponse.setOutOfBandManagementResponse(outOfBandManagementDao.findByHost(host.getId()));\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        if (host.getJobId() != null) {\n            hostResponse.setJobId(host.getJobUuid());\n            hostResponse.setJobStatus(host.getJobStatus());\n        }\n        hostResponse.setAnnotation(host.getAnnotation());\n        hostResponse.setLastAnnotated(host.getLastAnnotated ());\n        hostResponse.setUsername(host.getUsername());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-07-01 22:00:51","commitOrder":12,"curCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n                hostResponse.setHaHost(containsHostHATag(hostTags));\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","date":"2021-07-01 22:00:51","endLine":392,"groupId":"101490","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"newHostForMigrationResponse","params":"(HostJoinVOhost@EnumSet<HostDetails>details)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/392a254022b12e3ad5709e7a7c907b1e46a506.src","preCode":"    public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, EnumSet<HostDetails> details) {\n        HostForMigrationResponse hostResponse = new HostForMigrationResponse();\n        hostResponse.setId(host.getUuid());\n        hostResponse.setCapabilities(host.getCapabilities());\n        hostResponse.setClusterId(host.getClusterUuid());\n        hostResponse.setCpuNumber(host.getCpus());\n        hostResponse.setZoneId(host.getZoneUuid());\n        hostResponse.setDisconnectedOn(host.getDisconnectedOn());\n        hostResponse.setHypervisor(host.getHypervisorType());\n        hostResponse.setHostType(host.getType());\n        hostResponse.setLastPinged(new Date(host.getLastPinged()));\n        hostResponse.setManagementServerId(host.getManagementServerId());\n        hostResponse.setName(host.getName());\n        hostResponse.setPodId(host.getPodUuid());\n        hostResponse.setRemoved(host.getRemoved());\n        hostResponse.setCpuSpeed(host.getSpeed());\n        hostResponse.setState(host.getStatus());\n        hostResponse.setIpAddress(host.getPrivateIpAddress());\n        hostResponse.setVersion(host.getVersion());\n        hostResponse.setCreated(host.getCreated());\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity) || details.contains(HostDetails.stats) || details.contains(HostDetails.events)) {\n\n            hostResponse.setOsCategoryId(host.getOsCategoryUuid());\n            hostResponse.setOsCategoryName(host.getOsCategoryName());\n            hostResponse.setZoneName(host.getZoneName());\n            hostResponse.setPodName(host.getPodName());\n            if (host.getClusterId() > 0) {\n                hostResponse.setClusterName(host.getClusterName());\n                hostResponse.setClusterType(host.getClusterType().toString());\n            }\n        }\n\n        DecimalFormat decimalFormat = new DecimalFormat(\"#.##\");\n        if (host.getType() == Host.Type.Routing) {\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.capacity)) {\n                \r\n                Long mem = host.getMemReservedCapacity() + host.getMemUsedCapacity();\n                Long cpu = host.getCpuReservedCapacity() + host.getCpuUsedCapacity();\n\n                hostResponse.setMemoryTotal(host.getTotalMemory());\n                Float memWithOverprovisioning = host.getTotalMemory() * ApiDBUtils.getMemOverprovisioningFactor(host.getClusterId());\n                hostResponse.setMemWithOverprovisioning(decimalFormat.format(memWithOverprovisioning));\n                String memoryAllocatedPercentage = decimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\";\n                hostResponse.setMemoryAllocated(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedPercentage(memoryAllocatedPercentage);\n                hostResponse.setMemoryAllocatedBytes(mem);\n\n                String hostTags = host.getTag();\n                hostResponse.setHostTags(hostTags);\n                hostResponse.setHaHost(containsHostHATag(hostTags));\n\n                hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n\n                hostResponse.setCpuAllocatedValue(cpu);\n                String cpuAlloc = decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + \"%\";\n                hostResponse.setCpuAllocated(cpuAlloc);\n                hostResponse.setCpuAllocatedPercentage(cpuAlloc);\n                float cpuWithOverprovisioning = host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId());\n                hostResponse.setCpuAllocatedWithOverprovisioning(calculateResourceAllocatedPercentage(cpu, cpuWithOverprovisioning));\n                hostResponse.setCpuWithOverprovisioning(decimalFormat.format(cpuWithOverprovisioning));\n            }\n\n            if (details.contains(HostDetails.all) || details.contains(HostDetails.stats)) {\n                \r\n                String cpuUsed = null;\n                HostStats hostStats = ApiDBUtils.getHostStatistics(host.getId());\n                if (hostStats != null) {\n                    float cpuUtil = (float)hostStats.getCpuUtilization();\n                    cpuUsed = decimalFormat.format(cpuUtil) + \"%\";\n                    hostResponse.setCpuUsed(cpuUsed);\n                    hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());\n                    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());\n                    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());\n\n                }\n            }\n\n        } else if (host.getType() == Host.Type.SecondaryStorage) {\n            StorageStats secStorageStats = ApiDBUtils.getSecondaryStorageStatistics(host.getId());\n            if (secStorageStats != null) {\n                hostResponse.setDiskSizeTotal(secStorageStats.getCapacityBytes());\n                hostResponse.setDiskSizeAllocated(secStorageStats.getByteUsed());\n            }\n        }\n\n        hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host.getId()));\n\n        if (details.contains(HostDetails.all) || details.contains(HostDetails.events)) {\n            Set<com.cloud.host.Status.Event> possibleEvents = host.getStatus().getPossibleEvents();\n            if ((possibleEvents != null) && !possibleEvents.isEmpty()) {\n                String events = \"\";\n                Iterator<com.cloud.host.Status.Event> iter = possibleEvents.iterator();\n                while (iter.hasNext()) {\n                    com.cloud.host.Status.Event event = iter.next();\n                    events += event.toString();\n                    if (iter.hasNext()) {\n                        events += \"; \";\n                    }\n                }\n                hostResponse.setEvents(events);\n            }\n        }\n\n        hostResponse.setResourceState(host.getResourceState().toString());\n\n        \r\n        hostResponse.setJobId(host.getJobUuid());\n        hostResponse.setJobStatus(host.getJobStatus());\n\n        hostResponse.setObjectName(\"host\");\n\n        return hostResponse;\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"}]
