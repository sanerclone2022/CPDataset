[{"authorTime":"2015-08-26 02:44:50","codes":[{"authorDate":"2015-08-26 02:44:50","commitOrder":1,"curCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        s_logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            s_logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        \r\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            \r\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }\n","date":"2015-08-26 02:44:52","endLine":283,"groupId":"6152","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"implement","params":"(Networknetwork@NetworkOfferingoffering@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/43e2d4052525dc2e2f64363b334fbef0df8b75.src","preCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        s_logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            s_logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        \r\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            \r\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"},{"authorDate":"2015-08-26 02:44:50","commitOrder":1,"curCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                s_logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","date":"2015-08-26 02:44:52","endLine":422,"groupId":"5546","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdown","params":"(Networknetwork@ReservationContextcontext@booleancleanup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/43e2d4052525dc2e2f64363b334fbef0df8b75.src","preCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                s_logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"B"}],"commitId":"44ba14d17ba3b8fa00cd05c97eaceed49367816c","commitMessage":"@@@Merge pull request #737 from miguelaferreira/feature/mferreira/ncx-follow-redirects-gardened-rebase\n\nCLOUDSTACK-8758: Handle redirects in communication with NXS controller (a.k.a. Nicira NVP)When an NSX controller node is part of a cluster it will redirect API calls to the master controller. Because the ACS management server does not follow such redirects.  if there is a change of master within a NSX cluster.  the NSX device (a.k.a.  NiciraNvp) needs to be reconfigured (via the management server DB).\n\nThe goal of this PR is to enable ACS management server to follow HTTP redirects sent by NSX controllers. However.  other changes were made to the cloud-utils module that provides the REST client that the NSX plugin uses.\n\nCosmetic changes:\n* Upgrade maven module structure for cloud-utils and cloud-plugin-netowkr-nvp to comply with maven default\n* Several refactorings on both modules to consistently format the code.  remove unused code.  declare final when possible.  remove auto generated comments.  etc\n\nOther changes:\n* Upgrade HTTP library used in REST client to version 4.5 of Apache HTTP Components\n* Implement generic REST client that supports HTTP redirects\n* Implement NSX specific REST client\n* Simplify NSX api implementation\n* Previously existing unit tests for both the REST client and NSX api were either maintained in the same test classes.  moved to new test classes (because code under tests also moved).  or removed (because code under tests was also removed)\n* New Marvin tests for NSX controllers\n\nTesting:\n* Ran all unit tests present in the project\n* Ran Java Integration tests for NSX api targeting both a master and a slave controller\n* Ran new Marvin test for NSX controller\n* Manual inspection of logs to confirm redirection is taking place\n\n* pr/737:\n  Use NSX specific RestClient in API implementation (NiciraNvpApi)\n  Refactor NSX api implementation (NiciraNvpApi)\n  Add NSX specific RestClient implementation\n  Delegate HTTP protocol activity in RESTServiceConnector to RestClient\n  Add basic RestClient implentation based on HTTP Components 4.5\n  Code clean up in cloud-plugin-network-nvp project\n  Code clean up in cloud-utils project\n  Refactor cloud-plugin-network-nvp project into Maven default structure\n  Refactor cloud-utils project into Maven default structure\n  Fix unit-test library dependencies\n  Add Marvin test for Nicira NVP plugin\n  Create Nicira NVP devices and enable plugin at deploy\n\nSigned-off-by: Remi Bergsma <github@remi.nl>\n","date":"2015-08-26 02:44:52","modifiedFileCount":"0","status":"B","submitter":"Remi Bergsma"},{"authorTime":"2015-08-30 04:04:03","codes":[{"authorDate":"2015-08-30 04:04:03","commitOrder":2,"curCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        \r\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            \r\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }\n","date":"2015-08-30 04:04:04","endLine":281,"groupId":"6152","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"implement","params":"(Networknetwork@NetworkOfferingoffering@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d5/9d4e16fc834fe91e003d70df0f88c8d110bd97.src","preCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        s_logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            s_logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        \r\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            \r\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2015-08-30 04:04:03","commitOrder":2,"curCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","date":"2015-08-30 04:04:04","endLine":420,"groupId":"5546","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdown","params":"(Networknetwork@ReservationContextcontext@booleancleanup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d5/9d4e16fc834fe91e003d70df0f88c8d110bd97.src","preCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                s_logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"cd7218e241a8ac93df7a73f938320487aa526de6","commitMessage":"@@@Merge pull request #714 from rafaelweingartner/master-lrg-cs-hackday-003\n\nChanged variable s_logger to non-static and fixed its name in com.cloud.utils.component.ComponentLifecycleBase and its subclassesHi guys. \nWe have noticed that every single class that is a subclass of ComponentLifecycleBase instantiate their on logger manually and uses a nonstandard name. We fixed that by changing the variable in ComponentLifecycleBase to protected and non-static and instantiated it using the method getClass from Object class. Therefore.  we can reduce the code in a few hundred lines and use a more intuitive name for the logger variable.\n\nDuring that process we found a static method that used the s_logger variable in classes:\ncom.cloud.network.element.VirtualRouterElement\norg.apache.cloudstack.network.element.InternalLoadBalancerElement\n\nTo fix that we had to create a new class com.cloud.network.element.HAProxyLBRule.  instantiate it with @Componente and inject into the aforementioned classes.\n\nThe class that we create is com.cloud.network.element.HAProxyLBRule and has the following methods:\ncom.cloud.network.element.HAProxyLBRule.containsOnlyNumbers(String.  String)\ncom.cloud.network.element.HAProxyLBRule.validateHAProxyLBRule(LoadBalancingRule)\n\nSadly we could not write test cases to it; hence we did not fully understand those methods. However.  if anyone out there understands it.  we would appreciate some code to be added to it.\n\nAs minor this change may seem; we believe that it enhances a little bit the ACS code by using standard name to logger variable.\n\n* pr/714:\n  Solved jira ticket: CLOUDSTACK-8750\n\nSigned-off-by: Daan Hoogland <daan@onecht.net>\n","date":"2015-08-30 04:04:04","modifiedFileCount":"359","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2015-08-31 13:44:05","codes":[{"authorDate":"2015-08-31 13:44:05","commitOrder":3,"curCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        s_logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            s_logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        \r\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            \r\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }\n","date":"2015-08-31 13:57:57","endLine":283,"groupId":"6152","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"implement","params":"(Networknetwork@NetworkOfferingoffering@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/43e2d4052525dc2e2f64363b334fbef0df8b75.src","preCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        \r\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            \r\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"},{"authorDate":"2015-08-31 13:44:05","commitOrder":3,"curCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                s_logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","date":"2015-08-31 13:57:57","endLine":422,"groupId":"5546","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shutdown","params":"(Networknetwork@ReservationContextcontext@booleancleanup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/43e2d4052525dc2e2f64363b334fbef0df8b75.src","preCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"8bc029401416e4818492e1396ebf71fb38f8271e","commitMessage":"@@@Revert \"Merge pull request #714 from rafaelweingartner/master-lrg-cs-hackday-003\"\n\nThis reverts commit cd7218e241a8ac93df7a73f938320487aa526de6.  reversing\nchanges made to f5a7395cc2ec37364a2e210eac60720e9b327451.\n\nReason for Revert:\n\nnoredist build failed with the below error:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.2:compile (default-compile) on project cloud-plugin-hypervisor-vmware: Compilation failure\n[ERROR] /home/jenkins/acs/workspace/build-master-noredist/plugins/hypervisors/vmware/src/com/cloud/hypervisor/guru/VMwareGuru.java:[484. 12] error: non-static variable logger cannot be referenced from a static context\n[ERROR] -> [Help 1]\n\neven the normal build is broken as reported by @koushik-das on dev list\nhttp://markmail.org/message/nngimssuzkj5gpbz\n","date":"2015-08-31 13:57:57","modifiedFileCount":"359","status":"M","submitter":"Rajani Karuturi"},{"authorTime":"2015-12-28 18:21:56","codes":[{"authorDate":"2015-12-28 18:21:56","commitOrder":4,"curCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        s_logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            s_logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        if (network.getGuestType().equals(GuestType.Shared)){\n            \r\n            String lSwitchUuid = BroadcastDomainType.getValue(network.getBroadcastUri());\n            String ownerName = context.getDomain().getName() + \"-\" + context.getAccount().getAccountName();\n            return sharedNetworkSupport(network, lSwitchUuid, ownerName, niciraNvpHost);\n        }\n        else if (network.getGuestType().equals(GuestType.Isolated) && networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            \r\n            s_logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n\n        }\n\n        return true;\n    }\n","date":"2015-12-28 18:21:56","endLine":291,"groupId":"104078","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"implement","params":"(Networknetwork@NetworkOfferingoffering@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/46a5435ca4633df3d1da9f577c0e21ae94e8c2.src","preCode":"    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        s_logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            s_logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        Account owner = context.getAccount();\n\n        \r\n\r\n\r\n\n\n        \r\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            \r\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            long vlanid = (Vlan.UNTAGGED.equals(vtag)) ? 0 : Long.parseLong(vtag);\n\n            CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            \r\n            NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2015-12-28 18:21:56","commitOrder":4,"curCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        \r\n        if (! network.getGuestType().equals(GuestType.Shared) && networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                s_logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","date":"2015-12-28 18:21:56","endLine":491,"groupId":"104078","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shutdown","params":"(Networknetwork@ReservationContextcontext@booleancleanup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/46a5435ca4633df3d1da9f577c0e21ae94e8c2.src","preCode":"    public boolean shutdown(Network network, ReservationContext context, boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException {\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we were providing SourceNat on this network\");\n\n            \r\n            \r\n            NiciraNvpRouterMappingVO routermapping = niciraNvpRouterMappingDao.findByNetworkId(network.getId());\n            if (routermapping == null) {\n                s_logger.warn(\"No logical router uuid found for network \" + network.getDisplayText());\n                \r\n                return true;\n            }\n\n            DeleteLogicalRouterCommand cmd = new DeleteLogicalRouterCommand(routermapping.getLogicalRouterUuid());\n            DeleteLogicalRouterAnswer answer = (DeleteLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to delete LogicalRouter for network \" + network.getDisplayText());\n                return false;\n            }\n\n            niciraNvpRouterMappingDao.remove(routermapping.getId());\n        }\n\n        return true;\n    }\n","realPath":"plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"}],"commitId":"67b753c11bab236187a0a68d92ca8e49cef1b3fd","commitMessage":"@@@Merge pull request #1094 from nvazquez/sharedNiciraNVP\n\nCLOUDSTACK-9074: Support shared networking in NiciraNVP PluginJIRA TICKET:\nhttps://issues.apache.org/jira/browse/CLOUDSTACK-9074\n\nDesign Document:\nhttps://cwiki.apache.org/confluence/display/CLOUDSTACK/Support+shared+networking+in+NiciraNVP+Plugin\n\n* pr/1094:\n  CLOUDSTACK-9074: Move sql to 4.8.0 schema\n  CLOUDSTACK-9074: Add NetworkGuruAdditionalFunctions license\n  Use NSX specific config values instead of zone config values\n  Fix method call bugs when accessign non defined variables\n  Use helper method to migrate router vm\n  Add helper method to migrate router vms\n  Only set L2 Gateway in NSX device if defined\n  CLOUDSTACK-9074: Marvin tests for NSX Shared Networks Support\n  CLOUDSTACK-9074: Drop nicira_nvp_router_map unique index on logicalrouter_uuid\n  CLOUDSTACK-9074: API add Gateway Service Find method\n  CLOUDSTACK-9074: Support Shared Networks in NiciraNVP Plugin\n  CLOUDSTACK-9074: New NiciraNVP classes for FindLRouterPort and DeleteLRouterPort API methods\n  CLOUDSTACK-9074: New NiciraNVP classes to support Shared Networks\n  CLOUDSTACK-9074: API Changes: Add nsxLogicalSwitch and nsxLogicalSwitchPort to listNics\n  CLOUDSTACK-9074: API Changes: Add l2gatewayserviceuuid to NVP devices\n\nSigned-off-by: Remi Bergsma <github@remi.nl>\n","date":"2015-12-28 18:21:56","modifiedFileCount":"23","status":"M","submitter":"Remi Bergsma"}]
