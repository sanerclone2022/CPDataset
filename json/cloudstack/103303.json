[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public LibvirtStoragePoolDef parseStoragePoolXML(String poolXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(poolXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n            String type = rootElement.getAttribute(\"type\");\n\n            String uuid = getTagValue(\"uuid\", rootElement);\n\n            String poolName = getTagValue(\"name\", rootElement);\n\n            Element source = (Element)rootElement.getElementsByTagName(\"source\").item(0);\n            String host = getAttrValue(\"host\", \"name\", source);\n            String format = getAttrValue(\"format\", \"type\", source);\n\n            if (type.equalsIgnoreCase(\"rbd\")) {\n                int port = Integer.parseInt(getAttrValue(\"host\", \"port\", source));\n                String pool = getTagValue(\"name\", source);\n\n                Element auth = (Element)source.getElementsByTagName(\"auth\").item(0);\n\n                if (auth != null) {\n                    String authUsername = auth.getAttribute(\"username\");\n                    String authType = auth.getAttribute(\"type\");\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, authUsername,\n                            LibvirtStoragePoolDef.AuthenticationType.valueOf(authType.toUpperCase()), uuid);\n                } else {\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, \"\");\n                }\n                \n            } else if (format != null && format.equalsIgnoreCase(\"glusterfs\")) {\n                \n                int port = 24007;\n\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element) rootElement.getElementsByTagName(\n                        \"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                String portValue = getAttrValue(\"host\", \"port\", source);\n                if (portValue != null && !portValue.isEmpty())\n                    port = Integer.parseInt(portValue);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(format.toUpperCase()),\n                        poolName, uuid, host, port, path, targetPath);\n            } else {\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, path, targetPath);\n            }\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":104,"groupId":"12175","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseStoragePoolXML","params":"(StringpoolXML)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/23/9cc3dca47dd32c9b654ea671fe42137b3f7083.src","preCode":"    public LibvirtStoragePoolDef parseStoragePoolXML(String poolXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(poolXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n            String type = rootElement.getAttribute(\"type\");\n\n            String uuid = getTagValue(\"uuid\", rootElement);\n\n            String poolName = getTagValue(\"name\", rootElement);\n\n            Element source = (Element)rootElement.getElementsByTagName(\"source\").item(0);\n            String host = getAttrValue(\"host\", \"name\", source);\n            String format = getAttrValue(\"format\", \"type\", source);\n\n            if (type.equalsIgnoreCase(\"rbd\")) {\n                int port = Integer.parseInt(getAttrValue(\"host\", \"port\", source));\n                String pool = getTagValue(\"name\", source);\n\n                Element auth = (Element)source.getElementsByTagName(\"auth\").item(0);\n\n                if (auth != null) {\n                    String authUsername = auth.getAttribute(\"username\");\n                    String authType = auth.getAttribute(\"type\");\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, authUsername,\n                            LibvirtStoragePoolDef.AuthenticationType.valueOf(authType.toUpperCase()), uuid);\n                } else {\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, \"\");\n                }\n                \n            } else if (format != null && format.equalsIgnoreCase(\"glusterfs\")) {\n                \n                int port = 24007;\n\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element) rootElement.getElementsByTagName(\n                        \"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                String portValue = getAttrValue(\"host\", \"port\", source);\n                if (portValue != null && !portValue.isEmpty())\n                    port = Integer.parseInt(portValue);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(format.toUpperCase()),\n                        poolName, uuid, host, port, path, targetPath);\n            } else {\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, path, targetPath);\n            }\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtStoragePoolXMLParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public LibvirtStorageVolumeDef parseStorageVolumeXML(String volXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(volXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n\n            String VolName = getTagValue(\"name\", rootElement);\n            Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n            String format = getAttrValue(\"type\", \"format\", target);\n            Long capacity = Long.parseLong(getTagValue(\"capacity\", rootElement));\n            return new LibvirtStorageVolumeDef(VolName, capacity, LibvirtStorageVolumeDef.VolumeFormat.getFormat(format), null, null);\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":61,"groupId":"20229","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"parseStorageVolumeXML","params":"(StringvolXML)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1c/89f81327c1909fb7f8f2986e0524640250908f.src","preCode":"    public LibvirtStorageVolumeDef parseStorageVolumeXML(String volXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(volXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n\n            String VolName = getTagValue(\"name\", rootElement);\n            Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n            String format = getAttrValue(\"type\", \"format\", target);\n            Long capacity = Long.parseLong(getTagValue(\"capacity\", rootElement));\n            return new LibvirtStorageVolumeDef(VolName, capacity, LibvirtStorageVolumeDef.VolumeFormat.getFormat(format), null, null);\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtStorageVolumeXMLParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-01-20 16:18:52","commitOrder":2,"curCode":"    public LibvirtStoragePoolDef parseStoragePoolXML(String poolXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(poolXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n            String type = rootElement.getAttribute(\"type\");\n\n            String uuid = getTagValue(\"uuid\", rootElement);\n\n            String poolName = getTagValue(\"name\", rootElement);\n\n            Element source = (Element)rootElement.getElementsByTagName(\"source\").item(0);\n            String host = getAttrValue(\"host\", \"name\", source);\n            String format = getAttrValue(\"format\", \"type\", source);\n\n            if (type.equalsIgnoreCase(\"rbd\")) {\n                int port = 0;\n                String xmlPort = getAttrValue(\"host\", \"port\", source);\n                if (StringUtils.isNotBlank(xmlPort)) {\n                    port = Integer.parseInt(xmlPort);\n                }\n                String pool = getTagValue(\"name\", source);\n\n                Element auth = (Element)source.getElementsByTagName(\"auth\").item(0);\n\n                if (auth != null) {\n                    String authUsername = auth.getAttribute(\"username\");\n                    String authType = auth.getAttribute(\"type\");\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, authUsername,\n                            LibvirtStoragePoolDef.AuthenticationType.valueOf(authType.toUpperCase()), uuid);\n                } else {\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, \"\");\n                }\n                \n            } else if (format != null && format.equalsIgnoreCase(\"glusterfs\")) {\n                \n                int port = 24007;\n\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element) rootElement.getElementsByTagName(\n                        \"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                String portValue = getAttrValue(\"host\", \"port\", source);\n                if (portValue != null && !portValue.isEmpty())\n                    port = Integer.parseInt(portValue);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(format.toUpperCase()),\n                        poolName, uuid, host, port, path, targetPath);\n            } else {\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, path, targetPath);\n            }\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","date":"2021-01-20 16:20:25","endLine":109,"groupId":"12175","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseStoragePoolXML","params":"(StringpoolXML)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7b/70c37ab19106ce9c2bcba71e87988956cc13a4.src","preCode":"    public LibvirtStoragePoolDef parseStoragePoolXML(String poolXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(poolXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n            String type = rootElement.getAttribute(\"type\");\n\n            String uuid = getTagValue(\"uuid\", rootElement);\n\n            String poolName = getTagValue(\"name\", rootElement);\n\n            Element source = (Element)rootElement.getElementsByTagName(\"source\").item(0);\n            String host = getAttrValue(\"host\", \"name\", source);\n            String format = getAttrValue(\"format\", \"type\", source);\n\n            if (type.equalsIgnoreCase(\"rbd\")) {\n                int port = Integer.parseInt(getAttrValue(\"host\", \"port\", source));\n                String pool = getTagValue(\"name\", source);\n\n                Element auth = (Element)source.getElementsByTagName(\"auth\").item(0);\n\n                if (auth != null) {\n                    String authUsername = auth.getAttribute(\"username\");\n                    String authType = auth.getAttribute(\"type\");\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, authUsername,\n                            LibvirtStoragePoolDef.AuthenticationType.valueOf(authType.toUpperCase()), uuid);\n                } else {\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, \"\");\n                }\n                \n            } else if (format != null && format.equalsIgnoreCase(\"glusterfs\")) {\n                \n                int port = 24007;\n\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element) rootElement.getElementsByTagName(\n                        \"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                String portValue = getAttrValue(\"host\", \"port\", source);\n                if (portValue != null && !portValue.isEmpty())\n                    port = Integer.parseInt(portValue);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(format.toUpperCase()),\n                        poolName, uuid, host, port, path, targetPath);\n            } else {\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, path, targetPath);\n            }\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtStoragePoolXMLParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public LibvirtStorageVolumeDef parseStorageVolumeXML(String volXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(volXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n\n            String VolName = getTagValue(\"name\", rootElement);\n            Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n            String format = getAttrValue(\"type\", \"format\", target);\n            Long capacity = Long.parseLong(getTagValue(\"capacity\", rootElement));\n            return new LibvirtStorageVolumeDef(VolName, capacity, LibvirtStorageVolumeDef.VolumeFormat.getFormat(format), null, null);\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":61,"groupId":"20229","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"parseStorageVolumeXML","params":"(StringvolXML)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1c/89f81327c1909fb7f8f2986e0524640250908f.src","preCode":"    public LibvirtStorageVolumeDef parseStorageVolumeXML(String volXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(volXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n\n            String VolName = getTagValue(\"name\", rootElement);\n            Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n            String format = getAttrValue(\"type\", \"format\", target);\n            Long capacity = Long.parseLong(getTagValue(\"capacity\", rootElement));\n            return new LibvirtStorageVolumeDef(VolName, capacity, LibvirtStorageVolumeDef.VolumeFormat.getFormat(format), null, null);\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtStorageVolumeXMLParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"}],"commitId":"4aa7a96bc4692a9f66f5243371f6ea0303f58264","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n\nThis merges apache/cloudstack-primate under ui and removes the legacy UI\nfrom ui/legacy in master/4.16 as voted on dev ML.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-01-20 16:20:25","modifiedFileCount":"2","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-02-24 17:28:33","commitOrder":3,"curCode":"    public LibvirtStoragePoolDef parseStoragePoolXML(String poolXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(poolXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n            String type = rootElement.getAttribute(\"type\");\n\n            String uuid = getTagValue(\"uuid\", rootElement);\n\n            String poolName = getTagValue(\"name\", rootElement);\n\n            Element source = (Element)rootElement.getElementsByTagName(\"source\").item(0);\n            String host = getAttrValue(\"host\", \"name\", source);\n            String format = getAttrValue(\"format\", \"type\", source);\n\n            if (type.equalsIgnoreCase(\"rbd\") || type.equalsIgnoreCase(\"powerflex\")) {\n                int port = 0;\n                String xmlPort = getAttrValue(\"host\", \"port\", source);\n                if (StringUtils.isNotBlank(xmlPort)) {\n                    port = Integer.parseInt(xmlPort);\n                }\n                String pool = getTagValue(\"name\", source);\n\n                Element auth = (Element)source.getElementsByTagName(\"auth\").item(0);\n\n                if (auth != null) {\n                    String authUsername = auth.getAttribute(\"username\");\n                    String authType = auth.getAttribute(\"type\");\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, authUsername,\n                            LibvirtStoragePoolDef.AuthenticationType.valueOf(authType.toUpperCase()), uuid);\n                } else {\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, \"\");\n                }\n                \n            } else if (format != null && format.equalsIgnoreCase(\"glusterfs\")) {\n                \n                int port = 24007;\n\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element) rootElement.getElementsByTagName(\n                        \"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                String portValue = getAttrValue(\"host\", \"port\", source);\n                if (portValue != null && !portValue.isEmpty())\n                    port = Integer.parseInt(portValue);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(format.toUpperCase()),\n                        poolName, uuid, host, port, path, targetPath);\n            } else {\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, path, targetPath);\n            }\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","date":"2021-02-24 17:28:33","endLine":109,"groupId":"103303","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"parseStoragePoolXML","params":"(StringpoolXML)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bd/7deaa0eb41738bf249c8cc8f4b3e4b56dfb083.src","preCode":"    public LibvirtStoragePoolDef parseStoragePoolXML(String poolXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(poolXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n            String type = rootElement.getAttribute(\"type\");\n\n            String uuid = getTagValue(\"uuid\", rootElement);\n\n            String poolName = getTagValue(\"name\", rootElement);\n\n            Element source = (Element)rootElement.getElementsByTagName(\"source\").item(0);\n            String host = getAttrValue(\"host\", \"name\", source);\n            String format = getAttrValue(\"format\", \"type\", source);\n\n            if (type.equalsIgnoreCase(\"rbd\")) {\n                int port = 0;\n                String xmlPort = getAttrValue(\"host\", \"port\", source);\n                if (StringUtils.isNotBlank(xmlPort)) {\n                    port = Integer.parseInt(xmlPort);\n                }\n                String pool = getTagValue(\"name\", source);\n\n                Element auth = (Element)source.getElementsByTagName(\"auth\").item(0);\n\n                if (auth != null) {\n                    String authUsername = auth.getAttribute(\"username\");\n                    String authType = auth.getAttribute(\"type\");\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, authUsername,\n                            LibvirtStoragePoolDef.AuthenticationType.valueOf(authType.toUpperCase()), uuid);\n                } else {\n                    return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, port, pool, \"\");\n                }\n                \n            } else if (format != null && format.equalsIgnoreCase(\"glusterfs\")) {\n                \n                int port = 24007;\n\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element) rootElement.getElementsByTagName(\n                        \"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                String portValue = getAttrValue(\"host\", \"port\", source);\n                if (portValue != null && !portValue.isEmpty())\n                    port = Integer.parseInt(portValue);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(format.toUpperCase()),\n                        poolName, uuid, host, port, path, targetPath);\n            } else {\n                String path = getAttrValue(\"dir\", \"path\", source);\n\n                Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n                String targetPath = getTagValue(\"path\", target);\n\n                return new LibvirtStoragePoolDef(LibvirtStoragePoolDef.PoolType.valueOf(type.toUpperCase()), poolName, uuid, host, path, targetPath);\n            }\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtStoragePoolXMLParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public LibvirtStorageVolumeDef parseStorageVolumeXML(String volXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(volXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n\n            String VolName = getTagValue(\"name\", rootElement);\n            Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n            String format = getAttrValue(\"type\", \"format\", target);\n            Long capacity = Long.parseLong(getTagValue(\"capacity\", rootElement));\n            return new LibvirtStorageVolumeDef(VolName, capacity, LibvirtStorageVolumeDef.VolumeFormat.getFormat(format), null, null);\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":61,"groupId":"103303","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"parseStorageVolumeXML","params":"(StringvolXML)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1c/89f81327c1909fb7f8f2986e0524640250908f.src","preCode":"    public LibvirtStorageVolumeDef parseStorageVolumeXML(String volXML) {\n        DocumentBuilder builder;\n        try {\n            builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\n            InputSource is = new InputSource();\n            is.setCharacterStream(new StringReader(volXML));\n            Document doc = builder.parse(is);\n\n            Element rootElement = doc.getDocumentElement();\n\n            String VolName = getTagValue(\"name\", rootElement);\n            Element target = (Element)rootElement.getElementsByTagName(\"target\").item(0);\n            String format = getAttrValue(\"type\", \"format\", target);\n            Long capacity = Long.parseLong(getTagValue(\"capacity\", rootElement));\n            return new LibvirtStorageVolumeDef(VolName, capacity, LibvirtStorageVolumeDef.VolumeFormat.getFormat(format), null, null);\n        } catch (ParserConfigurationException e) {\n            s_logger.debug(e.toString());\n        } catch (SAXException e) {\n            s_logger.debug(e.toString());\n        } catch (IOException e) {\n            s_logger.debug(e.toString());\n        }\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtStorageVolumeXMLParser.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"}]
