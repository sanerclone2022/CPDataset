[{"authorTime":"2018-05-17 03:59:17","codes":[{"authorDate":"2018-05-17 03:59:17","commitOrder":1,"curCode":"    public void deleteVolumeTestVolumeStateAllocated() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Allocated).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).cleanVolumesCache(volumeVoMock);\n    }\n","date":"2018-05-17 03:59:17","endLine":890,"groupId":"4571","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteVolumeTestVolumeStateAllocated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dd/cf4758eee3167233c8c68a7d4ff6c0f21b3214.src","preCode":"    public void deleteVolumeTestVolumeStateAllocated() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Allocated).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).cleanVolumesCache(volumeVoMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":867,"status":"B"},{"authorDate":"2018-05-17 03:59:17","commitOrder":1,"curCode":"    public void deleteVolumeTestVolumeStateReady() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Ready).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock, Mockito.times(0)).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).cleanVolumesCache(volumeVoMock);\n    }\n","date":"2018-05-17 03:59:17","endLine":916,"groupId":"4572","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteVolumeTestVolumeStateReady","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dd/cf4758eee3167233c8c68a7d4ff6c0f21b3214.src","preCode":"    public void deleteVolumeTestVolumeStateReady() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Ready).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock, Mockito.times(0)).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).cleanVolumesCache(volumeVoMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":893,"status":"B"}],"commitId":"15eddf3dd664d6c3e722dccaa03fb5adeaf85d49","commitMessage":"@@@Merge forward branch '4.11' PR #2629\n\nFix primary storage count when deleting volumes (#2629)\n","date":"2018-05-17 03:59:17","modifiedFileCount":"7","status":"B","submitter":"Rafael Weing?rtner"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void deleteVolumeTestVolumeStateAllocated() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Allocated).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.lenient().doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.lenient().doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.lenient().doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).cleanVolumesCache(volumeVoMock);\n    }\n","date":"2020-02-12 15:28:25","endLine":906,"groupId":"101176","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteVolumeTestVolumeStateAllocated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/15/2cbb091516bf618cb440e45fb07a84ca95de75.src","preCode":"    public void deleteVolumeTestVolumeStateAllocated() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Allocated).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).cleanVolumesCache(volumeVoMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":883,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void deleteVolumeTestVolumeStateReady() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Ready).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.lenient().doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.lenient().doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock, Mockito.times(0)).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).cleanVolumesCache(volumeVoMock);\n    }\n","date":"2020-02-12 15:28:25","endLine":932,"groupId":"101176","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteVolumeTestVolumeStateReady","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/15/2cbb091516bf618cb440e45fb07a84ca95de75.src","preCode":"    public void deleteVolumeTestVolumeStateReady() throws InterruptedException, ExecutionException, NoTransitionException {\n        Mockito.doReturn(Volume.State.Ready).when(volumeVoMock).getState();\n\n        Mockito.doReturn(volumeVoMock).when(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.doNothing().when(volumeApiServiceImpl).cleanVolumesCache(volumeVoMock);\n\n        Mockito.doReturn(true).when(volumeDaoMock).remove(volumeMockId);\n        Mockito.doReturn(true).when(volumeApiServiceImpl).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        boolean result = volumeApiServiceImpl.deleteVolume(volumeMockId, accountMock);\n\n        Assert.assertTrue(result);\n        Mockito.verify(volumeApiServiceImpl).retrieveAndValidateVolume(volumeMockId, accountMock);\n        Mockito.verify(volumeApiServiceImpl).destroyVolumeIfPossible(volumeVoMock);\n        Mockito.verify(volumeDaoMock, Mockito.times(0)).remove(volumeMockId);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(0)).stateTransitTo(volumeVoMock, Volume.Event.DestroyRequested);\n\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInPrimaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).expungeVolumesInSecondaryStorageIfNeeded(volumeVoMock);\n        Mockito.verify(volumeApiServiceImpl, Mockito.times(1)).cleanVolumesCache(volumeVoMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":909,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
