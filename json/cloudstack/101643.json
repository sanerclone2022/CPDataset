[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean startVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need stop vpn on the backend; virtual router doesn't\" + \" exist in the network \" + network.getId());\n                return true;\n            }\n            return _routerMgr.startRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(\"Element \" + getName() + \" doesn't handle createVpn command\");\n            return false;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":390,"groupId":"25157","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startVpn","params":"(finalRemoteAccessVpnvpn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    public boolean startVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need stop vpn on the backend; virtual router doesn't\" + \" exist in the network \" + network.getId());\n                return true;\n            }\n            return _routerMgr.startRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(\"Element \" + getName() + \" doesn't handle createVpn command\");\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean stopVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need stop vpn on the backend; virtual router doesn't \" + \"exist in the network \" + network.getId());\n                return true;\n            }\n            return _routerMgr.deleteRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(\"Element \" + getName() + \" doesn't handle removeVpn command\");\n            return false;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":410,"groupId":"13264","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stopVpn","params":"(finalRemoteAccessVpnvpn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    public boolean stopVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need stop vpn on the backend; virtual router doesn't \" + \"exist in the network \" + network.getId());\n                return true;\n            }\n            return _routerMgr.deleteRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(\"Element \" + getName() + \" doesn't handle removeVpn command\");\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2021-07-14 04:35:59","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean startVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need stop vpn on the backend; virtual router doesn't\" + \" exist in the network \" + network.getId());\n                return true;\n            }\n            return _routerMgr.startRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(\"Element \" + getName() + \" doesn't handle createVpn command\");\n            return false;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":390,"groupId":"101643","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startVpn","params":"(finalRemoteAccessVpnvpn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    public boolean startVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need stop vpn on the backend; virtual router doesn't\" + \" exist in the network \" + network.getId());\n                return true;\n            }\n            return _routerMgr.startRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(\"Element \" + getName() + \" doesn't handle createVpn command\");\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"N"},{"authorDate":"2021-07-14 04:35:59","commitOrder":2,"curCode":"    public boolean stopVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(String.format(\"There is no virtual router in network [uuid: %s, name: %s], it is not necessary to stop the VPN on backend.\",\n                        network.getUuid(), network.getName()));\n                return true;\n            }\n            return _routerMgr.deleteRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(String.format(\"Element %s doesn't handle removeVpn command\", getName()));\n            return false;\n        }\n    }\n","date":"2021-07-14 04:35:59","endLine":423,"groupId":"101643","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"stopVpn","params":"(finalRemoteAccessVpnvpn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d1/01a5e4f607b54df7205b02fa03ee94a721398b.src","preCode":"    public boolean stopVpn(final RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        if (vpn.getNetworkId() == null) {\n            return false;\n        }\n\n        final Network network = _networksDao.findById(vpn.getNetworkId());\n        if (canHandle(network, Service.Vpn)) {\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need stop vpn on the backend; virtual router doesn't \" + \"exist in the network \" + network.getId());\n                return true;\n            }\n            return _routerMgr.deleteRemoteAccessVpn(network, vpn, routers);\n        } else {\n            s_logger.debug(\"Element \" + getName() + \" doesn't handle removeVpn command\");\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"M"}],"commitId":"ca78f5b38687bee264d9df2212e8ae4d0cac9a4c","commitMessage":"@@@Enhance log messages with host name (#4575)\n\n* Enhance log messages with hostName\n\n* Use host.toString() on most of host logs.\n\n* Remove redundant \"Host\" in logs and enhance logs\n\n* duplicated \"for\"\n\n* Adopt String.format.  and enhance code\n\n* Address reviews enhancing log messages\n\nUpdate server/src/main/java/com/cloud/resource/ResourceManagerImpl.java\n    -- server/src/main/java/com/cloud/vm/UserVmManagerImpl.java\n    -- server/src/main/java/com/cloud/resource/RollingMaintenanceManagerImpl.java\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <38945620+GutoVeronezi@users.noreply.github.com>\n\n* Fix String.format issue and change log message from debug to warn\n\n* Fix checkstyle issue\n\n* Fix string.format log\n\n* Address review: enhance logs\n\n* Enhance log of hosts in maintenance avoid list\n\n* Remove \"VM\" on logs as vm.toString() already appends VM-<details>\n\n* Add more details of the VM when postStateTransitionEvent\n\n* Address reviewer and enhance VMInstanceVO.toString()\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <38945620+GutoVeronezi@users.noreply.github.com>","date":"2021-07-14 04:35:59","modifiedFileCount":"11","status":"M","submitter":"Gabriel Beims Br?scher"}]
