[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean replugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                final ReplugNicCommand replugNicCmd = new ReplugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"replugnic\", replugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final ReplugNicAnswer replugNicAnswer = cmds.getAnswer(ReplugNicAnswer.class);\n                if (replugNicAnswer == null || !replugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to replug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply ReplugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply ReplugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                                                   router.getDataCenterId());\n        }\n\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":3832,"groupId":"20290","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"replugNic","params":"(finalNetworknetwork@finalNicTOnic@finalVirtualMachineTOvm@finalReservationContextcontext@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public boolean replugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                final ReplugNicCommand replugNicCmd = new ReplugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"replugnic\", replugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final ReplugNicAnswer replugNicAnswer = cmds.getAnswer(ReplugNicAnswer.class);\n                if (replugNicAnswer == null || !replugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to replug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply ReplugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply ReplugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                                                   router.getDataCenterId());\n        }\n\n        return result;\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3805,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean plugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                final PlugNicCommand plugNicCmd = new PlugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"plugnic\", plugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final PlugNicAnswer plugNicAnswer = cmds.getAnswer(PlugNicAnswer.class);\n                if (plugNicAnswer == null || !plugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to plug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply PlugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply PlugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                    router.getDataCenterId());\n        }\n\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":3861,"groupId":"20290","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"plugNic","params":"(finalNetworknetwork@finalNicTOnic@finalVirtualMachineTOvm@finalReservationContextcontext@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public boolean plugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                final PlugNicCommand plugNicCmd = new PlugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"plugnic\", plugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final PlugNicAnswer plugNicAnswer = cmds.getAnswer(PlugNicAnswer.class);\n                if (plugNicAnswer == null || !plugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to plug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply PlugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply PlugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                    router.getDataCenterId());\n        }\n\n        return result;\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3834,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-07 22:43:01","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean replugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                final ReplugNicCommand replugNicCmd = new ReplugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"replugnic\", replugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final ReplugNicAnswer replugNicAnswer = cmds.getAnswer(ReplugNicAnswer.class);\n                if (replugNicAnswer == null || !replugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to replug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply ReplugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply ReplugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                                                   router.getDataCenterId());\n        }\n\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":3832,"groupId":"10565","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"replugNic","params":"(finalNetworknetwork@finalNicTOnic@finalVirtualMachineTOvm@finalReservationContextcontext@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    public boolean replugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n            ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                final ReplugNicCommand replugNicCmd = new ReplugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"replugnic\", replugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final ReplugNicAnswer replugNicAnswer = cmds.getAnswer(ReplugNicAnswer.class);\n                if (replugNicAnswer == null || !replugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to replug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply ReplugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply ReplugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                                                   router.getDataCenterId());\n        }\n\n        return result;\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3805,"status":"N"},{"authorDate":"2020-02-07 22:43:01","commitOrder":2,"curCode":"    public boolean plugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                NetworkDetailVO pvlanTypeDetail = networkDetailsDao.findDetail(network.getId(), ApiConstants.ISOLATED_PVLAN_TYPE);\n                if (pvlanTypeDetail != null) {\n                    Map<NetworkOffering.Detail, String> nicDetails = nic.getDetails() == null ? new HashMap<>() : nic.getDetails();\n                    s_logger.debug(\"Found PVLAN type: \" + pvlanTypeDetail.getValue() + \" on network details, adding it as part of the PlugNicCommand\");\n                    nicDetails.putIfAbsent(NetworkOffering.Detail.pvlanType, pvlanTypeDetail.getValue());\n                    nic.setDetails(nicDetails);\n                }\n                final PlugNicCommand plugNicCmd = new PlugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"plugnic\", plugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final PlugNicAnswer plugNicAnswer = cmds.getAnswer(PlugNicAnswer.class);\n                if (plugNicAnswer == null || !plugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to plug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply PlugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply PlugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                    router.getDataCenterId());\n        }\n\n        return result;\n    }\n","date":"2020-02-07 22:43:01","endLine":4093,"groupId":"10565","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"plugNic","params":"(finalNetworknetwork@finalNicTOnic@finalVirtualMachineTOvm@finalReservationContextcontext@finalDeployDestinationdest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2c/4079cd3fde6dfe7f6a3d8e2570097d8f6ac943.src","preCode":"    public boolean plugNic(final Network network, final NicTO nic, final VirtualMachineTO vm, final ReservationContext context, final DeployDestination dest) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        boolean result = true;\n\n        final VMInstanceVO router = _vmDao.findById(vm.getId());\n        if (router.getState() == State.Running) {\n            try {\n                final PlugNicCommand plugNicCmd = new PlugNicCommand(nic, vm.getName(), vm.getType(), vm.getDetails());\n                final Commands cmds = new Commands(Command.OnError.Stop);\n                cmds.addCommand(\"plugnic\", plugNicCmd);\n                _agentMgr.send(dest.getHost().getId(), cmds);\n                final PlugNicAnswer plugNicAnswer = cmds.getAnswer(PlugNicAnswer.class);\n                if (plugNicAnswer == null || !plugNicAnswer.getResult()) {\n                    s_logger.warn(\"Unable to plug nic for vm \" + vm.getName());\n                    result = false;\n                }\n            } catch (final OperationTimedoutException e) {\n                throw new AgentUnavailableException(\"Unable to plug nic for router \" + vm.getName() + \" in network \" + network, dest.getHost().getId(), e);\n            }\n        } else {\n            s_logger.warn(\"Unable to apply PlugNic, vm \" + router + \" is not in the right state \" + router.getState());\n\n            throw new ResourceUnavailableException(\"Unable to apply PlugNic on the backend,\" + \" vm \" + vm + \" is not in the right state\", DataCenter.class,\n                    router.getDataCenterId());\n        }\n\n        return result;\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4059,"status":"M"}],"commitId":"ce896a477de31e530b4f28ae62fa42d9e0f1635c","commitMessage":"@@@[Vmware] Enable PVLAN support on L2 networks (#3732)\n\n* Enable PVLAN support on L2 networks\n\n* Fix prevent null pointer on details\n\n* Add marvin tests\n\n* Fixes from comments\n\n* Fix: missing pvlan type on plugniccommand\n\n* Fix checks on network creation for vlans overlap\n\n* Fix remove prefix from secondary vlan id\n\n* Improve checks on physical network for pvlans\n\n* Fix compatibility with previous pvlan creation\n\n* Fix shared networks backwards pvlan compatibility\n\n* Add ui fix for pvlan type not passed to api\n\n* Add check for isolated vlan id overlap\n\n* Include check for dynamic vlan reserved for secondary vlan\n\n* Fix marvin tests errors\n\n* Fix redundant imports\n\n* Skip marvin test for pvlan if dvswitch is not present\n\n* spelling\n\nCo-authored-by: Andrija Panic <45762285+andrijapanicsb@users.noreply.github.com>\n","date":"2020-02-07 22:43:01","modifiedFileCount":"23","status":"M","submitter":"Nicolas Vazquez"}]
