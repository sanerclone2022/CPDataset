[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static String postHttpRequest(final String jsonCmd, final URI agentUri) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"POST request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = null;\n        final TrustStrategy easyStrategy = new TrustStrategy() {\n            @Override\n            public boolean isTrusted(final X509Certificate[] chain, final String authType)\n                    throws CertificateException {\n                return true;\n            }\n        };\n\n        try {\n            final SSLSocketFactory sf = new SSLSocketFactory(easyStrategy, new AllowAllHostnameVerifier());\n            final SchemeRegistry registry = new SchemeRegistry();\n            registry.register(new Scheme(\"https\", DEFAULT_AGENT_PORT, sf));\n            final ClientConnectionManager ccm = new BasicClientConnectionManager(registry);\n            httpClient = new DefaultHttpClient(ccm);\n        } catch (final KeyManagementException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final UnrecoverableKeyException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final NoSuchAlgorithmException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final KeyStoreException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        }\n\n        String result = null;\n\n        \r\n        try {\n            final HttpPost request = new HttpPost(agentUri);\n\n            \r\n            \r\n            \r\n            final StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.setEntity(cmdJson);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            final HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                final String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                final String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right type of\" + \" server?\";\n                final Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                final String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                return null;\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                final String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"POST response is \" + logResult);\n            }\n        } catch (final ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (final IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":2315,"groupId":"18655","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postHttpRequest","params":"(finalStringjsonCmd@finalURIagentUri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/955c809b1c81bc1e476f77b2f489f020167e28.src","preCode":"    public static String postHttpRequest(final String jsonCmd, final URI agentUri) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"POST request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = null;\n        final TrustStrategy easyStrategy = new TrustStrategy() {\n            @Override\n            public boolean isTrusted(final X509Certificate[] chain, final String authType)\n                    throws CertificateException {\n                return true;\n            }\n        };\n\n        try {\n            final SSLSocketFactory sf = new SSLSocketFactory(easyStrategy, new AllowAllHostnameVerifier());\n            final SchemeRegistry registry = new SchemeRegistry();\n            registry.register(new Scheme(\"https\", DEFAULT_AGENT_PORT, sf));\n            final ClientConnectionManager ccm = new BasicClientConnectionManager(registry);\n            httpClient = new DefaultHttpClient(ccm);\n        } catch (final KeyManagementException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final UnrecoverableKeyException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final NoSuchAlgorithmException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final KeyStoreException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        }\n\n        String result = null;\n\n        \r\n        try {\n            final HttpPost request = new HttpPost(agentUri);\n\n            \r\n            \r\n            \r\n            final StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.setEntity(cmdJson);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            final HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                final String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                final String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right type of\" + \" server?\";\n                final Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                final String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                return null;\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                final String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"POST response is \" + logResult);\n            }\n        } catch (final ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (final IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/resource/HypervDirectConnectResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2235,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static String getHttpRequest(final String jsonCmd, final URI agentUri, String sessionID) throws ExecutionException {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"POST request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = getHttpClient();\n        String result = null;\n\n        \r\n        try {\n            HttpGet request = new HttpGet(agentUri);\n\n            \r\n            \r\n            \r\n            StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.addHeader(\"Cookie\", \"SessId=\" + sessionID);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right f of\" + \" server?\";\n                Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                throw new ExecutionException(\"UNAUTHORIZED\");\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"Get response is \" + logResult);\n            }\n        } catch (ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":836,"groupId":"18655","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getHttpRequest","params":"(finalStringjsonCmd@finalURIagentUri@StringsessionID)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/34/7186c2cac751efad647d3fa8cc75ef1cc19b6c.src","preCode":"    public static String getHttpRequest(final String jsonCmd, final URI agentUri, String sessionID) throws ExecutionException {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"POST request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = getHttpClient();\n        String result = null;\n\n        \r\n        try {\n            HttpGet request = new HttpGet(agentUri);\n\n            \r\n            \r\n            \r\n            StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.addHeader(\"Cookie\", \"SessId=\" + sessionID);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right f of\" + \" server?\";\n                Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                throw new ExecutionException(\"UNAUTHORIZED\");\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"Get response is \" + logResult);\n            }\n        } catch (ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","realPath":"plugins/network-elements/netscaler/src/main/java/com/cloud/network/resource/NetScalerControlCenterResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":780,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-04-20 03:03:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public static String postHttpRequest(final String jsonCmd, final URI agentUri) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"POST request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = null;\n        final TrustStrategy easyStrategy = new TrustStrategy() {\n            @Override\n            public boolean isTrusted(final X509Certificate[] chain, final String authType)\n                    throws CertificateException {\n                return true;\n            }\n        };\n\n        try {\n            final SSLSocketFactory sf = new SSLSocketFactory(easyStrategy, new AllowAllHostnameVerifier());\n            final SchemeRegistry registry = new SchemeRegistry();\n            registry.register(new Scheme(\"https\", DEFAULT_AGENT_PORT, sf));\n            final ClientConnectionManager ccm = new BasicClientConnectionManager(registry);\n            httpClient = new DefaultHttpClient(ccm);\n        } catch (final KeyManagementException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final UnrecoverableKeyException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final NoSuchAlgorithmException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final KeyStoreException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        }\n\n        String result = null;\n\n        \r\n        try {\n            final HttpPost request = new HttpPost(agentUri);\n\n            \r\n            \r\n            \r\n            final StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.setEntity(cmdJson);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            final HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                final String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                final String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right type of\" + \" server?\";\n                final Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                final String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                return null;\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                final String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"POST response is \" + logResult);\n            }\n        } catch (final ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (final IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":2315,"groupId":"103896","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postHttpRequest","params":"(finalStringjsonCmd@finalURIagentUri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bc/955c809b1c81bc1e476f77b2f489f020167e28.src","preCode":"    public static String postHttpRequest(final String jsonCmd, final URI agentUri) {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"POST request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = null;\n        final TrustStrategy easyStrategy = new TrustStrategy() {\n            @Override\n            public boolean isTrusted(final X509Certificate[] chain, final String authType)\n                    throws CertificateException {\n                return true;\n            }\n        };\n\n        try {\n            final SSLSocketFactory sf = new SSLSocketFactory(easyStrategy, new AllowAllHostnameVerifier());\n            final SchemeRegistry registry = new SchemeRegistry();\n            registry.register(new Scheme(\"https\", DEFAULT_AGENT_PORT, sf));\n            final ClientConnectionManager ccm = new BasicClientConnectionManager(registry);\n            httpClient = new DefaultHttpClient(ccm);\n        } catch (final KeyManagementException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final UnrecoverableKeyException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final NoSuchAlgorithmException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        } catch (final KeyStoreException e) {\n            s_logger.error(\"failed to initialize http client \" + e.getMessage());\n        }\n\n        String result = null;\n\n        \r\n        try {\n            final HttpPost request = new HttpPost(agentUri);\n\n            \r\n            \r\n            \r\n            final StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.setEntity(cmdJson);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            final HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                final String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                final String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right type of\" + \" server?\";\n                final Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                final String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                return null;\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                final String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"POST response is \" + logResult);\n            }\n        } catch (final ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (final IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/resource/HypervDirectConnectResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2235,"status":"N"},{"authorDate":"2018-04-20 03:03:27","commitOrder":2,"curCode":"    public static String getHttpRequest(final String jsonCmd, final URI agentUri, String sessionID) throws ExecutionException {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"GET request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = getHttpClient();\n        String result = null;\n\n        \r\n        try {\n            HttpGet request = new HttpGet(agentUri);\n\n            \r\n            \r\n            \r\n            StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.addHeader(\"Cookie\", \"SessId=\" + sessionID);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right f of\" + \" server?\";\n                Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                throw new ExecutionException(\"UNAUTHORIZED\");\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"Get response is \" + logResult);\n            }\n        } catch (ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","date":"2018-04-20 03:03:27","endLine":836,"groupId":"103896","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getHttpRequest","params":"(finalStringjsonCmd@finalURIagentUri@StringsessionID)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d5/1985725ab07d64f8dc8a40067d73b0251c5c76.src","preCode":"    public static String getHttpRequest(final String jsonCmd, final URI agentUri, String sessionID) throws ExecutionException {\n        \r\n        \r\n        \r\n        \r\n        \r\n        String logMessage = StringEscapeUtils.unescapeJava(jsonCmd);\n        logMessage = cleanPassword(logMessage);\n        s_logger.debug(\"POST request to \" + agentUri.toString()\n                + \" with contents \" + logMessage);\n\n        \r\n        HttpClient httpClient = getHttpClient();\n        String result = null;\n\n        \r\n        try {\n            HttpGet request = new HttpGet(agentUri);\n\n            \r\n            \r\n            \r\n            StringEntity cmdJson = new StringEntity(jsonCmd);\n            request.addHeader(\"content-type\", \"application/json\");\n            request.addHeader(\"Cookie\", \"SessId=\" + sessionID);\n            s_logger.debug(\"Sending cmd to \" + agentUri.toString()\n                    + \" cmd data:\" + logMessage);\n            HttpResponse response = httpClient.execute(request);\n\n            \r\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {\n                String errMsg = \"Failed to send : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                String unsupportMsg = \"Unsupported command \" + agentUri.getPath() + \".  Are you sure you got the right f of\" + \" server?\";\n                Answer ans = new UnsupportedAnswer(null, unsupportMsg);\n                s_logger.error(ans);\n                result = s_gson.toJson(new Answer[] {ans});\n            } else if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                String errMsg = \"Failed send to \" + agentUri.toString() + \" : HTTP error code : \" + response.getStatusLine().getStatusCode();\n                s_logger.error(errMsg);\n                throw new ExecutionException(\"UNAUTHORIZED\");\n            } else {\n                result = EntityUtils.toString(response.getEntity());\n                String logResult = cleanPassword(StringEscapeUtils.unescapeJava(result));\n                s_logger.debug(\"Get response is \" + logResult);\n            }\n        } catch (ClientProtocolException protocolEx) {\n            \r\n            s_logger.error(protocolEx);\n        } catch (IOException connEx) {\n            \r\n            s_logger.error(connEx);\n        } finally {\n            httpClient.getConnectionManager().shutdown();\n        }\n        return result;\n    }\n","realPath":"plugins/network-elements/netscaler/src/main/java/com/cloud/network/resource/NetScalerControlCenterResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":780,"status":"M"}],"commitId":"fed3492b57625f415df556b5e2e44efee2257f50","commitMessage":"@@@CLOUDSTACK-10357: Improve log messages in methods (#2580)\n\nFix several logs that mismatch method.\nAdd stacktraces for throw new statements.","date":"2018-04-20 03:03:27","modifiedFileCount":"12","status":"M","submitter":"lzh3636"}]
