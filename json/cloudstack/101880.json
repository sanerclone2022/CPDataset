[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Network updateGuestNetwork(final long networkId, String name, String displayText, Account callerAccount, User callerUser, String domainSuffix,\n            final Long networkOfferingId, Boolean changeCidr, String guestVmCidr, Boolean displayNetwork, String customId, boolean updateInSequence, boolean forced) {\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled\n                        + \" state, can't upgrade to it\", networkOffering.getUuid(), \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid()\n                            + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).getRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged ? _networkMgr.finalizeServicesAndProvidersForNetwork(\n                _entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()) : new HashMap<String, String>();\n\n        \r\n        if (domainSuffix != null) {\n            \r\n            if (!NetUtils.verifyDomainName(domainSuffix)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n\n            long offeringId = oldNetworkOfferingId;\n            if (networkOfferingId != null) {\n                offeringId = networkOfferingId;\n            }\n\n            Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n            String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n            if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                \r\n                throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n            }\n\n            network.setNetworkDomain(domainSuffix);\n            \r\n            restartNetwork = true;\n        }\n\n        \r\n        \r\n        DataCenter dc = _dcDao.findById(network.getDataCenterId());\n        String networkCidr = network.getNetworkCidr();\n\n        if (guestVmCidr != null) {\n            if (dc.getNetworkType() == NetworkType.Basic) {\n                throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic  + \" networking\");\n            }\n            if (network.getGuestType() != GuestType.Isolated) {\n                throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n            }\n            if (networkOfferingChanged) {\n                throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n            }\n            if (!(network.getState() == Network.State.Implemented)) {\n                throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \"\n                        + network.getState() + \" state\");\n            }\n            if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n            }\n            if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n            }\n\n            \r\n            \r\n            if (networkCidr != null) {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \"\n                            + networkCidr);\n                }\n            } else {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \"\n                            + network.getCidr());\n                }\n            }\n\n            \r\n                String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                Long size = Long.valueOf(guestVmCidrPair[1]);\n                List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n            s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                long range =  endIp - startIp + 1;\n                s_logger.info(\"The specified guest vm cidr has \" +  range + \" IPs\");\n\n                for (NicVO nic : nicsPresent) {\n                    long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                    \r\n                    if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                    }\n                } else {\n                if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr()\n                            + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                            + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    network.setNetworkCidr(network.getCidr());\n                }\n\n                \r\n                if (network.getNetworkCidr().equals(guestVmCidr)) {\n                    s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                    network.setNetworkCidr(null);\n                }\n                \r\n                \r\n                network.setCidr(guestVmCidr);\n                _networksDao.update(networkId, network);\n                s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n            }\n\n        ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n        \r\n        \r\n        int resourceCount=1;\n        if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).getRedundantRouter()\n                && (networkOfferingId==null || _networkOfferingDao.findById(networkOfferingId).getRedundantRouter()) && network.getVpcId()==null) {\n            _networkMgr.canUpdateInSequence(network, forced);\n            NetworkDetailVO networkDetail =new NetworkDetailVO(network.getId(),Network.updatingInSequence,\"true\",true);\n            _networkDetailsDao.persist(networkDetail);\n            _networkMgr.configureUpdateInSequence(network);\n            resourceCount=_networkMgr.getResourceCount(network);\n        }\n        List<String > servicesNotInNewOffering = null;\n        if (networkOfferingId != null) {\n            servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n        }\n        if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n            NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n            throw new CloudRuntimeException(\"The new offering:\"+newOffering.getUniqueName()\n                    +\" will remove the following services \"+servicesNotInNewOffering +\"along with all the related configuration currently in use. will not proceed with the network update.\" +\n                    \"set forced parameter to true for forcing an update.\");\n        }\n        try {\n            if (servicesNotInNewOffering!=null && !servicesNotInNewOffering.isEmpty()) {\n                _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering,network);\n            }\n        } catch (Throwable e) {\n            s_logger.debug(\"failed to cleanup config related to unused services error:\"+e.getMessage());\n        }\n\n        boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n        try {\n\n            do {\n                if (restartNetwork) {\n                    if (validStateToShutdown) {\n                        if (!changeCidr) {\n                            s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                            if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        } else {\n                            \r\n                            s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                            \r\n                            if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                s_logger.warn(\"Existing IP reservation will become ineffective for the network with id =  \" + networkId\n                                        + \" You need to reapply reservation after network reimplementation.\");\n                                \r\n                                network.setCidr(network.getNetworkCidr());\n                                \r\n                                network.setNetworkCidr(null);\n                            }\n\n                            if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n                    } else {\n                        CloudRuntimeException ex = new CloudRuntimeException(\n                                \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                        throw ex;\n                    }\n                }\n\n                \r\n                \r\n                Network.State networkState = _networksDao.findById(networkId).getState();\n                boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                if (restartNetwork && !validStateToImplement) {\n                    CloudRuntimeException ex = new CloudRuntimeException(\n                            \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                    ex.addProxyObject(network.getUuid(), \"networkId\");\n                    throw ex;\n                }\n\n                if (networkOfferingId != null) {\n                    if (networkOfferingChanged) {\n                        Transaction.execute(new TransactionCallbackNoReturn() {\n                            @Override\n                            public void doInTransactionWithoutResult(TransactionStatus status) {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network, newSvcProviders);\n                                \r\n                                \r\n                                \r\n                                List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                for (NicVO nic : nics) {\n                                    long vmId = nic.getInstanceId();\n                                    VMInstanceVO vm = _vmDao.findById(vmId);\n                                    if (vm == null) {\n                                        s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                        continue;\n                                    }\n                                    long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                    String nicIdString = Long.toString(nic.getId());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            oldNetworkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            networkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                }\n                            }\n                        });\n                    } else {\n                        network.setNetworkOfferingId(networkOfferingId);\n                        _networksDao.update(networkId, network,\n                                _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                    }\n                } else {\n                    _networksDao.update(networkId, network);\n                }\n\n                \r\n                if (restartNetwork) {\n                    if (network.getState() != Network.State.Allocated) {\n                        DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                        s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                        try {\n                            if (!changeCidr) {\n                                _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                            } else {\n                                _networkMgr.implementNetwork(network.getId(), dest, context);\n                            }\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n\n                \r\n                \r\n                if (networkOfferingChanged && !oldNtwkOff.getIsPersistent() && networkOffering.getIsPersistent()) {\n                    if (network.getState() == Network.State.Allocated) {\n                        try {\n                            DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                            _networkMgr.implementNetwork(network.getId(), dest, context);\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n                resourceCount--;\n            } while (updateInSequence && resourceCount>0);\n        } catch (Exception exception) {\n             if (updateInSequence) {\n                 _networkMgr.finalizeUpdateInSequence(network, false);\n             }\n             throw new CloudRuntimeException(\"failed to update network \"+network.getUuid()+\" due to \"+exception.getMessage());\n        } finally {\n            if (updateInSequence) {\n                if( _networkDetailsDao.findDetail(networkId,Network.updatingInSequence)!=null){\n                    _networkDetailsDao.removeDetail(networkId,Network.updatingInSequence);\n                }\n            }\n        }\n        return getNetwork(network.getId());\n    }\n","date":"2018-01-20 05:49:27","endLine":2378,"groupId":"20092","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateGuestNetwork","params":"(finallongnetworkId@Stringname@StringdisplayText@AccountcallerAccount@UsercallerUser@StringdomainSuffix@finalLongnetworkOfferingId@BooleanchangeCidr@StringguestVmCidr@BooleandisplayNetwork@StringcustomId@booleanupdateInSequence@booleanforced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    public Network updateGuestNetwork(final long networkId, String name, String displayText, Account callerAccount, User callerUser, String domainSuffix,\n            final Long networkOfferingId, Boolean changeCidr, String guestVmCidr, Boolean displayNetwork, String customId, boolean updateInSequence, boolean forced) {\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled\n                        + \" state, can't upgrade to it\", networkOffering.getUuid(), \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid()\n                            + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).getRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged ? _networkMgr.finalizeServicesAndProvidersForNetwork(\n                _entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()) : new HashMap<String, String>();\n\n        \r\n        if (domainSuffix != null) {\n            \r\n            if (!NetUtils.verifyDomainName(domainSuffix)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n\n            long offeringId = oldNetworkOfferingId;\n            if (networkOfferingId != null) {\n                offeringId = networkOfferingId;\n            }\n\n            Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n            String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n            if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                \r\n                throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n            }\n\n            network.setNetworkDomain(domainSuffix);\n            \r\n            restartNetwork = true;\n        }\n\n        \r\n        \r\n        DataCenter dc = _dcDao.findById(network.getDataCenterId());\n        String networkCidr = network.getNetworkCidr();\n\n        if (guestVmCidr != null) {\n            if (dc.getNetworkType() == NetworkType.Basic) {\n                throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic  + \" networking\");\n            }\n            if (network.getGuestType() != GuestType.Isolated) {\n                throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n            }\n            if (networkOfferingChanged) {\n                throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n            }\n            if (!(network.getState() == Network.State.Implemented)) {\n                throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \"\n                        + network.getState() + \" state\");\n            }\n            if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n            }\n            if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n            }\n\n            \r\n            \r\n            if (networkCidr != null) {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \"\n                            + networkCidr);\n                }\n            } else {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \"\n                            + network.getCidr());\n                }\n            }\n\n            \r\n                String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                Long size = Long.valueOf(guestVmCidrPair[1]);\n                List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n            s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                long range =  endIp - startIp + 1;\n                s_logger.info(\"The specified guest vm cidr has \" +  range + \" IPs\");\n\n                for (NicVO nic : nicsPresent) {\n                    long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                    \r\n                    if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                    }\n                } else {\n                if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr()\n                            + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                            + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    network.setNetworkCidr(network.getCidr());\n                }\n\n                \r\n                if (network.getNetworkCidr().equals(guestVmCidr)) {\n                    s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                    network.setNetworkCidr(null);\n                }\n                \r\n                \r\n                network.setCidr(guestVmCidr);\n                _networksDao.update(networkId, network);\n                s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n            }\n\n        ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n        \r\n        \r\n        int resourceCount=1;\n        if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).getRedundantRouter()\n                && (networkOfferingId==null || _networkOfferingDao.findById(networkOfferingId).getRedundantRouter()) && network.getVpcId()==null) {\n            _networkMgr.canUpdateInSequence(network, forced);\n            NetworkDetailVO networkDetail =new NetworkDetailVO(network.getId(),Network.updatingInSequence,\"true\",true);\n            _networkDetailsDao.persist(networkDetail);\n            _networkMgr.configureUpdateInSequence(network);\n            resourceCount=_networkMgr.getResourceCount(network);\n        }\n        List<String > servicesNotInNewOffering = null;\n        if (networkOfferingId != null) {\n            servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n        }\n        if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n            NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n            throw new CloudRuntimeException(\"The new offering:\"+newOffering.getUniqueName()\n                    +\" will remove the following services \"+servicesNotInNewOffering +\"along with all the related configuration currently in use. will not proceed with the network update.\" +\n                    \"set forced parameter to true for forcing an update.\");\n        }\n        try {\n            if (servicesNotInNewOffering!=null && !servicesNotInNewOffering.isEmpty()) {\n                _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering,network);\n            }\n        } catch (Throwable e) {\n            s_logger.debug(\"failed to cleanup config related to unused services error:\"+e.getMessage());\n        }\n\n        boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n        try {\n\n            do {\n                if (restartNetwork) {\n                    if (validStateToShutdown) {\n                        if (!changeCidr) {\n                            s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                            if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        } else {\n                            \r\n                            s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                            \r\n                            if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                s_logger.warn(\"Existing IP reservation will become ineffective for the network with id =  \" + networkId\n                                        + \" You need to reapply reservation after network reimplementation.\");\n                                \r\n                                network.setCidr(network.getNetworkCidr());\n                                \r\n                                network.setNetworkCidr(null);\n                            }\n\n                            if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n                    } else {\n                        CloudRuntimeException ex = new CloudRuntimeException(\n                                \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                        throw ex;\n                    }\n                }\n\n                \r\n                \r\n                Network.State networkState = _networksDao.findById(networkId).getState();\n                boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                if (restartNetwork && !validStateToImplement) {\n                    CloudRuntimeException ex = new CloudRuntimeException(\n                            \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                    ex.addProxyObject(network.getUuid(), \"networkId\");\n                    throw ex;\n                }\n\n                if (networkOfferingId != null) {\n                    if (networkOfferingChanged) {\n                        Transaction.execute(new TransactionCallbackNoReturn() {\n                            @Override\n                            public void doInTransactionWithoutResult(TransactionStatus status) {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network, newSvcProviders);\n                                \r\n                                \r\n                                \r\n                                List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                for (NicVO nic : nics) {\n                                    long vmId = nic.getInstanceId();\n                                    VMInstanceVO vm = _vmDao.findById(vmId);\n                                    if (vm == null) {\n                                        s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                        continue;\n                                    }\n                                    long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                    String nicIdString = Long.toString(nic.getId());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            oldNetworkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            networkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                }\n                            }\n                        });\n                    } else {\n                        network.setNetworkOfferingId(networkOfferingId);\n                        _networksDao.update(networkId, network,\n                                _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                    }\n                } else {\n                    _networksDao.update(networkId, network);\n                }\n\n                \r\n                if (restartNetwork) {\n                    if (network.getState() != Network.State.Allocated) {\n                        DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                        s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                        try {\n                            if (!changeCidr) {\n                                _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                            } else {\n                                _networkMgr.implementNetwork(network.getId(), dest, context);\n                            }\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n\n                \r\n                \r\n                if (networkOfferingChanged && !oldNtwkOff.getIsPersistent() && networkOffering.getIsPersistent()) {\n                    if (network.getState() == Network.State.Allocated) {\n                        try {\n                            DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                            _networkMgr.implementNetwork(network.getId(), dest, context);\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n                resourceCount--;\n            } while (updateInSequence && resourceCount>0);\n        } catch (Exception exception) {\n             if (updateInSequence) {\n                 _networkMgr.finalizeUpdateInSequence(network, false);\n             }\n             throw new CloudRuntimeException(\"failed to update network \"+network.getUuid()+\" due to \"+exception.getMessage());\n        } finally {\n            if (updateInSequence) {\n                if( _networkDetailsDao.findDetail(networkId,Network.updatingInSequence)!=null){\n                    _networkDetailsDao.removeDetail(networkId,Network.updatingInSequence);\n                }\n            }\n        }\n        return getNetwork(network.getId());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1973,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2708,"groupId":"9446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNetworkCanBeMigrated","params":"(AccountcallerAccount@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2685,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":2,"curCode":"    public Network updateGuestNetwork(final long networkId, String name, String displayText, Account callerAccount, User callerUser, String domainSuffix,\n            final Long networkOfferingId, Boolean changeCidr, String guestVmCidr, Boolean displayNetwork, String customId, boolean updateInSequence, boolean forced) {\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled\n                        + \" state, can't upgrade to it\", networkOffering.getUuid(), \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid()\n                            + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).isRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged ? _networkMgr.finalizeServicesAndProvidersForNetwork(\n                _entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()) : new HashMap<String, String>();\n\n        \r\n        if (domainSuffix != null) {\n            \r\n            if (!NetUtils.verifyDomainName(domainSuffix)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n\n            long offeringId = oldNetworkOfferingId;\n            if (networkOfferingId != null) {\n                offeringId = networkOfferingId;\n            }\n\n            Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n            String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n            if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                \r\n                throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n            }\n\n            network.setNetworkDomain(domainSuffix);\n            \r\n            restartNetwork = true;\n        }\n\n        \r\n        \r\n        DataCenter dc = _dcDao.findById(network.getDataCenterId());\n        String networkCidr = network.getNetworkCidr();\n\n        if (guestVmCidr != null) {\n            if (dc.getNetworkType() == NetworkType.Basic) {\n                throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic  + \" networking\");\n            }\n            if (network.getGuestType() != GuestType.Isolated) {\n                throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n            }\n            if (networkOfferingChanged) {\n                throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n            }\n            if (!(network.getState() == Network.State.Implemented)) {\n                throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \"\n                        + network.getState() + \" state\");\n            }\n            if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n            }\n            if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n            }\n\n            \r\n            \r\n            if (networkCidr != null) {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \"\n                            + networkCidr);\n                }\n            } else {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \"\n                            + network.getCidr());\n                }\n            }\n\n            \r\n                String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                Long size = Long.valueOf(guestVmCidrPair[1]);\n                List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n            s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                long range =  endIp - startIp + 1;\n                s_logger.info(\"The specified guest vm cidr has \" +  range + \" IPs\");\n\n                for (NicVO nic : nicsPresent) {\n                    long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                    \r\n                    if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                    }\n                } else {\n                if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr()\n                            + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                            + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    network.setNetworkCidr(network.getCidr());\n                }\n\n                \r\n                if (network.getNetworkCidr().equals(guestVmCidr)) {\n                    s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                    network.setNetworkCidr(null);\n                }\n                \r\n                \r\n                network.setCidr(guestVmCidr);\n                _networksDao.update(networkId, network);\n                s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n            }\n\n        ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n        \r\n        \r\n        int resourceCount=1;\n        if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).isRedundantRouter()\n                && (networkOfferingId==null || _networkOfferingDao.findById(networkOfferingId).isRedundantRouter()) && network.getVpcId()==null) {\n            _networkMgr.canUpdateInSequence(network, forced);\n            NetworkDetailVO networkDetail =new NetworkDetailVO(network.getId(),Network.updatingInSequence,\"true\",true);\n            _networkDetailsDao.persist(networkDetail);\n            _networkMgr.configureUpdateInSequence(network);\n            resourceCount=_networkMgr.getResourceCount(network);\n        }\n        List<String > servicesNotInNewOffering = null;\n        if (networkOfferingId != null) {\n            servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n        }\n        if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n            NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n            throw new CloudRuntimeException(\"The new offering:\"+newOffering.getUniqueName()\n                    +\" will remove the following services \"+servicesNotInNewOffering +\"along with all the related configuration currently in use. will not proceed with the network update.\" +\n                    \"set forced parameter to true for forcing an update.\");\n        }\n        try {\n            if (servicesNotInNewOffering!=null && !servicesNotInNewOffering.isEmpty()) {\n                _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering,network);\n            }\n        } catch (Throwable e) {\n            s_logger.debug(\"failed to cleanup config related to unused services error:\"+e.getMessage());\n        }\n\n        boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n        try {\n\n            do {\n                if (restartNetwork) {\n                    if (validStateToShutdown) {\n                        if (!changeCidr) {\n                            s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                            if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        } else {\n                            \r\n                            s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                            \r\n                            if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                s_logger.warn(\"Existing IP reservation will become ineffective for the network with id =  \" + networkId\n                                        + \" You need to reapply reservation after network reimplementation.\");\n                                \r\n                                network.setCidr(network.getNetworkCidr());\n                                \r\n                                network.setNetworkCidr(null);\n                            }\n\n                            if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n                    } else {\n                        CloudRuntimeException ex = new CloudRuntimeException(\n                                \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                        throw ex;\n                    }\n                }\n\n                \r\n                \r\n                Network.State networkState = _networksDao.findById(networkId).getState();\n                boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                if (restartNetwork && !validStateToImplement) {\n                    CloudRuntimeException ex = new CloudRuntimeException(\n                            \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                    ex.addProxyObject(network.getUuid(), \"networkId\");\n                    throw ex;\n                }\n\n                if (networkOfferingId != null) {\n                    if (networkOfferingChanged) {\n                        Transaction.execute(new TransactionCallbackNoReturn() {\n                            @Override\n                            public void doInTransactionWithoutResult(TransactionStatus status) {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network, newSvcProviders);\n                                \r\n                                \r\n                                \r\n                                List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                for (NicVO nic : nics) {\n                                    long vmId = nic.getInstanceId();\n                                    VMInstanceVO vm = _vmDao.findById(vmId);\n                                    if (vm == null) {\n                                        s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                        continue;\n                                    }\n                                    long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                    String nicIdString = Long.toString(nic.getId());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            oldNetworkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            networkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                }\n                            }\n                        });\n                    } else {\n                        network.setNetworkOfferingId(networkOfferingId);\n                        _networksDao.update(networkId, network,\n                                _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                    }\n                } else {\n                    _networksDao.update(networkId, network);\n                }\n\n                \r\n                if (restartNetwork) {\n                    if (network.getState() != Network.State.Allocated) {\n                        DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                        s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                        try {\n                            if (!changeCidr) {\n                                _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                            } else {\n                                _networkMgr.implementNetwork(network.getId(), dest, context);\n                            }\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n\n                \r\n                \r\n                if (networkOfferingChanged && !oldNtwkOff.isPersistent() && networkOffering.isPersistent()) {\n                    if (network.getState() == Network.State.Allocated) {\n                        try {\n                            DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                            _networkMgr.implementNetwork(network.getId(), dest, context);\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n                resourceCount--;\n            } while (updateInSequence && resourceCount>0);\n        } catch (Exception exception) {\n             if (updateInSequence) {\n                 _networkMgr.finalizeUpdateInSequence(network, false);\n             }\n             throw new CloudRuntimeException(\"failed to update network \"+network.getUuid()+\" due to \"+exception.getMessage());\n        } finally {\n            if (updateInSequence) {\n                if( _networkDetailsDao.findDetail(networkId,Network.updatingInSequence)!=null){\n                    _networkDetailsDao.removeDetail(networkId,Network.updatingInSequence);\n                }\n            }\n        }\n        return getNetwork(network.getId());\n    }\n","date":"2018-09-22 23:20:48","endLine":2408,"groupId":"20092","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateGuestNetwork","params":"(finallongnetworkId@Stringname@StringdisplayText@AccountcallerAccount@UsercallerUser@StringdomainSuffix@finalLongnetworkOfferingId@BooleanchangeCidr@StringguestVmCidr@BooleandisplayNetwork@StringcustomId@booleanupdateInSequence@booleanforced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e9/c4554a0b5e51e31f8363475b6811fa3eff0e24.src","preCode":"    public Network updateGuestNetwork(final long networkId, String name, String displayText, Account callerAccount, User callerUser, String domainSuffix,\n            final Long networkOfferingId, Boolean changeCidr, String guestVmCidr, Boolean displayNetwork, String customId, boolean updateInSequence, boolean forced) {\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled\n                        + \" state, can't upgrade to it\", networkOffering.getUuid(), \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid()\n                            + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).getRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged ? _networkMgr.finalizeServicesAndProvidersForNetwork(\n                _entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()) : new HashMap<String, String>();\n\n        \r\n        if (domainSuffix != null) {\n            \r\n            if (!NetUtils.verifyDomainName(domainSuffix)) {\n                throw new InvalidParameterValueException(\n                        \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n            }\n\n            long offeringId = oldNetworkOfferingId;\n            if (networkOfferingId != null) {\n                offeringId = networkOfferingId;\n            }\n\n            Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n            String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n            if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                \r\n                throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n            }\n\n            network.setNetworkDomain(domainSuffix);\n            \r\n            restartNetwork = true;\n        }\n\n        \r\n        \r\n        DataCenter dc = _dcDao.findById(network.getDataCenterId());\n        String networkCidr = network.getNetworkCidr();\n\n        if (guestVmCidr != null) {\n            if (dc.getNetworkType() == NetworkType.Basic) {\n                throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic  + \" networking\");\n            }\n            if (network.getGuestType() != GuestType.Isolated) {\n                throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n            }\n            if (networkOfferingChanged) {\n                throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n            }\n            if (!(network.getState() == Network.State.Implemented)) {\n                throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \"\n                        + network.getState() + \" state\");\n            }\n            if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n            }\n            if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n            }\n\n            \r\n            \r\n            if (networkCidr != null) {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \"\n                            + networkCidr);\n                }\n            } else {\n                if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                    throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \"\n                            + network.getCidr());\n                }\n            }\n\n            \r\n                String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                Long size = Long.valueOf(guestVmCidrPair[1]);\n                List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n            s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                long range =  endIp - startIp + 1;\n                s_logger.info(\"The specified guest vm cidr has \" +  range + \" IPs\");\n\n                for (NicVO nic : nicsPresent) {\n                    long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                    \r\n                    if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                    }\n                } else {\n                if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                    throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr()\n                            + \" are same, \"\n                            + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                            + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                    }\n                }\n\n                \r\n                \r\n                if (network.getNetworkCidr() == null) {\n                    network.setNetworkCidr(network.getCidr());\n                }\n\n                \r\n                if (network.getNetworkCidr().equals(guestVmCidr)) {\n                    s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                    network.setNetworkCidr(null);\n                }\n                \r\n                \r\n                network.setCidr(guestVmCidr);\n                _networksDao.update(networkId, network);\n                s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n            }\n\n        ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n        \r\n        \r\n        int resourceCount=1;\n        if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).getRedundantRouter()\n                && (networkOfferingId==null || _networkOfferingDao.findById(networkOfferingId).getRedundantRouter()) && network.getVpcId()==null) {\n            _networkMgr.canUpdateInSequence(network, forced);\n            NetworkDetailVO networkDetail =new NetworkDetailVO(network.getId(),Network.updatingInSequence,\"true\",true);\n            _networkDetailsDao.persist(networkDetail);\n            _networkMgr.configureUpdateInSequence(network);\n            resourceCount=_networkMgr.getResourceCount(network);\n        }\n        List<String > servicesNotInNewOffering = null;\n        if (networkOfferingId != null) {\n            servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n        }\n        if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n            NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n            throw new CloudRuntimeException(\"The new offering:\"+newOffering.getUniqueName()\n                    +\" will remove the following services \"+servicesNotInNewOffering +\"along with all the related configuration currently in use. will not proceed with the network update.\" +\n                    \"set forced parameter to true for forcing an update.\");\n        }\n        try {\n            if (servicesNotInNewOffering!=null && !servicesNotInNewOffering.isEmpty()) {\n                _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering,network);\n            }\n        } catch (Throwable e) {\n            s_logger.debug(\"failed to cleanup config related to unused services error:\"+e.getMessage());\n        }\n\n        boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n        try {\n\n            do {\n                if (restartNetwork) {\n                    if (validStateToShutdown) {\n                        if (!changeCidr) {\n                            s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                            if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        } else {\n                            \r\n                            s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                            \r\n                            if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                s_logger.warn(\"Existing IP reservation will become ineffective for the network with id =  \" + networkId\n                                        + \" You need to reapply reservation after network reimplementation.\");\n                                \r\n                                network.setCidr(network.getNetworkCidr());\n                                \r\n                                network.setNetworkCidr(null);\n                            }\n\n                            if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n                    } else {\n                        CloudRuntimeException ex = new CloudRuntimeException(\n                                \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                        throw ex;\n                    }\n                }\n\n                \r\n                \r\n                Network.State networkState = _networksDao.findById(networkId).getState();\n                boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                if (restartNetwork && !validStateToImplement) {\n                    CloudRuntimeException ex = new CloudRuntimeException(\n                            \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                    ex.addProxyObject(network.getUuid(), \"networkId\");\n                    throw ex;\n                }\n\n                if (networkOfferingId != null) {\n                    if (networkOfferingChanged) {\n                        Transaction.execute(new TransactionCallbackNoReturn() {\n                            @Override\n                            public void doInTransactionWithoutResult(TransactionStatus status) {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network, newSvcProviders);\n                                \r\n                                \r\n                                \r\n                                List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                for (NicVO nic : nics) {\n                                    long vmId = nic.getInstanceId();\n                                    VMInstanceVO vm = _vmDao.findById(vmId);\n                                    if (vm == null) {\n                                        s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                        continue;\n                                    }\n                                    long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                    String nicIdString = Long.toString(nic.getId());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            oldNetworkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                    UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString,\n                                            networkOfferingId, null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                }\n                            }\n                        });\n                    } else {\n                        network.setNetworkOfferingId(networkOfferingId);\n                        _networksDao.update(networkId, network,\n                                _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                    }\n                } else {\n                    _networksDao.update(networkId, network);\n                }\n\n                \r\n                if (restartNetwork) {\n                    if (network.getState() != Network.State.Allocated) {\n                        DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                        s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                        try {\n                            if (!changeCidr) {\n                                _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                            } else {\n                                _networkMgr.implementNetwork(network.getId(), dest, context);\n                            }\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n\n                \r\n                \r\n                if (networkOfferingChanged && !oldNtwkOff.getIsPersistent() && networkOffering.getIsPersistent()) {\n                    if (network.getState() == Network.State.Allocated) {\n                        try {\n                            DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                            _networkMgr.implementNetwork(network.getId(), dest, context);\n                        } catch (Exception ex) {\n                            s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                            CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                            e.addProxyObject(network.getUuid(), \"networkId\");\n                            throw e;\n                        }\n                    }\n                }\n                resourceCount--;\n            } while (updateInSequence && resourceCount>0);\n        } catch (Exception exception) {\n             if (updateInSequence) {\n                 _networkMgr.finalizeUpdateInSequence(network, false);\n             }\n             throw new CloudRuntimeException(\"failed to update network \"+network.getUuid()+\" due to \"+exception.getMessage());\n        } finally {\n            if (updateInSequence) {\n                if( _networkDetailsDao.findDetail(networkId,Network.updatingInSequence)!=null){\n                    _networkDetailsDao.removeDetail(networkId,Network.updatingInSequence);\n                }\n            }\n        }\n        return getNetwork(network.getId());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2003,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2708,"groupId":"9446","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNetworkCanBeMigrated","params":"(AccountcallerAccount@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2685,"status":"N"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-06-19 12:55:59","commitOrder":3,"curCode":"    public Network updateGuestNetwork(final UpdateNetworkCmd cmd) {\n        User callerUser = _accountService.getActiveUser(CallContext.current().getCallingUserId());\n        Account callerAccount = _accountService.getActiveAccountById(callerUser.getAccountId());\n        final long networkId = cmd.getId();\n        String name = cmd.getNetworkName();\n        String displayText = cmd.getDisplayText();\n        String domainSuffix = cmd.getNetworkDomain();\n        final Long networkOfferingId = cmd.getNetworkOfferingId();\n        Boolean changeCidr = cmd.getChangeCidr();\n        String guestVmCidr = cmd.getGuestVmCidr();\n        Boolean displayNetwork = cmd.getDisplayNetwork();\n        String customId = cmd.getCustomId();\n        boolean updateInSequence = cmd.getUpdateInSequence();\n        boolean forced = cmd.getForced();\n\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        if (cmd instanceof UpdateNetworkCmdByAdmin) {\n            final Boolean hideIpAddressUsage = ((UpdateNetworkCmdByAdmin) cmd).getHideIpAddressUsage();\n            if (hideIpAddressUsage != null) {\n                final NetworkDetailVO detail = _networkDetailsDao.findDetail(network.getId(), Network.hideIpAddressUsage);\n                if (detail != null) {\n                    detail.setValue(hideIpAddressUsage.toString());\n                    _networkDetailsDao.update(detail.getId(), detail);\n                } else {\n                    _networkDetailsDao.persist(new NetworkDetailVO(network.getId(), Network.hideIpAddressUsage, hideIpAddressUsage.toString(), false));\n                }\n            }\n        }\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled + \" state, can't upgrade to it\", networkOffering.getUuid(),\n                        \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid() + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).isRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged\n                ? _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId())\n                        : new HashMap<String, String>();\n\n                \r\n                if (domainSuffix != null) {\n                    \r\n                    if (!NetUtils.verifyDomainName(domainSuffix)) {\n                        throw new InvalidParameterValueException(\n                                \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                        + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n                    }\n\n                    long offeringId = oldNetworkOfferingId;\n                    if (networkOfferingId != null) {\n                        offeringId = networkOfferingId;\n                    }\n\n                    Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n                    String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n                    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                        \r\n                        throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n                    }\n\n                    network.setNetworkDomain(domainSuffix);\n                    \r\n                    restartNetwork = true;\n                }\n\n                \r\n                \r\n                DataCenter dc = _dcDao.findById(network.getDataCenterId());\n                String networkCidr = network.getNetworkCidr();\n\n                if (guestVmCidr != null) {\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic + \" networking\");\n                    }\n                    if (network.getGuestType() != GuestType.Isolated) {\n                        throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n                    }\n                    if (networkOfferingChanged) {\n                        throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n                    }\n                    if (!(network.getState() == Network.State.Implemented)) {\n                        throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \" + network.getState() + \" state\");\n                    }\n                    if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n                    }\n                    if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n                    }\n\n                    \r\n                    \r\n                    if (networkCidr != null) {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \" + networkCidr);\n                        }\n                    } else {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \" + network.getCidr());\n                        }\n                    }\n\n                    \r\n                    String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                    Long size = Long.valueOf(guestVmCidrPair[1]);\n                    List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                    String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n                    s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                    long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                    long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                    long range = endIp - startIp + 1;\n                    s_logger.info(\"The specified guest vm cidr has \" + range + \" IPs\");\n\n                    for (NicVO nic : nicsPresent) {\n                        long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                        \r\n                        if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                        }\n                    } else {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                                    + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        network.setNetworkCidr(network.getCidr());\n                    }\n\n                    \r\n                    if (network.getNetworkCidr().equals(guestVmCidr)) {\n                        s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                        network.setNetworkCidr(null);\n                    }\n                    \r\n                    \r\n                    network.setCidr(guestVmCidr);\n                    _networksDao.update(networkId, network);\n                    s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n                }\n\n                ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n                \r\n                \r\n                int resourceCount = 1;\n                if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).isRedundantRouter()\n                        && (networkOfferingId == null || _networkOfferingDao.findById(networkOfferingId).isRedundantRouter()) && network.getVpcId() == null) {\n                    _networkMgr.canUpdateInSequence(network, forced);\n                    NetworkDetailVO networkDetail = new NetworkDetailVO(network.getId(), Network.updatingInSequence, \"true\", true);\n                    _networkDetailsDao.persist(networkDetail);\n                    _networkMgr.configureUpdateInSequence(network);\n                    resourceCount = _networkMgr.getResourceCount(network);\n                }\n                List<String> servicesNotInNewOffering = null;\n                if (networkOfferingId != null) {\n                    servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n                }\n                if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                    NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n                    throw new CloudRuntimeException(\"The new offering:\" + newOffering.getUniqueName() + \" will remove the following services \" + servicesNotInNewOffering\n                            + \"along with all the related configuration currently in use. will not proceed with the network update.\" + \"set forced parameter to true for forcing an update.\");\n                }\n                try {\n                    if (servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                        _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering, network);\n                    }\n                } catch (Throwable e) {\n                    s_logger.debug(\"failed to cleanup config related to unused services error:\" + e.getMessage());\n                }\n\n                boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n                try {\n\n                    do {\n                        if (restartNetwork) {\n                            if (validStateToShutdown) {\n                                if (!changeCidr) {\n                                    s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                                    if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                        s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                } else {\n                                    \r\n                                    s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                                    \r\n                                    if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                        s_logger.warn(\n                                                \"Existing IP reservation will become ineffective for the network with id =  \" + networkId + \" You need to reapply reservation after network reimplementation.\");\n                                        \r\n                                        network.setCidr(network.getNetworkCidr());\n                                        \r\n                                        network.setNetworkCidr(null);\n                                    }\n\n                                    if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                        s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                }\n                            } else {\n                                CloudRuntimeException ex = new CloudRuntimeException(\n                                        \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n\n                        \r\n                        \r\n                        Network.State networkState = _networksDao.findById(networkId).getState();\n                        boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                        if (restartNetwork && !validStateToImplement) {\n                            CloudRuntimeException ex = new CloudRuntimeException(\n                                    \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (networkOfferingId != null) {\n                            if (networkOfferingChanged) {\n                                Transaction.execute(new TransactionCallbackNoReturn() {\n                                    @Override\n                                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                                        network.setNetworkOfferingId(networkOfferingId);\n                                        _networksDao.update(networkId, network, newSvcProviders);\n                                        \r\n                                        \r\n                                        \r\n                                        List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                        for (NicVO nic : nics) {\n                                            long vmId = nic.getInstanceId();\n                                            VMInstanceVO vm = _vmDao.findById(vmId);\n                                            if (vm == null) {\n                                                s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                                continue;\n                                            }\n                                            long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                            String nicIdString = Long.toString(nic.getId());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, oldNetworkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, networkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                        }\n                                    }\n                                });\n                            } else {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network,\n                                        _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                            }\n                        } else {\n                            _networksDao.update(networkId, network);\n                        }\n\n                        \r\n                        if (restartNetwork) {\n                            if (network.getState() != Network.State.Allocated) {\n                                DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                                try {\n                                    if (!changeCidr) {\n                                        _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                                    } else {\n                                        _networkMgr.implementNetwork(network.getId(), dest, context);\n                                    }\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n\n                        \r\n                        \r\n                        if (networkOfferingChanged && !oldNtwkOff.isPersistent() && networkOffering.isPersistent()) {\n                            if (network.getState() == Network.State.Allocated) {\n                                try {\n                                    DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                    _networkMgr.implementNetwork(network.getId(), dest, context);\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n                        resourceCount--;\n                    } while (updateInSequence && resourceCount > 0);\n                } catch (Exception exception) {\n                    if (updateInSequence) {\n                        _networkMgr.finalizeUpdateInSequence(network, false);\n                    }\n                    throw new CloudRuntimeException(\"failed to update network \" + network.getUuid() + \" due to \" + exception.getMessage());\n                } finally {\n                    if (updateInSequence) {\n                        if (_networkDetailsDao.findDetail(networkId, Network.updatingInSequence) != null) {\n                            _networkDetailsDao.removeDetail(networkId, Network.updatingInSequence);\n                        }\n                    }\n                }\n                return getNetwork(network.getId());\n    }\n","date":"2019-06-19 12:55:59","endLine":2416,"groupId":"20092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updateGuestNetwork","params":"(finalUpdateNetworkCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0e/52c054ec14a6e87c6d980799e2ed1e632ed2cd.src","preCode":"    public Network updateGuestNetwork(final long networkId, String name, String displayText, Account callerAccount, User callerUser, String domainSuffix, final Long networkOfferingId,\n            Boolean changeCidr, String guestVmCidr, Boolean displayNetwork, String customId, boolean updateInSequence, boolean forced) {\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled + \" state, can't upgrade to it\", networkOffering.getUuid(),\n                        \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid() + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).isRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged\n                ? _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId())\n                        : new HashMap<String, String>();\n\n                \r\n                if (domainSuffix != null) {\n                    \r\n                    if (!NetUtils.verifyDomainName(domainSuffix)) {\n                        throw new InvalidParameterValueException(\n                                \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                        + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n                    }\n\n                    long offeringId = oldNetworkOfferingId;\n                    if (networkOfferingId != null) {\n                        offeringId = networkOfferingId;\n                    }\n\n                    Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n                    String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n                    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                        \r\n                        throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n                    }\n\n                    network.setNetworkDomain(domainSuffix);\n                    \r\n                    restartNetwork = true;\n                }\n\n                \r\n                \r\n                DataCenter dc = _dcDao.findById(network.getDataCenterId());\n                String networkCidr = network.getNetworkCidr();\n\n                if (guestVmCidr != null) {\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic + \" networking\");\n                    }\n                    if (network.getGuestType() != GuestType.Isolated) {\n                        throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n                    }\n                    if (networkOfferingChanged) {\n                        throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n                    }\n                    if (!(network.getState() == Network.State.Implemented)) {\n                        throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \" + network.getState() + \" state\");\n                    }\n                    if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n                    }\n                    if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n                    }\n\n                    \r\n                    \r\n                    if (networkCidr != null) {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \" + networkCidr);\n                        }\n                    } else {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \" + network.getCidr());\n                        }\n                    }\n\n                    \r\n                    String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                    Long size = Long.valueOf(guestVmCidrPair[1]);\n                    List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                    String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n                    s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                    long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                    long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                    long range = endIp - startIp + 1;\n                    s_logger.info(\"The specified guest vm cidr has \" + range + \" IPs\");\n\n                    for (NicVO nic : nicsPresent) {\n                        long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                        \r\n                        if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                        }\n                    } else {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                                    + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        network.setNetworkCidr(network.getCidr());\n                    }\n\n                    \r\n                    if (network.getNetworkCidr().equals(guestVmCidr)) {\n                        s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                        network.setNetworkCidr(null);\n                    }\n                    \r\n                    \r\n                    network.setCidr(guestVmCidr);\n                    _networksDao.update(networkId, network);\n                    s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n                }\n\n                ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n                \r\n                \r\n                int resourceCount = 1;\n                if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).isRedundantRouter()\n                        && (networkOfferingId == null || _networkOfferingDao.findById(networkOfferingId).isRedundantRouter()) && network.getVpcId() == null) {\n                    _networkMgr.canUpdateInSequence(network, forced);\n                    NetworkDetailVO networkDetail = new NetworkDetailVO(network.getId(), Network.updatingInSequence, \"true\", true);\n                    _networkDetailsDao.persist(networkDetail);\n                    _networkMgr.configureUpdateInSequence(network);\n                    resourceCount = _networkMgr.getResourceCount(network);\n                }\n                List<String> servicesNotInNewOffering = null;\n                if (networkOfferingId != null) {\n                    servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n                }\n                if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                    NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n                    throw new CloudRuntimeException(\"The new offering:\" + newOffering.getUniqueName() + \" will remove the following services \" + servicesNotInNewOffering\n                            + \"along with all the related configuration currently in use. will not proceed with the network update.\" + \"set forced parameter to true for forcing an update.\");\n                }\n                try {\n                    if (servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                        _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering, network);\n                    }\n                } catch (Throwable e) {\n                    s_logger.debug(\"failed to cleanup config related to unused services error:\" + e.getMessage());\n                }\n\n                boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n                try {\n\n                    do {\n                        if (restartNetwork) {\n                            if (validStateToShutdown) {\n                                if (!changeCidr) {\n                                    s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                                    if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                        s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                } else {\n                                    \r\n                                    s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                                    \r\n                                    if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                        s_logger.warn(\n                                                \"Existing IP reservation will become ineffective for the network with id =  \" + networkId + \" You need to reapply reservation after network reimplementation.\");\n                                        \r\n                                        network.setCidr(network.getNetworkCidr());\n                                        \r\n                                        network.setNetworkCidr(null);\n                                    }\n\n                                    if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                        s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                }\n                            } else {\n                                CloudRuntimeException ex = new CloudRuntimeException(\n                                        \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n\n                        \r\n                        \r\n                        Network.State networkState = _networksDao.findById(networkId).getState();\n                        boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                        if (restartNetwork && !validStateToImplement) {\n                            CloudRuntimeException ex = new CloudRuntimeException(\n                                    \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (networkOfferingId != null) {\n                            if (networkOfferingChanged) {\n                                Transaction.execute(new TransactionCallbackNoReturn() {\n                                    @Override\n                                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                                        network.setNetworkOfferingId(networkOfferingId);\n                                        _networksDao.update(networkId, network, newSvcProviders);\n                                        \r\n                                        \r\n                                        \r\n                                        List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                        for (NicVO nic : nics) {\n                                            long vmId = nic.getInstanceId();\n                                            VMInstanceVO vm = _vmDao.findById(vmId);\n                                            if (vm == null) {\n                                                s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                                continue;\n                                            }\n                                            long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                            String nicIdString = Long.toString(nic.getId());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, oldNetworkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, networkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                        }\n                                    }\n                                });\n                            } else {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network,\n                                        _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                            }\n                        } else {\n                            _networksDao.update(networkId, network);\n                        }\n\n                        \r\n                        if (restartNetwork) {\n                            if (network.getState() != Network.State.Allocated) {\n                                DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                                try {\n                                    if (!changeCidr) {\n                                        _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                                    } else {\n                                        _networkMgr.implementNetwork(network.getId(), dest, context);\n                                    }\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n\n                        \r\n                        \r\n                        if (networkOfferingChanged && !oldNtwkOff.isPersistent() && networkOffering.isPersistent()) {\n                            if (network.getState() == Network.State.Allocated) {\n                                try {\n                                    DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                    _networkMgr.implementNetwork(network.getId(), dest, context);\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n                        resourceCount--;\n                    } while (updateInSequence && resourceCount > 0);\n                } catch (Exception exception) {\n                    if (updateInSequence) {\n                        _networkMgr.finalizeUpdateInSequence(network, false);\n                    }\n                    throw new CloudRuntimeException(\"failed to update network \" + network.getUuid() + \" due to \" + exception.getMessage());\n                } finally {\n                    if (updateInSequence) {\n                        if (_networkDetailsDao.findDetail(networkId, Network.updatingInSequence) != null) {\n                            _networkDetailsDao.removeDetail(networkId, Network.updatingInSequence);\n                        }\n                    }\n                }\n                return getNetwork(network.getId());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1990,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2708,"groupId":"9446","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNetworkCanBeMigrated","params":"(AccountcallerAccount@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2685,"status":"N"}],"commitId":"0e87040eb29ea6385df7eb8b86d71ac334ceb7b4","commitMessage":"@@@network: allow ability to specify if network's ipaddress usage need to be hidden (#3235)\n\nProblem: Admins don?t want to charge for IP address usage on certain (shared) networks.\nRoot Cause: There is no flag or detail for admins to provide using UI or API when creating networks to specify if they want IP address usage of the network hidden.\nSolution: A new boolean hideipaddressusage flag is added to the createNetwork API and a checkbox in the ?Add guest network? UI for the root admins to specify if they want the shared network?s IP address usage to be hidden in the listUsageRecords API response. The provided flag is saved as the ?hideIpAddressUsage? detail in the cloud.network_details table for the network. For existing (shared) networks.  root admins can also specify the same boolean API parameter hideipaddressusage with the updateNetwork API request to configure the behaviour for an existing network. When the detail/flag is true.  the IP address usage for the (shared) network is not exported in the listUsageRecords API response. The listNetworks API response will include the details of a network for root admin only. (note usage is still recorded in the usage database but not return by the listUsageRecords API)\n\nThe API flag works for any kind of network via the API.  but the checkbox is only shown while creating shared networks in the UI.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-06-19 12:55:59","modifiedFileCount":"12","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":4,"curCode":"    public Network updateGuestNetwork(final UpdateNetworkCmd cmd) {\n        User callerUser = _accountService.getActiveUser(CallContext.current().getCallingUserId());\n        Account callerAccount = _accountService.getActiveAccountById(callerUser.getAccountId());\n        final long networkId = cmd.getId();\n        String name = cmd.getNetworkName();\n        String displayText = cmd.getDisplayText();\n        String domainSuffix = cmd.getNetworkDomain();\n        final Long networkOfferingId = cmd.getNetworkOfferingId();\n        Boolean changeCidr = cmd.getChangeCidr();\n        String guestVmCidr = cmd.getGuestVmCidr();\n        Boolean displayNetwork = cmd.getDisplayNetwork();\n        String customId = cmd.getCustomId();\n        boolean updateInSequence = cmd.getUpdateInSequence();\n        boolean forced = cmd.getForced();\n\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n        _accountMgr.checkAccess(_accountMgr.getActiveAccountById(network.getAccountId()), offering, _dcDao.findById(network.getDataCenterId()));\n\n        if (cmd instanceof UpdateNetworkCmdByAdmin) {\n            final Boolean hideIpAddressUsage = ((UpdateNetworkCmdByAdmin) cmd).getHideIpAddressUsage();\n            if (hideIpAddressUsage != null) {\n                final NetworkDetailVO detail = _networkDetailsDao.findDetail(network.getId(), Network.hideIpAddressUsage);\n                if (detail != null) {\n                    detail.setValue(hideIpAddressUsage.toString());\n                    _networkDetailsDao.update(detail.getId(), detail);\n                } else {\n                    _networkDetailsDao.persist(new NetworkDetailVO(network.getId(), Network.hideIpAddressUsage, hideIpAddressUsage.toString(), false));\n                }\n            }\n        }\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled + \" state, can't upgrade to it\", networkOffering.getUuid(),\n                        \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid() + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).isRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged\n                ? _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId())\n                        : new HashMap<String, String>();\n\n                \r\n                if (domainSuffix != null) {\n                    \r\n                    if (!NetUtils.verifyDomainName(domainSuffix)) {\n                        throw new InvalidParameterValueException(\n                                \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                        + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n                    }\n\n                    long offeringId = oldNetworkOfferingId;\n                    if (networkOfferingId != null) {\n                        offeringId = networkOfferingId;\n                    }\n\n                    Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n                    String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n                    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                        \r\n                        throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n                    }\n\n                    network.setNetworkDomain(domainSuffix);\n                    \r\n                    restartNetwork = true;\n                }\n\n                \r\n                \r\n                DataCenter dc = _dcDao.findById(network.getDataCenterId());\n                String networkCidr = network.getNetworkCidr();\n\n                if (guestVmCidr != null) {\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic + \" networking\");\n                    }\n                    if (network.getGuestType() != GuestType.Isolated) {\n                        throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n                    }\n                    if (networkOfferingChanged) {\n                        throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n                    }\n                    if (!(network.getState() == Network.State.Implemented)) {\n                        throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \" + network.getState() + \" state\");\n                    }\n                    if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n                    }\n                    if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n                    }\n\n                    \r\n                    \r\n                    if (networkCidr != null) {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \" + networkCidr);\n                        }\n                    } else {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \" + network.getCidr());\n                        }\n                    }\n\n                    \r\n                    String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                    Long size = Long.valueOf(guestVmCidrPair[1]);\n                    List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                    String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n                    s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                    long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                    long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                    long range = endIp - startIp + 1;\n                    s_logger.info(\"The specified guest vm cidr has \" + range + \" IPs\");\n\n                    for (NicVO nic : nicsPresent) {\n                        long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                        \r\n                        if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                        }\n                    } else {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                                    + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        network.setNetworkCidr(network.getCidr());\n                    }\n\n                    \r\n                    if (network.getNetworkCidr().equals(guestVmCidr)) {\n                        s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                        network.setNetworkCidr(null);\n                    }\n                    \r\n                    \r\n                    network.setCidr(guestVmCidr);\n                    _networksDao.update(networkId, network);\n                    s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n                }\n\n                ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n                \r\n                \r\n                int resourceCount = 1;\n                if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).isRedundantRouter()\n                        && (networkOfferingId == null || _networkOfferingDao.findById(networkOfferingId).isRedundantRouter()) && network.getVpcId() == null) {\n                    _networkMgr.canUpdateInSequence(network, forced);\n                    NetworkDetailVO networkDetail = new NetworkDetailVO(network.getId(), Network.updatingInSequence, \"true\", true);\n                    _networkDetailsDao.persist(networkDetail);\n                    _networkMgr.configureUpdateInSequence(network);\n                    resourceCount = _networkMgr.getResourceCount(network);\n                }\n                List<String> servicesNotInNewOffering = null;\n                if (networkOfferingId != null) {\n                    servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n                }\n                if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                    NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n                    throw new CloudRuntimeException(\"The new offering:\" + newOffering.getUniqueName() + \" will remove the following services \" + servicesNotInNewOffering\n                            + \"along with all the related configuration currently in use. will not proceed with the network update.\" + \"set forced parameter to true for forcing an update.\");\n                }\n                try {\n                    if (servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                        _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering, network);\n                    }\n                } catch (Throwable e) {\n                    s_logger.debug(\"failed to cleanup config related to unused services error:\" + e.getMessage());\n                }\n\n                boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n                try {\n\n                    do {\n                        if (restartNetwork) {\n                            if (validStateToShutdown) {\n                                if (!changeCidr) {\n                                    s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                                    if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                        s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                } else {\n                                    \r\n                                    s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                                    \r\n                                    if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                        s_logger.warn(\n                                                \"Existing IP reservation will become ineffective for the network with id =  \" + networkId + \" You need to reapply reservation after network reimplementation.\");\n                                        \r\n                                        network.setCidr(network.getNetworkCidr());\n                                        \r\n                                        network.setNetworkCidr(null);\n                                    }\n\n                                    if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                        s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                }\n                            } else {\n                                CloudRuntimeException ex = new CloudRuntimeException(\n                                        \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n\n                        \r\n                        \r\n                        Network.State networkState = _networksDao.findById(networkId).getState();\n                        boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                        if (restartNetwork && !validStateToImplement) {\n                            CloudRuntimeException ex = new CloudRuntimeException(\n                                    \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (networkOfferingId != null) {\n                            if (networkOfferingChanged) {\n                                Transaction.execute(new TransactionCallbackNoReturn() {\n                                    @Override\n                                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                                        network.setNetworkOfferingId(networkOfferingId);\n                                        _networksDao.update(networkId, network, newSvcProviders);\n                                        \r\n                                        \r\n                                        \r\n                                        List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                        for (NicVO nic : nics) {\n                                            long vmId = nic.getInstanceId();\n                                            VMInstanceVO vm = _vmDao.findById(vmId);\n                                            if (vm == null) {\n                                                s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                                continue;\n                                            }\n                                            long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                            String nicIdString = Long.toString(nic.getId());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, oldNetworkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, networkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                        }\n                                    }\n                                });\n                            } else {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network,\n                                        _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                            }\n                        } else {\n                            _networksDao.update(networkId, network);\n                        }\n\n                        \r\n                        if (restartNetwork) {\n                            if (network.getState() != Network.State.Allocated) {\n                                DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                                try {\n                                    if (!changeCidr) {\n                                        _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                                    } else {\n                                        _networkMgr.implementNetwork(network.getId(), dest, context);\n                                    }\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n\n                        \r\n                        \r\n                        if (networkOfferingChanged && !oldNtwkOff.isPersistent() && networkOffering.isPersistent()) {\n                            if (network.getState() == Network.State.Allocated) {\n                                try {\n                                    DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                    _networkMgr.implementNetwork(network.getId(), dest, context);\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n                        resourceCount--;\n                    } while (updateInSequence && resourceCount > 0);\n                } catch (Exception exception) {\n                    if (updateInSequence) {\n                        _networkMgr.finalizeUpdateInSequence(network, false);\n                    }\n                    throw new CloudRuntimeException(\"failed to update network \" + network.getUuid() + \" due to \" + exception.getMessage());\n                } finally {\n                    if (updateInSequence) {\n                        if (_networkDetailsDao.findDetail(networkId, Network.updatingInSequence) != null) {\n                            _networkDetailsDao.removeDetail(networkId, Network.updatingInSequence);\n                        }\n                    }\n                }\n                return getNetwork(network.getId());\n    }\n","date":"2019-07-16 17:25:35","endLine":2424,"groupId":"20092","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"updateGuestNetwork","params":"(finalUpdateNetworkCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/33/59b2773acaecbb87a5a4030cfa8c21eb2f46da.src","preCode":"    public Network updateGuestNetwork(final UpdateNetworkCmd cmd) {\n        User callerUser = _accountService.getActiveUser(CallContext.current().getCallingUserId());\n        Account callerAccount = _accountService.getActiveAccountById(callerUser.getAccountId());\n        final long networkId = cmd.getId();\n        String name = cmd.getNetworkName();\n        String displayText = cmd.getDisplayText();\n        String domainSuffix = cmd.getNetworkDomain();\n        final Long networkOfferingId = cmd.getNetworkOfferingId();\n        Boolean changeCidr = cmd.getChangeCidr();\n        String guestVmCidr = cmd.getGuestVmCidr();\n        Boolean displayNetwork = cmd.getDisplayNetwork();\n        String customId = cmd.getCustomId();\n        boolean updateInSequence = cmd.getUpdateInSequence();\n        boolean forced = cmd.getForced();\n\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        if (cmd instanceof UpdateNetworkCmdByAdmin) {\n            final Boolean hideIpAddressUsage = ((UpdateNetworkCmdByAdmin) cmd).getHideIpAddressUsage();\n            if (hideIpAddressUsage != null) {\n                final NetworkDetailVO detail = _networkDetailsDao.findDetail(network.getId(), Network.hideIpAddressUsage);\n                if (detail != null) {\n                    detail.setValue(hideIpAddressUsage.toString());\n                    _networkDetailsDao.update(detail.getId(), detail);\n                } else {\n                    _networkDetailsDao.persist(new NetworkDetailVO(network.getId(), Network.hideIpAddressUsage, hideIpAddressUsage.toString(), false));\n                }\n            }\n        }\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled + \" state, can't upgrade to it\", networkOffering.getUuid(),\n                        \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid() + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).isRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged\n                ? _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId())\n                        : new HashMap<String, String>();\n\n                \r\n                if (domainSuffix != null) {\n                    \r\n                    if (!NetUtils.verifyDomainName(domainSuffix)) {\n                        throw new InvalidParameterValueException(\n                                \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                        + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n                    }\n\n                    long offeringId = oldNetworkOfferingId;\n                    if (networkOfferingId != null) {\n                        offeringId = networkOfferingId;\n                    }\n\n                    Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n                    String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n                    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                        \r\n                        throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n                    }\n\n                    network.setNetworkDomain(domainSuffix);\n                    \r\n                    restartNetwork = true;\n                }\n\n                \r\n                \r\n                DataCenter dc = _dcDao.findById(network.getDataCenterId());\n                String networkCidr = network.getNetworkCidr();\n\n                if (guestVmCidr != null) {\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic + \" networking\");\n                    }\n                    if (network.getGuestType() != GuestType.Isolated) {\n                        throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n                    }\n                    if (networkOfferingChanged) {\n                        throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n                    }\n                    if (!(network.getState() == Network.State.Implemented)) {\n                        throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \" + network.getState() + \" state\");\n                    }\n                    if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n                    }\n                    if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n                    }\n\n                    \r\n                    \r\n                    if (networkCidr != null) {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \" + networkCidr);\n                        }\n                    } else {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \" + network.getCidr());\n                        }\n                    }\n\n                    \r\n                    String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                    Long size = Long.valueOf(guestVmCidrPair[1]);\n                    List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                    String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n                    s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                    long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                    long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                    long range = endIp - startIp + 1;\n                    s_logger.info(\"The specified guest vm cidr has \" + range + \" IPs\");\n\n                    for (NicVO nic : nicsPresent) {\n                        long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                        \r\n                        if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                        }\n                    } else {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                                    + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        network.setNetworkCidr(network.getCidr());\n                    }\n\n                    \r\n                    if (network.getNetworkCidr().equals(guestVmCidr)) {\n                        s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                        network.setNetworkCidr(null);\n                    }\n                    \r\n                    \r\n                    network.setCidr(guestVmCidr);\n                    _networksDao.update(networkId, network);\n                    s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n                }\n\n                ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n                \r\n                \r\n                int resourceCount = 1;\n                if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).isRedundantRouter()\n                        && (networkOfferingId == null || _networkOfferingDao.findById(networkOfferingId).isRedundantRouter()) && network.getVpcId() == null) {\n                    _networkMgr.canUpdateInSequence(network, forced);\n                    NetworkDetailVO networkDetail = new NetworkDetailVO(network.getId(), Network.updatingInSequence, \"true\", true);\n                    _networkDetailsDao.persist(networkDetail);\n                    _networkMgr.configureUpdateInSequence(network);\n                    resourceCount = _networkMgr.getResourceCount(network);\n                }\n                List<String> servicesNotInNewOffering = null;\n                if (networkOfferingId != null) {\n                    servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n                }\n                if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                    NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n                    throw new CloudRuntimeException(\"The new offering:\" + newOffering.getUniqueName() + \" will remove the following services \" + servicesNotInNewOffering\n                            + \"along with all the related configuration currently in use. will not proceed with the network update.\" + \"set forced parameter to true for forcing an update.\");\n                }\n                try {\n                    if (servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                        _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering, network);\n                    }\n                } catch (Throwable e) {\n                    s_logger.debug(\"failed to cleanup config related to unused services error:\" + e.getMessage());\n                }\n\n                boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n                try {\n\n                    do {\n                        if (restartNetwork) {\n                            if (validStateToShutdown) {\n                                if (!changeCidr) {\n                                    s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                                    if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                        s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                } else {\n                                    \r\n                                    s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                                    \r\n                                    if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                        s_logger.warn(\n                                                \"Existing IP reservation will become ineffective for the network with id =  \" + networkId + \" You need to reapply reservation after network reimplementation.\");\n                                        \r\n                                        network.setCidr(network.getNetworkCidr());\n                                        \r\n                                        network.setNetworkCidr(null);\n                                    }\n\n                                    if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                        s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                }\n                            } else {\n                                CloudRuntimeException ex = new CloudRuntimeException(\n                                        \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n\n                        \r\n                        \r\n                        Network.State networkState = _networksDao.findById(networkId).getState();\n                        boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                        if (restartNetwork && !validStateToImplement) {\n                            CloudRuntimeException ex = new CloudRuntimeException(\n                                    \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (networkOfferingId != null) {\n                            if (networkOfferingChanged) {\n                                Transaction.execute(new TransactionCallbackNoReturn() {\n                                    @Override\n                                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                                        network.setNetworkOfferingId(networkOfferingId);\n                                        _networksDao.update(networkId, network, newSvcProviders);\n                                        \r\n                                        \r\n                                        \r\n                                        List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                        for (NicVO nic : nics) {\n                                            long vmId = nic.getInstanceId();\n                                            VMInstanceVO vm = _vmDao.findById(vmId);\n                                            if (vm == null) {\n                                                s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                                continue;\n                                            }\n                                            long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                            String nicIdString = Long.toString(nic.getId());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, oldNetworkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, networkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                        }\n                                    }\n                                });\n                            } else {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network,\n                                        _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                            }\n                        } else {\n                            _networksDao.update(networkId, network);\n                        }\n\n                        \r\n                        if (restartNetwork) {\n                            if (network.getState() != Network.State.Allocated) {\n                                DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                                try {\n                                    if (!changeCidr) {\n                                        _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                                    } else {\n                                        _networkMgr.implementNetwork(network.getId(), dest, context);\n                                    }\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n\n                        \r\n                        \r\n                        if (networkOfferingChanged && !oldNtwkOff.isPersistent() && networkOffering.isPersistent()) {\n                            if (network.getState() == Network.State.Allocated) {\n                                try {\n                                    DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                    _networkMgr.implementNetwork(network.getId(), dest, context);\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n                        resourceCount--;\n                    } while (updateInSequence && resourceCount > 0);\n                } catch (Exception exception) {\n                    if (updateInSequence) {\n                        _networkMgr.finalizeUpdateInSequence(network, false);\n                    }\n                    throw new CloudRuntimeException(\"failed to update network \" + network.getUuid() + \" due to \" + exception.getMessage());\n                } finally {\n                    if (updateInSequence) {\n                        if (_networkDetailsDao.findDetail(networkId, Network.updatingInSequence) != null) {\n                            _networkDetailsDao.removeDetail(networkId, Network.updatingInSequence);\n                        }\n                    }\n                }\n                return getNetwork(network.getId());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1997,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2708,"groupId":"9446","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNetworkCanBeMigrated","params":"(AccountcallerAccount@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2685,"status":"N"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-28 17:30:18","commitOrder":5,"curCode":"    public Network updateGuestNetwork(final UpdateNetworkCmd cmd) {\n        User callerUser = _accountService.getActiveUser(CallContext.current().getCallingUserId());\n        Account callerAccount = _accountService.getActiveAccountById(callerUser.getAccountId());\n        final long networkId = cmd.getId();\n        String name = cmd.getNetworkName();\n        String displayText = cmd.getDisplayText();\n        String domainSuffix = cmd.getNetworkDomain();\n        final Long networkOfferingId = cmd.getNetworkOfferingId();\n        Boolean changeCidr = cmd.getChangeCidr();\n        String guestVmCidr = cmd.getGuestVmCidr();\n        Boolean displayNetwork = cmd.getDisplayNetwork();\n        String customId = cmd.getCustomId();\n        boolean updateInSequence = cmd.getUpdateInSequence();\n        boolean forced = cmd.getForced();\n\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n        _accountMgr.checkAccess(_accountMgr.getActiveAccountById(network.getAccountId()), offering, _dcDao.findById(network.getDataCenterId()));\n\n        if (cmd instanceof UpdateNetworkCmdByAdmin) {\n            final Boolean hideIpAddressUsage = ((UpdateNetworkCmdByAdmin) cmd).getHideIpAddressUsage();\n            if (hideIpAddressUsage != null) {\n                final NetworkDetailVO detail = _networkDetailsDao.findDetail(network.getId(), Network.hideIpAddressUsage);\n                if (detail != null) {\n                    detail.setValue(hideIpAddressUsage.toString());\n                    _networkDetailsDao.update(detail.getId(), detail);\n                } else {\n                    _networkDetailsDao.persist(new NetworkDetailVO(network.getId(), Network.hideIpAddressUsage, hideIpAddressUsage.toString(), false));\n                }\n            }\n        }\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled + \" state, can't upgrade to it\", networkOffering.getUuid(),\n                        \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid() + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).isRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged\n                ? _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId())\n                        : new HashMap<String, String>();\n\n                \r\n                if (domainSuffix != null) {\n                    \r\n                    if (!NetUtils.verifyDomainName(domainSuffix)) {\n                        throw new InvalidParameterValueException(\n                                \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                        + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n                    }\n\n                    long offeringId = oldNetworkOfferingId;\n                    if (networkOfferingId != null) {\n                        offeringId = networkOfferingId;\n                    }\n\n                    Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n                    String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n                    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                        \r\n                        throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n                    }\n\n                    network.setNetworkDomain(domainSuffix);\n                    \r\n                    restartNetwork = true;\n                }\n\n                \r\n                \r\n                DataCenter dc = _dcDao.findById(network.getDataCenterId());\n                String networkCidr = network.getNetworkCidr();\n\n                if (guestVmCidr != null) {\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic + \" networking\");\n                    }\n                    if (network.getGuestType() != GuestType.Isolated) {\n                        throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n                    }\n                    if (networkOfferingChanged) {\n                        throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n                    }\n                    if (!(network.getState() == Network.State.Implemented)) {\n                        throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \" + network.getState() + \" state\");\n                    }\n                    if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n                    }\n                    if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n                    }\n\n                    \r\n                    \r\n                    if (networkCidr != null) {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \" + networkCidr);\n                        }\n                    } else {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \" + network.getCidr());\n                        }\n                    }\n\n                    \r\n                    String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                    Long size = Long.valueOf(guestVmCidrPair[1]);\n                    List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                    String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n                    s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                    long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                    long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                    long range = endIp - startIp + 1;\n                    s_logger.info(\"The specified guest vm cidr has \" + range + \" IPs\");\n\n                    for (NicVO nic : nicsPresent) {\n                        long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                        \r\n                        if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                        }\n                    } else {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                                    + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        network.setNetworkCidr(network.getCidr());\n                    }\n\n                    \r\n                    if (network.getNetworkCidr().equals(guestVmCidr)) {\n                        s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                        network.setNetworkCidr(null);\n                    }\n                    \r\n                    \r\n                    network.setCidr(guestVmCidr);\n                    _networksDao.update(networkId, network);\n                    s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n                }\n\n                ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n                \r\n                \r\n                int resourceCount = 1;\n                if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).isRedundantRouter()\n                        && (networkOfferingId == null || _networkOfferingDao.findById(networkOfferingId).isRedundantRouter()) && network.getVpcId() == null) {\n                    _networkMgr.canUpdateInSequence(network, forced);\n                    NetworkDetailVO networkDetail = new NetworkDetailVO(network.getId(), Network.updatingInSequence, \"true\", true);\n                    _networkDetailsDao.persist(networkDetail);\n                    _networkMgr.configureUpdateInSequence(network);\n                    resourceCount = _networkMgr.getResourceCount(network);\n                }\n                List<String> servicesNotInNewOffering = null;\n                if (networkOfferingId != null) {\n                    servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n                }\n                if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                    NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n                    throw new CloudRuntimeException(\"The new offering:\" + newOffering.getUniqueName() + \" will remove the following services \" + servicesNotInNewOffering\n                            + \"along with all the related configuration currently in use. will not proceed with the network update.\" + \"set forced parameter to true for forcing an update.\");\n                }\n                try {\n                    if (servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                        _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering, network);\n                    }\n                } catch (Throwable e) {\n                    s_logger.debug(\"failed to cleanup config related to unused services error:\" + e.getMessage());\n                }\n\n                boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n                try {\n\n                    do {\n                        if (restartNetwork) {\n                            if (validStateToShutdown) {\n                                if (!changeCidr) {\n                                    s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                                    if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                        s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                } else {\n                                    \r\n                                    s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                                    \r\n                                    if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                        s_logger.warn(\n                                                \"Existing IP reservation will become ineffective for the network with id =  \" + networkId + \" You need to reapply reservation after network reimplementation.\");\n                                        \r\n                                        network.setCidr(network.getNetworkCidr());\n                                        \r\n                                        network.setNetworkCidr(null);\n                                    }\n\n                                    if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                        s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                }\n                            } else {\n                                CloudRuntimeException ex = new CloudRuntimeException(\n                                        \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n\n                        \r\n                        \r\n                        Network.State networkState = _networksDao.findById(networkId).getState();\n                        boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                        if (restartNetwork && !validStateToImplement) {\n                            CloudRuntimeException ex = new CloudRuntimeException(\n                                    \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (networkOfferingId != null) {\n                            if (networkOfferingChanged) {\n                                Transaction.execute(new TransactionCallbackNoReturn() {\n                                    @Override\n                                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                                        network.setNetworkOfferingId(networkOfferingId);\n                                        _networksDao.update(networkId, network, newSvcProviders);\n                                        \r\n                                        \r\n                                        \r\n                                        List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                        for (NicVO nic : nics) {\n                                            if (nic.getReservationStrategy() == Nic.ReservationStrategy.PlaceHolder) {\n                                                continue;\n                                            }\n                                            long vmId = nic.getInstanceId();\n                                            VMInstanceVO vm = _vmDao.findById(vmId);\n                                            if (vm == null) {\n                                                s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                                continue;\n                                            }\n                                            long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                            String nicIdString = Long.toString(nic.getId());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, oldNetworkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, networkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                        }\n                                    }\n                                });\n                            } else {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network,\n                                        _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                            }\n                        } else {\n                            _networksDao.update(networkId, network);\n                        }\n\n                        \r\n                        if (restartNetwork) {\n                            if (network.getState() != Network.State.Allocated) {\n                                DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                                try {\n                                    if (!changeCidr) {\n                                        _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                                    } else {\n                                        _networkMgr.implementNetwork(network.getId(), dest, context);\n                                    }\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n\n                        \r\n                        \r\n                        if (networkOfferingChanged && !oldNtwkOff.isPersistent() && networkOffering.isPersistent()) {\n                            if (network.getState() == Network.State.Allocated) {\n                                try {\n                                    DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                    _networkMgr.implementNetwork(network.getId(), dest, context);\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n                        resourceCount--;\n                    } while (updateInSequence && resourceCount > 0);\n                } catch (Exception exception) {\n                    if (updateInSequence) {\n                        _networkMgr.finalizeUpdateInSequence(network, false);\n                    }\n                    throw new CloudRuntimeException(\"failed to update network \" + network.getUuid() + \" due to \" + exception.getMessage());\n                } finally {\n                    if (updateInSequence) {\n                        if (_networkDetailsDao.findDetail(networkId, Network.updatingInSequence) != null) {\n                            _networkDetailsDao.removeDetail(networkId, Network.updatingInSequence);\n                        }\n                    }\n                }\n                return getNetwork(network.getId());\n    }\n","date":"2020-08-28 17:30:18","endLine":2525,"groupId":"101880","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"updateGuestNetwork","params":"(finalUpdateNetworkCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c1/ec079618f4e0f6a99ab7a505155913ee2fe4cc.src","preCode":"    public Network updateGuestNetwork(final UpdateNetworkCmd cmd) {\n        User callerUser = _accountService.getActiveUser(CallContext.current().getCallingUserId());\n        Account callerAccount = _accountService.getActiveAccountById(callerUser.getAccountId());\n        final long networkId = cmd.getId();\n        String name = cmd.getNetworkName();\n        String displayText = cmd.getDisplayText();\n        String domainSuffix = cmd.getNetworkDomain();\n        final Long networkOfferingId = cmd.getNetworkOfferingId();\n        Boolean changeCidr = cmd.getChangeCidr();\n        String guestVmCidr = cmd.getGuestVmCidr();\n        Boolean displayNetwork = cmd.getDisplayNetwork();\n        String customId = cmd.getCustomId();\n        boolean updateInSequence = cmd.getUpdateInSequence();\n        boolean forced = cmd.getForced();\n\n        boolean restartNetwork = false;\n\n        \r\n        final NetworkVO network = _networksDao.findById(networkId);\n        if (network == null) {\n            \r\n            throwInvalidIdException(\"Specified network id doesn't exist in the system\", String.valueOf(networkId), \"networkId\");\n        }\n\n        \r\n        if (network.getVpcId() != null && networkOfferingId != null) {\n            Vpc vpc = _entityMgr.findById(Vpc.class, network.getVpcId());\n            _vpcMgr.validateNtwkOffForNtwkInVpc(networkId, networkOfferingId, null, null, vpc, null, _accountMgr.getAccount(network.getAccountId()), network.getNetworkACLId());\n        }\n\n        \r\n        if (network.getState() == Network.State.Destroy) {\n            throw new InvalidParameterValueException(\"Don't allow to update network in state \" + Network.State.Destroy);\n        }\n\n        \r\n        NetworkOffering offering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (offering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Can't update system networks\");\n        }\n\n        \r\n        if (network.getTrafficType() != Networks.TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n        _accountMgr.checkAccess(_accountMgr.getActiveAccountById(network.getAccountId()), offering, _dcDao.findById(network.getDataCenterId()));\n\n        if (cmd instanceof UpdateNetworkCmdByAdmin) {\n            final Boolean hideIpAddressUsage = ((UpdateNetworkCmdByAdmin) cmd).getHideIpAddressUsage();\n            if (hideIpAddressUsage != null) {\n                final NetworkDetailVO detail = _networkDetailsDao.findDetail(network.getId(), Network.hideIpAddressUsage);\n                if (detail != null) {\n                    detail.setValue(hideIpAddressUsage.toString());\n                    _networkDetailsDao.update(detail.getId(), detail);\n                } else {\n                    _networkDetailsDao.persist(new NetworkDetailVO(network.getId(), Network.hideIpAddressUsage, hideIpAddressUsage.toString(), false));\n                }\n            }\n        }\n\n        if (name != null) {\n            network.setName(name);\n        }\n\n        if (displayText != null) {\n            network.setDisplayText(displayText);\n        }\n\n        if (customId != null) {\n            network.setUuid(customId);\n        }\n\n        \r\n        if (displayNetwork != null && displayNetwork != network.getDisplayNetwork()) {\n            \r\n            NetworkOffering networkOffering = _networkOfferingDao.findById(network.getNetworkOfferingId());\n            if (_networkMgr.resourceCountNeedsUpdate(networkOffering, network.getAclType())) {\n                _resourceLimitMgr.changeResourceCount(network.getAccountId(), Resource.ResourceType.network, displayNetwork);\n            }\n\n            network.setDisplayNetwork(displayNetwork);\n        }\n\n        \r\n        if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {\n            throw new InvalidParameterValueException(\"NetworkOffering and domain suffix upgrade can be perfomed for Isolated networks only\");\n        }\n\n        boolean networkOfferingChanged = false;\n\n        final long oldNetworkOfferingId = network.getNetworkOfferingId();\n        NetworkOffering oldNtwkOff = _networkOfferingDao.findByIdIncludingRemoved(oldNetworkOfferingId);\n        NetworkOfferingVO networkOffering = _networkOfferingDao.findById(networkOfferingId);\n        if (networkOfferingId != null) {\n            if (networkOffering == null || networkOffering.isSystemOnly()) {\n                throwInvalidIdException(\"Unable to find network offering with specified id\", networkOfferingId.toString(), \"networkOfferingId\");\n            }\n\n            \r\n            if (networkOffering.getState() != NetworkOffering.State.Enabled) {\n                throwInvalidIdException(\"Network offering with specified id is not in \" + NetworkOffering.State.Enabled + \" state, can't upgrade to it\", networkOffering.getUuid(),\n                        \"networkOfferingId\");\n            }\n            \r\n            boolean forVpcNew = _configMgr.isOfferingForVpc(networkOffering);\n            boolean vorVpcOriginal = _configMgr.isOfferingForVpc(_entityMgr.findById(NetworkOffering.class, oldNetworkOfferingId));\n            if (forVpcNew != vorVpcOriginal) {\n                String errMsg = forVpcNew ? \"a vpc offering \" : \"not a vpc offering\";\n                throw new InvalidParameterValueException(\"Can't update as the new offering is \" + errMsg);\n            }\n\n            if (networkOfferingId != oldNetworkOfferingId) {\n                Collection<String> newProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(networkOffering, network.getPhysicalNetworkId()).values();\n                Collection<String> oldProviders = _networkMgr.finalizeServicesAndProvidersForNetwork(oldNtwkOff, network.getPhysicalNetworkId()).values();\n\n                if (providersConfiguredForExternalNetworking(newProviders) != providersConfiguredForExternalNetworking(oldProviders) && !changeCidr) {\n                    throw new InvalidParameterValueException(\"Updating network failed since guest CIDR needs to be changed!\");\n                }\n                if (changeCidr) {\n                    if (!checkForNonStoppedVmInNetwork(network.getId())) {\n                        throwInvalidIdException(\"All user vm of network of specified id should be stopped before changing CIDR!\", network.getUuid(), \"networkId\");\n                    }\n                }\n                \r\n                if (!canUpgrade(network, oldNetworkOfferingId, networkOfferingId)) {\n                    throw new InvalidParameterValueException(\"Can't upgrade from network offering \" + oldNtwkOff.getUuid() + \" to \" + networkOffering.getUuid() + \"; check logs for more information\");\n                }\n                restartNetwork = true;\n                networkOfferingChanged = true;\n\n                \r\n                network.setRedundant(_networkOfferingDao.findById(networkOfferingId).isRedundantRouter());\n            }\n        }\n\n        final Map<String, String> newSvcProviders = networkOfferingChanged\n                ? _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId())\n                        : new HashMap<String, String>();\n\n                \r\n                if (domainSuffix != null) {\n                    \r\n                    if (!NetUtils.verifyDomainName(domainSuffix)) {\n                        throw new InvalidParameterValueException(\n                                \"Invalid network domain. Total length shouldn't exceed 190 chars. Each domain label must be between 1 and 63 characters long, can contain ASCII letters 'a' through 'z', the digits '0' through '9', \"\n                                        + \"and the hyphen ('-'); can't start or end with \\\"-\\\"\");\n                    }\n\n                    long offeringId = oldNetworkOfferingId;\n                    if (networkOfferingId != null) {\n                        offeringId = networkOfferingId;\n                    }\n\n                    Map<Network.Capability, String> dnsCapabilities = getNetworkOfferingServiceCapabilities(_entityMgr.findById(NetworkOffering.class, offeringId), Service.Dns);\n                    String isUpdateDnsSupported = dnsCapabilities.get(Capability.AllowDnsSuffixModification);\n                    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {\n                        \r\n                        throw new InvalidParameterValueException(\"Domain name change is not supported by the network offering id=\" + networkOfferingId);\n                    }\n\n                    network.setNetworkDomain(domainSuffix);\n                    \r\n                    restartNetwork = true;\n                }\n\n                \r\n                \r\n                DataCenter dc = _dcDao.findById(network.getDataCenterId());\n                String networkCidr = network.getNetworkCidr();\n\n                if (guestVmCidr != null) {\n                    if (dc.getNetworkType() == NetworkType.Basic) {\n                        throw new InvalidParameterValueException(\"Guest VM CIDR can't be specified for zone with \" + NetworkType.Basic + \" networking\");\n                    }\n                    if (network.getGuestType() != GuestType.Isolated) {\n                        throw new InvalidParameterValueException(\"Can only allow IP Reservation in networks with guest type \" + GuestType.Isolated);\n                    }\n                    if (networkOfferingChanged) {\n                        throw new InvalidParameterValueException(\"Cannot specify this nework offering change and guestVmCidr at same time. Specify only one.\");\n                    }\n                    if (!(network.getState() == Network.State.Implemented)) {\n                        throw new InvalidParameterValueException(\"The network must be in \" + Network.State.Implemented + \" state. IP Reservation cannot be applied in \" + network.getState() + \" state\");\n                    }\n                    if (!NetUtils.isValidIp4Cidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR.\");\n                    }\n                    if (!NetUtils.validateGuestCidr(guestVmCidr)) {\n                        throw new InvalidParameterValueException(\"Invalid format of Guest VM CIDR. Make sure it is RFC1918 compliant. \");\n                    }\n\n                    \r\n                    \r\n                    if (networkCidr != null) {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, networkCidr)) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR : \" + networkCidr);\n                        }\n                    } else {\n                        if (!NetUtils.isNetworkAWithinNetworkB(guestVmCidr, network.getCidr())) {\n                            throw new InvalidParameterValueException(\"Invalid value of Guest VM CIDR. For IP Reservation, Guest VM CIDR  should be a subset of network CIDR :  \" + network.getCidr());\n                        }\n                    }\n\n                    \r\n                    String[] guestVmCidrPair = guestVmCidr.split(\"\\\\/\");\n                    Long size = Long.valueOf(guestVmCidrPair[1]);\n                    List<NicVO> nicsPresent = _nicDao.listByNetworkId(networkId);\n\n                    String cidrIpRange[] = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], size);\n                    s_logger.info(\"The start IP of the specified guest vm cidr is: \" + cidrIpRange[0] + \" and end IP is: \" + cidrIpRange[1]);\n                    long startIp = NetUtils.ip2Long(cidrIpRange[0]);\n                    long endIp = NetUtils.ip2Long(cidrIpRange[1]);\n                    long range = endIp - startIp + 1;\n                    s_logger.info(\"The specified guest vm cidr has \" + range + \" IPs\");\n\n                    for (NicVO nic : nicsPresent) {\n                        long nicIp = NetUtils.ip2Long(nic.getIPv4Address());\n                        \r\n                        if ((nicIp < startIp || nicIp > endIp) && nic.getState() != Nic.State.Deallocating) {\n                            throw new InvalidParameterValueException(\"Active IPs like \" + nic.getIPv4Address() + \" exist outside the Guest VM CIDR. Cannot apply reservation \");\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getCidr()) && !guestVmCidr.equals(network.getCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and CIDR: \" + network.getCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution no IP Reservation will be applied.\");\n                        }\n                    } else {\n                        if (NetUtils.isSameIpRange(guestVmCidr, network.getNetworkCidr()) && !guestVmCidr.equals(network.getNetworkCidr())) {\n                            throw new InvalidParameterValueException(\"The Start IP and End IP of guestvmcidr: \" + guestVmCidr + \" and Network CIDR: \" + network.getNetworkCidr() + \" are same, \"\n                                    + \"even though both the cidrs appear to be different. As a precaution IP Reservation will not be affected. If you want to reset IP Reservation, \"\n                                    + \"specify guestVmCidr to be: \" + network.getNetworkCidr());\n                        }\n                    }\n\n                    \r\n                    \r\n                    if (network.getNetworkCidr() == null) {\n                        network.setNetworkCidr(network.getCidr());\n                    }\n\n                    \r\n                    if (network.getNetworkCidr().equals(guestVmCidr)) {\n                        s_logger.warn(\"Guest VM CIDR and Network CIDR both are same, reservation will reset.\");\n                        network.setNetworkCidr(null);\n                    }\n                    \r\n                    \r\n                    network.setCidr(guestVmCidr);\n                    _networksDao.update(networkId, network);\n                    s_logger.info(\"IP Reservation has been applied. The new CIDR for Guests Vms is \" + guestVmCidr);\n                }\n\n                ReservationContext context = new ReservationContextImpl(null, null, callerUser, callerAccount);\n                \r\n                \r\n                int resourceCount = 1;\n                if (updateInSequence && restartNetwork && _networkOfferingDao.findById(network.getNetworkOfferingId()).isRedundantRouter()\n                        && (networkOfferingId == null || _networkOfferingDao.findById(networkOfferingId).isRedundantRouter()) && network.getVpcId() == null) {\n                    _networkMgr.canUpdateInSequence(network, forced);\n                    NetworkDetailVO networkDetail = new NetworkDetailVO(network.getId(), Network.updatingInSequence, \"true\", true);\n                    _networkDetailsDao.persist(networkDetail);\n                    _networkMgr.configureUpdateInSequence(network);\n                    resourceCount = _networkMgr.getResourceCount(network);\n                }\n                List<String> servicesNotInNewOffering = null;\n                if (networkOfferingId != null) {\n                    servicesNotInNewOffering = _networkMgr.getServicesNotSupportedInNewOffering(network, networkOfferingId);\n                }\n                if (!forced && servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                    NetworkOfferingVO newOffering = _networkOfferingDao.findById(networkOfferingId);\n                    throw new CloudRuntimeException(\"The new offering:\" + newOffering.getUniqueName() + \" will remove the following services \" + servicesNotInNewOffering\n                            + \"along with all the related configuration currently in use. will not proceed with the network update.\" + \"set forced parameter to true for forcing an update.\");\n                }\n                try {\n                    if (servicesNotInNewOffering != null && !servicesNotInNewOffering.isEmpty()) {\n                        _networkMgr.cleanupConfigForServicesInNetwork(servicesNotInNewOffering, network);\n                    }\n                } catch (Throwable e) {\n                    s_logger.debug(\"failed to cleanup config related to unused services error:\" + e.getMessage());\n                }\n\n                boolean validStateToShutdown = (network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);\n                try {\n\n                    do {\n                        if (restartNetwork) {\n                            if (validStateToShutdown) {\n                                if (!changeCidr) {\n                                    s_logger.debug(\"Shutting down elements and resources for network id=\" + networkId + \" as a part of network update\");\n\n                                    if (!_networkMgr.shutdownNetworkElementsAndResources(context, true, network)) {\n                                        s_logger.warn(\"Failed to shutdown the network elements and resources as a part of network restart: \" + network);\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network elements and resources as a part of update to network of specified id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                } else {\n                                    \r\n                                    s_logger.debug(\"Shutting down network id=\" + networkId + \" as a part of network update\");\n\n                                    \r\n                                    if (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr())) {\n                                        s_logger.warn(\n                                                \"Existing IP reservation will become ineffective for the network with id =  \" + networkId + \" You need to reapply reservation after network reimplementation.\");\n                                        \r\n                                        network.setCidr(network.getNetworkCidr());\n                                        \r\n                                        network.setNetworkCidr(null);\n                                    }\n\n                                    if (!_networkMgr.shutdownNetwork(network.getId(), context, true)) {\n                                        s_logger.warn(\"Failed to shutdown the network as a part of update to network with specified id\");\n                                        CloudRuntimeException ex = new CloudRuntimeException(\"Failed to shutdown the network as a part of update of specified network id\");\n                                        ex.addProxyObject(network.getUuid(), \"networkId\");\n                                        throw ex;\n                                    }\n                                }\n                            } else {\n                                CloudRuntimeException ex = new CloudRuntimeException(\n                                        \"Failed to shutdown the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + network.getState());\n                                ex.addProxyObject(network.getUuid(), \"networkId\");\n                                throw ex;\n                            }\n                        }\n\n                        \r\n                        \r\n                        Network.State networkState = _networksDao.findById(networkId).getState();\n                        boolean validStateToImplement = (networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);\n                        if (restartNetwork && !validStateToImplement) {\n                            CloudRuntimeException ex = new CloudRuntimeException(\n                                    \"Failed to implement the network elements and resources as a part of update to network with specified id; network is in wrong state: \" + networkState);\n                            ex.addProxyObject(network.getUuid(), \"networkId\");\n                            throw ex;\n                        }\n\n                        if (networkOfferingId != null) {\n                            if (networkOfferingChanged) {\n                                Transaction.execute(new TransactionCallbackNoReturn() {\n                                    @Override\n                                    public void doInTransactionWithoutResult(TransactionStatus status) {\n                                        network.setNetworkOfferingId(networkOfferingId);\n                                        _networksDao.update(networkId, network, newSvcProviders);\n                                        \r\n                                        \r\n                                        \r\n                                        List<NicVO> nics = _nicDao.listByNetworkId(networkId);\n                                        for (NicVO nic : nics) {\n                                            long vmId = nic.getInstanceId();\n                                            VMInstanceVO vm = _vmDao.findById(vmId);\n                                            if (vm == null) {\n                                                s_logger.error(\"Vm for nic \" + nic.getId() + \" not found with Vm Id:\" + vmId);\n                                                continue;\n                                            }\n                                            long isDefault = (nic.isDefaultNic()) ? 1 : 0;\n                                            String nicIdString = Long.toString(nic.getId());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_REMOVE, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, oldNetworkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                            UsageEventUtils.publishUsageEvent(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN, vm.getAccountId(), vm.getDataCenterId(), vm.getId(), nicIdString, networkOfferingId,\n                                                    null, isDefault, VirtualMachine.class.getName(), vm.getUuid(), vm.isDisplay());\n                                        }\n                                    }\n                                });\n                            } else {\n                                network.setNetworkOfferingId(networkOfferingId);\n                                _networksDao.update(networkId, network,\n                                        _networkMgr.finalizeServicesAndProvidersForNetwork(_entityMgr.findById(NetworkOffering.class, networkOfferingId), network.getPhysicalNetworkId()));\n                            }\n                        } else {\n                            _networksDao.update(networkId, network);\n                        }\n\n                        \r\n                        if (restartNetwork) {\n                            if (network.getState() != Network.State.Allocated) {\n                                DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                s_logger.debug(\"Implementing the network \" + network + \" elements and resources as a part of network update\");\n                                try {\n                                    if (!changeCidr) {\n                                        _networkMgr.implementNetworkElementsAndResources(dest, context, network, _networkOfferingDao.findById(network.getNetworkOfferingId()));\n                                    } else {\n                                        _networkMgr.implementNetwork(network.getId(), dest, context);\n                                    }\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part of network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n\n                        \r\n                        \r\n                        if (networkOfferingChanged && !oldNtwkOff.isPersistent() && networkOffering.isPersistent()) {\n                            if (network.getState() == Network.State.Allocated) {\n                                try {\n                                    DeployDestination dest = new DeployDestination(_dcDao.findById(network.getDataCenterId()), null, null, null);\n                                    _networkMgr.implementNetwork(network.getId(), dest, context);\n                                } catch (Exception ex) {\n                                    s_logger.warn(\"Failed to implement network \" + network + \" elements and resources as a part o\" + \"f network update due to \", ex);\n                                    CloudRuntimeException e = new CloudRuntimeException(\"Failed to implement network (with specified\" + \" id) elements and resources as a part of network update\");\n                                    e.addProxyObject(network.getUuid(), \"networkId\");\n                                    throw e;\n                                }\n                            }\n                        }\n                        resourceCount--;\n                    } while (updateInSequence && resourceCount > 0);\n                } catch (Exception exception) {\n                    if (updateInSequence) {\n                        _networkMgr.finalizeUpdateInSequence(network, false);\n                    }\n                    throw new CloudRuntimeException(\"failed to update network \" + network.getUuid() + \" due to \" + exception.getMessage());\n                } finally {\n                    if (updateInSequence) {\n                        if (_networkDetailsDao.findDetail(networkId, Network.updatingInSequence) != null) {\n                            _networkDetailsDao.removeDetail(networkId, Network.updatingInSequence);\n                        }\n                    }\n                }\n                return getNetwork(network.getId());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2095,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2708,"groupId":"101880","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNetworkCanBeMigrated","params":"(AccountcallerAccount@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    private void verifyNetworkCanBeMigrated(Account callerAccount, Network network) {\n        \r\n        NetworkOffering oldOffering = _networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());\n        if (oldOffering.isSystemOnly()) {\n            throw new InvalidParameterValueException(\"Failed to migrate network as the specified network is a system network.\");\n        }\n\n        \r\n        if (network.getTrafficType() != TrafficType.Guest) {\n            throw new InvalidParameterValueException(\"Can't allow networks which traffic type is not \" + TrafficType.Guest);\n        }\n\n        _accountMgr.checkAccess(callerAccount, null, true, network);\n\n        boolean validateNetworkReadyToMigrate = (network.getState() == Network.State.Implemented\n                || network.getState() == Network.State.Setup\n                || network.getState() == Network.State.Allocated);\n        if (!validateNetworkReadyToMigrate) {\n            s_logger.error(\"Failed to migrate network as it is in invalid state.\");\n            CloudRuntimeException ex = new CloudRuntimeException(\"Failed to migrate network as it is in invalid state.\");\n            ex.addProxyObject(network.getUuid(), \"networkId\");\n            throw ex;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2685,"status":"N"}],"commitId":"749e302e0ebff084bae91f855a11c6558b32b213","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-08-28 17:30:18","modifiedFileCount":"5","status":"M","submitter":"Rohit Yadav"}]
