[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private Ternary<String, Long, Long> createTemplateFromSnapshot(long accountId, long templateId, String templateUniqueName, String secStorageUrl, long volumeId,\n            String backedUpSnapshotUuid, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installPath = getTemplateRelativeDirInSecStorage(accountId, templateId);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        String installFullOVAName = installFullPath + \"/\" + templateUniqueName + \".ova\";  \r\n        String snapshotRoot = secondaryMountPoint + \"/\" + getSnapshotRelativeDirInSecStorage(accountId, volumeId);\n        String snapshotFullOVAName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ova\";\n        String snapshotFullOvfName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ovf\";\n        String result;\n        Script command;\n        String templateVMDKName = \"\";\n        \r\n        \r\n        String backupSSUuid = backedUpSnapshotUuid.substring(0, backedUpSnapshotUuid.indexOf('/'));\n        String snapshotFullVMDKName = snapshotRoot + \"/\" + backupSSUuid + \"/\";\n\n        synchronized (installPath.intern()) {\n            command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        try {\n            if (new File(snapshotFullOVAName).exists()) {\n                command = new Script(false, \"cp\", _timeout, s_logger);\n                command.add(snapshotFullOVAName);\n                command.add(installFullOVAName);\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to copy snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", installFullOVAName);\n                command.setWorkDir(installFullPath);\n                s_logger.info(\"Executing command: \" + command.toString());\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to untar snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n            } else {  \r\n                if (new File(snapshotFullOvfName).exists()) {\n                    command = new Script(false, \"cp\", _timeout, s_logger);\n                    command.add(snapshotFullOvfName);\n                    \r\n                    command.add(installFullPath);\n                    result = command.execute();\n                    if (result != null) {\n                        String msg = \"unable to copy snapshot \" + snapshotFullOvfName + \" to \" + installFullPath;\n                        s_logger.error(msg);\n                        throw new Exception(msg);\n                    }\n\n                    s_logger.info(\"vmdkfile parent dir: \" + snapshotFullVMDKName);\n                    File snapshotdir = new File(snapshotFullVMDKName);\n                    \r\n                    File[] ssfiles = snapshotdir.listFiles();\n                    \r\n                    for (int i = 0; i < ssfiles.length; i++) {\n                        String vmdkfile = ssfiles[i].getName();\n                        s_logger.info(\"vmdk file name: \" + vmdkfile);\n                        if (vmdkfile.toLowerCase().startsWith(backupSSUuid) && vmdkfile.toLowerCase().endsWith(\".vmdk\")) {\n                            snapshotFullVMDKName += vmdkfile;\n                            templateVMDKName += vmdkfile;\n                            break;\n                        }\n                    }\n                    if (snapshotFullVMDKName != null) {\n                        command = new Script(false, \"cp\", _timeout, s_logger);\n                        command.add(snapshotFullVMDKName);\n                        command.add(installFullPath);\n                        result = command.execute();\n                        s_logger.info(\"Copy VMDK file: \" + snapshotFullVMDKName);\n                        if (result != null) {\n                            String msg = \"unable to copy snapshot vmdk file \" + snapshotFullVMDKName + \" to \" + installFullPath;\n                            s_logger.error(msg);\n                            throw new Exception(msg);\n                        }\n                    }\n                } else {\n                    String msg = \"unable to find any snapshot ova/ovf files\" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n            \r\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, backedUpSnapshotUuid + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n        } catch (Exception e) {\n            \r\n            throw e;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":789,"groupId":"5352","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTemplateFromSnapshot","params":"(longaccountId@longtemplateId@StringtemplateUniqueName@StringsecStorageUrl@longvolumeId@StringbackedUpSnapshotUuid@IntegernfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a2/2410f4afebe2deec57f964a9d3c21b6e2251a1.src","preCode":"    private Ternary<String, Long, Long> createTemplateFromSnapshot(long accountId, long templateId, String templateUniqueName, String secStorageUrl, long volumeId,\n            String backedUpSnapshotUuid, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installPath = getTemplateRelativeDirInSecStorage(accountId, templateId);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        String installFullOVAName = installFullPath + \"/\" + templateUniqueName + \".ova\";  \r\n        String snapshotRoot = secondaryMountPoint + \"/\" + getSnapshotRelativeDirInSecStorage(accountId, volumeId);\n        String snapshotFullOVAName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ova\";\n        String snapshotFullOvfName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ovf\";\n        String result;\n        Script command;\n        String templateVMDKName = \"\";\n        \r\n        \r\n        String backupSSUuid = backedUpSnapshotUuid.substring(0, backedUpSnapshotUuid.indexOf('/'));\n        String snapshotFullVMDKName = snapshotRoot + \"/\" + backupSSUuid + \"/\";\n\n        synchronized (installPath.intern()) {\n            command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        try {\n            if (new File(snapshotFullOVAName).exists()) {\n                command = new Script(false, \"cp\", _timeout, s_logger);\n                command.add(snapshotFullOVAName);\n                command.add(installFullOVAName);\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to copy snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", installFullOVAName);\n                command.setWorkDir(installFullPath);\n                s_logger.info(\"Executing command: \" + command.toString());\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to untar snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n            } else {  \r\n                if (new File(snapshotFullOvfName).exists()) {\n                    command = new Script(false, \"cp\", _timeout, s_logger);\n                    command.add(snapshotFullOvfName);\n                    \r\n                    command.add(installFullPath);\n                    result = command.execute();\n                    if (result != null) {\n                        String msg = \"unable to copy snapshot \" + snapshotFullOvfName + \" to \" + installFullPath;\n                        s_logger.error(msg);\n                        throw new Exception(msg);\n                    }\n\n                    s_logger.info(\"vmdkfile parent dir: \" + snapshotFullVMDKName);\n                    File snapshotdir = new File(snapshotFullVMDKName);\n                    \r\n                    File[] ssfiles = snapshotdir.listFiles();\n                    \r\n                    for (int i = 0; i < ssfiles.length; i++) {\n                        String vmdkfile = ssfiles[i].getName();\n                        s_logger.info(\"vmdk file name: \" + vmdkfile);\n                        if (vmdkfile.toLowerCase().startsWith(backupSSUuid) && vmdkfile.toLowerCase().endsWith(\".vmdk\")) {\n                            snapshotFullVMDKName += vmdkfile;\n                            templateVMDKName += vmdkfile;\n                            break;\n                        }\n                    }\n                    if (snapshotFullVMDKName != null) {\n                        command = new Script(false, \"cp\", _timeout, s_logger);\n                        command.add(snapshotFullVMDKName);\n                        command.add(installFullPath);\n                        result = command.execute();\n                        s_logger.info(\"Copy VMDK file: \" + snapshotFullVMDKName);\n                        if (result != null) {\n                            String msg = \"unable to copy snapshot vmdk file \" + snapshotFullVMDKName + \" to \" + installFullPath;\n                            s_logger.error(msg);\n                            throw new Exception(msg);\n                        }\n                    }\n                } else {\n                    String msg = \"unable to find any snapshot ova/ovf files\" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n            \r\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, backedUpSnapshotUuid + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n        } catch (Exception e) {\n            \r\n            throw e;\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private String getTemplateVmdkName(String installFullPath, String exportName) {\n        File templateDir = new File(installFullPath);\n        File[] templateFiles = templateDir.listFiles();\n\n        if (templateFiles == null) {\n            String msg = \"Unable to find template files in \" + installFullPath;\n\n            s_logger.error(msg);\n\n            throw new CloudRuntimeException(msg);\n        }\n\n        for (int i = 0; i < templateFiles.length; i++) {\n            String templateFile = templateFiles[i].getName();\n\n            if (templateFile.toLowerCase().startsWith(exportName) && templateFile.toLowerCase().endsWith(\".vmdk\")) {\n                return templateFile;\n            }\n        }\n\n        throw new CloudRuntimeException(\"Unable to locate the template VMDK file\");\n    }\n","date":"2018-01-20 05:49:27","endLine":1556,"groupId":"11041","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTemplateVmdkName","params":"(StringinstallFullPath@StringexportName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private String getTemplateVmdkName(String installFullPath, String exportName) {\n        File templateDir = new File(installFullPath);\n        File[] templateFiles = templateDir.listFiles();\n\n        if (templateFiles == null) {\n            String msg = \"Unable to find template files in \" + installFullPath;\n\n            s_logger.error(msg);\n\n            throw new CloudRuntimeException(msg);\n        }\n\n        for (int i = 0; i < templateFiles.length; i++) {\n            String templateFile = templateFiles[i].getName();\n\n            if (templateFile.toLowerCase().startsWith(exportName) && templateFile.toLowerCase().endsWith(\".vmdk\")) {\n                return templateFile;\n            }\n        }\n\n        throw new CloudRuntimeException(\"Unable to locate the template VMDK file\");\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1535,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-19 17:23:38","commitOrder":2,"curCode":"    private Ternary<String, Long, Long> createTemplateFromSnapshot(long accountId, long templateId, String templateUniqueName, String secStorageUrl, long volumeId,\n                                                                   String backedUpSnapshotUuid, String nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installPath = getTemplateRelativeDirInSecStorage(accountId, templateId);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        String installFullOVAName = installFullPath + \"/\" + templateUniqueName + \".ova\";  \r\n        String snapshotRoot = secondaryMountPoint + \"/\" + getSnapshotRelativeDirInSecStorage(accountId, volumeId);\n        String snapshotFullOVAName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ova\";\n        String snapshotFullOvfName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ovf\";\n        String result;\n        Script command;\n        String templateVMDKName = \"\";\n        \r\n        \r\n        String backupSSUuid = backedUpSnapshotUuid.substring(0, backedUpSnapshotUuid.indexOf('/'));\n        String snapshotFullVMDKName = snapshotRoot + \"/\" + backupSSUuid + \"/\";\n\n        synchronized (installPath.intern()) {\n            command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        try {\n            if (new File(snapshotFullOVAName).exists()) {\n                command = new Script(false, \"cp\", _timeout, s_logger);\n                command.add(snapshotFullOVAName);\n                command.add(installFullOVAName);\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to copy snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", installFullOVAName);\n                command.setWorkDir(installFullPath);\n                s_logger.info(\"Executing command: \" + command.toString());\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to untar snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n            } else {  \r\n                if (new File(snapshotFullOvfName).exists()) {\n                    command = new Script(false, \"cp\", _timeout, s_logger);\n                    command.add(snapshotFullOvfName);\n                    \r\n                    command.add(installFullPath);\n                    result = command.execute();\n                    if (result != null) {\n                        String msg = \"unable to copy snapshot \" + snapshotFullOvfName + \" to \" + installFullPath;\n                        s_logger.error(msg);\n                        throw new Exception(msg);\n                    }\n\n                    s_logger.info(\"vmdkfile parent dir: \" + snapshotFullVMDKName);\n                    File snapshotdir = new File(snapshotFullVMDKName);\n                    \r\n                    File[] ssfiles = snapshotdir.listFiles();\n                    \r\n                    for (int i = 0; i < ssfiles.length; i++) {\n                        String vmdkfile = ssfiles[i].getName();\n                        s_logger.info(\"vmdk file name: \" + vmdkfile);\n                        if (vmdkfile.toLowerCase().startsWith(backupSSUuid) && vmdkfile.toLowerCase().endsWith(\".vmdk\")) {\n                            snapshotFullVMDKName += vmdkfile;\n                            templateVMDKName += vmdkfile;\n                            break;\n                        }\n                    }\n                    if (snapshotFullVMDKName != null) {\n                        command = new Script(false, \"cp\", _timeout, s_logger);\n                        command.add(snapshotFullVMDKName);\n                        command.add(installFullPath);\n                        result = command.execute();\n                        s_logger.info(\"Copy VMDK file: \" + snapshotFullVMDKName);\n                        if (result != null) {\n                            String msg = \"unable to copy snapshot vmdk file \" + snapshotFullVMDKName + \" to \" + installFullPath;\n                            s_logger.error(msg);\n                            throw new Exception(msg);\n                        }\n                    }\n                } else {\n                    String msg = \"unable to find any snapshot ova/ovf files\" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n            \r\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, backedUpSnapshotUuid + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n        } catch (Exception e) {\n            \r\n            throw e;\n        }\n    }\n","date":"2020-08-19 17:23:38","endLine":797,"groupId":"103011","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTemplateFromSnapshot","params":"(longaccountId@longtemplateId@StringtemplateUniqueName@StringsecStorageUrl@longvolumeId@StringbackedUpSnapshotUuid@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/9e5b6ef6e5900494119a28d2c95d115969a2e2.src","preCode":"    private Ternary<String, Long, Long> createTemplateFromSnapshot(long accountId, long templateId, String templateUniqueName, String secStorageUrl, long volumeId,\n            String backedUpSnapshotUuid, Integer nfsVersion) throws Exception {\n\n        String secondaryMountPoint = _mountService.getMountPoint(secStorageUrl, nfsVersion);\n        String installPath = getTemplateRelativeDirInSecStorage(accountId, templateId);\n        String installFullPath = secondaryMountPoint + \"/\" + installPath;\n        String installFullOVAName = installFullPath + \"/\" + templateUniqueName + \".ova\";  \r\n        String snapshotRoot = secondaryMountPoint + \"/\" + getSnapshotRelativeDirInSecStorage(accountId, volumeId);\n        String snapshotFullOVAName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ova\";\n        String snapshotFullOvfName = snapshotRoot + \"/\" + backedUpSnapshotUuid + \".ovf\";\n        String result;\n        Script command;\n        String templateVMDKName = \"\";\n        \r\n        \r\n        String backupSSUuid = backedUpSnapshotUuid.substring(0, backedUpSnapshotUuid.indexOf('/'));\n        String snapshotFullVMDKName = snapshotRoot + \"/\" + backupSSUuid + \"/\";\n\n        synchronized (installPath.intern()) {\n            command = new Script(false, \"mkdir\", _timeout, s_logger);\n            command.add(\"-p\");\n            command.add(installFullPath);\n\n            result = command.execute();\n            if (result != null) {\n                String msg = \"unable to prepare template directory: \" + installPath + \", storage: \" + secStorageUrl + \", error msg: \" + result;\n                s_logger.error(msg);\n                throw new Exception(msg);\n            }\n        }\n\n        try {\n            if (new File(snapshotFullOVAName).exists()) {\n                command = new Script(false, \"cp\", _timeout, s_logger);\n                command.add(snapshotFullOVAName);\n                command.add(installFullOVAName);\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to copy snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n                \r\n                command = new Script(\"tar\", 0, s_logger);\n                command.add(\"--no-same-owner\");\n                command.add(\"-xf\", installFullOVAName);\n                command.setWorkDir(installFullPath);\n                s_logger.info(\"Executing command: \" + command.toString());\n                result = command.execute();\n                if (result != null) {\n                    String msg = \"unable to untar snapshot \" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n\n            } else {  \r\n                if (new File(snapshotFullOvfName).exists()) {\n                    command = new Script(false, \"cp\", _timeout, s_logger);\n                    command.add(snapshotFullOvfName);\n                    \r\n                    command.add(installFullPath);\n                    result = command.execute();\n                    if (result != null) {\n                        String msg = \"unable to copy snapshot \" + snapshotFullOvfName + \" to \" + installFullPath;\n                        s_logger.error(msg);\n                        throw new Exception(msg);\n                    }\n\n                    s_logger.info(\"vmdkfile parent dir: \" + snapshotFullVMDKName);\n                    File snapshotdir = new File(snapshotFullVMDKName);\n                    \r\n                    File[] ssfiles = snapshotdir.listFiles();\n                    \r\n                    for (int i = 0; i < ssfiles.length; i++) {\n                        String vmdkfile = ssfiles[i].getName();\n                        s_logger.info(\"vmdk file name: \" + vmdkfile);\n                        if (vmdkfile.toLowerCase().startsWith(backupSSUuid) && vmdkfile.toLowerCase().endsWith(\".vmdk\")) {\n                            snapshotFullVMDKName += vmdkfile;\n                            templateVMDKName += vmdkfile;\n                            break;\n                        }\n                    }\n                    if (snapshotFullVMDKName != null) {\n                        command = new Script(false, \"cp\", _timeout, s_logger);\n                        command.add(snapshotFullVMDKName);\n                        command.add(installFullPath);\n                        result = command.execute();\n                        s_logger.info(\"Copy VMDK file: \" + snapshotFullVMDKName);\n                        if (result != null) {\n                            String msg = \"unable to copy snapshot vmdk file \" + snapshotFullVMDKName + \" to \" + installFullPath;\n                            s_logger.error(msg);\n                            throw new Exception(msg);\n                        }\n                    }\n                } else {\n                    String msg = \"unable to find any snapshot ova/ovf files\" + snapshotFullOVAName + \" to \" + installFullPath;\n                    s_logger.error(msg);\n                    throw new Exception(msg);\n                }\n            }\n\n            long physicalSize = new File(installFullPath + \"/\" + templateVMDKName).length();\n            OVAProcessor processor = new OVAProcessor();\n            \r\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(StorageLayer.InstanceConfigKey, _storage);\n            processor.configure(\"OVA Processor\", params);\n            long virtualSize = processor.getTemplateVirtualSize(installFullPath, templateUniqueName);\n\n            postCreatePrivateTemplate(installFullPath, templateId, templateUniqueName, physicalSize, virtualSize);\n            writeMetaOvaForTemplate(installFullPath, backedUpSnapshotUuid + \".ovf\", templateVMDKName, templateUniqueName, physicalSize);\n            return new Ternary<String, Long, Long>(installPath + \"/\" + templateUniqueName + \".ova\", physicalSize, virtualSize);\n        } catch (Exception e) {\n            \r\n            throw e;\n        }\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareStorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":680,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private String getTemplateVmdkName(String installFullPath, String exportName) {\n        File templateDir = new File(installFullPath);\n        File[] templateFiles = templateDir.listFiles();\n\n        if (templateFiles == null) {\n            String msg = \"Unable to find template files in \" + installFullPath;\n\n            s_logger.error(msg);\n\n            throw new CloudRuntimeException(msg);\n        }\n\n        for (int i = 0; i < templateFiles.length; i++) {\n            String templateFile = templateFiles[i].getName();\n\n            if (templateFile.toLowerCase().startsWith(exportName) && templateFile.toLowerCase().endsWith(\".vmdk\")) {\n                return templateFile;\n            }\n        }\n\n        throw new CloudRuntimeException(\"Unable to locate the template VMDK file\");\n    }\n","date":"2018-01-20 05:49:27","endLine":1556,"groupId":"103011","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTemplateVmdkName","params":"(StringinstallFullPath@StringexportName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/ea62f18fa2de99166d6e97e726c857845123b1.src","preCode":"    private String getTemplateVmdkName(String installFullPath, String exportName) {\n        File templateDir = new File(installFullPath);\n        File[] templateFiles = templateDir.listFiles();\n\n        if (templateFiles == null) {\n            String msg = \"Unable to find template files in \" + installFullPath;\n\n            s_logger.error(msg);\n\n            throw new CloudRuntimeException(msg);\n        }\n\n        for (int i = 0; i < templateFiles.length; i++) {\n            String templateFile = templateFiles[i].getName();\n\n            if (templateFile.toLowerCase().startsWith(exportName) && templateFile.toLowerCase().endsWith(\".vmdk\")) {\n                return templateFile;\n            }\n        }\n\n        throw new CloudRuntimeException(\"Unable to locate the template VMDK file\");\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1535,"status":"N"}],"commitId":"d57aa835174c9dd045930d1396ce4bee9a275a60","commitMessage":"@@@server: Added nfs minor version support (#4180)\n\nThis PR adds minor version support when mounting nfs on the SSVM as requested in #2861\n\nThe global setting \"secstorage.nfs.version\" has been changed to use the String data type which allows any minor version to be specified.","date":"2020-08-19 17:23:38","modifiedFileCount":"30","status":"M","submitter":"Spaceman1984"}]
