[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<VlanVO> listVlansForPod(long podId) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            result.add(findById(pvmvo.getVlanDbId()));\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":154,"groupId":"19641","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listVlansForPod","params":"(longpodId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/5914824f4f407b1ca571213e9cf48322d71fb3.src","preCode":"    public List<VlanVO> listVlansForPod(long podId) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            result.add(findById(pvmvo.getVlanDbId()));\n        }\n        return result;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/dc/dao/VlanDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public List<VlanVO> listVlansForPodByType(long podId, VlanType vlanType) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            VlanVO vlan = findById(pvmvo.getVlanDbId());\n            if (vlan.getVlanType() == vlanType) {\n                result.add(vlan);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":168,"groupId":"19656","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listVlansForPodByType","params":"(longpodId@VlanTypevlanType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/5914824f4f407b1ca571213e9cf48322d71fb3.src","preCode":"    public List<VlanVO> listVlansForPodByType(long podId, VlanType vlanType) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            VlanVO vlan = findById(pvmvo.getVlanDbId());\n            if (vlan.getVlanType() == vlanType) {\n                result.add(vlan);\n            }\n        }\n        return result;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/dc/dao/VlanDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-08-15 16:05:58","commitOrder":2,"curCode":"    public List<VlanVO> listVlansForPod(long podId) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            VlanVO vlanByPodId = findById(pvmvo.getVlanDbId());\n            if (vlanByPodId != null) {\n                result.add(vlanByPodId);\n            }\n        }\n        return result;\n    }\n","date":"2019-08-15 16:05:58","endLine":176,"groupId":"10448","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"listVlansForPod","params":"(longpodId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7b/3ca130cd847d6f4b02b1339b1546ad628b98da.src","preCode":"    public List<VlanVO> listVlansForPod(long podId) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            result.add(findById(pvmvo.getVlanDbId()));\n        }\n        return result;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/dc/dao/VlanDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public List<VlanVO> listVlansForPodByType(long podId, VlanType vlanType) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            VlanVO vlan = findById(pvmvo.getVlanDbId());\n            if (vlan.getVlanType() == vlanType) {\n                result.add(vlan);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":168,"groupId":"10448","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listVlansForPodByType","params":"(longpodId@VlanTypevlanType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/5914824f4f407b1ca571213e9cf48322d71fb3.src","preCode":"    public List<VlanVO> listVlansForPodByType(long podId, VlanType vlanType) {\n        \r\n        List<PodVlanMapVO> vlanMaps = _podVlanMapDao.listPodVlanMapsByPod(podId);\n        List<VlanVO> result = new ArrayList<VlanVO>();\n        for (PodVlanMapVO pvmvo : vlanMaps) {\n            VlanVO vlan = findById(pvmvo.getVlanDbId());\n            if (vlan.getVlanType() == vlanType) {\n                result.add(vlan);\n            }\n        }\n        return result;\n    }\n","realPath":"engine/schema/src/main/java/com/cloud/dc/dao/VlanDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"d7aa0a2718381fcf57fc1f9df8296a4478d31d00","commitMessage":"@@@server: Prevent NullPointer on a network with removed IP ranges/\"VLANs\" (#3551)\n\nWhen a network IP range is removed.  the \"vlan\" stays mapped on pod_vlan_map; therefore.  the method that lists the VLANs by pod id will return null VLANS.\n\nThis PR adds proper verifications to avoid null pointer exception when deploying VRs on a pod with removed VLANs. The exception was caused on getPlaceholderNicForRouter. ","date":"2019-08-15 16:05:58","modifiedFileCount":"2","status":"M","submitter":"Gabriel Beims Br?scher"}]
