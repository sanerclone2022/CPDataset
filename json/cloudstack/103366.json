[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + size);\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(\"-n\", snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                            command.add(\"-d\", snapshotDisk.getPath());\n                            command.add(\"-n\", snapshotName);\n                            final String result = command.execute();\n                            if (result != null) {\n                                s_logger.debug(\"Failed to delete snapshot on primary: \" + result);\n                                \r\n                            }\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1034,"groupId":"22096","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + size);\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(\"-n\", snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                            command.add(\"-d\", snapshotDisk.getPath());\n                            command.add(\"-n\", snapshotName);\n                            final String result = command.execute();\n                            if (result != null) {\n                                s_logger.debug(\"Failed to delete snapshot on primary: \" + result);\n                                \r\n                            }\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":861,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        final Rados r = new Rados(primaryPool.getAuthUserName());\n                        r.confSet(\"mon_host\", primaryPool.getSourceHost() + \":\" + primaryPool.getSourcePort());\n                        r.confSet(\"key\", primaryPool.getAuthSecret());\n                        r.confSet(\"client_mount_timeout\", \"30\");\n                        r.connect();\n                        s_logger.debug(\"Succesfully connected to Ceph cluster at \" + r.confGet(\"mon_host\"));\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(\"-c\", disk.getPath());\n                    command.add(\"-n\", snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":1441,"groupId":"4661","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        final Rados r = new Rados(primaryPool.getAuthUserName());\n                        r.confSet(\"mon_host\", primaryPool.getSourceHost() + \":\" + primaryPool.getSourcePort());\n                        r.confSet(\"key\", primaryPool.getAuthSecret());\n                        r.confSet(\"client_mount_timeout\", \"30\");\n                        r.connect();\n                        s_logger.debug(\"Succesfully connected to Ceph cluster at \" + r.confGet(\"mon_host\"));\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(\"-c\", disk.getPath());\n                    command.add(\"-n\", snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-04-11 22:45:00","codes":[{"authorDate":"2020-04-11 22:45:00","commitOrder":2,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + size);\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","date":"2020-04-11 22:45:00","endLine":1037,"groupId":"22096","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/1ff7172ee603dd02b9f16b63a12597ce603ff5.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + size);\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(\"-n\", snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                            command.add(\"-d\", snapshotDisk.getPath());\n                            command.add(\"-n\", snapshotName);\n                            final String result = command.execute();\n                            if (result != null) {\n                                s_logger.debug(\"Failed to delete snapshot on primary: \" + result);\n                                \r\n                            }\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"M"},{"authorDate":"2020-04-11 22:45:00","commitOrder":2,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2020-04-11 22:45:00","endLine":1543,"groupId":"4661","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/1ff7172ee603dd02b9f16b63a12597ce603ff5.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        final Rados r = new Rados(primaryPool.getAuthUserName());\n                        r.confSet(\"mon_host\", primaryPool.getSourceHost() + \":\" + primaryPool.getSourcePort());\n                        r.confSet(\"key\", primaryPool.getAuthSecret());\n                        r.confSet(\"client_mount_timeout\", \"30\");\n                        r.connect();\n                        s_logger.debug(\"Succesfully connected to Ceph cluster at \" + r.confGet(\"mon_host\"));\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(\"-c\", disk.getPath());\n                    command.add(\"-n\", snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1451,"status":"M"}],"commitId":"b984184b7acbe4b8295dec8681acc5c81c8b096b","commitMessage":"@@@Merge release branch 4.13 to master\n\n* 4.13:\n  Snapshot deletion issues (#3969)\n  server: Cannot list affinity group if there are hosts dedicated? (#4025)\n  server: Search zone-wide storage pool when allocation algothrim is firstfitleastconsumed (#4002)\n","date":"2020-04-11 22:45:00","modifiedFileCount":"7","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-04-11 22:45:00","codes":[{"authorDate":"2020-04-16 21:15:22","commitOrder":3,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + size);\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        try {\n                            s_logger.info(String.format(\"Suspending VM '%s' to delete snapshot,\", vm.getName()));\n                            vm.suspend();\n                        } catch (final LibvirtException e) {\n                            s_logger.error(\"Failed to suspend the VM\", e);\n                            throw e;\n                        }\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","date":"2020-04-16 21:15:22","endLine":1044,"groupId":"22096","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/61/7dfc945fe3f6f0a1aeebf5b8d2cddfff3701c3.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + size);\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":871,"status":"M"},{"authorDate":"2020-04-11 22:45:00","commitOrder":3,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2020-04-11 22:45:00","endLine":1543,"groupId":"4661","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/1ff7172ee603dd02b9f16b63a12597ce603ff5.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1451,"status":"N"}],"commitId":"b406e1dc4696d2b529add947fa5f81f358cf1cc5","commitMessage":"@@@Bring back vm.suspend during deleting VM snapshot (#4029)\n\n","date":"2020-04-16 21:15:22","modifiedFileCount":"1","status":"M","submitter":"Andrija Panic"},{"authorTime":"2020-04-11 22:45:00","codes":[{"authorDate":"2020-08-13 18:25:16","commitOrder":4,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + toHumanReadableSize(size));\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        try {\n                            s_logger.info(String.format(\"Suspending VM '%s' to delete snapshot,\", vm.getName()));\n                            vm.suspend();\n                        } catch (final LibvirtException e) {\n                            s_logger.error(\"Failed to suspend the VM\", e);\n                            throw e;\n                        }\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","date":"2020-08-13 18:25:16","endLine":1045,"groupId":"22096","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/92ff22204db8ca6c02065f28b0eee4d110f003.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + size);\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        try {\n                            s_logger.info(String.format(\"Suspending VM '%s' to delete snapshot,\", vm.getName()));\n                            vm.suspend();\n                        } catch (final LibvirtException e) {\n                            s_logger.error(\"Failed to suspend the VM\", e);\n                            throw e;\n                        }\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"M"},{"authorDate":"2020-04-11 22:45:00","commitOrder":4,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2020-04-11 22:45:00","endLine":1543,"groupId":"4661","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/1ff7172ee603dd02b9f16b63a12597ce603ff5.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1451,"status":"N"}],"commitId":"b586eb22f1b31f3cab2f2cb1aaeafca4f4646abd","commitMessage":"@@@Human readable sizes in logs (#4207)\n\nThis PR adds outputting human readable byte sizes in the management server logs.  agent logs.  and usage records. A non-dynamic global variable is added (display.human.readable.sizes) to control switching this feature on and off. This setting is sent to the agent on connection and is only read from the database when the management server is started up. The setting is kept in memory by the use of a static field on the NumbersUtil class and is available throughout the codebase.\n\nInstead of seeing things like:\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"106496\". \"bytesReceived\":\"0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nThe KB MB and GB values will be printed out:\n\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"(104.00 KB) 106496\". \"bytesReceived\":\"(0 bytes) 0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Human+Readable+Byte+sizes","date":"2020-08-13 18:25:16","modifiedFileCount":"55","status":"M","submitter":"Spaceman1984"},{"authorTime":"2020-04-11 22:45:00","codes":[{"authorDate":"2021-02-26 14:39:11","commitOrder":5,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + toHumanReadableSize(size));\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        try {\n                            s_logger.info(String.format(\"Suspending VM '%s' to delete snapshot,\", vm.getName()));\n                            vm.suspend();\n                        } catch (final LibvirtException e) {\n                            s_logger.error(\"Failed to suspend the VM\", e);\n                            throw e;\n                        }\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.error(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","date":"2021-02-26 14:39:11","endLine":1072,"groupId":"22096","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/09/dc8b1f23e2b10e8dfae8bf59dcc724a7b8b6ca.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + toHumanReadableSize(size));\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        try {\n                            s_logger.info(String.format(\"Suspending VM '%s' to delete snapshot,\", vm.getName()));\n                            vm.suspend();\n                        } catch (final LibvirtException e) {\n                            s_logger.error(\"Failed to suspend the VM\", e);\n                            throw e;\n                        }\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.debug(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"M"},{"authorDate":"2020-04-11 22:45:00","commitOrder":5,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2020-04-11 22:45:00","endLine":1543,"groupId":"4661","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/1ff7172ee603dd02b9f16b63a12597ce603ff5.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1451,"status":"N"}],"commitId":"77290df0d51305d863e08f3e7d654cc95805dde5","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-02-26 14:39:11","modifiedFileCount":"15","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-04-11 22:45:00","codes":[{"authorDate":"2021-03-18 18:54:01","commitOrder":6,"curCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + toHumanReadableSize(size));\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException | LibvirtException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        try {\n                            s_logger.info(String.format(\"Suspending VM '%s' to delete snapshot,\", vm.getName()));\n                            vm.suspend();\n                        } catch (final LibvirtException e) {\n                            s_logger.error(\"Failed to suspend the VM\", e);\n                            throw e;\n                        }\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.error(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","date":"2021-03-18 18:54:01","endLine":1072,"groupId":"103366","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"backupSnapshot","params":"(finalCopyCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8c/997ea8e8d690aeaef0af6e313753aeaec439f7.src","preCode":"    public Answer backupSnapshot(final CopyCommand cmd) {\n        final DataTO srcData = cmd.getSrcTO();\n        final DataTO destData = cmd.getDestTO();\n        final SnapshotObjectTO snapshot = (SnapshotObjectTO)srcData;\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshot.getDataStore();\n        final SnapshotObjectTO destSnapshot = (SnapshotObjectTO)destData;\n        final DataStoreTO imageStore = destData.getDataStore();\n\n        if (!(imageStore instanceof NfsTO)) {\n            return backupSnapshotForObjectStore(cmd);\n        }\n        final NfsTO nfsImageStore = (NfsTO)imageStore;\n\n        final String secondaryStoragePoolUrl = nfsImageStore.getUrl();\n        \r\n        final int index = snapshot.getPath().lastIndexOf(\"/\");\n        final boolean isCreatedFromVmSnapshot = (index == -1) ? true: false; \r\n\n        final String snapshotName = snapshot.getPath().substring(index + 1);\n        String descName = snapshotName;\n        final String volumePath = snapshot.getVolume().getPath();\n        String snapshotDestPath = null;\n        String snapshotRelPath = null;\n        final String vmName = snapshot.getVmName();\n        KVMStoragePool secondaryStoragePool = null;\n        Connect conn = null;\n        KVMPhysicalDisk snapshotDisk = null;\n        KVMStoragePool primaryPool = null;\n        try {\n            conn = LibvirtConnection.getConnectionByVmName(vmName);\n\n            secondaryStoragePool = storagePoolMgr.getStoragePoolByURI(secondaryStoragePoolUrl);\n\n            final String ssPmountPath = secondaryStoragePool.getLocalPath();\n            snapshotRelPath = destSnapshot.getPath();\n\n            snapshotDestPath = ssPmountPath + File.separator + snapshotRelPath;\n            snapshotDisk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volumePath);\n            primaryPool = snapshotDisk.getPool();\n\n            long size = 0;\n            \r\n\r\n\r\n\n            if (primaryPool.getType() == StoragePoolType.RBD) {\n                final String rbdSnapshot = snapshotDisk.getPath() +  \"@\" + snapshotName;\n                final String snapshotFile = snapshotDestPath + \"/\" + snapshotName;\n                try {\n                    s_logger.debug(\"Attempting to backup RBD snapshot \" + rbdSnapshot);\n\n                    final File snapDir = new File(snapshotDestPath);\n                    s_logger.debug(\"Attempting to create \" + snapDir.getAbsolutePath() + \" recursively for snapshot storage\");\n                    FileUtils.forceMkdir(snapDir);\n\n                    final QemuImgFile srcFile =\n                            new QemuImgFile(KVMPhysicalDisk.RBDStringBuilder(primaryPool.getSourceHost(), primaryPool.getSourcePort(), primaryPool.getAuthUserName(),\n                                    primaryPool.getAuthSecret(), rbdSnapshot));\n                    srcFile.setFormat(snapshotDisk.getFormat());\n\n                    final QemuImgFile destFile = new QemuImgFile(snapshotFile);\n                    destFile.setFormat(PhysicalDiskFormat.QCOW2);\n\n                    s_logger.debug(\"Backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile);\n                    final QemuImg q = new QemuImg(cmd.getWaitInMillSeconds());\n                    q.convert(srcFile, destFile);\n\n                    final File snapFile = new File(snapshotFile);\n                    if(snapFile.exists()) {\n                        size = snapFile.length();\n                    }\n\n                    s_logger.debug(\"Finished backing up RBD snapshot \" + rbdSnapshot + \" to \" + snapshotFile + \" Snapshot size: \" + toHumanReadableSize(size));\n                } catch (final FileNotFoundException e) {\n                    s_logger.error(\"Failed to open \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                } catch (final IOException e) {\n                    s_logger.error(\"Failed to create \" + snapshotDestPath + \". The error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }  catch (final QemuImgException e) {\n                    s_logger.error(\"Failed to backup the RBD snapshot from \" + rbdSnapshot +\n                            \" to \" + snapshotFile + \" the error was: \" + e.getMessage());\n                    return new CopyCmdAnswer(e.toString());\n                }\n            } else {\n                final Script command = new Script(_manageSnapshotPath, cmd.getWaitInMillSeconds(), s_logger);\n                command.add(\"-b\", snapshotDisk.getPath());\n                command.add(NAME_OPTION, snapshotName);\n                command.add(\"-p\", snapshotDestPath);\n                if (isCreatedFromVmSnapshot) {\n                    descName = UUID.randomUUID().toString();\n                }\n                command.add(\"-t\", descName);\n                final String result = command.execute();\n                if (result != null) {\n                    s_logger.debug(\"Failed to backup snaptshot: \" + result);\n                    return new CopyCmdAnswer(result);\n                }\n                final File snapFile = new File(snapshotDestPath + \"/\" + descName);\n                if(snapFile.exists()){\n                    size = snapFile.length();\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            newSnapshot.setPath(snapshotRelPath + File.separator + descName);\n            newSnapshot.setPhysicalSize(size);\n            return new CopyCmdAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } catch (final CloudRuntimeException e) {\n            s_logger.debug(\"Failed to backup snapshot: \", e);\n            return new CopyCmdAnswer(e.toString());\n        } finally {\n            if (isCreatedFromVmSnapshot) {\n                s_logger.debug(\"Ignoring removal of vm snapshot on primary as this snapshot is created from vm snapshot\");\n            } else {\n                try {\n                    \n                    DomainInfo.DomainState state = null;\n                    Domain vm = null;\n                    if (vmName != null) {\n                        try {\n                            vm = resource.getDomain(conn, vmName);\n                            state = vm.getInfo().state;\n                        } catch (final LibvirtException e) {\n                            s_logger.trace(\"Ignoring libvirt error.\", e);\n                        }\n                    }\n\n                    final KVMStoragePool primaryStorage = storagePoolMgr.getStoragePool(primaryStore.getPoolType(),\n                            primaryStore.getUuid());\n                    if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryStorage.isExternalSnapshot()) {\n                        final DomainSnapshot snap = vm.snapshotLookupByName(snapshotName);\n                        try {\n                            s_logger.info(String.format(\"Suspending VM '%s' to delete snapshot,\", vm.getName()));\n                            vm.suspend();\n                        } catch (final LibvirtException e) {\n                            s_logger.error(\"Failed to suspend the VM\", e);\n                            throw e;\n                        }\n                        snap.delete(0);\n\n                        \r\n\r\n\r\n\n                        vm = resource.getDomain(conn, vmName);\n                        state = vm.getInfo().state;\n                        if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                            vm.resume();\n                        }\n                    } else {\n                        if (primaryPool.getType() != StoragePoolType.RBD) {\n                            deleteSnapshotViaManageSnapshotScript(snapshotName, snapshotDisk);\n                        }\n                    }\n                } catch (final Exception ex) {\n                    s_logger.error(\"Failed to delete snapshots on primary\", ex);\n                }\n            }\n\n            try {\n                if (secondaryStoragePool != null) {\n                    secondaryStoragePool.delete();\n                }\n            } catch (final Exception ex) {\n                s_logger.debug(\"Failed to delete secondary storage\", ex);\n            }\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":899,"status":"M"},{"authorDate":"2020-04-11 22:45:00","commitOrder":6,"curCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","date":"2020-04-11 22:45:00","endLine":1543,"groupId":"103366","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createSnapshot","params":"(finalCreateObjectCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9e/1ff7172ee603dd02b9f16b63a12597ce603ff5.src","preCode":"    public Answer createSnapshot(final CreateObjectCommand cmd) {\n        final SnapshotObjectTO snapshotTO = (SnapshotObjectTO)cmd.getData();\n        final PrimaryDataStoreTO primaryStore = (PrimaryDataStoreTO)snapshotTO.getDataStore();\n        final VolumeObjectTO volume = snapshotTO.getVolume();\n        final String snapshotName = UUID.randomUUID().toString();\n        final String vmName = volume.getVmName();\n        try {\n            final Connect conn = LibvirtConnection.getConnectionByVmName(vmName);\n            DomainInfo.DomainState state = null;\n            Domain vm = null;\n            if (vmName != null) {\n                try {\n                    vm = resource.getDomain(conn, vmName);\n                    state = vm.getInfo().state;\n                } catch (final LibvirtException e) {\n                    s_logger.trace(\"Ignoring libvirt error.\", e);\n                }\n            }\n\n            final KVMStoragePool primaryPool = storagePoolMgr.getStoragePool(primaryStore.getPoolType(), primaryStore.getUuid());\n\n            final KVMPhysicalDisk disk = storagePoolMgr.getPhysicalDisk(primaryStore.getPoolType(), primaryStore.getUuid(), volume.getPath());\n            if (state == DomainInfo.DomainState.VIR_DOMAIN_RUNNING && !primaryPool.isExternalSnapshot()) {\n                final String vmUuid = vm.getUUIDString();\n                final Object[] args = new Object[] {snapshotName, vmUuid};\n                final String snapshot = SnapshotXML.format(args);\n\n                final long start = System.currentTimeMillis();\n                vm.snapshotCreateXML(snapshot);\n                final long total = (System.currentTimeMillis() - start)/1000;\n                s_logger.debug(\"snapshot takes \" + total + \" seconds to finish\");\n\n                \r\n\r\n\r\n\n                vm = resource.getDomain(conn, vmName);\n                state = vm.getInfo().state;\n                if (state == DomainInfo.DomainState.VIR_DOMAIN_PAUSED) {\n                    vm.resume();\n                }\n            } else {\n                \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (primaryPool.getType() == StoragePoolType.RBD) {\n                    try {\n                        Rados r = radosConnect(primaryPool);\n\n                        final IoCTX io = r.ioCtxCreate(primaryPool.getSourceDir());\n                        final Rbd rbd = new Rbd(io);\n                        final RbdImage image = rbd.open(disk.getName());\n\n                        s_logger.debug(\"Attempting to create RBD snapshot \" + disk.getName() + \"@\" + snapshotName);\n                        image.snapCreate(snapshotName);\n\n                        rbd.close(image);\n                        r.ioCtxDestroy(io);\n                    } catch (final Exception e) {\n                        s_logger.error(\"A RBD snapshot operation on \" + disk.getName() + \" failed. The error was: \" + e.getMessage());\n                    }\n                } else {\n                    \n                    final Script command = new Script(_manageSnapshotPath, _cmdsTimeout, s_logger);\n                    command.add(MANAGE_SNAPSTHOT_CREATE_OPTION, disk.getPath());\n                    command.add(NAME_OPTION, snapshotName);\n                    final String result = command.execute();\n                    if (result != null) {\n                        s_logger.debug(\"Failed to manage snapshot: \" + result);\n                        return new CreateObjectAnswer(\"Failed to manage snapshot: \" + result);\n                    }\n                }\n            }\n\n            final SnapshotObjectTO newSnapshot = new SnapshotObjectTO();\n            \r\n            newSnapshot.setPath(disk.getPath() + File.separator + snapshotName);\n            return new CreateObjectAnswer(newSnapshot);\n        } catch (final LibvirtException e) {\n            s_logger.debug(\"Failed to manage snapshot: \", e);\n            return new CreateObjectAnswer(\"Failed to manage snapshot: \" + e.toString());\n        }\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1451,"status":"N"}],"commitId":"4e90a8c454f4d8ea6c35d9f92ada13325aeecf54","commitMessage":"@@@Qemu 2.10 requires `-U` flag to read volume metadata (#4567)\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <daniel@scclouds.com.br>","date":"2021-03-18 18:54:01","modifiedFileCount":"9","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
