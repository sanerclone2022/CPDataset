[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean revokeFirewallRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> pfRules = _pfRulesDao.listByVm(vmId);\n        List<FirewallRuleVO> staticNatRules = _firewallDao.listStaticNatByVmId(vm.getId());\n        List<FirewallRuleVO> firewallRules = new ArrayList<FirewallRuleVO>();\n\n        \r\n        for (PortForwardingRuleVO pfRule : pfRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(pfRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        for (FirewallRuleVO staticNatRule : staticNatRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(staticNatRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (firewallRules.isEmpty()) {\n            s_logger.debug(\"No firewall rules are found for vm id=\" + vmId);\n            return true;\n        } else {\n            s_logger.debug(\"Found \" + firewallRules.size() + \" to cleanup for vm id=\" + vmId);\n        }\n\n        for (FirewallRuleVO rule : firewallRules) {\n            \r\n            revokeFirewallRule(rule.getId(), false, _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying firewall rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            try {\n                success = success && applyIngressFirewallRules(ipId, _accountMgr.getSystemAccount());\n            } catch (ResourceUnavailableException ex) {\n                s_logger.warn(\"Failed to apply port forwarding rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","date":"2018-01-20 05:49:27","endLine":1012,"groupId":"13504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"revokeFirewallRulesForVm","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cf/72ff28f0cfd18996f64e9dcca356caeabcdd34.src","preCode":"    public boolean revokeFirewallRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> pfRules = _pfRulesDao.listByVm(vmId);\n        List<FirewallRuleVO> staticNatRules = _firewallDao.listStaticNatByVmId(vm.getId());\n        List<FirewallRuleVO> firewallRules = new ArrayList<FirewallRuleVO>();\n\n        \r\n        for (PortForwardingRuleVO pfRule : pfRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(pfRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        for (FirewallRuleVO staticNatRule : staticNatRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(staticNatRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (firewallRules.isEmpty()) {\n            s_logger.debug(\"No firewall rules are found for vm id=\" + vmId);\n            return true;\n        } else {\n            s_logger.debug(\"Found \" + firewallRules.size() + \" to cleanup for vm id=\" + vmId);\n        }\n\n        for (FirewallRuleVO rule : firewallRules) {\n            \r\n            revokeFirewallRule(rule.getId(), false, _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying firewall rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            try {\n                success = success && applyIngressFirewallRules(ipId, _accountMgr.getSystemAccount());\n            } catch (ResourceUnavailableException ex) {\n                s_logger.warn(\"Failed to apply port forwarding rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","realPath":"server/src/main/java/com/cloud/network/firewall/FirewallManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":959,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean revokePortForwardingRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> rules = _portForwardingDao.listByVm(vmId);\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (rules == null || rules.isEmpty()) {\n            s_logger.debug(\"No port forwarding rules are found for vm id=\" + vmId);\n            return true;\n        }\n\n        for (PortForwardingRuleVO rule : rules) {\n            \r\n            revokePortForwardingRuleInternal(rule.getId(), _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM, false);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying port forwarding rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            if (!applyPortForwardingRules(ipId,  _ipAddrMgr.RulesContinueOnError.value(), _accountMgr.getSystemAccount())) {\n                s_logger.warn(\"Failed to apply port forwarding rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","date":"2018-01-20 05:49:27","endLine":779,"groupId":"1695","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"revokePortForwardingRulesForVm","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/a9ad90d33f2d51c824129ee77c87b1b240118d.src","preCode":"    public boolean revokePortForwardingRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> rules = _portForwardingDao.listByVm(vmId);\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (rules == null || rules.isEmpty()) {\n            s_logger.debug(\"No port forwarding rules are found for vm id=\" + vmId);\n            return true;\n        }\n\n        for (PortForwardingRuleVO rule : rules) {\n            \r\n            revokePortForwardingRuleInternal(rule.getId(), _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM, false);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying port forwarding rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            if (!applyPortForwardingRules(ipId,  _ipAddrMgr.RulesContinueOnError.value(), _accountMgr.getSystemAccount())) {\n                s_logger.warn(\"Failed to apply port forwarding rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/RulesManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":748,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-08-16 15:49:43","commitOrder":2,"curCode":"    public boolean revokeFirewallRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> pfRules = _pfRulesDao.listByVm(vmId);\n        List<FirewallRuleVO> staticNatRules = _firewallDao.listStaticNatByVmId(vm.getId());\n        List<FirewallRuleVO> firewallRules = new ArrayList<FirewallRuleVO>();\n\n        \r\n        for (PortForwardingRuleVO pfRule : pfRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(pfRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        for (FirewallRuleVO staticNatRule : staticNatRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(staticNatRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (firewallRules.isEmpty()) {\n            s_logger.debug(\"No firewall rules are found for vm id=\" + vmId);\n            return true;\n        } else {\n            s_logger.debug(\"Found \" + firewallRules.size() + \" to cleanup for vm id=\" + vmId);\n        }\n\n        for (FirewallRuleVO rule : firewallRules) {\n            \r\n            revokeFirewallRule(rule.getId(), false, _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying firewall rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            try {\n                success = success && applyIngressFirewallRules(ipId, _accountMgr.getSystemAccount());\n            } catch (ResourceUnavailableException ex) {\n                s_logger.warn(\"Failed to apply firewall rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","date":"2018-08-16 15:49:43","endLine":1012,"groupId":"101626","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"revokeFirewallRulesForVm","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ef/ab0e2556895b7675154adccb72deeabb141dd1.src","preCode":"    public boolean revokeFirewallRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> pfRules = _pfRulesDao.listByVm(vmId);\n        List<FirewallRuleVO> staticNatRules = _firewallDao.listStaticNatByVmId(vm.getId());\n        List<FirewallRuleVO> firewallRules = new ArrayList<FirewallRuleVO>();\n\n        \r\n        for (PortForwardingRuleVO pfRule : pfRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(pfRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        for (FirewallRuleVO staticNatRule : staticNatRules) {\n            FirewallRuleVO relatedRule = _firewallDao.findByRelatedId(staticNatRule.getId());\n            if (relatedRule != null) {\n                firewallRules.add(relatedRule);\n            }\n        }\n\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (firewallRules.isEmpty()) {\n            s_logger.debug(\"No firewall rules are found for vm id=\" + vmId);\n            return true;\n        } else {\n            s_logger.debug(\"Found \" + firewallRules.size() + \" to cleanup for vm id=\" + vmId);\n        }\n\n        for (FirewallRuleVO rule : firewallRules) {\n            \r\n            revokeFirewallRule(rule.getId(), false, _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying firewall rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            try {\n                success = success && applyIngressFirewallRules(ipId, _accountMgr.getSystemAccount());\n            } catch (ResourceUnavailableException ex) {\n                s_logger.warn(\"Failed to apply port forwarding rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","realPath":"server/src/main/java/com/cloud/network/firewall/FirewallManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":959,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean revokePortForwardingRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> rules = _portForwardingDao.listByVm(vmId);\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (rules == null || rules.isEmpty()) {\n            s_logger.debug(\"No port forwarding rules are found for vm id=\" + vmId);\n            return true;\n        }\n\n        for (PortForwardingRuleVO rule : rules) {\n            \r\n            revokePortForwardingRuleInternal(rule.getId(), _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM, false);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying port forwarding rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            if (!applyPortForwardingRules(ipId,  _ipAddrMgr.RulesContinueOnError.value(), _accountMgr.getSystemAccount())) {\n                s_logger.warn(\"Failed to apply port forwarding rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","date":"2018-01-20 05:49:27","endLine":779,"groupId":"101626","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"revokePortForwardingRulesForVm","params":"(longvmId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/a9ad90d33f2d51c824129ee77c87b1b240118d.src","preCode":"    public boolean revokePortForwardingRulesForVm(long vmId) {\n        boolean success = true;\n        UserVmVO vm = _vmDao.findByIdIncludingRemoved(vmId);\n        if (vm == null) {\n            return false;\n        }\n\n        List<PortForwardingRuleVO> rules = _portForwardingDao.listByVm(vmId);\n        Set<Long> ipsToReprogram = new HashSet<Long>();\n\n        if (rules == null || rules.isEmpty()) {\n            s_logger.debug(\"No port forwarding rules are found for vm id=\" + vmId);\n            return true;\n        }\n\n        for (PortForwardingRuleVO rule : rules) {\n            \r\n            revokePortForwardingRuleInternal(rule.getId(), _accountMgr.getSystemAccount(), Account.ACCOUNT_ID_SYSTEM, false);\n            ipsToReprogram.add(rule.getSourceIpAddressId());\n        }\n\n        \r\n        for (Long ipId : ipsToReprogram) {\n            s_logger.debug(\"Applying port forwarding rules for ip address id=\" + ipId + \" as a part of vm expunge\");\n            if (!applyPortForwardingRules(ipId,  _ipAddrMgr.RulesContinueOnError.value(), _accountMgr.getSystemAccount())) {\n                s_logger.warn(\"Failed to apply port forwarding rules for ip id=\" + ipId);\n                success = false;\n            }\n        }\n\n        return success;\n    }\n","realPath":"server/src/main/java/com/cloud/network/rules/RulesManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":748,"status":"N"}],"commitId":"e57003f93f2067b876864b26071e1ef9952a9be1","commitMessage":"@@@Fix some log messages that do not match with their function (#2796)\n\n\n","date":"2018-08-16 15:49:43","modifiedFileCount":"13","status":"M","submitter":"lzh3636"}]
