[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":922,"groupId":"7296","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createSite2SiteVpnCfgCommands","params":"(finalSite2SiteVpnConnectionconn@finalbooleanisCreate@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":896,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                ip.setTrafficType(network.getTrafficType());\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":964,"groupId":"14065","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePrivateIPCommands","params":"(finalVirtualRouterrouter@finalList<PrivateIpAddress>ips@finalCommandscmds@finalbooleanadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                ip.setTrafficType(network.getTrafficType());\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-07 03:38:07","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":922,"groupId":"7296","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createSite2SiteVpnCfgCommands","params":"(finalSite2SiteVpnConnectionconn@finalbooleanisCreate@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":896,"status":"N"},{"authorDate":"2020-02-07 03:38:07","commitOrder":2,"curCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                ip.setTrafficType(getNetworkTrafficType(network));\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","date":"2020-02-07 03:38:07","endLine":969,"groupId":"14083","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePrivateIPCommands","params":"(finalVirtualRouterrouter@finalList<PrivateIpAddress>ips@finalCommandscmds@finalbooleanadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0f/e9dc32c8b50e1f04cbdfc7d7ad1e4da4aa332e.src","preCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                ip.setTrafficType(network.getTrafficType());\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":929,"status":"M"}],"commitId":"10482da13602f0da504b30190fbced8f1be0e050","commitMessage":"@@@Merge release branch 4.13 to master\n\n* 4.13:\n  vr: add missing rule for port forwarding rule in vpc (#3857)\n  vpc: set traffic type of private gateway IP to Public to fix ke? (#3851)\n","date":"2020-02-07 03:38:07","modifiedFileCount":"4","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-11-25 16:04:53","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","date":"2018-01-20 05:49:27","endLine":922,"groupId":"7296","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createSite2SiteVpnCfgCommands","params":"(finalSite2SiteVpnConnectionconn@finalbooleanisCreate@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c8/d85fe26446d85c55603278ef3ea9f0a40d1f2e.src","preCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":896,"status":"N"},{"authorDate":"2020-11-25 16:04:53","commitOrder":3,"curCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                setIpAddressNetworkParams(ip, network, router);\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","date":"2020-11-25 16:04:53","endLine":997,"groupId":"24967","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePrivateIPCommands","params":"(finalVirtualRouterrouter@finalList<PrivateIpAddress>ips@finalCommandscmds@finalbooleanadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/26/2fa4b4ff1408e11aa14f56c473ac3a804e571f.src","preCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                ip.setTrafficType(getNetworkTrafficType(network));\n                ip.setNetworkName(_networkModel.getNetworkTag(router.getHypervisorType(), network));\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":958,"status":"M"}],"commitId":"e9ce381c56a7ed7bbba052be483bac79e0e46d2e","commitMessage":"@@@Merge branch '4.14'\n","date":"2020-11-25 16:04:53","modifiedFileCount":"8","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2020-11-25 16:04:53","codes":[{"authorDate":"2021-05-06 02:57:43","commitOrder":4,"curCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n        final Boolean splitConnections = gw.getSplitConnections();\n        final String ikeVersion = gw.getIkeVersion();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap, splitConnections, ikeVersion);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","date":"2021-05-06 02:57:43","endLine":958,"groupId":"101871","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createSite2SiteVpnCfgCommands","params":"(finalSite2SiteVpnConnectionconn@finalbooleanisCreate@finalVirtualRouterrouter@finalCommandscmds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e7/3a83393f49c85c64d081370e15d15e44674783.src","preCode":"    public void createSite2SiteVpnCfgCommands(final Site2SiteVpnConnection conn, final boolean isCreate, final VirtualRouter router, final Commands cmds) {\n        final Site2SiteCustomerGatewayVO gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n        final Site2SiteVpnGatewayVO vpnGw = _s2sVpnGatewayDao.findById(conn.getVpnGatewayId());\n        final IpAddress ip = _ipAddressDao.findById(vpnGw.getAddrId());\n        final Vpc vpc = _vpcDao.findById(ip.getVpcId());\n        final String localPublicIp = ip.getAddress().toString();\n        final String localGuestCidr = vpc.getCidr();\n        final String localPublicGateway = _vlanDao.findById(ip.getVlanId()).getVlanGateway();\n        final String peerGatewayIp = gw.getGatewayIp();\n        final String peerGuestCidrList = gw.getGuestCidrList();\n        final String ipsecPsk = gw.getIpsecPsk();\n        final String ikePolicy = gw.getIkePolicy();\n        final String espPolicy = gw.getEspPolicy();\n        final Long ikeLifetime = gw.getIkeLifetime();\n        final Long espLifetime = gw.getEspLifetime();\n        final Boolean dpd = gw.getDpd();\n        final Boolean encap = gw.getEncap();\n\n        final Site2SiteVpnCfgCommand cmd = new Site2SiteVpnCfgCommand(isCreate, localPublicIp, localPublicGateway, localGuestCidr, peerGatewayIp, peerGuestCidrList, ikePolicy,\n                espPolicy, ipsecPsk, ikeLifetime, espLifetime, dpd, conn.isPassive(), encap);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        cmds.addCommand(\"applyS2SVpn\", cmd);\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"M"},{"authorDate":"2020-11-25 16:04:53","commitOrder":4,"curCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                setIpAddressNetworkParams(ip, network, router);\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","date":"2020-11-25 16:04:53","endLine":997,"groupId":"101871","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createVpcAssociatePrivateIPCommands","params":"(finalVirtualRouterrouter@finalList<PrivateIpAddress>ips@finalCommandscmds@finalbooleanadd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/26/2fa4b4ff1408e11aa14f56c473ac3a804e571f.src","preCode":"    public void createVpcAssociatePrivateIPCommands(final VirtualRouter router, final List<PrivateIpAddress> ips, final Commands cmds, final boolean add) {\n\n        \r\n        \r\n        final Map<String, ArrayList<PrivateIpAddress>> vlanIpMap = new HashMap<String, ArrayList<PrivateIpAddress>>();\n        for (final PrivateIpAddress ipAddress : ips) {\n            final String vlanTag = ipAddress.getBroadcastUri();\n            ArrayList<PrivateIpAddress> ipList = vlanIpMap.get(vlanTag);\n            if (ipList == null) {\n                ipList = new ArrayList<PrivateIpAddress>();\n            }\n\n            ipList.add(ipAddress);\n            vlanIpMap.put(vlanTag, ipList);\n        }\n\n        for (final Map.Entry<String, ArrayList<PrivateIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {\n            final List<PrivateIpAddress> ipAddrList = vlanAndIp.getValue();\n            final IpAddressTO[] ipsToSend = new IpAddressTO[ipAddrList.size()];\n            int i = 0;\n\n            for (final PrivateIpAddress ipAddr : ipAddrList) {\n                final Network network = _networkModel.getNetwork(ipAddr.getNetworkId());\n                final IpAddressTO ip = new IpAddressTO(Account.ACCOUNT_ID_SYSTEM, ipAddr.getIpAddress(), add, false, ipAddr.getSourceNat(), ipAddr.getBroadcastUri(),\n                        ipAddr.getGateway(), ipAddr.getNetmask(), ipAddr.getMacAddress(), null, false);\n\n                setIpAddressNetworkParams(ip, network, router);\n                ipsToSend[i++] = ip;\n\n            }\n            final IpAssocVpcCommand cmd = new IpAssocVpcCommand(ipsToSend);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, _routerControlHelper.getRouterIpInNetwork(ipAddrList.get(0).getNetworkId(), router.getId()));\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            final DataCenterVO dcVo = _dcDao.findById(router.getDataCenterId());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n            cmds.addCommand(\"IPAssocVpcCommand\", cmd);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/CommandSetupHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":958,"status":"N"}],"commitId":"fce84e62ab36baec70206a1fe88d322fe16717b7","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-05-06 02:57:43","modifiedFileCount":"15","status":"M","submitter":"Rohit Yadav"}]
