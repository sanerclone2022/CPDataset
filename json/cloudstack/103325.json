[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024 * 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.debug(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.debug(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route |grep default|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.debug(\"Failed to found the local gateway\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1063,"groupId":"21802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024 * 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.debug(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.debug(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route |grep default|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.debug(\"Failed to found the local gateway\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-11-07 20:29:01","commitOrder":2,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024 * 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.debug(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.debug(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route |grep default|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.debug(\"Failed to found the local gateway\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","date":"2018-11-07 20:29:01","endLine":1080,"groupId":"21802","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/26/fcd01f63f75c0a9b1374016587eb5c06caa3cb.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024 * 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.debug(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.debug(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route |grep default|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.debug(\"Failed to found the local gateway\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"4de4eabd18386fdb5d4242f371ec780f6d9097a5","commitMessage":"@@@Enable DPDK support on KVM (#2839)\n\n* Enable DPDK support on KVM\n\n* Allow DPDK deployments on user VMs only\n\n* Fix port name ordering\n","date":"2018-11-07 20:29:01","modifiedFileCount":"21","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-12-06 16:34:47","commitOrder":3,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024 * 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","date":"2018-12-06 16:34:47","endLine":1080,"groupId":"21802","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cf/6f610ef6f224c4c0577506b757e4b93c44069a.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024 * 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.debug(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.debug(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route |grep default|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.debug(\"Failed to found the local gateway\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"d96bc05d10d0e5ca8f6e232e8de68398dadf8afb","commitMessage":"@@@kvm: Use 'ip route show default 0.0.0.0/0' to find the default gateway (#3080)\n\nIf a host has many routes this can be a magnitude faster then printing\nall the routes and grepping for the default.\n\nIn some situations the host might have a large amount of routes due to\ndynamic routing being used like OSPF or BGP.\n\nIn addition fix a couple of loglines which were throwing messages on\nDEBUG while WARN and ERROR should be used there.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2018-12-06 16:34:47","modifiedFileCount":"1","status":"M","submitter":"Wido den Hollander"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-05-05 16:27:58","commitOrder":4,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","date":"2019-05-05 16:27:58","endLine":1093,"groupId":"21802","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1c/dc1f0d03b8cf56364be70209982c2a3847e928.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"3729511c376ae1d3c2b9bb22e3e2988998e993a2","commitMessage":"@@@kvm: Fix three issues with Ubuntu 16.04 hosts (#3227)\n\n* ubuntu16: fix unable to add host if cloudbrX is not configured\n\nwhile add a ubuntu16.04 host with native eth0 (cloudbrX is not configured). \nthe operation failed and I got the following error in /var/log/cloudstack/agent/setup.log\n\n```\nDEBUG:root:execute:ifconfig eth0\nDEBUG:root:[Errno 2] No such file or directory\n  File \"/usr/lib/python2.7/dist-packages/cloudutils/serviceConfig.py\".  line 38.  in configration\n    result = self.config()\n  File \"/usr/lib/python2.7/dist-packages/cloudutils/serviceConfig.py\".  line 211.  in config\n    super(networkConfigUbuntu.  self).cfgNetwork()\n  File \"/usr/lib/python2.7/dist-packages/cloudutils/serviceConfig.py\".  line 108.  in cfgNetwork\n    device = self.netcfg.getDefaultNetwork()\n  File \"/usr/lib/python2.7/dist-packages/cloudutils/networkConfig.py\".  line 53.  in getDefaultNetwork\n    pdi = networkConfig.getDevInfo(dev)\n  File \"/usr/lib/python2.7/dist-packages/cloudutils/networkConfig.py\".  line 157.  in getDevInfo\n    elif networkConfig.isBridge(dev) or networkConfig.isOvsBridge(dev):\n```\n\nThe issue is caused by commit 9c7cd8c2485412bc847b2c2473b962fa01435b24\n2017-09-19 16:45 Sigert Goeminne ? CLOUDSTACK-10081: CloudUtils getDevInfo function will now return \"bridge\" instead o\n\n* ubuntu16: Stop service libvirt-bin.socket while add a host\n\nservice libvirt-bin.socket will be started when add a ubuntu 16.04 host\nDEBUG:root:execute:sudo /usr/sbin/service libvirt-bin start\n\nHowever.  libvirt-bin service will be broken by it after restarting\nStopping service libvirt-bin.socket will fix the issue.\n\nAn example is given as below.\n\n```\nroot@node32:~# /etc/init.d/libvirt-bin restart\n[ ok ] Restarting libvirt-bin (via systemctl): libvirt-bin.service.\nroot@node32:~# virsh list\nerror: failed to connect to the hypervisor\nerror: no valid connection\nerror: Failed to connect socket to '/var/run/libvirt/libvirt-sock': No such file or directory\n\nroot@node32:~# systemctl stop libvirt-bin.socket\n\nroot@node32:~# /etc/init.d/libvirt-bin restart\n[ ok ] Restarting libvirt-bin (via systemctl): libvirt-bin.service.\nroot@node32:~# virsh list\n Id    Name                           State\n----------------------------------------------------\n\n```\n\n* ubuntu16: Diable libvirt default network\n\nBy default.  libvirt will create default network virbr0 on kvm hypervisors.\nIf vm uses the same ip range 192.168.122.0/24.  there will be some issues.\n\nIn some cases.  if we run tcpdump inside vm.  we will see the ip of kvm hypervisor as source ip.\n","date":"2019-05-05 16:27:58","modifiedFileCount":"1","status":"M","submitter":"ustcweizhou"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-05-14 17:43:57","commitOrder":5,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","date":"2019-05-14 17:45:17","endLine":1093,"groupId":"21802","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/29/5569f26af6e6af654beb9ba0e84025caeef877.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchViaSocketPath = Script.findScript(kvmScriptsDir + \"/patch/\", \"patchviasocket.py\");\n        if (_patchViaSocketPath == null) {\n            throw new ConfigurationException(\"Unable to find patchviasocket.py\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"0700d91a6857019999bd25a8d1e5a9e46780e971","commitMessage":"@@@Merge branch '4.12'\n\n- Fixes PR #3146 db cleanup to the correct 4.12->4.13 upgrade path\n- Fixes failing unit test due to jdk specific changes after forward\n  merging\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2019-05-14 17:45:17","modifiedFileCount":"8","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-11-12 00:31:05","commitOrder":6,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","date":"2019-11-12 00:31:05","endLine":1097,"groupId":"21802","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ce/71a50d5e9d0adb38ecfea754c6f207cdf3122f.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":604,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":6,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"524b995083653bac1ceec334b6193500c0d3b906","commitMessage":"@@@IoT/ARM64 support: allow cloudstack-agent on Raspberry Pi 4 (armv8) to use kvm acceleration (#3644)\n\nKVM is supported on arm64 Linux (https://www.linux-kvm.org/page/Processor_support#ARM:).\nFor a small (IoT) platform such as the new Raspberry Pi 4 that uses armv8 processor\n(cortex-a72) it's possible to run Linux host with `/dev/kvm`\naccleration. This adds support for IoT IaaS in CloudStack.\n\nThis PR is from a fun weekend project where:\n- I set up a Raspberry Pi 4 - 4GB RAM model with 4 CPU cores @ 1.5Ghz.  128GB SD samsung evo plus card\n- Installed Ubuntu 19.10 raspi3 base image: http://cdimage.ubuntu.com/releases/19.10/release/ubuntu-19.10-preinstalled-server-arm64+raspi3.img.xz\n- Build a custom Linux 5.3 kernel with KVM enabled.  deb here: http://dl.rohityadav.cloud/cloudstack-rpi/kernel-19.10/ and install the linux-image and linux-module\n- Then install/setup CloudStack on it (fix some issues around jna.  by manually installing newer libjna-java to /usr/share/cloudstack-agent/lib)\n- Since the host processor is not x86_64.  I had to build a new arm64 (or aarch64) systemvmtemplate: http://dl.rohityadav.cloud/cloudstack-rpi/systemvmtemplate/\n\nI could finally get a 4.13 CloudStack + Adv zone/networking to run on it\nand deployed a KVM based Ubuntu 19.10 environment and NFS storage.\nDeployed a test vm with isolated network.  VR works as expected. Console\nproxy works as well.  for this tested against arm64 openstack Debian 9/10\ntemplates.\n\nI raised the issue of enabling KVM in upstream Ubuntu arm64 build: https://bugs.launchpad.net/ubuntu/+source/linux-raspi2/+bug/1783961\nUbuntu kernel team has come back and future arm64 releases may have \nKVM enabled by default.\n\nLimitation: on my aarch64 env.  it did not support IDE.  therefore all\ndefault bus type for volumes are SCSI by default. With VIRTIO it fails\nsometimes.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-11-12 00:31:05","modifiedFileCount":"5","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-31 15:40:30","commitOrder":7,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","date":"2020-01-31 15:40:30","endLine":1103,"groupId":"21802","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/eb/f0b0bd48d7d2c610f0d73139cf3e1d822fdafb.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":7,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"f5551be5491d234d488d8a499a1852f5efede387","commitMessage":"@@@Merge branch '4.13'\n","date":"2020-01-31 15:40:30","modifiedFileCount":"1","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-03-07 02:56:54","commitOrder":8,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","date":"2020-03-07 02:56:54","endLine":1120,"groupId":"21802","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/94/04be2bd718080fea49718f3c488132735d9544.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":8,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"73122fd0a93a5588c69eed1ae8454c09c8e87039","commitMessage":"@@@[KVM] Direct download agnostic of the storage provider (#3828)\n\n* Remove constraint for NFS storage\n\n* Add new property on agent.properties\n\n* Add free disk space on the host prior template download\n\n* Add unit tests for the free space check\n\n* Fix free space check - retrieve avaiable size in bytes\n\n* Update default location for direct download\n\n* Improve the method to retrieve hosts to retry on depending on the destination pool type and scope\n\n* Verify location for temporary download exists before checking free space\n\n* In progress - refactor and extension\n\n* Refactor and fix\n\n* Last fixes and marvin tests\n\n* Remove unused test file\n\n* Improve logging\n\n* Change default path for direct download\n\n* Fix upload certificate\n\n* Fix ISO failure after retry\n\n* Fix metalink filename mismatch error\n\n* Fix iso direct download\n\n* Fix for direct download ISOs on local storage and shared mount point\n\n* Last fix iso\n\n* Fix VM migration with ISO\n\n* Refactor volume migration to remove secondary storage intermediate\n\n* Fix simulator issue","date":"2020-03-07 02:56:54","modifiedFileCount":"28","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-03-12 23:59:46","commitOrder":9,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","date":"2020-03-12 23:59:46","endLine":1133,"groupId":"21802","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1b/e67858fdb149fe27502607d41f1e0d502b5dd4.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":9,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"efe00aa7e037fb56e00e52c1a3169defbe3fe0d6","commitMessage":"@@@[KVM] Rolling maintenance (#3610)\n\n","date":"2020-03-12 23:59:46","modifiedFileCount":"18","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-03-14 03:56:26","commitOrder":10,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","date":"2020-03-14 03:56:26","endLine":1138,"groupId":"21802","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fd/9075e88908560ca2f20746b00043a9b866a85c.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":10,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"d4b537efa7ed27ef88b735a22493808b61529186","commitMessage":"@@@UEFI Implementation:  Enabled UEFI Support for Guest VM's on Hypervisor KVM. VMware. enabled boot modes [Legacy. Secure] support for UEFI boot with known caveats. (#3638)\n\nCo-authored-by: Pavan Kumar Aravapalli <pavan_aravapalli@accelerite.com>\nCo-authored-by: dahn <daan.hoogland@shapeblue.com>","date":"2020-03-14 03:56:26","modifiedFileCount":"32","status":"M","submitter":"pavanaravapalli"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-03-14 16:22:08","commitOrder":11,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","date":"2020-03-14 16:22:08","endLine":1164,"groupId":"21802","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/79/958ef8ea43825806186c3541fac6744c9de544.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":11,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"750abf355171303f3f9edc8dd464b166f270b812","commitMessage":"@@@FEATURE-3823: kvm agent hooks (#3839)\n\n","date":"2020-03-14 16:22:08","modifiedFileCount":"3","status":"M","submitter":"Bitworks LLC"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-20 18:16:34","commitOrder":12,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","date":"2020-08-20 18:16:34","endLine":1164,"groupId":"21802","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/cc679eca1d5833a4250e182d396c5e8d8893f0.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":12,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"3872bf1ff94659fb234a7dd938ccdf6254fad3e7","commitMessage":"@@@kvm: Enable PVLAN support on L2 networks (#4040)\n\nThis is an extention of #3732 for kvm.\nThis is restricted to ovs > 2.9.2\nSince Xen uses ovs 2.6.  pvlan is unsupported.\nThis also fixes issues of vms on the same pvlan unable to communicate if they're on the same host","date":"2020-08-20 18:16:34","modifiedFileCount":"14","status":"M","submitter":"davidjumani"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-21 18:09:00","commitOrder":13,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        Boolean _iscsiCleanUpEnabled = Boolean.parseBoolean((String)params.get(\"iscsi.session.cleanup.enabled\"));\n\n        if (BooleanUtils.isTrue(_iscsiCleanUpEnabled)) {\n            IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n            final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n            cleanupMonitor.start();\n        } else {\n            s_logger.info(\"iscsi session clean up is disabled\");\n        }\n\n        return true;\n    }\n","date":"2020-08-21 18:09:00","endLine":1171,"groupId":"21802","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a4/81e6808a3ffd83b4462d4e89a03bc347918dfe.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n        final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n        cleanupMonitor.start();\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":13,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"bb73bedb5511880c91abaa409462ba879cb0d7b7","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-08-21 18:09:00","modifiedFileCount":"2","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-02-24 17:28:33","commitOrder":14,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        cachePath = (String) params.get(HOST_CACHE_PATH_PARAMETER);\n        if (org.apache.commons.lang.StringUtils.isBlank(cachePath)) {\n            cachePath = getDefaultCachePath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        Boolean _iscsiCleanUpEnabled = Boolean.parseBoolean((String)params.get(\"iscsi.session.cleanup.enabled\"));\n\n        if (BooleanUtils.isTrue(_iscsiCleanUpEnabled)) {\n            IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n            final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n            cleanupMonitor.start();\n        } else {\n            s_logger.info(\"iscsi session clean up is disabled\");\n        }\n\n        return true;\n    }\n","date":"2021-02-24 17:28:33","endLine":1195,"groupId":"21802","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cf/a5474e61e1df3f1cc53101e50dbc7361e130dc.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        Boolean _iscsiCleanUpEnabled = Boolean.parseBoolean((String)params.get(\"iscsi.session.cleanup.enabled\"));\n\n        if (BooleanUtils.isTrue(_iscsiCleanUpEnabled)) {\n            IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n            final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n            cleanupMonitor.start();\n        } else {\n            s_logger.info(\"iscsi session clean up is disabled\");\n        }\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":14,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"25012","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-15 23:38:16","commitOrder":15,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        cachePath = (String) params.get(HOST_CACHE_PATH_PARAMETER);\n        if (org.apache.commons.lang.StringUtils.isBlank(cachePath)) {\n            cachePath = getDefaultCachePath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.wait\");\n        _migrateWait = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        Boolean _iscsiCleanUpEnabled = Boolean.parseBoolean((String)params.get(\"iscsi.session.cleanup.enabled\"));\n\n        if (BooleanUtils.isTrue(_iscsiCleanUpEnabled)) {\n            IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n            final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n            cleanupMonitor.start();\n        } else {\n            s_logger.info(\"iscsi session clean up is disabled\");\n        }\n\n        return true;\n    }\n","date":"2021-09-15 23:38:16","endLine":1286,"groupId":"103325","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/66/20fc244186685672eeedfb2e0d52c0645f50af.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        boolean success = super.configure(name, params);\n        if (!success) {\n            return false;\n        }\n        try {\n            loadUefiProperties();\n        } catch (FileNotFoundException e) {\n            s_logger.error(\"uefi properties file not found due to: \" + e.getLocalizedMessage());\n        }\n\n        _storage = new JavaStorageLayer();\n        _storage.configure(\"StorageLayer\", params);\n\n        String domrScriptsDir = (String)params.get(\"domr.scripts.dir\");\n        if (domrScriptsDir == null) {\n            domrScriptsDir = getDefaultDomrScriptsDir();\n        }\n\n        String hypervisorScriptsDir = (String)params.get(\"hypervisor.scripts.dir\");\n        if (hypervisorScriptsDir == null) {\n            hypervisorScriptsDir = getDefaultHypervisorScriptsDir();\n        }\n\n        String kvmScriptsDir = (String)params.get(\"kvm.scripts.dir\");\n        if (kvmScriptsDir == null) {\n            kvmScriptsDir = getDefaultKvmScriptsDir();\n        }\n\n        String networkScriptsDir = (String)params.get(\"network.scripts.dir\");\n        if (networkScriptsDir == null) {\n            networkScriptsDir = getDefaultNetworkScriptsDir();\n        }\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        final String bridgeType = (String)params.get(\"network.bridge.type\");\n        if (bridgeType == null) {\n            _bridgeType = BridgeType.NATIVE;\n        } else {\n            _bridgeType = BridgeType.valueOf(bridgeType.toUpperCase());\n        }\n\n        String dpdk = (String) params.get(\"openvswitch.dpdk.enabled\");\n        if (_bridgeType == BridgeType.OPENVSWITCH && Boolean.parseBoolean(dpdk)) {\n            dpdkSupport = true;\n            dpdkOvsPath = (String) params.get(\"openvswitch.dpdk.ovs.path\");\n            if (dpdkOvsPath != null && !dpdkOvsPath.endsWith(\"/\")) {\n                dpdkOvsPath += \"/\";\n            }\n        }\n\n        directDownloadTemporaryDownloadPath = (String) params.get(\"direct.download.temporary.download.location\");\n        if (org.apache.commons.lang.StringUtils.isBlank(directDownloadTemporaryDownloadPath)) {\n            directDownloadTemporaryDownloadPath = getDefaultDirectDownloadTemporaryPath();\n        }\n\n        cachePath = (String) params.get(HOST_CACHE_PATH_PARAMETER);\n        if (org.apache.commons.lang.StringUtils.isBlank(cachePath)) {\n            cachePath = getDefaultCachePath();\n        }\n\n        params.put(\"domr.scripts.dir\", domrScriptsDir);\n\n        _virtRouterResource = new VirtualRoutingResource(this);\n        success = _virtRouterResource.configure(name, params);\n\n        if (!success) {\n            return false;\n        }\n\n        _host = (String)params.get(\"host\");\n        if (_host == null) {\n            _host = \"localhost\";\n        }\n\n        _dcId = (String)params.get(\"zone\");\n        if (_dcId == null) {\n            _dcId = \"default\";\n        }\n\n        _pod = (String)params.get(\"pod\");\n        if (_pod == null) {\n            _pod = \"default\";\n        }\n\n        _clusterId = (String)params.get(\"cluster\");\n\n        _updateHostPasswdPath = Script.findScript(hypervisorScriptsDir, VRScripts.UPDATE_HOST_PASSWD);\n        if (_updateHostPasswdPath == null) {\n            throw new ConfigurationException(\"Unable to find update_host_passwd.sh\");\n        }\n\n        _modifyVlanPath = Script.findScript(networkScriptsDir, \"modifyvlan.sh\");\n        if (_modifyVlanPath == null) {\n            throw new ConfigurationException(\"Unable to find modifyvlan.sh\");\n        }\n\n        _versionstringpath = Script.findScript(kvmScriptsDir, \"versions.sh\");\n        if (_versionstringpath == null) {\n            throw new ConfigurationException(\"Unable to find versions.sh\");\n        }\n\n        _patchScriptPath = Script.findScript(kvmScriptsDir, \"patch.sh\");\n        if (_patchScriptPath == null) {\n            throw new ConfigurationException(\"Unable to find patch.sh\");\n        }\n\n        _heartBeatPath = Script.findScript(kvmScriptsDir, \"kvmheartbeat.sh\");\n        if (_heartBeatPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmheartbeat.sh\");\n        }\n\n        _createvmPath = Script.findScript(storageScriptsDir, \"createvm.sh\");\n        if (_createvmPath == null) {\n            throw new ConfigurationException(\"Unable to find the createvm.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        _resizeVolumePath = Script.findScript(storageScriptsDir, \"resizevolume.sh\");\n        if (_resizeVolumePath == null) {\n            throw new ConfigurationException(\"Unable to find the resizevolume.sh\");\n        }\n\n        _vmActivityCheckPath = Script.findScript(kvmScriptsDir, \"kvmvmactivity.sh\");\n        if (_vmActivityCheckPath == null) {\n            throw new ConfigurationException(\"Unable to find kvmvmactivity.sh\");\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _securityGroupPath = Script.findScript(networkScriptsDir, \"security_group.py\");\n        if (_securityGroupPath == null) {\n            throw new ConfigurationException(\"Unable to find the security_group.py\");\n        }\n\n        _ovsTunnelPath = Script.findScript(networkScriptsDir, \"ovstunnel.py\");\n        if (_ovsTunnelPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovstunnel.py\");\n        }\n\n        _routerProxyPath = Script.findScript(\"scripts/network/domr/\", \"router_proxy.sh\");\n        if (_routerProxyPath == null) {\n            throw new ConfigurationException(\"Unable to find the router_proxy.sh\");\n        }\n\n        _ovsPvlanDhcpHostPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-dhcp-host.sh\");\n        if (_ovsPvlanDhcpHostPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-dhcp-host.sh\");\n        }\n\n        _ovsPvlanVmPath = Script.findScript(networkScriptsDir, \"ovs-pvlan-kvm-vm.sh\");\n        if (_ovsPvlanVmPath == null) {\n            throw new ConfigurationException(\"Unable to find the ovs-pvlan-kvm-vm.sh\");\n        }\n\n        String value = (String)params.get(\"developer\");\n        final boolean isDeveloper = Boolean.parseBoolean(value);\n\n        if (isDeveloper) {\n            params.putAll(getDeveloperProperties());\n        }\n\n        _pool = (String)params.get(\"pool\");\n        if (_pool == null) {\n            _pool = \"/root\";\n        }\n\n        final String instance = (String)params.get(\"instance\");\n\n        _hypervisorType = HypervisorType.getType((String)params.get(\"hypervisor.type\"));\n        if (_hypervisorType == HypervisorType.None) {\n            _hypervisorType = HypervisorType.KVM;\n        }\n\n        String hooksDir = (String)params.get(\"rolling.maintenance.hooks.dir\");\n        value = (String) params.get(\"rolling.maintenance.service.executor.disabled\");\n        rollingMaintenanceExecutor = Boolean.parseBoolean(value) ? new RollingMaintenanceAgentExecutor(hooksDir) :\n                new RollingMaintenanceServiceExecutor(hooksDir);\n\n        _hypervisorURI = (String)params.get(\"hypervisor.uri\");\n        if (_hypervisorURI == null) {\n            _hypervisorURI = LibvirtConnection.getHypervisorURI(_hypervisorType.toString());\n        }\n\n        _networkDirectSourceMode = (String)params.get(\"network.direct.source.mode\");\n        _networkDirectDevice = (String)params.get(\"network.direct.device\");\n\n        String startMac = (String)params.get(\"private.macaddr.start\");\n        if (startMac == null) {\n            startMac = \"00:16:3e:77:e2:a0\";\n        }\n\n        String startIp = (String)params.get(\"private.ipaddr.start\");\n        if (startIp == null) {\n            startIp = \"192.168.166.128\";\n        }\n\n        _pingTestPath = Script.findScript(kvmScriptsDir, \"pingtest.sh\");\n        if (_pingTestPath == null) {\n            throw new ConfigurationException(\"Unable to find the pingtest.sh\");\n        }\n\n        _linkLocalBridgeName = (String)params.get(\"private.bridge.name\");\n        if (_linkLocalBridgeName == null) {\n            if (isDeveloper) {\n                _linkLocalBridgeName = \"cloud-\" + instance + \"-0\";\n            } else {\n                _linkLocalBridgeName = \"cloud0\";\n            }\n        }\n\n        _publicBridgeName = (String)params.get(\"public.network.device\");\n        if (_publicBridgeName == null) {\n            _publicBridgeName = \"cloudbr0\";\n        }\n\n        _privBridgeName = (String)params.get(\"private.network.device\");\n        if (_privBridgeName == null) {\n            _privBridgeName = \"cloudbr1\";\n        }\n\n        _guestBridgeName = (String)params.get(\"guest.network.device\");\n        if (_guestBridgeName == null) {\n            _guestBridgeName = _privBridgeName;\n        }\n\n        _privNwName = (String)params.get(\"private.network.name\");\n        if (_privNwName == null) {\n            if (isDeveloper) {\n                _privNwName = \"cloud-\" + instance + \"-private\";\n            } else {\n                _privNwName = \"cloud-private\";\n            }\n        }\n\n        _localStoragePath = (String)params.get(\"local.storage.path\");\n        if (_localStoragePath == null) {\n            _localStoragePath = \"/var/lib/libvirt/images/\";\n        }\n\n        \n        _qemuSocketsPath = new File(\"/var/lib/libvirt/qemu\");\n        String _qemuSocketsPathVar = (String)params.get(\"qemu.sockets.path\");\n        if (_qemuSocketsPathVar != null && StringUtils.isNotBlank(_qemuSocketsPathVar)) {\n            _qemuSocketsPath = new File(_qemuSocketsPathVar);\n        }\n\n        final File storagePath = new File(_localStoragePath);\n        _localStoragePath = storagePath.getAbsolutePath();\n\n        _localStorageUUID = (String)params.get(\"local.storage.uuid\");\n        if (_localStorageUUID == null) {\n            _localStorageUUID = UUID.randomUUID().toString();\n        }\n\n        value = (String)params.get(\"scripts.timeout\");\n        _timeout = Duration.standardSeconds(NumbersUtil.parseInt(value, 30 * 60));\n\n        value = (String)params.get(\"stop.script.timeout\");\n        _stopTimeout = NumbersUtil.parseInt(value, 120) * 1000;\n\n        value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n\n        value = (String) params.get(\"vm.memballoon.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noMemBalloon = true;\n        }\n\n        _videoHw = (String) params.get(\"vm.video.hardware\");\n        value = (String) params.get(\"vm.video.ram\");\n        _videoRam = NumbersUtil.parseInt(value, 0);\n\n        value = (String)params.get(\"host.reserved.mem.mb\");\n        \r\n        _dom0MinMem = NumbersUtil.parseInt(value, 1024) * 1024* 1024L;\n\n        value = (String)params.get(\"host.overcommit.mem.mb\");\n        \r\n        \r\n        _dom0OvercommitMem = NumbersUtil.parseInt(value, 0) * 1024 * 1024L;\n\n        value = (String) params.get(\"kvmclock.disable\");\n        if (Boolean.parseBoolean(value)) {\n            _noKvmClock = true;\n        }\n\n        value = (String) params.get(\"vm.rng.enable\");\n        if (Boolean.parseBoolean(value)) {\n            _rngEnable = true;\n\n            value = (String) params.get(\"vm.rng.model\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngBackendModel = RngBackendModel.valueOf(value.toUpperCase());\n            }\n\n            value = (String) params.get(\"vm.rng.path\");\n            if (!Strings.isNullOrEmpty(value)) {\n                _rngPath = value;\n            }\n\n            value = (String) params.get(\"vm.rng.rate.bytes\");\n            _rngRateBytes = NumbersUtil.parseInt(value, new Integer(_rngRateBytes));\n\n            value = (String) params.get(\"vm.rng.rate.period\");\n            _rngRatePeriod = NumbersUtil.parseInt(value, new Integer(_rngRatePeriod));\n        }\n\n        value = (String) params.get(\"vm.watchdog.model\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogModel = WatchDogModel.valueOf(value.toUpperCase());\n        }\n\n        value = (String) params.get(\"vm.watchdog.action\");\n        if (!Strings.isNullOrEmpty(value)) {\n            _watchDogAction = WatchDogAction.valueOf(value.toUpperCase());\n        }\n\n        LibvirtConnection.initialize(_hypervisorURI);\n        Connect conn = null;\n        try {\n            conn = LibvirtConnection.getConnection();\n\n            if (_bridgeType == BridgeType.OPENVSWITCH) {\n                if (conn.getLibVirVersion() < 10 * 1000 + 0) {\n                    throw new ConfigurationException(\"Libvirt version 0.10.0 required for openvswitch support, but version \" + conn.getLibVirVersion() + \" detected\");\n                }\n            }\n        } catch (final LibvirtException e) {\n            throw new CloudRuntimeException(e.getMessage());\n        }\n\n        \r\n        try {\n            Network network = conn.networkLookupByName(\"default\");\n            s_logger.debug(\"Found libvirt default network, destroying it and setting autostart to false\");\n            if (network.isActive() == 1) {\n                network.destroy();\n            }\n            if (network.getAutostart()) {\n                network.setAutostart(false);\n            }\n        } catch (final LibvirtException e) {\n            s_logger.warn(\"Ignoring libvirt error.\", e);\n        }\n\n        if (HypervisorType.KVM == _hypervisorType) {\n            \n            if (!IsHVMEnabled(conn)) {\n                throw new ConfigurationException(\"NO HVM support on this machine, please make sure: \" + \"1. VT/SVM is supported by your CPU, or is enabled in BIOS. \"\n                        + \"2. kvm modules are loaded (kvm, kvm_amd|kvm_intel)\");\n            }\n        }\n\n        _hypervisorPath = getHypervisorPath(conn);\n        try {\n            _hvVersion = conn.getVersion();\n            _hvVersion = _hvVersion % 1000000 / 1000;\n            _hypervisorLibvirtVersion = conn.getLibVirVersion();\n            _hypervisorQemuVersion = conn.getVersion();\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        final String cpuArchOverride = (String)params.get(\"guest.cpu.arch\");\n        if (!Strings.isNullOrEmpty(cpuArchOverride)) {\n            _guestCpuArch = cpuArchOverride;\n            s_logger.info(\"Using guest CPU architecture: \" + _guestCpuArch);\n        }\n\n        _guestCpuMode = (String)params.get(\"guest.cpu.mode\");\n        if (_guestCpuMode != null) {\n            _guestCpuModel = (String)params.get(\"guest.cpu.model\");\n\n            if (_hypervisorLibvirtVersion < 9 * 1000 + 10) {\n                s_logger.warn(\"Libvirt version 0.9.10 required for guest cpu mode, but version \" + prettyVersion(_hypervisorLibvirtVersion) +\n                        \" detected, so it will be disabled\");\n                _guestCpuMode = \"\";\n                _guestCpuModel = \"\";\n            }\n            params.put(\"guest.cpu.mode\", _guestCpuMode);\n            params.put(\"guest.cpu.model\", _guestCpuModel);\n        }\n\n        final String cpuFeatures = (String)params.get(\"guest.cpu.features\");\n        if (cpuFeatures != null) {\n            _cpuFeatures = new ArrayList<String>();\n            for (final String feature: cpuFeatures.split(\" \")) {\n                if (!feature.isEmpty()) {\n                    _cpuFeatures.add(feature);\n                }\n            }\n        }\n\n        final String[] info = NetUtils.getNetworkParams(_privateNic);\n\n        _monitor = new KVMHAMonitor(null, info[0], _heartBeatPath);\n        final Thread ha = new Thread(_monitor);\n        ha.start();\n\n        _storagePoolMgr = new KVMStoragePoolManager(_storage, _monitor);\n\n        _sysvmISOPath = (String)params.get(\"systemvm.iso.path\");\n        if (_sysvmISOPath == null) {\n            final String[] isoPaths = {\"/usr/share/cloudstack-common/vms/systemvm.iso\"};\n            for (final String isoPath : isoPaths) {\n                if (_storage.exists(isoPath)) {\n                    _sysvmISOPath = isoPath;\n                    break;\n                }\n            }\n            if (_sysvmISOPath == null) {\n                s_logger.debug(\"Can't find system vm ISO\");\n            }\n        }\n\n        final Map<String, String> bridges = new HashMap<String, String>();\n\n        params.put(\"libvirt.host.bridges\", bridges);\n        params.put(\"libvirt.host.pifs\", _pifs);\n\n        params.put(\"libvirt.computing.resource\", this);\n        params.put(\"libvirtVersion\", _hypervisorLibvirtVersion);\n\n\n        configureVifDrivers(params);\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        if (_pifs.get(\"private\") == null) {\n            s_logger.error(\"Failed to get private nic name\");\n            throw new ConfigurationException(\"Failed to get private nic name\");\n        }\n\n        if (_pifs.get(\"public\") == null) {\n            s_logger.error(\"Failed to get public nic name\");\n            throw new ConfigurationException(\"Failed to get public nic name\");\n        }\n        s_logger.debug(\"Found pif: \" + _pifs.get(\"private\") + \" on \" + _privBridgeName + \", pif: \" + _pifs.get(\"public\") + \" on \" + _publicBridgeName);\n\n        _canBridgeFirewall = canBridgeFirewall(_pifs.get(\"public\"));\n\n        _localGateway = Script.runSimpleBashScript(\"ip route show default 0.0.0.0/0|head -1|awk '{print $3}'\");\n        if (_localGateway == null) {\n            s_logger.warn(\"No default IPv4 gateway found\");\n        }\n\n        _mountPoint = (String)params.get(\"mount.path\");\n        if (_mountPoint == null) {\n            _mountPoint = \"/mnt\";\n        }\n\n        value = (String) params.get(\"vm.migrate.downtime\");\n        _migrateDowntime = NumbersUtil.parseInt(value, -1);\n\n        value = (String) params.get(\"vm.migrate.pauseafter\");\n        _migratePauseAfter = NumbersUtil.parseInt(value, -1);\n\n        configureAgentHooks(params);\n\n        value = (String)params.get(\"vm.migrate.speed\");\n        _migrateSpeed = NumbersUtil.parseInt(value, -1);\n        if (_migrateSpeed == -1) {\n            \r\n            _migrateSpeed = 0;\n            final String speed = Script.runSimpleBashScript(\"ethtool \" + _pifs.get(\"public\") + \" |grep Speed | cut -d \\\\  -f 2\");\n            if (speed != null) {\n                final String[] tokens = speed.split(\"M\");\n                if (tokens.length == 2) {\n                    try {\n                        _migrateSpeed = Integer.parseInt(tokens[0]);\n                    } catch (final NumberFormatException e) {\n                        s_logger.trace(\"Ignoring migrateSpeed extraction error.\", e);\n                    }\n                    s_logger.debug(\"device \" + _pifs.get(\"public\") + \" has speed: \" + String.valueOf(_migrateSpeed));\n                }\n            }\n            params.put(\"vm.migrate.speed\", String.valueOf(_migrateSpeed));\n        }\n\n        bridges.put(\"linklocal\", _linkLocalBridgeName);\n        bridges.put(\"public\", _publicBridgeName);\n        bridges.put(\"private\", _privBridgeName);\n        bridges.put(\"guest\", _guestBridgeName);\n\n        getVifDriver(TrafficType.Control).createControlNetwork(_linkLocalBridgeName);\n\n        configureDiskActivityChecks(params);\n\n        final KVMStorageProcessor storageProcessor = new KVMStorageProcessor(_storagePoolMgr, this);\n        storageProcessor.configure(name, params);\n        storageHandler = new StorageSubsystemCommandHandlerBase(storageProcessor);\n\n        Boolean _iscsiCleanUpEnabled = Boolean.parseBoolean((String)params.get(\"iscsi.session.cleanup.enabled\"));\n\n        if (BooleanUtils.isTrue(_iscsiCleanUpEnabled)) {\n            IscsiStorageCleanupMonitor isciCleanupMonitor = new IscsiStorageCleanupMonitor();\n            final Thread cleanupMonitor = new Thread(isciCleanupMonitor);\n            cleanupMonitor.start();\n        } else {\n            s_logger.info(\"iscsi session clean up is disabled\");\n        }\n\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":15,"curCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":160,"groupId":"103325","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalStringname@finalMap<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        storageLayer = new JavaStorageLayer();\n        storageLayer.configure(\"StorageLayer\", params);\n\n        String storageScriptsDir = (String)params.get(\"storage.scripts.dir\");\n        if (storageScriptsDir == null) {\n            storageScriptsDir = getDefaultStorageScriptsDir();\n        }\n\n        _createTmplPath = Script.findScript(storageScriptsDir, \"createtmplt.sh\");\n        if (_createTmplPath == null) {\n            throw new ConfigurationException(\"Unable to find the createtmplt.sh\");\n        }\n\n        _manageSnapshotPath = Script.findScript(storageScriptsDir, \"managesnapshot.sh\");\n        if (_manageSnapshotPath == null) {\n            throw new ConfigurationException(\"Unable to find the managesnapshot.sh\");\n        }\n\n        final String value = (String)params.get(\"cmds.timeout\");\n        _cmdsTimeout = NumbersUtil.parseInt(value, 7200) * 1000;\n        return true;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"}],"commitId":"95ef292860457c1cbf08548b9e16cafcaa742b5c","commitMessage":"@@@kvm: honor migrate.wait and abort vm migration job (#5388)\n\n* kvm: honor migrate.wait and abort vm migration job\n\n* kvm: propogate migratewait to all cloudstack agents on kvm hosts\n\n* update #5388\n\n* update #5388: display error msg","date":"2021-09-15 23:38:16","modifiedFileCount":"4","status":"M","submitter":"Wei Zhou"}]
