[{"authorTime":"2021-08-17 01:29:34","codes":[{"authorDate":"2021-08-17 01:29:34","commitOrder":8,"curCode":"    public NetworkResponse createNetworkResponse(ResponseView view, Network network) {\n        \r\n        \r\n        NetworkProfile profile = ApiDBUtils.getNetworkProfile(network.getId());\n        NetworkResponse response = new NetworkResponse();\n        response.setId(network.getUuid());\n        response.setName(network.getName());\n        response.setDisplaytext(network.getDisplayText());\n        if (network.getBroadcastDomainType() != null) {\n            response.setBroadcastDomainType(network.getBroadcastDomainType().toString());\n        }\n\n        if (network.getTrafficType() != null) {\n            response.setTrafficType(network.getTrafficType().name());\n        }\n\n        if (network.getGuestType() != null) {\n            response.setType(network.getGuestType().toString());\n        }\n\n        response.setGateway(network.getGateway());\n\n        \r\n        response.setCidr(network.getCidr());\n        if (network.getNetworkCidr() != null) {\n            response.setNetworkCidr((network.getNetworkCidr()));\n        }\n        \r\n        \r\n        \r\n        \r\n        if (network.getNetworkCidr() != null) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));\n        }\n        if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));\n        }\n\n        response.setIp6Gateway(network.getIp6Gateway());\n        response.setIp6Cidr(network.getIp6Cidr());\n\n        \r\n        \r\n        String reservation = null;\n        if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr()))) {\n            String[] guestVmCidrPair = network.getCidr().split(\"\\\\/\");\n            String[] guestCidrPair = network.getNetworkCidr().split(\"\\\\/\");\n\n            Long guestVmCidrSize = Long.valueOf(guestVmCidrPair[1]);\n            Long guestCidrSize = Long.valueOf(guestCidrPair[1]);\n\n            String[] guestVmIpRange = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], guestVmCidrSize);\n            String[] guestIpRange = NetUtils.getIpRangeFromCidr(guestCidrPair[0], guestCidrSize);\n            long startGuestIp = NetUtils.ip2Long(guestIpRange[0]);\n            long endGuestIp = NetUtils.ip2Long(guestIpRange[1]);\n            long startVmIp = NetUtils.ip2Long(guestVmIpRange[0]);\n            long endVmIp = NetUtils.ip2Long(guestVmIpRange[1]);\n\n            if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n            if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1));\n            }\n            if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1) + \" ,  \" + NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n        }\n        response.setReservedIpRange(reservation);\n\n        \r\n        if (network.getBroadcastUri() != null && view == ResponseView.Full) {\n            String broadcastUri = network.getBroadcastUri().toString();\n            response.setBroadcastUri(broadcastUri);\n            String vlan = \"N/A\";\n            switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {\n            case Vlan:\n            case Vxlan:\n                vlan = BroadcastDomainType.getValue(network.getBroadcastUri());\n                break;\n            }\n            \r\n            response.setVlan(vlan);\n        }\n\n        \r\n        if (view == ResponseView.Full) {\n            Map<String, String> details = new HashMap<>();\n            for (NetworkDetailVO detail: networkDetailsDao.listDetails(network.getId())) {\n                details.put(detail.getName(),detail.getValue());\n            }\n            response.setDetails(details);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(network.getDataCenterId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n        if (network.getPhysicalNetworkId() != null) {\n            PhysicalNetworkVO pnet = ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());\n            response.setPhysicalNetworkId(pnet.getUuid());\n        }\n\n        \r\n        NetworkOffering networkOffering = ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());\n        if (networkOffering != null) {\n            response.setNetworkOfferingId(networkOffering.getUuid());\n            response.setNetworkOfferingName(networkOffering.getName());\n            response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());\n            response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());\n            response.setIsSystem(networkOffering.isSystemOnly());\n            response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());\n            response.setIsPersistent(networkOffering.isPersistent());\n        }\n\n        if (network.getAclType() != null) {\n            response.setAclType(network.getAclType().toString());\n        }\n        response.setDisplayNetwork(network.getDisplayNetwork());\n        response.setState(network.getState().toString());\n        response.setRestartRequired(network.isRestartRequired());\n        NetworkVO nw = ApiDBUtils.findNetworkById(network.getRelated());\n        if (nw != null) {\n            response.setRelated(nw.getUuid());\n        }\n        response.setNetworkDomain(network.getNetworkDomain());\n\n        response.setDns1(profile.getDns1());\n        response.setDns2(profile.getDns2());\n        \r\n        Map<Service, Map<Capability, String>> serviceCapabilitiesMap = ApiDBUtils.getNetworkCapabilities(network.getId(), network.getDataCenterId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        if (serviceCapabilitiesMap != null) {\n            for (Map.Entry<Service, Map<Capability, String>>entry : serviceCapabilitiesMap.entrySet()) {\n                Service service = entry.getKey();\n                ServiceResponse serviceResponse = new ServiceResponse();\n                \r\n                if (service == Service.Gateway) {\n                    continue;\n                }\n                serviceResponse.setName(service.getName());\n\n                \r\n                List<CapabilityResponse> capabilityResponses = new ArrayList<CapabilityResponse>();\n                Map<Capability, String> serviceCapabilities = entry.getValue();\n                if (serviceCapabilities != null) {\n                    for (Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {\n                        Capability capability = ser_cap_entries.getKey();\n                        CapabilityResponse capabilityResponse = new CapabilityResponse();\n                        String capabilityValue = ser_cap_entries.getValue();\n                        capabilityResponse.setName(capability.getName());\n                        capabilityResponse.setValue(capabilityValue);\n                        capabilityResponse.setObjectName(\"capability\");\n                        capabilityResponses.add(capabilityResponse);\n                    }\n                    serviceResponse.setCapabilities(capabilityResponses);\n                }\n\n                serviceResponse.setObjectName(\"service\");\n                serviceResponses.add(serviceResponse);\n            }\n        }\n        response.setServices(serviceResponses);\n\n        if (network.getAclType() == null || network.getAclType() == ACLType.Account) {\n            populateOwner(response, network);\n        } else {\n            \r\n            Pair<Long, Boolean> domainNetworkDetails = ApiDBUtils.getDomainNetworkDetails(network.getId());\n            if (domainNetworkDetails.first() != null) {\n                Domain domain = ApiDBUtils.findDomainById(domainNetworkDetails.first());\n                if (domain != null) {\n                    response.setDomainId(domain.getUuid());\n                }\n            }\n            response.setSubdomainAccess(domainNetworkDetails.second());\n        }\n\n        Long dedicatedDomainId = ApiDBUtils.getDedicatedNetworkDomain(network.getId());\n        if (dedicatedDomainId != null) {\n            Domain domain = ApiDBUtils.findDomainById(dedicatedDomainId);\n            if (domain != null) {\n                response.setDomainId(domain.getUuid());\n                response.setDomainName(domain.getName());\n            }\n\n        }\n\n        response.setSpecifyIpRanges(network.getSpecifyIpRanges());\n        if (network.getVpcId() != null) {\n            Vpc vpc = ApiDBUtils.findVpcById(network.getVpcId());\n            if (vpc != null) {\n                response.setVpcId(vpc.getUuid());\n                response.setVpcName(vpc.getName());\n            }\n        }\n        response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network, network.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n\n        if (network.getNetworkACLId() != null) {\n            NetworkACL acl = ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());\n            if (acl != null) {\n                response.setAclId(acl.getUuid());\n                response.setAclName(acl.getName());\n            }\n        }\n\n        response.setStrechedL2Subnet(network.isStrechedL2Network());\n        if (network.isStrechedL2Network()) {\n            Set<String> networkSpannedZones = new  HashSet<String>();\n            List<VMInstanceVO> vmInstances = new ArrayList<VMInstanceVO>();\n            vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));\n            vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));\n            for (VirtualMachine vm : vmInstances) {\n                DataCenter vmZone = ApiDBUtils.findZoneById(vm.getDataCenterId());\n                networkSpannedZones.add(vmZone.getUuid());\n            }\n            response.setNetworkSpannedZones(networkSpannedZones);\n        }\n        response.setExternalId(network.getExternalId());\n        response.setRedundantRouter(network.isRedundant());\n        response.setCreated(network.getCreated());\n\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"networkId\", sb.entity().getNetworkId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"networkId\", network.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        response.setBytesReceived(bytesReceived);\n        response.setBytesSent(bytesSent);\n\n        response.setObjectName(\"network\");\n        return response;\n    }\n","date":"2021-08-17 01:29:34","endLine":2379,"groupId":"18524","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createNetworkResponse","params":"(ResponseViewview@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5d/c6412ba6f6ac3bc10beb67e481e72d76ea4537.src","preCode":"    public NetworkResponse createNetworkResponse(ResponseView view, Network network) {\n        \r\n        \r\n        NetworkProfile profile = ApiDBUtils.getNetworkProfile(network.getId());\n        NetworkResponse response = new NetworkResponse();\n        response.setId(network.getUuid());\n        response.setName(network.getName());\n        response.setDisplaytext(network.getDisplayText());\n        if (network.getBroadcastDomainType() != null) {\n            response.setBroadcastDomainType(network.getBroadcastDomainType().toString());\n        }\n\n        if (network.getTrafficType() != null) {\n            response.setTrafficType(network.getTrafficType().name());\n        }\n\n        if (network.getGuestType() != null) {\n            response.setType(network.getGuestType().toString());\n        }\n\n        response.setGateway(network.getGateway());\n\n        \r\n        response.setCidr(network.getCidr());\n        if (network.getNetworkCidr() != null) {\n            response.setNetworkCidr((network.getNetworkCidr()));\n        }\n        \r\n        \r\n        \r\n        \r\n        if (network.getNetworkCidr() != null) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));\n        }\n        if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));\n        }\n\n        response.setIp6Gateway(network.getIp6Gateway());\n        response.setIp6Cidr(network.getIp6Cidr());\n\n        \r\n        \r\n        String reservation = null;\n        if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr()))) {\n            String[] guestVmCidrPair = network.getCidr().split(\"\\\\/\");\n            String[] guestCidrPair = network.getNetworkCidr().split(\"\\\\/\");\n\n            Long guestVmCidrSize = Long.valueOf(guestVmCidrPair[1]);\n            Long guestCidrSize = Long.valueOf(guestCidrPair[1]);\n\n            String[] guestVmIpRange = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], guestVmCidrSize);\n            String[] guestIpRange = NetUtils.getIpRangeFromCidr(guestCidrPair[0], guestCidrSize);\n            long startGuestIp = NetUtils.ip2Long(guestIpRange[0]);\n            long endGuestIp = NetUtils.ip2Long(guestIpRange[1]);\n            long startVmIp = NetUtils.ip2Long(guestVmIpRange[0]);\n            long endVmIp = NetUtils.ip2Long(guestVmIpRange[1]);\n\n            if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n            if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1));\n            }\n            if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1) + \" ,  \" + NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n        }\n        response.setReservedIpRange(reservation);\n\n        \r\n        if (network.getBroadcastUri() != null && view == ResponseView.Full) {\n            String broadcastUri = network.getBroadcastUri().toString();\n            response.setBroadcastUri(broadcastUri);\n            String vlan = \"N/A\";\n            switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {\n            case Vlan:\n            case Vxlan:\n                vlan = BroadcastDomainType.getValue(network.getBroadcastUri());\n                break;\n            }\n            \r\n            response.setVlan(vlan);\n        }\n\n        \r\n        if (view == ResponseView.Full) {\n            Map<String, String> details = new HashMap<>();\n            for (NetworkDetailVO detail: networkDetailsDao.listDetails(network.getId())) {\n                details.put(detail.getName(),detail.getValue());\n            }\n            response.setDetails(details);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(network.getDataCenterId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n        if (network.getPhysicalNetworkId() != null) {\n            PhysicalNetworkVO pnet = ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());\n            response.setPhysicalNetworkId(pnet.getUuid());\n        }\n\n        \r\n        NetworkOffering networkOffering = ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());\n        if (networkOffering != null) {\n            response.setNetworkOfferingId(networkOffering.getUuid());\n            response.setNetworkOfferingName(networkOffering.getName());\n            response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());\n            response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());\n            response.setIsSystem(networkOffering.isSystemOnly());\n            response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());\n            response.setIsPersistent(networkOffering.isPersistent());\n        }\n\n        if (network.getAclType() != null) {\n            response.setAclType(network.getAclType().toString());\n        }\n        response.setDisplayNetwork(network.getDisplayNetwork());\n        response.setState(network.getState().toString());\n        response.setRestartRequired(network.isRestartRequired());\n        NetworkVO nw = ApiDBUtils.findNetworkById(network.getRelated());\n        if (nw != null) {\n            response.setRelated(nw.getUuid());\n        }\n        response.setNetworkDomain(network.getNetworkDomain());\n\n        response.setDns1(profile.getDns1());\n        response.setDns2(profile.getDns2());\n        \r\n        Map<Service, Map<Capability, String>> serviceCapabilitiesMap = ApiDBUtils.getNetworkCapabilities(network.getId(), network.getDataCenterId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        if (serviceCapabilitiesMap != null) {\n            for (Map.Entry<Service, Map<Capability, String>>entry : serviceCapabilitiesMap.entrySet()) {\n                Service service = entry.getKey();\n                ServiceResponse serviceResponse = new ServiceResponse();\n                \r\n                if (service == Service.Gateway) {\n                    continue;\n                }\n                serviceResponse.setName(service.getName());\n\n                \r\n                List<CapabilityResponse> capabilityResponses = new ArrayList<CapabilityResponse>();\n                Map<Capability, String> serviceCapabilities = entry.getValue();\n                if (serviceCapabilities != null) {\n                    for (Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {\n                        Capability capability = ser_cap_entries.getKey();\n                        CapabilityResponse capabilityResponse = new CapabilityResponse();\n                        String capabilityValue = ser_cap_entries.getValue();\n                        capabilityResponse.setName(capability.getName());\n                        capabilityResponse.setValue(capabilityValue);\n                        capabilityResponse.setObjectName(\"capability\");\n                        capabilityResponses.add(capabilityResponse);\n                    }\n                    serviceResponse.setCapabilities(capabilityResponses);\n                }\n\n                serviceResponse.setObjectName(\"service\");\n                serviceResponses.add(serviceResponse);\n            }\n        }\n        response.setServices(serviceResponses);\n\n        if (network.getAclType() == null || network.getAclType() == ACLType.Account) {\n            populateOwner(response, network);\n        } else {\n            \r\n            Pair<Long, Boolean> domainNetworkDetails = ApiDBUtils.getDomainNetworkDetails(network.getId());\n            if (domainNetworkDetails.first() != null) {\n                Domain domain = ApiDBUtils.findDomainById(domainNetworkDetails.first());\n                if (domain != null) {\n                    response.setDomainId(domain.getUuid());\n                }\n            }\n            response.setSubdomainAccess(domainNetworkDetails.second());\n        }\n\n        Long dedicatedDomainId = ApiDBUtils.getDedicatedNetworkDomain(network.getId());\n        if (dedicatedDomainId != null) {\n            Domain domain = ApiDBUtils.findDomainById(dedicatedDomainId);\n            if (domain != null) {\n                response.setDomainId(domain.getUuid());\n                response.setDomainName(domain.getName());\n            }\n\n        }\n\n        response.setSpecifyIpRanges(network.getSpecifyIpRanges());\n        if (network.getVpcId() != null) {\n            Vpc vpc = ApiDBUtils.findVpcById(network.getVpcId());\n            if (vpc != null) {\n                response.setVpcId(vpc.getUuid());\n                response.setVpcName(vpc.getName());\n            }\n        }\n        response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network, network.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n\n        if (network.getNetworkACLId() != null) {\n            NetworkACL acl = ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());\n            if (acl != null) {\n                response.setAclId(acl.getUuid());\n                response.setAclName(acl.getName());\n            }\n        }\n\n        response.setStrechedL2Subnet(network.isStrechedL2Network());\n        if (network.isStrechedL2Network()) {\n            Set<String> networkSpannedZones = new  HashSet<String>();\n            List<VMInstanceVO> vmInstances = new ArrayList<VMInstanceVO>();\n            vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));\n            vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));\n            for (VirtualMachine vm : vmInstances) {\n                DataCenter vmZone = ApiDBUtils.findZoneById(vm.getDataCenterId());\n                networkSpannedZones.add(vmZone.getUuid());\n            }\n            response.setNetworkSpannedZones(networkSpannedZones);\n        }\n        response.setExternalId(network.getExternalId());\n        response.setRedundantRouter(network.isRedundant());\n        response.setCreated(network.getCreated());\n\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"networkId\", sb.entity().getNetworkId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"networkId\", network.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        response.setBytesReceived(bytesReceived);\n        response.setBytesSent(bytesSent);\n\n        response.setObjectName(\"network\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2132,"status":"MB"},{"authorDate":"2021-08-17 01:29:34","commitOrder":8,"curCode":"    private void addVmRxTxDataToResponse(UserVmJoinVO userVm, UserVmResponse userVmResponse) {\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"deviceId\", sb.entity().getDeviceId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"deviceId\", userVm.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        userVmResponse.setBytesReceived(bytesReceived);\n        userVmResponse.setBytesSent(bytesSent);\n    }\n","date":"2021-08-17 01:29:34","endLine":392,"groupId":"18524","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addVmRxTxDataToResponse","params":"(UserVmJoinVOuserVm@UserVmResponseuserVmResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ff/4511bf23bbb9288e91452782aba669ab7aa272.src","preCode":"    private void addVmRxTxDataToResponse(UserVmJoinVO userVm, UserVmResponse userVmResponse) {\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"deviceId\", sb.entity().getDeviceId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"deviceId\", userVm.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        userVmResponse.setBytesReceived(bytesReceived);\n        userVmResponse.setBytesSent(bytesSent);\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/UserVmJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"B"}],"commitId":"00e014ca58248d6d9c5b7f04aaeef739d261f2e5","commitMessage":"@@@Add sent and received bytes to listNetworks and listVirtualMachines. (#4776)\n\n* Add sent and receivedbytes to listNetworks and listVirtualMachines.\n\nDisplay the traffic data in networks and vm api response\n\n* follow code convention\n\n* remove final keyword\n\nCo-authored-by: Rakesh Venkatesh <rakeshv@apache.org>","date":"2021-08-17 01:29:34","modifiedFileCount":"4","status":"M","submitter":"Rakesh"},{"authorTime":"2021-08-17 01:29:34","codes":[{"authorDate":"2021-09-08 12:44:06","commitOrder":9,"curCode":"    public NetworkResponse createNetworkResponse(ResponseView view, Network network) {\n        \r\n        \r\n        NetworkProfile profile = ApiDBUtils.getNetworkProfile(network.getId());\n        NetworkResponse response = new NetworkResponse();\n        response.setId(network.getUuid());\n        response.setName(network.getName());\n        response.setDisplaytext(network.getDisplayText());\n        if (network.getBroadcastDomainType() != null) {\n            response.setBroadcastDomainType(network.getBroadcastDomainType().toString());\n        }\n\n        if (network.getTrafficType() != null) {\n            response.setTrafficType(network.getTrafficType().name());\n        }\n\n        if (network.getGuestType() != null) {\n            response.setType(network.getGuestType().toString());\n        }\n\n        response.setGateway(network.getGateway());\n\n        \r\n        response.setCidr(network.getCidr());\n        if (network.getNetworkCidr() != null) {\n            response.setNetworkCidr((network.getNetworkCidr()));\n        }\n        \r\n        \r\n        \r\n        \r\n        if (network.getNetworkCidr() != null) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));\n        }\n        if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));\n        }\n\n        response.setIp6Gateway(network.getIp6Gateway());\n        response.setIp6Cidr(network.getIp6Cidr());\n\n        \r\n        \r\n        String reservation = null;\n        if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr()))) {\n            String[] guestVmCidrPair = network.getCidr().split(\"\\\\/\");\n            String[] guestCidrPair = network.getNetworkCidr().split(\"\\\\/\");\n\n            Long guestVmCidrSize = Long.valueOf(guestVmCidrPair[1]);\n            Long guestCidrSize = Long.valueOf(guestCidrPair[1]);\n\n            String[] guestVmIpRange = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], guestVmCidrSize);\n            String[] guestIpRange = NetUtils.getIpRangeFromCidr(guestCidrPair[0], guestCidrSize);\n            long startGuestIp = NetUtils.ip2Long(guestIpRange[0]);\n            long endGuestIp = NetUtils.ip2Long(guestIpRange[1]);\n            long startVmIp = NetUtils.ip2Long(guestVmIpRange[0]);\n            long endVmIp = NetUtils.ip2Long(guestVmIpRange[1]);\n\n            if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n            if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1));\n            }\n            if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1) + \" ,  \" + NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n        }\n        response.setReservedIpRange(reservation);\n\n        \r\n        if (network.getBroadcastUri() != null && view == ResponseView.Full) {\n            String broadcastUri = network.getBroadcastUri().toString();\n            response.setBroadcastUri(broadcastUri);\n            String vlan = \"N/A\";\n            switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {\n            case Vlan:\n            case Vxlan:\n                vlan = BroadcastDomainType.getValue(network.getBroadcastUri());\n                break;\n            }\n            \r\n            response.setVlan(vlan);\n        }\n\n        \r\n        if (view == ResponseView.Full) {\n            Map<String, String> details = new HashMap<>();\n            for (NetworkDetailVO detail: networkDetailsDao.listDetails(network.getId())) {\n                details.put(detail.getName(),detail.getValue());\n            }\n            response.setDetails(details);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(network.getDataCenterId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n        if (network.getPhysicalNetworkId() != null) {\n            PhysicalNetworkVO pnet = ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());\n            response.setPhysicalNetworkId(pnet.getUuid());\n        }\n\n        \r\n        NetworkOffering networkOffering = ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());\n        if (networkOffering != null) {\n            response.setNetworkOfferingId(networkOffering.getUuid());\n            response.setNetworkOfferingName(networkOffering.getName());\n            response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());\n            response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());\n            response.setIsSystem(networkOffering.isSystemOnly());\n            response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());\n            response.setIsPersistent(networkOffering.isPersistent());\n        }\n\n        if (network.getAclType() != null) {\n            response.setAclType(network.getAclType().toString());\n        }\n        response.setDisplayNetwork(network.getDisplayNetwork());\n        response.setState(network.getState().toString());\n        response.setRestartRequired(network.isRestartRequired());\n        NetworkVO nw = ApiDBUtils.findNetworkById(network.getRelated());\n        if (nw != null) {\n            response.setRelated(nw.getUuid());\n        }\n        response.setNetworkDomain(network.getNetworkDomain());\n\n        response.setDns1(profile.getDns1());\n        response.setDns2(profile.getDns2());\n        \r\n        Map<Service, Map<Capability, String>> serviceCapabilitiesMap = ApiDBUtils.getNetworkCapabilities(network.getId(), network.getDataCenterId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        if (serviceCapabilitiesMap != null) {\n            for (Map.Entry<Service, Map<Capability, String>>entry : serviceCapabilitiesMap.entrySet()) {\n                Service service = entry.getKey();\n                ServiceResponse serviceResponse = new ServiceResponse();\n                \r\n                if (service == Service.Gateway) {\n                    continue;\n                }\n                serviceResponse.setName(service.getName());\n\n                \r\n                List<CapabilityResponse> capabilityResponses = new ArrayList<CapabilityResponse>();\n                Map<Capability, String> serviceCapabilities = entry.getValue();\n                if (serviceCapabilities != null) {\n                    for (Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {\n                        Capability capability = ser_cap_entries.getKey();\n                        CapabilityResponse capabilityResponse = new CapabilityResponse();\n                        String capabilityValue = ser_cap_entries.getValue();\n                        capabilityResponse.setName(capability.getName());\n                        capabilityResponse.setValue(capabilityValue);\n                        capabilityResponse.setObjectName(\"capability\");\n                        capabilityResponses.add(capabilityResponse);\n                    }\n                    serviceResponse.setCapabilities(capabilityResponses);\n                }\n\n                serviceResponse.setObjectName(\"service\");\n                serviceResponses.add(serviceResponse);\n            }\n        }\n        response.setServices(serviceResponses);\n\n        if (network.getAclType() == null || network.getAclType() == ACLType.Account) {\n            populateOwner(response, network);\n        } else {\n            \r\n            Pair<Long, Boolean> domainNetworkDetails = ApiDBUtils.getDomainNetworkDetails(network.getId());\n            if (domainNetworkDetails.first() != null) {\n                Domain domain = ApiDBUtils.findDomainById(domainNetworkDetails.first());\n                if (domain != null) {\n                    response.setDomainId(domain.getUuid());\n                }\n            }\n            response.setSubdomainAccess(domainNetworkDetails.second());\n        }\n\n        Long dedicatedDomainId = ApiDBUtils.getDedicatedNetworkDomain(network.getId());\n        if (dedicatedDomainId != null) {\n            Domain domain = ApiDBUtils.findDomainById(dedicatedDomainId);\n            if (domain != null) {\n                response.setDomainId(domain.getUuid());\n                response.setDomainName(domain.getName());\n            }\n\n        }\n\n        response.setSpecifyIpRanges(network.getSpecifyIpRanges());\n        if (network.getVpcId() != null) {\n            Vpc vpc = ApiDBUtils.findVpcById(network.getVpcId());\n            if (vpc != null) {\n                response.setVpcId(vpc.getUuid());\n                response.setVpcName(vpc.getName());\n            }\n        }\n        response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network, network.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setHasAnnotation(annotationDao.hasAnnotations(network.getUuid(), AnnotationService.EntityType.NETWORK.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n\n        if (network.getNetworkACLId() != null) {\n            NetworkACL acl = ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());\n            if (acl != null) {\n                response.setAclId(acl.getUuid());\n                response.setAclName(acl.getName());\n            }\n        }\n\n        response.setStrechedL2Subnet(network.isStrechedL2Network());\n        if (network.isStrechedL2Network()) {\n            Set<String> networkSpannedZones = new  HashSet<String>();\n            List<VMInstanceVO> vmInstances = new ArrayList<VMInstanceVO>();\n            vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));\n            vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));\n            for (VirtualMachine vm : vmInstances) {\n                DataCenter vmZone = ApiDBUtils.findZoneById(vm.getDataCenterId());\n                networkSpannedZones.add(vmZone.getUuid());\n            }\n            response.setNetworkSpannedZones(networkSpannedZones);\n        }\n        response.setExternalId(network.getExternalId());\n        response.setRedundantRouter(network.isRedundant());\n        response.setCreated(network.getCreated());\n\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"networkId\", sb.entity().getNetworkId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"networkId\", network.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        response.setBytesReceived(bytesReceived);\n        response.setBytesSent(bytesSent);\n\n        response.setObjectName(\"network\");\n        return response;\n    }\n","date":"2021-09-08 12:44:06","endLine":2399,"groupId":"18524","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createNetworkResponse","params":"(ResponseViewview@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/09/057e64277064de5378a7fe24c49ae6e03c0ae7.src","preCode":"    public NetworkResponse createNetworkResponse(ResponseView view, Network network) {\n        \r\n        \r\n        NetworkProfile profile = ApiDBUtils.getNetworkProfile(network.getId());\n        NetworkResponse response = new NetworkResponse();\n        response.setId(network.getUuid());\n        response.setName(network.getName());\n        response.setDisplaytext(network.getDisplayText());\n        if (network.getBroadcastDomainType() != null) {\n            response.setBroadcastDomainType(network.getBroadcastDomainType().toString());\n        }\n\n        if (network.getTrafficType() != null) {\n            response.setTrafficType(network.getTrafficType().name());\n        }\n\n        if (network.getGuestType() != null) {\n            response.setType(network.getGuestType().toString());\n        }\n\n        response.setGateway(network.getGateway());\n\n        \r\n        response.setCidr(network.getCidr());\n        if (network.getNetworkCidr() != null) {\n            response.setNetworkCidr((network.getNetworkCidr()));\n        }\n        \r\n        \r\n        \r\n        \r\n        if (network.getNetworkCidr() != null) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));\n        }\n        if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));\n        }\n\n        response.setIp6Gateway(network.getIp6Gateway());\n        response.setIp6Cidr(network.getIp6Cidr());\n\n        \r\n        \r\n        String reservation = null;\n        if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr()))) {\n            String[] guestVmCidrPair = network.getCidr().split(\"\\\\/\");\n            String[] guestCidrPair = network.getNetworkCidr().split(\"\\\\/\");\n\n            Long guestVmCidrSize = Long.valueOf(guestVmCidrPair[1]);\n            Long guestCidrSize = Long.valueOf(guestCidrPair[1]);\n\n            String[] guestVmIpRange = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], guestVmCidrSize);\n            String[] guestIpRange = NetUtils.getIpRangeFromCidr(guestCidrPair[0], guestCidrSize);\n            long startGuestIp = NetUtils.ip2Long(guestIpRange[0]);\n            long endGuestIp = NetUtils.ip2Long(guestIpRange[1]);\n            long startVmIp = NetUtils.ip2Long(guestVmIpRange[0]);\n            long endVmIp = NetUtils.ip2Long(guestVmIpRange[1]);\n\n            if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n            if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1));\n            }\n            if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1) + \" ,  \" + NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n        }\n        response.setReservedIpRange(reservation);\n\n        \r\n        if (network.getBroadcastUri() != null && view == ResponseView.Full) {\n            String broadcastUri = network.getBroadcastUri().toString();\n            response.setBroadcastUri(broadcastUri);\n            String vlan = \"N/A\";\n            switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {\n            case Vlan:\n            case Vxlan:\n                vlan = BroadcastDomainType.getValue(network.getBroadcastUri());\n                break;\n            }\n            \r\n            response.setVlan(vlan);\n        }\n\n        \r\n        if (view == ResponseView.Full) {\n            Map<String, String> details = new HashMap<>();\n            for (NetworkDetailVO detail: networkDetailsDao.listDetails(network.getId())) {\n                details.put(detail.getName(),detail.getValue());\n            }\n            response.setDetails(details);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(network.getDataCenterId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n        if (network.getPhysicalNetworkId() != null) {\n            PhysicalNetworkVO pnet = ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());\n            response.setPhysicalNetworkId(pnet.getUuid());\n        }\n\n        \r\n        NetworkOffering networkOffering = ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());\n        if (networkOffering != null) {\n            response.setNetworkOfferingId(networkOffering.getUuid());\n            response.setNetworkOfferingName(networkOffering.getName());\n            response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());\n            response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());\n            response.setIsSystem(networkOffering.isSystemOnly());\n            response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());\n            response.setIsPersistent(networkOffering.isPersistent());\n        }\n\n        if (network.getAclType() != null) {\n            response.setAclType(network.getAclType().toString());\n        }\n        response.setDisplayNetwork(network.getDisplayNetwork());\n        response.setState(network.getState().toString());\n        response.setRestartRequired(network.isRestartRequired());\n        NetworkVO nw = ApiDBUtils.findNetworkById(network.getRelated());\n        if (nw != null) {\n            response.setRelated(nw.getUuid());\n        }\n        response.setNetworkDomain(network.getNetworkDomain());\n\n        response.setDns1(profile.getDns1());\n        response.setDns2(profile.getDns2());\n        \r\n        Map<Service, Map<Capability, String>> serviceCapabilitiesMap = ApiDBUtils.getNetworkCapabilities(network.getId(), network.getDataCenterId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        if (serviceCapabilitiesMap != null) {\n            for (Map.Entry<Service, Map<Capability, String>>entry : serviceCapabilitiesMap.entrySet()) {\n                Service service = entry.getKey();\n                ServiceResponse serviceResponse = new ServiceResponse();\n                \r\n                if (service == Service.Gateway) {\n                    continue;\n                }\n                serviceResponse.setName(service.getName());\n\n                \r\n                List<CapabilityResponse> capabilityResponses = new ArrayList<CapabilityResponse>();\n                Map<Capability, String> serviceCapabilities = entry.getValue();\n                if (serviceCapabilities != null) {\n                    for (Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {\n                        Capability capability = ser_cap_entries.getKey();\n                        CapabilityResponse capabilityResponse = new CapabilityResponse();\n                        String capabilityValue = ser_cap_entries.getValue();\n                        capabilityResponse.setName(capability.getName());\n                        capabilityResponse.setValue(capabilityValue);\n                        capabilityResponse.setObjectName(\"capability\");\n                        capabilityResponses.add(capabilityResponse);\n                    }\n                    serviceResponse.setCapabilities(capabilityResponses);\n                }\n\n                serviceResponse.setObjectName(\"service\");\n                serviceResponses.add(serviceResponse);\n            }\n        }\n        response.setServices(serviceResponses);\n\n        if (network.getAclType() == null || network.getAclType() == ACLType.Account) {\n            populateOwner(response, network);\n        } else {\n            \r\n            Pair<Long, Boolean> domainNetworkDetails = ApiDBUtils.getDomainNetworkDetails(network.getId());\n            if (domainNetworkDetails.first() != null) {\n                Domain domain = ApiDBUtils.findDomainById(domainNetworkDetails.first());\n                if (domain != null) {\n                    response.setDomainId(domain.getUuid());\n                }\n            }\n            response.setSubdomainAccess(domainNetworkDetails.second());\n        }\n\n        Long dedicatedDomainId = ApiDBUtils.getDedicatedNetworkDomain(network.getId());\n        if (dedicatedDomainId != null) {\n            Domain domain = ApiDBUtils.findDomainById(dedicatedDomainId);\n            if (domain != null) {\n                response.setDomainId(domain.getUuid());\n                response.setDomainName(domain.getName());\n            }\n\n        }\n\n        response.setSpecifyIpRanges(network.getSpecifyIpRanges());\n        if (network.getVpcId() != null) {\n            Vpc vpc = ApiDBUtils.findVpcById(network.getVpcId());\n            if (vpc != null) {\n                response.setVpcId(vpc.getUuid());\n                response.setVpcName(vpc.getName());\n            }\n        }\n        response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network, network.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n\n        if (network.getNetworkACLId() != null) {\n            NetworkACL acl = ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());\n            if (acl != null) {\n                response.setAclId(acl.getUuid());\n                response.setAclName(acl.getName());\n            }\n        }\n\n        response.setStrechedL2Subnet(network.isStrechedL2Network());\n        if (network.isStrechedL2Network()) {\n            Set<String> networkSpannedZones = new  HashSet<String>();\n            List<VMInstanceVO> vmInstances = new ArrayList<VMInstanceVO>();\n            vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));\n            vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));\n            for (VirtualMachine vm : vmInstances) {\n                DataCenter vmZone = ApiDBUtils.findZoneById(vm.getDataCenterId());\n                networkSpannedZones.add(vmZone.getUuid());\n            }\n            response.setNetworkSpannedZones(networkSpannedZones);\n        }\n        response.setExternalId(network.getExternalId());\n        response.setRedundantRouter(network.isRedundant());\n        response.setCreated(network.getCreated());\n\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"networkId\", sb.entity().getNetworkId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"networkId\", network.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        response.setBytesReceived(bytesReceived);\n        response.setBytesSent(bytesSent);\n\n        response.setObjectName(\"network\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2150,"status":"M"},{"authorDate":"2021-08-17 01:29:34","commitOrder":9,"curCode":"    private void addVmRxTxDataToResponse(UserVmJoinVO userVm, UserVmResponse userVmResponse) {\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"deviceId\", sb.entity().getDeviceId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"deviceId\", userVm.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        userVmResponse.setBytesReceived(bytesReceived);\n        userVmResponse.setBytesSent(bytesSent);\n    }\n","date":"2021-08-17 01:29:34","endLine":392,"groupId":"18524","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addVmRxTxDataToResponse","params":"(UserVmJoinVOuserVm@UserVmResponseuserVmResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ff/4511bf23bbb9288e91452782aba669ab7aa272.src","preCode":"    private void addVmRxTxDataToResponse(UserVmJoinVO userVm, UserVmResponse userVmResponse) {\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"deviceId\", sb.entity().getDeviceId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"deviceId\", userVm.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        userVmResponse.setBytesReceived(bytesReceived);\n        userVmResponse.setBytesSent(bytesSent);\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/UserVmJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"N"}],"commitId":"413d10dd8106af9b3c369c1a393fbcca5e7217ce","commitMessage":"@@@server: Extend the Annotations framework (#5103)\n\n* Extend addAnnotation and listAnnotations APIs\n\n* Allow users to add.  list and remove comments\n\n* Add adminsonly UI and allow admins or owners to remove comments\n\n* New annotations tab\n\n* In progress: new comments section\n\n* Address review comments\n\n* Fix\n\n* Fix annotationfilter and comments section\n\n* Add keyword and delete action\n\n* Fix and rename annotations tab\n\n* Update annotation visibility API and update comments table accordingly\n\n* Allow users seeing all the comments for their owned resources\n\n* Extend comments for volumes and snapshots\n\n* Extend comments to multiple entities\n\n* Add uuid to ssh keypairs\n\n* SSH keypair UI refactor\n\n* Extend comments to the infrastructure entities\n\n* Add missing entities\n\n* Fix upgrade version for ssh keypairs\n\n* Fix typo on DB upgrade schema\n\n* Fix annotations table columns when there is no data\n\n* Extend the list view of items showing they if they have comments\n\n* Remove extra test\n\n* Add annotation permissions\n\n* Address review comments\n\n* Extend marvin tests for annotations\n\n* updating ui stuff\n\n* addition to toggle visibility\n\n* Fix pagination on comments section\n\n* Extend to kubernetes clusters\n\n* Fixes after last review\n\n* Change default value for adminsonly column\n\n* Remove the required field for the annotationfilter parameter\n\n* Small fixes on visibility and other fixes\n\n* Cleanup to reduce files changed\n\n* Rollback extra line\n\n* Address review comments\n\n* Fix cleanup error on smoke test\n\n* Fix sending incorrect parameter to checkPermissions method\n\n* Add check domain access for the calling account for domain networks\n\n* Fix only display annotations icon if there are comments the user can see\n\n* Simply change the Save button label to Submit\n\n* Change order of the Tools menu to provent users getting 404 error on clicking the text instead of expanding\n\n* Remove comments when removing entities\n\n* Address review comments on marvin tests\n\n* Allow users to list annotations for an entity ID\n\n* Allow users to see all comments for allowed entities\n\n* Fix search filters\n\n* Remove username from search filter\n\n* Add pagination to the annotations tab\n\n* Display username for user comments\n\n* Fix add permissions for domain and resource admins\n\n* Fix for domain admins\n\n* Trivial but important UI fix\n\n* Replace pagination for annotations tab\n\n* Add confirmation for delete comment\n\n* Lint warnings\n\n* Fix reduced list as domain admin\n\n* Fix display remove comment button for non admins\n\n* Improve display remove action button\n\n* Remove unused parameter on groupShow\n\n* Include a clock icon to the all comments filter except for root admin\n\n* Move cleanup SQL to the correct file after rebasing main\n\nCo-authored-by: davidjumani <dj.davidjumani1994@gmail.com>","date":"2021-09-08 12:44:06","modifiedFileCount":"109","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2021-08-17 01:29:34","codes":[{"authorDate":"2021-09-22 17:24:34","commitOrder":10,"curCode":"    public NetworkResponse createNetworkResponse(ResponseView view, Network network) {\n        \r\n        \r\n        NetworkProfile profile = ApiDBUtils.getNetworkProfile(network.getId());\n        NetworkResponse response = new NetworkResponse();\n        response.setId(network.getUuid());\n        response.setName(network.getName());\n        response.setDisplaytext(network.getDisplayText());\n        if (network.getBroadcastDomainType() != null) {\n            response.setBroadcastDomainType(network.getBroadcastDomainType().toString());\n        }\n\n        if (network.getTrafficType() != null) {\n            response.setTrafficType(network.getTrafficType().name());\n        }\n\n        if (network.getGuestType() != null) {\n            response.setType(network.getGuestType().toString());\n        }\n\n        response.setGateway(network.getGateway());\n\n        \r\n        response.setCidr(network.getCidr());\n        if (network.getNetworkCidr() != null) {\n            response.setNetworkCidr((network.getNetworkCidr()));\n        }\n        \r\n        \r\n        \r\n        \r\n        if (network.getNetworkCidr() != null) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));\n        }\n        if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));\n        }\n\n        response.setIp6Gateway(network.getIp6Gateway());\n        response.setIp6Cidr(network.getIp6Cidr());\n\n        \r\n        \r\n        String reservation = null;\n        if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr()))) {\n            String[] guestVmCidrPair = network.getCidr().split(\"\\\\/\");\n            String[] guestCidrPair = network.getNetworkCidr().split(\"\\\\/\");\n\n            Long guestVmCidrSize = Long.valueOf(guestVmCidrPair[1]);\n            Long guestCidrSize = Long.valueOf(guestCidrPair[1]);\n\n            String[] guestVmIpRange = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], guestVmCidrSize);\n            String[] guestIpRange = NetUtils.getIpRangeFromCidr(guestCidrPair[0], guestCidrSize);\n            long startGuestIp = NetUtils.ip2Long(guestIpRange[0]);\n            long endGuestIp = NetUtils.ip2Long(guestIpRange[1]);\n            long startVmIp = NetUtils.ip2Long(guestVmIpRange[0]);\n            long endVmIp = NetUtils.ip2Long(guestVmIpRange[1]);\n\n            if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n            if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1));\n            }\n            if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1) + \" ,  \" + NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n        }\n        response.setReservedIpRange(reservation);\n\n        \r\n        if (network.getBroadcastUri() != null && view == ResponseView.Full) {\n            String broadcastUri = network.getBroadcastUri().toString();\n            response.setBroadcastUri(broadcastUri);\n            String vlan = \"N/A\";\n            switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {\n            case Vlan:\n            case Vxlan:\n                vlan = BroadcastDomainType.getValue(network.getBroadcastUri());\n                break;\n            }\n            \r\n            response.setVlan(vlan);\n        }\n\n        \r\n        if (view == ResponseView.Full) {\n            Map<String, String> details = new HashMap<>();\n            for (NetworkDetailVO detail: networkDetailsDao.listDetails(network.getId())) {\n                details.put(detail.getName(),detail.getValue());\n            }\n            response.setDetails(details);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(network.getDataCenterId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n        if (network.getPhysicalNetworkId() != null) {\n            PhysicalNetworkVO pnet = ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());\n            response.setPhysicalNetworkId(pnet.getUuid());\n        }\n\n        \r\n        NetworkOffering networkOffering = ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());\n        if (networkOffering != null) {\n            response.setNetworkOfferingId(networkOffering.getUuid());\n            response.setNetworkOfferingName(networkOffering.getName());\n            response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());\n            response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());\n            response.setIsSystem(networkOffering.isSystemOnly());\n            response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());\n            response.setIsPersistent(networkOffering.isPersistent());\n        }\n\n        if (network.getAclType() != null) {\n            response.setAclType(network.getAclType().toString());\n        }\n        response.setDisplayNetwork(network.getDisplayNetwork());\n        response.setState(network.getState().toString());\n        response.setRestartRequired(network.isRestartRequired());\n        NetworkVO nw = ApiDBUtils.findNetworkById(network.getRelated());\n        if (nw != null) {\n            response.setRelated(nw.getUuid());\n        }\n        response.setNetworkDomain(network.getNetworkDomain());\n\n        response.setDns1(profile.getDns1());\n        response.setDns2(profile.getDns2());\n        \r\n        Map<Service, Map<Capability, String>> serviceCapabilitiesMap = ApiDBUtils.getNetworkCapabilities(network.getId(), network.getDataCenterId());\n        Map<Service, Set<Provider>> serviceProviderMap = ApiDBUtils.listNetworkOfferingServices(network.getNetworkOfferingId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        if (serviceCapabilitiesMap != null) {\n            for (Map.Entry<Service, Map<Capability, String>>entry : serviceCapabilitiesMap.entrySet()) {\n                Service service = entry.getKey();\n                ServiceResponse serviceResponse = new ServiceResponse();\n                \r\n                if (service == Service.Gateway) {\n                    continue;\n                }\n                serviceResponse.setName(service.getName());\n\n                \r\n                List<CapabilityResponse> capabilityResponses = new ArrayList<>();\n                Map<Capability, String> serviceCapabilities = entry.getValue();\n                if (serviceCapabilities != null) {\n                    for (Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {\n                        Capability capability = ser_cap_entries.getKey();\n                        String capabilityValue = ser_cap_entries.getValue();\n                        if (Service.Lb == service && capability.getName().equals(Capability.SupportedLBIsolation.getName())) {\n                             capabilityValue = networkOffering.isDedicatedLB() ? \"dedicated\" : \"shared\";\n                        }\n\n                        Set<String> capabilitySet = new HashSet<>(Arrays.asList(Capability.SupportedLBIsolation.getName(),\n                                Capability.SupportedSourceNatTypes.getName(),\n                                Capability.RedundantRouter.getName()));\n                        boolean canChoose = capabilitySet.contains(capability.getName());\n\n                        createCapabilityResponse(capabilityResponses, capability.getName(),\n                                capabilityValue, canChoose, \"capability\");\n                    }\n                }\n\n                if (Service.SourceNat == service) {\n                    \r\n                    capabilityResponses = new ArrayList<>();\n                    createCapabilityResponse(capabilityResponses, Capability.SupportedSourceNatTypes.getName(),\n                            networkOffering.isSharedSourceNat() ? \"perzone\" : \"peraccount\", true);\n\n                    createCapabilityResponse(capabilityResponses, Capability.RedundantRouter.getName(),\n                            networkOffering.isRedundantRouter() ? \"true\" : \"false\", true);\n                } else if (service == Service.StaticNat) {\n                    createCapabilityResponse(capabilityResponses, Capability.ElasticIp.getName(),\n                            networkOffering.isElasticIp() ? \"true\" : \"false\", false);\n\n                    createCapabilityResponse(capabilityResponses, Capability.AssociatePublicIP.getName(),\n                            networkOffering.isAssociatePublicIP() ? \"true\" : \"false\", false);\n                } else if (Service.Lb == service) {\n                    createCapabilityResponse(capabilityResponses, Capability.ElasticLb.getName(),\n                            networkOffering.isElasticLb() ? \"true\" : \"false\", false);\n\n                    createCapabilityResponse(capabilityResponses, Capability.InlineMode.getName(),\n                            networkOffering.isInline() ? \"true\" : \"false\", false);\n                }\n                serviceResponse.setCapabilities(capabilityResponses);\n\n                List<ProviderResponse> providers = new ArrayList<>();\n                for (Provider provider : serviceProviderMap.get(service)) {\n                    if (provider != null) {\n                        ProviderResponse providerRsp = new ProviderResponse();\n                        providerRsp.setName(provider.getName());\n                        providers.add(providerRsp);\n                    }\n                }\n                serviceResponse.setProviders(providers);\n\n                serviceResponse.setObjectName(\"service\");\n                serviceResponses.add(serviceResponse);\n            }\n        }\n        response.setServices(serviceResponses);\n\n        if (network.getAclType() == null || network.getAclType() == ACLType.Account) {\n            populateOwner(response, network);\n        } else {\n            \r\n            Pair<Long, Boolean> domainNetworkDetails = ApiDBUtils.getDomainNetworkDetails(network.getId());\n            if (domainNetworkDetails.first() != null) {\n                Domain domain = ApiDBUtils.findDomainById(domainNetworkDetails.first());\n                if (domain != null) {\n                    response.setDomainId(domain.getUuid());\n                }\n            }\n            response.setSubdomainAccess(domainNetworkDetails.second());\n        }\n\n        Long dedicatedDomainId = ApiDBUtils.getDedicatedNetworkDomain(network.getId());\n        if (dedicatedDomainId != null) {\n            Domain domain = ApiDBUtils.findDomainById(dedicatedDomainId);\n            if (domain != null) {\n                response.setDomainId(domain.getUuid());\n                response.setDomainName(domain.getName());\n            }\n\n        }\n\n        response.setSpecifyIpRanges(network.getSpecifyIpRanges());\n        if (network.getVpcId() != null) {\n            Vpc vpc = ApiDBUtils.findVpcById(network.getVpcId());\n            if (vpc != null) {\n                response.setVpcId(vpc.getUuid());\n                response.setVpcName(vpc.getName());\n            }\n        }\n        response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network, network.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setHasAnnotation(annotationDao.hasAnnotations(network.getUuid(), AnnotationService.EntityType.NETWORK.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n\n        if (network.getNetworkACLId() != null) {\n            NetworkACL acl = ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());\n            if (acl != null) {\n                response.setAclId(acl.getUuid());\n                response.setAclName(acl.getName());\n            }\n        }\n\n        response.setStrechedL2Subnet(network.isStrechedL2Network());\n        if (network.isStrechedL2Network()) {\n            Set<String> networkSpannedZones = new  HashSet<String>();\n            List<VMInstanceVO> vmInstances = new ArrayList<VMInstanceVO>();\n            vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));\n            vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));\n            for (VirtualMachine vm : vmInstances) {\n                DataCenter vmZone = ApiDBUtils.findZoneById(vm.getDataCenterId());\n                networkSpannedZones.add(vmZone.getUuid());\n            }\n            response.setNetworkSpannedZones(networkSpannedZones);\n        }\n        response.setExternalId(network.getExternalId());\n        response.setRedundantRouter(network.isRedundant());\n        response.setCreated(network.getCreated());\n\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"networkId\", sb.entity().getNetworkId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"networkId\", network.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        response.setBytesReceived(bytesReceived);\n        response.setBytesSent(bytesSent);\n\n        response.setObjectName(\"network\");\n        return response;\n    }\n","date":"2021-09-22 17:24:34","endLine":2480,"groupId":"101452","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"createNetworkResponse","params":"(ResponseViewview@Networknetwork)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/95/aebc815e7cde74bbde4fc14d6fcb01063c5d08.src","preCode":"    public NetworkResponse createNetworkResponse(ResponseView view, Network network) {\n        \r\n        \r\n        NetworkProfile profile = ApiDBUtils.getNetworkProfile(network.getId());\n        NetworkResponse response = new NetworkResponse();\n        response.setId(network.getUuid());\n        response.setName(network.getName());\n        response.setDisplaytext(network.getDisplayText());\n        if (network.getBroadcastDomainType() != null) {\n            response.setBroadcastDomainType(network.getBroadcastDomainType().toString());\n        }\n\n        if (network.getTrafficType() != null) {\n            response.setTrafficType(network.getTrafficType().name());\n        }\n\n        if (network.getGuestType() != null) {\n            response.setType(network.getGuestType().toString());\n        }\n\n        response.setGateway(network.getGateway());\n\n        \r\n        response.setCidr(network.getCidr());\n        if (network.getNetworkCidr() != null) {\n            response.setNetworkCidr((network.getNetworkCidr()));\n        }\n        \r\n        \r\n        \r\n        \r\n        if (network.getNetworkCidr() != null) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getNetworkCidr()));\n        }\n        if (((network.getCidr()) != null) && (network.getNetworkCidr() == null)) {\n            response.setNetmask(NetUtils.cidr2Netmask(network.getCidr()));\n        }\n\n        response.setIp6Gateway(network.getIp6Gateway());\n        response.setIp6Cidr(network.getIp6Cidr());\n\n        \r\n        \r\n        String reservation = null;\n        if ((network.getCidr() != null) && (NetUtils.isNetworkAWithinNetworkB(network.getCidr(), network.getNetworkCidr()))) {\n            String[] guestVmCidrPair = network.getCidr().split(\"\\\\/\");\n            String[] guestCidrPair = network.getNetworkCidr().split(\"\\\\/\");\n\n            Long guestVmCidrSize = Long.valueOf(guestVmCidrPair[1]);\n            Long guestCidrSize = Long.valueOf(guestCidrPair[1]);\n\n            String[] guestVmIpRange = NetUtils.getIpRangeFromCidr(guestVmCidrPair[0], guestVmCidrSize);\n            String[] guestIpRange = NetUtils.getIpRangeFromCidr(guestCidrPair[0], guestCidrSize);\n            long startGuestIp = NetUtils.ip2Long(guestIpRange[0]);\n            long endGuestIp = NetUtils.ip2Long(guestIpRange[1]);\n            long startVmIp = NetUtils.ip2Long(guestVmIpRange[0]);\n            long endVmIp = NetUtils.ip2Long(guestVmIpRange[1]);\n\n            if (startVmIp == startGuestIp && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n            if (endVmIp == endGuestIp && startVmIp > startGuestIp + 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1));\n            }\n            if (startVmIp > startGuestIp + 1 && endVmIp < endGuestIp - 1) {\n                reservation = (NetUtils.long2Ip(startGuestIp) + \"-\" + NetUtils.long2Ip(startVmIp - 1) + \" ,  \" + NetUtils.long2Ip(endVmIp + 1) + \"-\" + NetUtils.long2Ip(endGuestIp));\n            }\n        }\n        response.setReservedIpRange(reservation);\n\n        \r\n        if (network.getBroadcastUri() != null && view == ResponseView.Full) {\n            String broadcastUri = network.getBroadcastUri().toString();\n            response.setBroadcastUri(broadcastUri);\n            String vlan = \"N/A\";\n            switch (BroadcastDomainType.getSchemeValue(network.getBroadcastUri())) {\n            case Vlan:\n            case Vxlan:\n                vlan = BroadcastDomainType.getValue(network.getBroadcastUri());\n                break;\n            }\n            \r\n            response.setVlan(vlan);\n        }\n\n        \r\n        if (view == ResponseView.Full) {\n            Map<String, String> details = new HashMap<>();\n            for (NetworkDetailVO detail: networkDetailsDao.listDetails(network.getId())) {\n                details.put(detail.getName(),detail.getValue());\n            }\n            response.setDetails(details);\n        }\n\n        DataCenter zone = ApiDBUtils.findZoneById(network.getDataCenterId());\n        if (zone != null) {\n            response.setZoneId(zone.getUuid());\n            response.setZoneName(zone.getName());\n        }\n        if (network.getPhysicalNetworkId() != null) {\n            PhysicalNetworkVO pnet = ApiDBUtils.findPhysicalNetworkById(network.getPhysicalNetworkId());\n            response.setPhysicalNetworkId(pnet.getUuid());\n        }\n\n        \r\n        NetworkOffering networkOffering = ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());\n        if (networkOffering != null) {\n            response.setNetworkOfferingId(networkOffering.getUuid());\n            response.setNetworkOfferingName(networkOffering.getName());\n            response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());\n            response.setNetworkOfferingConserveMode(networkOffering.isConserveMode());\n            response.setIsSystem(networkOffering.isSystemOnly());\n            response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());\n            response.setIsPersistent(networkOffering.isPersistent());\n        }\n\n        if (network.getAclType() != null) {\n            response.setAclType(network.getAclType().toString());\n        }\n        response.setDisplayNetwork(network.getDisplayNetwork());\n        response.setState(network.getState().toString());\n        response.setRestartRequired(network.isRestartRequired());\n        NetworkVO nw = ApiDBUtils.findNetworkById(network.getRelated());\n        if (nw != null) {\n            response.setRelated(nw.getUuid());\n        }\n        response.setNetworkDomain(network.getNetworkDomain());\n\n        response.setDns1(profile.getDns1());\n        response.setDns2(profile.getDns2());\n        \r\n        Map<Service, Map<Capability, String>> serviceCapabilitiesMap = ApiDBUtils.getNetworkCapabilities(network.getId(), network.getDataCenterId());\n        List<ServiceResponse> serviceResponses = new ArrayList<ServiceResponse>();\n        if (serviceCapabilitiesMap != null) {\n            for (Map.Entry<Service, Map<Capability, String>>entry : serviceCapabilitiesMap.entrySet()) {\n                Service service = entry.getKey();\n                ServiceResponse serviceResponse = new ServiceResponse();\n                \r\n                if (service == Service.Gateway) {\n                    continue;\n                }\n                serviceResponse.setName(service.getName());\n\n                \r\n                List<CapabilityResponse> capabilityResponses = new ArrayList<CapabilityResponse>();\n                Map<Capability, String> serviceCapabilities = entry.getValue();\n                if (serviceCapabilities != null) {\n                    for (Map.Entry<Capability,String> ser_cap_entries : serviceCapabilities.entrySet()) {\n                        Capability capability = ser_cap_entries.getKey();\n                        CapabilityResponse capabilityResponse = new CapabilityResponse();\n                        String capabilityValue = ser_cap_entries.getValue();\n                        capabilityResponse.setName(capability.getName());\n                        capabilityResponse.setValue(capabilityValue);\n                        capabilityResponse.setObjectName(\"capability\");\n                        capabilityResponses.add(capabilityResponse);\n                    }\n                    serviceResponse.setCapabilities(capabilityResponses);\n                }\n\n                serviceResponse.setObjectName(\"service\");\n                serviceResponses.add(serviceResponse);\n            }\n        }\n        response.setServices(serviceResponses);\n\n        if (network.getAclType() == null || network.getAclType() == ACLType.Account) {\n            populateOwner(response, network);\n        } else {\n            \r\n            Pair<Long, Boolean> domainNetworkDetails = ApiDBUtils.getDomainNetworkDetails(network.getId());\n            if (domainNetworkDetails.first() != null) {\n                Domain domain = ApiDBUtils.findDomainById(domainNetworkDetails.first());\n                if (domain != null) {\n                    response.setDomainId(domain.getUuid());\n                }\n            }\n            response.setSubdomainAccess(domainNetworkDetails.second());\n        }\n\n        Long dedicatedDomainId = ApiDBUtils.getDedicatedNetworkDomain(network.getId());\n        if (dedicatedDomainId != null) {\n            Domain domain = ApiDBUtils.findDomainById(dedicatedDomainId);\n            if (domain != null) {\n                response.setDomainId(domain.getUuid());\n                response.setDomainName(domain.getName());\n            }\n\n        }\n\n        response.setSpecifyIpRanges(network.getSpecifyIpRanges());\n        if (network.getVpcId() != null) {\n            Vpc vpc = ApiDBUtils.findVpcById(network.getVpcId());\n            if (vpc != null) {\n                response.setVpcId(vpc.getUuid());\n                response.setVpcName(vpc.getName());\n            }\n        }\n        response.setCanUseForDeploy(ApiDBUtils.canUseForDeploy(network));\n\n        \r\n        List<? extends ResourceTag> tags = ApiDBUtils.listByResourceTypeAndId(ResourceObjectType.Network, network.getId());\n        List<ResourceTagResponse> tagResponses = new ArrayList<ResourceTagResponse>();\n        for (ResourceTag tag : tags) {\n            ResourceTagResponse tagResponse = createResourceTagResponse(tag, true);\n            CollectionUtils.addIgnoreNull(tagResponses, tagResponse);\n        }\n        response.setTags(tagResponses);\n        response.setHasAnnotation(annotationDao.hasAnnotations(network.getUuid(), AnnotationService.EntityType.NETWORK.name(),\n                _accountMgr.isRootAdmin(CallContext.current().getCallingAccount().getId())));\n\n        if (network.getNetworkACLId() != null) {\n            NetworkACL acl = ApiDBUtils.findByNetworkACLId(network.getNetworkACLId());\n            if (acl != null) {\n                response.setAclId(acl.getUuid());\n                response.setAclName(acl.getName());\n            }\n        }\n\n        response.setStrechedL2Subnet(network.isStrechedL2Network());\n        if (network.isStrechedL2Network()) {\n            Set<String> networkSpannedZones = new  HashSet<String>();\n            List<VMInstanceVO> vmInstances = new ArrayList<VMInstanceVO>();\n            vmInstances.addAll(ApiDBUtils.listUserVMsByNetworkId(network.getId()));\n            vmInstances.addAll(ApiDBUtils.listDomainRoutersByNetworkId(network.getId()));\n            for (VirtualMachine vm : vmInstances) {\n                DataCenter vmZone = ApiDBUtils.findZoneById(vm.getDataCenterId());\n                networkSpannedZones.add(vmZone.getUuid());\n            }\n            response.setNetworkSpannedZones(networkSpannedZones);\n        }\n        response.setExternalId(network.getExternalId());\n        response.setRedundantRouter(network.isRedundant());\n        response.setCreated(network.getCreated());\n\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"networkId\", sb.entity().getNetworkId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"networkId\", network.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        response.setBytesReceived(bytesReceived);\n        response.setBytesSent(bytesSent);\n\n        response.setObjectName(\"network\");\n        return response;\n    }\n","realPath":"server/src/main/java/com/cloud/api/ApiResponseHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2192,"status":"M"},{"authorDate":"2021-08-17 01:29:34","commitOrder":10,"curCode":"    private void addVmRxTxDataToResponse(UserVmJoinVO userVm, UserVmResponse userVmResponse) {\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"deviceId\", sb.entity().getDeviceId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"deviceId\", userVm.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        userVmResponse.setBytesReceived(bytesReceived);\n        userVmResponse.setBytesSent(bytesSent);\n    }\n","date":"2021-08-17 01:29:34","endLine":392,"groupId":"101452","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addVmRxTxDataToResponse","params":"(UserVmJoinVOuserVm@UserVmResponseuserVmResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ff/4511bf23bbb9288e91452782aba669ab7aa272.src","preCode":"    private void addVmRxTxDataToResponse(UserVmJoinVO userVm, UserVmResponse userVmResponse) {\n        Long bytesReceived = 0L;\n        Long bytesSent = 0L;\n        SearchBuilder<UserStatisticsVO> sb = userStatsDao.createSearchBuilder();\n        sb.and(\"deviceId\", sb.entity().getDeviceId(), Op.EQ);\n        SearchCriteria<UserStatisticsVO> sc = sb.create();\n        sc.setParameters(\"deviceId\", userVm.getId());\n        for (UserStatisticsVO stat: userStatsDao.search(sc, null)) {\n            bytesReceived += stat.getNetBytesReceived() + stat.getCurrentBytesReceived();\n            bytesSent += stat.getNetBytesSent() + stat.getCurrentBytesSent();\n        }\n        userVmResponse.setBytesReceived(bytesReceived);\n        userVmResponse.setBytesSent(bytesSent);\n    }\n","realPath":"server/src/main/java/com/cloud/api/query/dao/UserVmJoinDaoImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"N"}],"commitId":"56ef349b0e49d00d21c63d2c2ef7bee6669e82a2","commitMessage":"@@@Display capability info in listNetwork response (#3804)\n\n* Display capability info in listNetwork response\n\nCo-authored-by: Rakesh Venkatesh <r.venkatesh@global.leaseweb.com>\nCo-authored-by: Rakesh Venkatesh <rakeshv@apache.org>","date":"2021-09-22 17:24:34","modifiedFileCount":"1","status":"M","submitter":"Rakesh"}]
