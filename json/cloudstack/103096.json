[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2015-08-31 13:44:05","commitOrder":4,"curCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Ovm3) {\n            LOGGER.debug(\"Don't know how to fence non Ovm3 hosts \"\n                    + host.getHypervisorType());\n            return null;\n        } else {\n            LOGGER.debug(\"Fencing \" + vm + \" on host \" + host\n                    + \" with params: \"+ fenceParams );\n        }\n\n        List<HostVO> hosts = resourceMgr.listAllHostsInCluster(host\n                .getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Ovm3 &&\n                    h.getStatus() == Status.Up &&\n                    h.getId() != host.getId()) {\n                FenceAnswer answer;\n                try {\n                    answer = (FenceAnswer) agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException | OperationTimedoutException e) {\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug(\"Moving on to the next host because \"\n                                + h.toString() + \" is unavailable\", e);\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Unable to fence off \" + vm.toString() + \" on \"\n                    + host.toString());\n        }\n\n        return false;\n    }\n","date":"2015-08-31 13:57:57","endLine":117,"groupId":"2660","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fenceOff","params":"(VirtualMachinevm@Hosthost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/97a589623fbd7f3ef5c2c4710886361e950e3f.src","preCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Ovm3) {\n            LOGGER.debug(\"Don't know how to fence non Ovm3 hosts \"\n                    + host.getHypervisorType());\n            return null;\n        } else {\n            LOGGER.debug(\"Fencing \" + vm + \" on host \" + host\n                    + \" with params: \"+ fenceParams );\n        }\n\n        List<HostVO> hosts = resourceMgr.listAllHostsInCluster(host\n                .getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Ovm3 &&\n                    h.getStatus() == Status.Up &&\n                    h.getId() != host.getId()) {\n                FenceAnswer answer;\n                try {\n                    answer = (FenceAnswer) agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException | OperationTimedoutException e) {\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug(\"Moving on to the next host because \"\n                                + h.toString() + \" is unavailable\", e);\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Unable to fence off \" + vm.toString() + \" on \"\n                    + host.toString());\n        }\n\n        return false;\n    }\n","realPath":"plugins/hypervisors/ovm3/src/main/java/com/cloud/hypervisor/ovm3/resources/Ovm3FenceBuilder.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"NB"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Simulator) {\n            s_logger.debug(\"Don't know how to fence non simulator hosts \" + host.getHypervisorType());\n            return null;\n        }\n\n        List<HostVO> hosts = _resourceMgr.listAllHostsInCluster(host.getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Simulator) {\n                if( h.getStatus() != Status.Up ) {\n                    continue;\n                }\n                if( h.getId() == host.getId() ) {\n                    continue;\n                }\n                FenceAnswer answer = null;\n                try {\n                    answer = (FenceAnswer)_agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    }\n                    continue;\n                } catch (OperationTimedoutException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Unable to fence off \" + vm.toString() + \" on \" + host.toString());\n        }\n\n        return false;\n    }\n","date":"2018-01-20 05:49:27","endLine":113,"groupId":"16018","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fenceOff","params":"(VirtualMachinevm@Hosthost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/86/c28715e0b7f84aaf8f38e96472bec52f4566cf.src","preCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Simulator) {\n            s_logger.debug(\"Don't know how to fence non simulator hosts \" + host.getHypervisorType());\n            return null;\n        }\n\n        List<HostVO> hosts = _resourceMgr.listAllHostsInCluster(host.getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Simulator) {\n                if( h.getStatus() != Status.Up ) {\n                    continue;\n                }\n                if( h.getId() == host.getId() ) {\n                    continue;\n                }\n                FenceAnswer answer = null;\n                try {\n                    answer = (FenceAnswer)_agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    }\n                    continue;\n                } catch (OperationTimedoutException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Unable to fence off \" + vm.toString() + \" on \" + host.toString());\n        }\n\n        return false;\n    }\n","realPath":"plugins/hypervisors/simulator/src/main/java/com/cloud/ha/SimulatorFencer.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"M","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-04-16 15:07:16","codes":[{"authorDate":"2015-08-31 13:44:05","commitOrder":5,"curCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Ovm3) {\n            LOGGER.debug(\"Don't know how to fence non Ovm3 hosts \"\n                    + host.getHypervisorType());\n            return null;\n        } else {\n            LOGGER.debug(\"Fencing \" + vm + \" on host \" + host\n                    + \" with params: \"+ fenceParams );\n        }\n\n        List<HostVO> hosts = resourceMgr.listAllHostsInCluster(host\n                .getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Ovm3 &&\n                    h.getStatus() == Status.Up &&\n                    h.getId() != host.getId()) {\n                FenceAnswer answer;\n                try {\n                    answer = (FenceAnswer) agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException | OperationTimedoutException e) {\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug(\"Moving on to the next host because \"\n                                + h.toString() + \" is unavailable\", e);\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Unable to fence off \" + vm.toString() + \" on \"\n                    + host.toString());\n        }\n\n        return false;\n    }\n","date":"2015-08-31 13:57:57","endLine":117,"groupId":"103096","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fenceOff","params":"(VirtualMachinevm@Hosthost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c9/97a589623fbd7f3ef5c2c4710886361e950e3f.src","preCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Ovm3) {\n            LOGGER.debug(\"Don't know how to fence non Ovm3 hosts \"\n                    + host.getHypervisorType());\n            return null;\n        } else {\n            LOGGER.debug(\"Fencing \" + vm + \" on host \" + host\n                    + \" with params: \"+ fenceParams );\n        }\n\n        List<HostVO> hosts = resourceMgr.listAllHostsInCluster(host\n                .getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Ovm3 &&\n                    h.getStatus() == Status.Up &&\n                    h.getId() != host.getId()) {\n                FenceAnswer answer;\n                try {\n                    answer = (FenceAnswer) agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException | OperationTimedoutException e) {\n                    if (LOGGER.isDebugEnabled()) {\n                        LOGGER.debug(\"Moving on to the next host because \"\n                                + h.toString() + \" is unavailable\", e);\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Unable to fence off \" + vm.toString() + \" on \"\n                    + host.toString());\n        }\n\n        return false;\n    }\n","realPath":"plugins/hypervisors/ovm3/src/main/java/com/cloud/hypervisor/ovm3/resources/Ovm3FenceBuilder.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2018-04-16 15:07:16","commitOrder":5,"curCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Simulator) {\n            s_logger.debug(\"Don't know how to fence non simulator hosts \" + host.getHypervisorType());\n            return null;\n        }\n\n        List<HostVO> hosts = _resourceMgr.listAllHostsInCluster(host.getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Simulator) {\n                if( h.getStatus() != Status.Up ) {\n                    continue;\n                }\n                if( h.getId() == host.getId() ) {\n                    continue;\n                }\n                FenceAnswer answer = null;\n                try {\n                    answer = (FenceAnswer)_agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\", e);\n                    }\n                    continue;\n                } catch (OperationTimedoutException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\", e);\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Unable to fence off \" + vm.toString() + \" on \" + host.toString());\n        }\n\n        return false;\n    }\n","date":"2018-04-16 15:07:16","endLine":113,"groupId":"103096","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fenceOff","params":"(VirtualMachinevm@Hosthost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c7/76edfde353a03a433fe24edc6e85b119d1853b.src","preCode":"    public Boolean fenceOff(VirtualMachine vm, Host host) {\n        if (host.getHypervisorType() != HypervisorType.Simulator) {\n            s_logger.debug(\"Don't know how to fence non simulator hosts \" + host.getHypervisorType());\n            return null;\n        }\n\n        List<HostVO> hosts = _resourceMgr.listAllHostsInCluster(host.getClusterId());\n        FenceCommand fence = new FenceCommand(vm, host);\n\n        for (HostVO h : hosts) {\n            if (h.getHypervisorType() == HypervisorType.Simulator) {\n                if( h.getStatus() != Status.Up ) {\n                    continue;\n                }\n                if( h.getId() == host.getId() ) {\n                    continue;\n                }\n                FenceAnswer answer = null;\n                try {\n                    answer = (FenceAnswer)_agentMgr.send(h.getId(), fence);\n                } catch (AgentUnavailableException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    }\n                    continue;\n                } catch (OperationTimedoutException e) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"Moving on to the next host because \" + h.toString() + \" is unavailable\");\n                    }\n                    continue;\n                }\n                if (answer != null && answer.getResult()) {\n                    return true;\n                }\n            }\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Unable to fence off \" + vm.toString() + \" on \" + host.toString());\n        }\n\n        return false;\n    }\n","realPath":"plugins/hypervisors/simulator/src/main/java/com/cloud/ha/SimulatorFencer.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"106a9a34e12843a76cd67d9ab13837f56d79785a","commitMessage":"@@@Update inconsistent debugging info in catch block (#2553)\n\n* Add stack traces information\n\n* update stack trace info\n\n* update stack trace to make them consistent\n\n* update stack traces\n\n* update stacktraces\n\n* update stacktraces for other similar situations\n\n* fix some other situations\n\n* enhance other situations\n","date":"2018-04-16 15:07:16","modifiedFileCount":"11","status":"M","submitter":"lzh3636"}]
