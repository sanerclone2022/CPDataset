[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n                return null;\n            }\n            srcVolume.processEvent(Event.OperationSuccessed);\n            destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n            volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n            _volumeStoreDao.updateVolumeId(srcVolume.getId(), destVolume.getId());\n            try {\n                destroyVolume(srcVolume.getId());\n                srcVolume = volFactory.getVolume(srcVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n                \r\n                if (destroyFuture.get().isFailed()) {\n                    Thread.sleep(5 * 1000);\n                    destroyFuture = expungeVolumeAsync(srcVolume);\n                    destroyFuture.get();\n                }\n                future.complete(res);\n            } catch (Exception e) {\n                s_logger.debug(\"failed to clean up volume on storage\", e);\n            }\n            return null;\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":1535,"groupId":"11577","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@CopyVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/313058e9249fbef2dc1715afeb5d8b7c2c3cf4.src","preCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n                return null;\n            }\n            srcVolume.processEvent(Event.OperationSuccessed);\n            destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n            volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n            _volumeStoreDao.updateVolumeId(srcVolume.getId(), destVolume.getId());\n            try {\n                destroyVolume(srcVolume.getId());\n                srcVolume = volFactory.getVolume(srcVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n                \r\n                if (destroyFuture.get().isFailed()) {\n                    Thread.sleep(5 * 1000);\n                    destroyFuture = expungeVolumeAsync(srcVolume);\n                    destroyFuture.get();\n                }\n                future.complete(res);\n            } catch (Exception e) {\n                s_logger.debug(\"failed to clean up volume on storage\", e);\n            }\n            return null;\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1491,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":1602,"groupId":"11690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@MigrateVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/313058e9249fbef2dc1715afeb5d8b7c2c3cf4.src","preCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1580,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2019-01-25 20:05:13","commitOrder":2,"curCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n                volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n                try {\n                    destroyVolume(srcVolume.getId());\n                    srcVolume = volFactory.getVolume(srcVolume.getId());\n                    AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n                    \r\n                    if (destroyFuture.get().isFailed()) {\n                        Thread.sleep(5 * 1000);\n                        destroyFuture = expungeVolumeAsync(srcVolume);\n                        destroyFuture.get();\n                    }\n                    future.complete(res);\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to clean up volume on storage\", e);\n                }\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2019-01-25 20:05:13","endLine":1508,"groupId":"8556","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@CopyVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8f/f0bd20815b233e26f4ad74ec3c3f57a0030f9f.src","preCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n                return null;\n            }\n            srcVolume.processEvent(Event.OperationSuccessed);\n            destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n            volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n            _volumeStoreDao.updateVolumeId(srcVolume.getId(), destVolume.getId());\n            try {\n                destroyVolume(srcVolume.getId());\n                srcVolume = volFactory.getVolume(srcVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n                \r\n                if (destroyFuture.get().isFailed()) {\n                    Thread.sleep(5 * 1000);\n                    destroyFuture = expungeVolumeAsync(srcVolume);\n                    destroyFuture.get();\n                }\n                future.complete(res);\n            } catch (Exception e) {\n                s_logger.debug(\"failed to clean up volume on storage\", e);\n            }\n            return null;\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1466,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":1602,"groupId":"11690","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@MigrateVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/36/313058e9249fbef2dc1715afeb5d8b7c2c3cf4.src","preCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1580,"status":"N"}],"commitId":"b363fd49f70ac2092ebe6226a72a3d911dc99e1f","commitMessage":"@@@Vmware offline migration (#2848)\n\n* - Offline VM and Volume migration on Vmware hypervisor hosts\n- Also add VM disk consolidation call on successful VM migrations\n\n* Fix indentation of marvin test file and reformat against PEP8\n\n* * Fix few comment typos\n* Refactor debug messages to use String.format() when debug log level is enabled.\n\n* Send list of commands returned by hypervisor Guru instead of explicitly selecting the first one\n\n* Fix unhandled NPE during VM migration\n\n* Revert back to distinct event descriptions for VM to host or storage pool migration\n\n* Reformat test_primary_storage file against PEP-8 and Remove unused imports\n\n* Revert back the deprecation messages in the custom StringUtils class to favour the use of the ApacheUtils\n","date":"2019-01-25 20:05:13","modifiedFileCount":"35","status":"M","submitter":"dahn"},{"authorTime":"2021-02-24 17:28:33","codes":[{"authorDate":"2021-02-24 17:28:33","commitOrder":3,"curCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                if (destVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                    s_logger.info(\"Dest volume \" + destVolume.getId() + \" can be removed\");\n                    destVolume.processEvent(Event.ExpungeRequested);\n                    destVolume.processEvent(Event.OperationSuccessed);\n                    volDao.remove(destVolume.getId());\n                    future.complete(res);\n                    return null;\n                }\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n                volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n                try {\n                    destroyVolume(srcVolume.getId());\n                    if (srcVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                        s_logger.info(\"Src volume \" + srcVolume.getId() + \" can be removed\");\n                        srcVolume.processEvent(Event.ExpungeRequested);\n                        srcVolume.processEvent(Event.OperationSuccessed);\n                        volDao.remove(srcVolume.getId());\n                        future.complete(res);\n                        return null;\n                    }\n                    srcVolume = volFactory.getVolume(srcVolume.getId());\n                    AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n                    \r\n                    if (destroyFuture.get().isFailed()) {\n                        Thread.sleep(5 * 1000);\n                        destroyFuture = expungeVolumeAsync(srcVolume);\n                        destroyFuture.get();\n                    }\n                    future.complete(res);\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to clean up volume on storage\", e);\n                }\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2021-02-24 17:28:33","endLine":1868,"groupId":"19869","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"copyVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@CopyVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/68/940d48b36222eb25c76ce999b3df3838eefea5.src","preCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n                volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n                try {\n                    destroyVolume(srcVolume.getId());\n                    srcVolume = volFactory.getVolume(srcVolume.getId());\n                    AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n                    \r\n                    if (destroyFuture.get().isFailed()) {\n                        Thread.sleep(5 * 1000);\n                        destroyFuture = expungeVolumeAsync(srcVolume);\n                        destroyFuture.get();\n                    }\n                    future.complete(res);\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to clean up volume on storage\", e);\n                }\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1810,"status":"M"},{"authorDate":"2021-02-24 17:28:33","commitOrder":3,"curCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                if (srcVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                    future.complete(res);\n                    return null;\n                }\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2021-02-24 17:28:33","endLine":2145,"groupId":"18067","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@MigrateVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/68/940d48b36222eb25c76ce999b3df3838eefea5.src","preCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2119,"status":"M"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"},{"authorTime":"2021-02-24 17:28:33","codes":[{"authorDate":"2021-09-08 20:13:41","commitOrder":4,"curCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                if (destVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                    s_logger.info(\"Dest volume \" + destVolume.getId() + \" can be removed\");\n                    destVolume.processEvent(Event.ExpungeRequested);\n                    destVolume.processEvent(Event.OperationSuccessed);\n                    volDao.remove(destVolume.getId());\n                    future.complete(res);\n                    return null;\n                }\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n            } else {\n                if (copyPoliciesBetweenVolumesAndDestroySourceVolumeAfterMigration(Event.MigrationCopySucceeded, result.getAnswer(), srcVolume, destVolume, true)) {\n                    future.complete(res);\n                }\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2021-09-08 20:13:41","endLine":1853,"groupId":"10674","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"copyVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@CopyVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3b/acaee5b810918716046ce5cc5014c4793d9d62.src","preCode":"    protected Void copyVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, CopyVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        VolumeInfo destVolume = context.destVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(destVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                destVolume.processEvent(Event.MigrationCopyFailed);\n                srcVolume.processEvent(Event.OperationFailed);\n                destroyVolume(destVolume.getId());\n                if (destVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                    s_logger.info(\"Dest volume \" + destVolume.getId() + \" can be removed\");\n                    destVolume.processEvent(Event.ExpungeRequested);\n                    destVolume.processEvent(Event.OperationSuccessed);\n                    volDao.remove(destVolume.getId());\n                    future.complete(res);\n                    return null;\n                }\n                destVolume = volFactory.getVolume(destVolume.getId());\n                AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(destVolume);\n                destroyFuture.get();\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                destVolume.processEvent(Event.MigrationCopySucceeded, result.getAnswer());\n                volDao.updateUuid(srcVolume.getId(), destVolume.getId());\n                try {\n                    destroyVolume(srcVolume.getId());\n                    if (srcVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                        s_logger.info(\"Src volume \" + srcVolume.getId() + \" can be removed\");\n                        srcVolume.processEvent(Event.ExpungeRequested);\n                        srcVolume.processEvent(Event.OperationSuccessed);\n                        volDao.remove(srcVolume.getId());\n                        future.complete(res);\n                        return null;\n                    }\n                    srcVolume = volFactory.getVolume(srcVolume.getId());\n                    AsyncCallFuture<VolumeApiResult> destroyFuture = expungeVolumeAsync(srcVolume);\n                    \r\n                    if (destroyFuture.get().isFailed()) {\n                        Thread.sleep(5 * 1000);\n                        destroyFuture = expungeVolumeAsync(srcVolume);\n                        destroyFuture.get();\n                    }\n                    future.complete(res);\n                } catch (Exception e) {\n                    s_logger.debug(\"failed to clean up volume on storage\", e);\n                }\n            }\n        } catch (Exception e) {\n            s_logger.debug(\"Failed to process copy volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1817,"status":"M"},{"authorDate":"2021-02-24 17:28:33","commitOrder":4,"curCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                if (srcVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                    future.complete(res);\n                    return null;\n                }\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","date":"2021-02-24 17:28:33","endLine":2145,"groupId":"10674","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateVolumeCallBack","params":"(AsyncCallbackDispatcher<VolumeServiceImpl@CopyCommandResult>callback@MigrateVolumeContext<VolumeApiResult>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/68/940d48b36222eb25c76ce999b3df3838eefea5.src","preCode":"    protected Void migrateVolumeCallBack(AsyncCallbackDispatcher<VolumeServiceImpl, CopyCommandResult> callback, MigrateVolumeContext<VolumeApiResult> context) {\n        VolumeInfo srcVolume = context.srcVolume;\n        CopyCommandResult result = callback.getResult();\n        AsyncCallFuture<VolumeApiResult> future = context.future;\n        VolumeApiResult res = new VolumeApiResult(srcVolume);\n        try {\n            if (result.isFailed()) {\n                res.setResult(result.getResult());\n                srcVolume.processEvent(Event.OperationFailed);\n                future.complete(res);\n            } else {\n                srcVolume.processEvent(Event.OperationSuccessed);\n                if (srcVolume.getStoragePoolType() == StoragePoolType.PowerFlex) {\n                    future.complete(res);\n                    return null;\n                }\n                snapshotMgr.cleanupSnapshotsByVolume(srcVolume.getId());\n                future.complete(res);\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Failed to process migrate volume callback\", e);\n            res.setResult(e.toString());\n            future.complete(res);\n        }\n\n        return null;\n    }\n","realPath":"engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2119,"status":"N"}],"commitId":"8ffba83214482f5370ea9fa3e8e3d1dd3340405c","commitMessage":"@@@Keep volume policies after migrating it to another primary storage (#5067)\n\n* Add commons-lang3 to Utils\n\n* Create an util to provide methods that ReflectionToStringBuilder does not have yet\n\n* Create method to retrieve map of tags from resource\n\n* Enable tests on volume components and remove useless tests\n\n* Refactor VolumeObject and add unit tests\n\n* Extract createPolicy in several methods\n\n* Create method to copy policies between volumes and add unit tests\n\n* Copy policies to new volume before removing old volume on volume migration\n\n* Extract \"destroySourceVolumeAfterMigration\" to a method and test it\n\n* Remove javadoc @param with no sensible information\n\n* Rename method name to a generic name\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <daniel@scclouds.com.br>","date":"2021-09-08 20:13:41","modifiedFileCount":"11","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
