[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(Config.ConsoleProxyCmdPort.key());\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( _sslEnabled && (_consoleProxyUrlDomain == null || _consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            _sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        _capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL);\n\n        _capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        _standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        _proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n        }\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        _mgmtPort = NumbersUtil.parseInt(value, 8250);\n\n        _listener = new ConsoleProxyListener(new VmBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        \r\n        String cpvmSrvcOffIdStr = configs.get(Config.ConsoleProxyServiceOffering.key());\n        if (cpvmSrvcOffIdStr != null) {\n            _serviceOffering = _offeringDao.findByUuid(cpvmSrvcOffIdStr);\n            if (_serviceOffering == null) {\n                try {\n                    _serviceOffering = _offeringDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.debug(\"The system service offering specified by global config is not id, but uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n                }\n            }\n            if (_serviceOffering == null) {\n                s_logger.warn(\"Can't find system service offering specified by global config, uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n            }\n        }\n\n        if (_serviceOffering == null || !_serviceOffering.getSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(_configDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(_configDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = _offeringDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n            \r\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        _loadScanner = new SystemVmLoadScanner<Long>(this);\n        _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n        _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        _staticPublicIp = _configDao.getValue(\"consoleproxy.static.publicIp\");\n        if (_staticPublicIp != null) {\n            _staticPort = NumbersUtil.parseInt(_configDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":1344,"groupId":"23392","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/fff3c7219cceb44a61a820fcddfdef364d7f89.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(Config.ConsoleProxyCmdPort.key());\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( _sslEnabled && (_consoleProxyUrlDomain == null || _consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            _sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        _capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL);\n\n        _capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        _standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        _proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n        }\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        _mgmtPort = NumbersUtil.parseInt(value, 8250);\n\n        _listener = new ConsoleProxyListener(new VmBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        \r\n        String cpvmSrvcOffIdStr = configs.get(Config.ConsoleProxyServiceOffering.key());\n        if (cpvmSrvcOffIdStr != null) {\n            _serviceOffering = _offeringDao.findByUuid(cpvmSrvcOffIdStr);\n            if (_serviceOffering == null) {\n                try {\n                    _serviceOffering = _offeringDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.debug(\"The system service offering specified by global config is not id, but uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n                }\n            }\n            if (_serviceOffering == null) {\n                s_logger.warn(\"Can't find system service offering specified by global config, uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n            }\n        }\n\n        if (_serviceOffering == null || !_serviceOffering.getSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(_configDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(_configDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = _offeringDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n            \r\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        _loadScanner = new SystemVmLoadScanner<Long>(this);\n        _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n        _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        _staticPublicIp = _configDao.getValue(\"consoleproxy.static.publicIp\");\n        if (_staticPublicIp != null) {\n            _staticPort = NumbersUtil.parseInt(_configDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1240,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":131,"groupId":"19044","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/48/7ec45a4249ce361b6cf4c47a64eb8d0654215d.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/AgentBasedConsoleProxyManager.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-04-17 15:28:39","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( _sslEnabled && (_consoleProxyUrlDomain == null || _consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            _sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        _capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL);\n\n        _capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        _standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        _proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n        }\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        _mgmtPort = NumbersUtil.parseInt(value, 8250);\n\n        _listener = new ConsoleProxyListener(new VmBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        \r\n        String cpvmSrvcOffIdStr = configs.get(Config.ConsoleProxyServiceOffering.key());\n        if (cpvmSrvcOffIdStr != null) {\n            _serviceOffering = _offeringDao.findByUuid(cpvmSrvcOffIdStr);\n            if (_serviceOffering == null) {\n                try {\n                    _serviceOffering = _offeringDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.debug(\"The system service offering specified by global config is not id, but uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n                }\n            }\n            if (_serviceOffering == null) {\n                s_logger.warn(\"Can't find system service offering specified by global config, uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n            }\n        }\n\n        if (_serviceOffering == null || !_serviceOffering.getSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(_configDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(_configDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = _offeringDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n            \r\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        _loadScanner = new SystemVmLoadScanner<Long>(this);\n        _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n        _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        _staticPublicIp = _configDao.getValue(\"consoleproxy.static.publicIp\");\n        if (_staticPublicIp != null) {\n            _staticPort = NumbersUtil.parseInt(_configDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","date":"2018-04-17 15:28:39","endLine":1345,"groupId":"23392","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e6/c0a8da6ecf6129b89359d2aef160000e7ed014.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(Config.ConsoleProxyCmdPort.key());\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( _sslEnabled && (_consoleProxyUrlDomain == null || _consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            _sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        _capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL);\n\n        _capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        _standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        _proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n        }\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        _mgmtPort = NumbersUtil.parseInt(value, 8250);\n\n        _listener = new ConsoleProxyListener(new VmBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        \r\n        String cpvmSrvcOffIdStr = configs.get(Config.ConsoleProxyServiceOffering.key());\n        if (cpvmSrvcOffIdStr != null) {\n            _serviceOffering = _offeringDao.findByUuid(cpvmSrvcOffIdStr);\n            if (_serviceOffering == null) {\n                try {\n                    _serviceOffering = _offeringDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.debug(\"The system service offering specified by global config is not id, but uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n                }\n            }\n            if (_serviceOffering == null) {\n                s_logger.warn(\"Can't find system service offering specified by global config, uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n            }\n        }\n\n        if (_serviceOffering == null || !_serviceOffering.getSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(_configDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(_configDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = _offeringDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n            \r\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        _loadScanner = new SystemVmLoadScanner<Long>(this);\n        _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n        _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        _staticPublicIp = _configDao.getValue(\"consoleproxy.static.publicIp\");\n        if (_staticPublicIp != null) {\n            _staticPort = NumbersUtil.parseInt(_configDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1242,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":131,"groupId":"19044","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/48/7ec45a4249ce361b6cf4c47a64eb8d0654215d.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/AgentBasedConsoleProxyManager.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"b940a892f76c32b761dc7a8eec0f9a3197c5ba30","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-04-17 15:28:39","modifiedFileCount":"2","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":3,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( _sslEnabled && (_consoleProxyUrlDomain == null || _consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            _sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        _capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL);\n\n        _capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        _standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        _proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n        }\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        _mgmtPort = NumbersUtil.parseInt(value, 8250);\n\n        _listener = new ConsoleProxyListener(new VmBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        \r\n        String cpvmSrvcOffIdStr = configs.get(Config.ConsoleProxyServiceOffering.key());\n        if (cpvmSrvcOffIdStr != null) {\n            _serviceOffering = _offeringDao.findByUuid(cpvmSrvcOffIdStr);\n            if (_serviceOffering == null) {\n                try {\n                    _serviceOffering = _offeringDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.debug(\"The system service offering specified by global config is not id, but uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n                }\n            }\n            if (_serviceOffering == null) {\n                s_logger.warn(\"Can't find system service offering specified by global config, uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n            }\n        }\n\n        if (_serviceOffering == null || !_serviceOffering.isSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(_configDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(_configDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = _offeringDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n            \r\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        _loadScanner = new SystemVmLoadScanner<Long>(this);\n        _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n        _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        _staticPublicIp = _configDao.getValue(\"consoleproxy.static.publicIp\");\n        if (_staticPublicIp != null) {\n            _staticPort = NumbersUtil.parseInt(_configDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","date":"2018-09-22 23:20:48","endLine":1345,"groupId":"23392","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/87/dca70f6a08e6dfe3aa44784c884fb9c64715aa.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( _sslEnabled && (_consoleProxyUrlDomain == null || _consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            _sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        _capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL);\n\n        _capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        _standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        _proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n        }\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        _mgmtPort = NumbersUtil.parseInt(value, 8250);\n\n        _listener = new ConsoleProxyListener(new VmBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        \r\n        String cpvmSrvcOffIdStr = configs.get(Config.ConsoleProxyServiceOffering.key());\n        if (cpvmSrvcOffIdStr != null) {\n            _serviceOffering = _offeringDao.findByUuid(cpvmSrvcOffIdStr);\n            if (_serviceOffering == null) {\n                try {\n                    _serviceOffering = _offeringDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.debug(\"The system service offering specified by global config is not id, but uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n                }\n            }\n            if (_serviceOffering == null) {\n                s_logger.warn(\"Can't find system service offering specified by global config, uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n            }\n        }\n\n        if (_serviceOffering == null || !_serviceOffering.getSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(_configDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(_configDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = _offeringDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n            \r\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        _loadScanner = new SystemVmLoadScanner<Long>(this);\n        _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n        _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        _staticPublicIp = _configDao.getValue(\"consoleproxy.static.publicIp\");\n        if (_staticPublicIp != null) {\n            _staticPort = NumbersUtil.parseInt(_configDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1242,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":131,"groupId":"19044","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/48/7ec45a4249ce361b6cf4c47a64eb8d0654215d.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/AgentBasedConsoleProxyManager.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-07-28 06:56:14","commitOrder":4,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = configurationDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            sslEnabled = true;\n        }\n\n        consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( sslEnabled && (consoleProxyUrlDomain == null || consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL_IN_MILLISECONDS);\n\n        capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + standbyCapacity);\n        }\n\n        instance = configs.get(\"instance.name\");\n        if (instance == null) {\n            instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = configurationDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        managementPort = NumbersUtil.parseInt(value, 8250);\n\n        consoleProxyListener = new ConsoleProxyListener(new VmBasedAgentHook(vmInstanceDao, hostDao, configurationDao, _ksMgr, agentManager, keysManager));\n        agentManager.registerForHostEvents(consoleProxyListener, true, true, false);\n\n        virtualMachineManager.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        String configKey = Config.ConsoleProxyServiceOffering.key();\n        String cpvmSrvcOffIdStr = configs.get(configKey);\n        if (cpvmSrvcOffIdStr != null) {\n            serviceOfferingVO = serviceOfferingDao.findByUuid(cpvmSrvcOffIdStr);\n            if (serviceOfferingVO == null) {\n                try {\n                     s_logger.debug(String.format(\"Unable to find a service offering by the UUID for console proxy VM with the value [%s] set in the configuration [%s]. Trying to find by the ID.\", cpvmSrvcOffIdStr, configKey));\n                    serviceOfferingVO = serviceOfferingDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.warn(String.format(\"Unable to find a service offering by the ID for console proxy VM with the value [%s] set in the configuration [%s]. The value is not a valid integer number. Error: [%s].\", cpvmSrvcOffIdStr, configKey, ex.getMessage()), ex);\n                }\n            }\n            if (serviceOfferingVO == null) {\n                s_logger.warn(String.format(\"Unable to find a service offering by the UUID or ID for console proxy VM with the value [%s] set in the configuration [%s]\", cpvmSrvcOffIdStr, configKey));\n            }\n        }\n\n        if (serviceOfferingVO == null || !serviceOfferingVO.isSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(configurationDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(configurationDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = serviceOfferingDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        loadScanner = new SystemVmLoadScanner<>(this);\n        loadScanner.initScan(STARTUP_DELAY_IN_MILLISECONDS, capacityScanInterval);\n        resourceManager.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        staticPublicIp = configurationDao.getValue(\"consoleproxy.static.publicIp\");\n        if (staticPublicIp != null) {\n            staticPort = NumbersUtil.parseInt(configurationDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","date":"2021-07-28 06:56:14","endLine":1200,"groupId":"101991","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6c/c0ace1e05600559e196cd0be536313c3c1cd80.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring console proxy manager : \" + name);\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n\n        String value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(Config.ConsoleProxyUrlDomain.key());\n        if( _sslEnabled && (_consoleProxyUrlDomain == null || _consoleProxyUrlDomain.isEmpty())) {\n            s_logger.warn(\"Empty console proxy domain, explicitly disabling SSL\");\n            _sslEnabled = false;\n        }\n\n        value = configs.get(Config.ConsoleProxyCapacityScanInterval.key());\n        _capacityScanInterval = NumbersUtil.parseLong(value, DEFAULT_CAPACITY_SCAN_INTERVAL);\n\n        _capacityPerProxy = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.max\"), DEFAULT_PROXY_CAPACITY);\n        _standbyCapacity = NumbersUtil.parseInt(configs.get(\"consoleproxy.capacity.standby\"), DEFAULT_STANDBY_CAPACITY);\n        _proxySessionTimeoutValue = NumbersUtil.parseInt(configs.get(\"consoleproxy.session.timeout\"), DEFAULT_PROXY_SESSION_TIMEOUT);\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(Config.ConsoleProxyDisableRpFilter.key());\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _disableRpFilter = true;\n        }\n\n        value = configs.get(\"secondary.storage.vm\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _useStorageVm = true;\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console proxy max session soft limit : \" + _capacityPerProxy);\n            s_logger.info(\"Console proxy standby capacity : \" + _standbyCapacity);\n        }\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        Map<String, String> agentMgrConfigs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        value = agentMgrConfigs.get(\"port\");\n        _mgmtPort = NumbersUtil.parseInt(value, 8250);\n\n        _listener = new ConsoleProxyListener(new VmBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy, this);\n\n        \r\n        String cpvmSrvcOffIdStr = configs.get(Config.ConsoleProxyServiceOffering.key());\n        if (cpvmSrvcOffIdStr != null) {\n            _serviceOffering = _offeringDao.findByUuid(cpvmSrvcOffIdStr);\n            if (_serviceOffering == null) {\n                try {\n                    _serviceOffering = _offeringDao.findById(Long.parseLong(cpvmSrvcOffIdStr));\n                } catch (NumberFormatException ex) {\n                    s_logger.debug(\"The system service offering specified by global config is not id, but uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n                }\n            }\n            if (_serviceOffering == null) {\n                s_logger.warn(\"Can't find system service offering specified by global config, uuid=\" + cpvmSrvcOffIdStr + \" for console proxy vm\");\n            }\n        }\n\n        if (_serviceOffering == null || !_serviceOffering.isSystemUse()) {\n            int ramSize = NumbersUtil.parseInt(_configDao.getValue(\"console.ram.size\"), DEFAULT_PROXY_VM_RAMSIZE);\n            int cpuFreq = NumbersUtil.parseInt(_configDao.getValue(\"console.cpu.mhz\"), DEFAULT_PROXY_VM_CPUMHZ);\n            List<ServiceOfferingVO> offerings = _offeringDao.createSystemServiceOfferings(\"System Offering For Console Proxy\",\n                    ServiceOffering.consoleProxyDefaultOffUniqueName, 1, ramSize, cpuFreq, 0, 0, false, null,\n                    Storage.ProvisioningType.THIN, true, null, true, VirtualMachine.Type.ConsoleProxy, true);\n            \r\n            if (offerings == null || offerings.size() < 2) {\n                String msg = \"Data integrity problem : System Offering For Console Proxy has been removed?\";\n                s_logger.error(msg);\n                throw new ConfigurationException(msg);\n            }\n        }\n\n        _loadScanner = new SystemVmLoadScanner<Long>(this);\n        _loadScanner.initScan(STARTUP_DELAY, _capacityScanInterval);\n        _resourceMgr.registerResourceStateAdapter(this.getClass().getSimpleName(), this);\n\n        _staticPublicIp = _configDao.getValue(\"consoleproxy.static.publicIp\");\n        if (_staticPublicIp != null) {\n            _staticPort = NumbersUtil.parseInt(_configDao.getValue(\"consoleproxy.static.port\"), 8443);\n        }\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Console Proxy Manager is configured.\");\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1096,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":131,"groupId":"101991","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/48/7ec45a4249ce361b6cf4c47a64eb8d0654215d.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"Start configuring AgentBasedConsoleProxyManager\");\n        }\n\n        Map<String, String> configs = _configDao.getConfiguration(\"management-server\", params);\n        String value = configs.get(\"consoleproxy.url.port\");\n        if (value != null) {\n            _consoleProxyUrlPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.port\");\n        if (value != null) {\n            _consoleProxyPort = NumbersUtil.parseInt(value, ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);\n        }\n\n        value = configs.get(\"consoleproxy.sslEnabled\");\n        if (value != null && value.equalsIgnoreCase(\"true\")) {\n            _sslEnabled = true;\n        }\n\n        _consoleProxyUrlDomain = configs.get(\"consoleproxy.url.domain\");\n\n        _listener = new ConsoleProxyListener(new AgentBasedAgentHook(_instanceDao, _hostDao, _configDao, _ksMgr, _agentMgr, _keysMgr));\n        _agentMgr.registerForHostEvents(_listener, true, true, false);\n\n        if (s_logger.isInfoEnabled()) {\n            s_logger.info(\"AgentBasedConsoleProxyManager has been configured. SSL enabled: \" + _sslEnabled);\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/AgentBasedConsoleProxyManager.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"1f5ee5b3e3855c7f46d7e850465a8a0ec3a5c19c","commitMessage":"@@@Improve logs on ConsoleProxyManagerImpl and refactor a few process (#4959)\n\n","date":"2021-07-28 06:56:14","modifiedFileCount":"3","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
