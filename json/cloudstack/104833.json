[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testCheckAndSendQuotaAlertEmails() {\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setQuotaMinBalance(new BigDecimal(100));\n        acc.setQuotaBalanceDate(new Date());\n        acc.setQuotaAlertDate(null);\n        acc.setQuotaEnforce(0);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        \r\n        Mockito.doNothing().when(quotaAlertManager).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        Mockito.doReturn(true).when(quotaAlertManager).lockAccount(Mockito.anyLong());\n\n        \r\n        Mockito.doCallRealMethod().when(quotaAlertManager).checkAndSendQuotaAlertEmails();\n\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(0)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n\n        \r\n        accounts.get(0).setQuotaBalance(new BigDecimal(99));\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n    }\n","date":"2018-01-20 05:49:27","endLine":118,"groupId":"25721","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckAndSendQuotaAlertEmails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/7f126888d47a906288b3f640e49d8e1bba5128.src","preCode":"    public void testCheckAndSendQuotaAlertEmails() {\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setQuotaMinBalance(new BigDecimal(100));\n        acc.setQuotaBalanceDate(new Date());\n        acc.setQuotaAlertDate(null);\n        acc.setQuotaEnforce(0);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        \r\n        Mockito.doNothing().when(quotaAlertManager).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        Mockito.doReturn(true).when(quotaAlertManager).lockAccount(Mockito.anyLong());\n\n        \r\n        Mockito.doCallRealMethod().when(quotaAlertManager).checkAndSendQuotaAlertEmails();\n\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(0)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n\n        \r\n        accounts.get(0).setQuotaBalance(new BigDecimal(99));\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n    }\n","realPath":"framework/quota/src/test/java/org/apache/cloudstack/quota/QuotaAlertManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void testSendStatement() throws UnsupportedEncodingException, MessagingException {\n        Calendar date = Calendar.getInstance();\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setLastStatementDate(null);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        Mockito.when(quotaUsage.findTotalQuotaUsage(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyInt(), Mockito.any(Date.class), Mockito.any(Date.class)))\n                .thenReturn(new BigDecimal(100));\n\n        \r\n        quotaStatement.sendStatement();\n        Calendar period[] = quotaStatement.statementTime(date, QuotaStatementPeriods.MONTHLY);\n        if (period != null){\n            Mockito.verify(alertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":251,"groupId":"24665","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSendStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/e2/b5a0abe954080afa7b4168763bd738e9ecfea7.src","preCode":"    public void testSendStatement() throws UnsupportedEncodingException, MessagingException {\n        Calendar date = Calendar.getInstance();\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setLastStatementDate(null);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        Mockito.when(quotaUsage.findTotalQuotaUsage(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyInt(), Mockito.any(Date.class), Mockito.any(Date.class)))\n                .thenReturn(new BigDecimal(100));\n\n        \r\n        quotaStatement.sendStatement();\n        Calendar period[] = quotaStatement.statementTime(date, QuotaStatementPeriods.MONTHLY);\n        if (period != null){\n            Mockito.verify(alertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        }\n    }\n","realPath":"framework/quota/src/test/java/org/apache/cloudstack/quota/QuotaStatementTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testCheckAndSendQuotaAlertEmails() {\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setQuotaMinBalance(new BigDecimal(100));\n        acc.setQuotaBalanceDate(new Date());\n        acc.setQuotaAlertDate(null);\n        acc.setQuotaEnforce(0);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        \r\n        Mockito.doNothing().when(quotaAlertManager).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        Mockito.lenient().doReturn(true).when(quotaAlertManager).lockAccount(Mockito.anyLong());\n\n        \r\n        Mockito.doCallRealMethod().when(quotaAlertManager).checkAndSendQuotaAlertEmails();\n\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(0)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n\n        \r\n        accounts.get(0).setQuotaBalance(new BigDecimal(99));\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n    }\n","date":"2020-02-12 15:28:25","endLine":118,"groupId":"104833","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckAndSendQuotaAlertEmails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/485b90145e63379d7f44ce6cdc97503ec72c94.src","preCode":"    public void testCheckAndSendQuotaAlertEmails() {\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        accountVO.setType(Account.ACCOUNT_TYPE_NORMAL);\n        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setQuotaMinBalance(new BigDecimal(100));\n        acc.setQuotaBalanceDate(new Date());\n        acc.setQuotaAlertDate(null);\n        acc.setQuotaEnforce(0);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        \r\n        Mockito.doNothing().when(quotaAlertManager).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        Mockito.doReturn(true).when(quotaAlertManager).lockAccount(Mockito.anyLong());\n\n        \r\n        Mockito.doCallRealMethod().when(quotaAlertManager).checkAndSendQuotaAlertEmails();\n\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(0)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n\n        \r\n        accounts.get(0).setQuotaBalance(new BigDecimal(99));\n        \r\n        quotaAlertManager.checkAndSendQuotaAlertEmails();\n        Mockito.verify(quotaAlertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n    }\n","realPath":"framework/quota/src/test/java/org/apache/cloudstack/quota/QuotaAlertManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testSendStatement() throws UnsupportedEncodingException, MessagingException {\n        Calendar date = Calendar.getInstance();\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        Mockito.lenient().when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setLastStatementDate(null);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.lenient().when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        Mockito.lenient().when(quotaUsage.findTotalQuotaUsage(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyInt(), Mockito.any(Date.class), Mockito.any(Date.class)))\n                .thenReturn(new BigDecimal(100));\n\n        \r\n        quotaStatement.sendStatement();\n        Calendar period[] = quotaStatement.statementTime(date, QuotaStatementPeriods.MONTHLY);\n        if (period != null){\n            Mockito.verify(alertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        }\n    }\n","date":"2020-02-12 15:28:25","endLine":253,"groupId":"104833","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSendStatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1b/28f66b2bb9e2feff77790b9b5bd3ad2d2a4567.src","preCode":"    public void testSendStatement() throws UnsupportedEncodingException, MessagingException {\n        Calendar date = Calendar.getInstance();\n        AccountVO accountVO = new AccountVO();\n        accountVO.setId(2L);\n        accountVO.setDomainId(1L);\n        Mockito.when(accountDao.findById(Mockito.anyLong())).thenReturn(accountVO);\n\n        QuotaAccountVO acc = new QuotaAccountVO(2L);\n        acc.setQuotaBalance(new BigDecimal(404));\n        acc.setLastStatementDate(null);\n        List<QuotaAccountVO> accounts = new ArrayList<>();\n        accounts.add(acc);\n        Mockito.when(quotaAcc.listAllQuotaAccount()).thenReturn(accounts);\n\n        Mockito.when(quotaUsage.findTotalQuotaUsage(Mockito.anyLong(), Mockito.anyLong(), Mockito.anyInt(), Mockito.any(Date.class), Mockito.any(Date.class)))\n                .thenReturn(new BigDecimal(100));\n\n        \r\n        quotaStatement.sendStatement();\n        Calendar period[] = quotaStatement.statementTime(date, QuotaStatementPeriods.MONTHLY);\n        if (period != null){\n            Mockito.verify(alertManager, Mockito.times(1)).sendQuotaAlert(Mockito.any(QuotaAlertManagerImpl.DeferredQuotaEmail.class));\n        }\n    }\n","realPath":"framework/quota/src/test/java/org/apache/cloudstack/quota/QuotaStatementTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
