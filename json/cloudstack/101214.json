[{"authorTime":"2018-05-02 20:19:06","codes":[{"authorDate":"2018-05-02 20:19:06","commitOrder":1,"curCode":"    public void validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        long userVoDuplicatedMockId = 67l;\n        UserVO userVoDuplicatedMock = Mockito.mock(UserVO.class);\n        Mockito.doReturn(userName).when(userVoDuplicatedMock).getUsername();\n        Mockito.doReturn(userVoDuplicatedMockId).when(userVoDuplicatedMock).getId();\n\n        long accountIdUserDuplicated = 98l;\n        Mockito.doReturn(accountIdUserDuplicated).when(userVoDuplicatedMock).getAccountId();\n\n        Account accountUserDuplicatedMock = Mockito.mock(Account.class);\n        Mockito.doReturn(accountIdUserDuplicated).when(accountUserDuplicatedMock).getId();\n        Mockito.doReturn(45l).when(accountUserDuplicatedMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n        usersWithSameUserName.add(userVoMock);\n        usersWithSameUserName.add(userVoDuplicatedMock);\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(accountDaoMock).findById(accountMockId);\n        Mockito.doReturn(accountUserDuplicatedMock).when(accountDaoMock).findById(accountIdUserDuplicated);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","date":"2018-05-02 20:19:06","endLine":512,"groupId":"419","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fc/b0c57278b0deaf34b9c3cd7e3a796314e20699.src","preCode":"    public void validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        long userVoDuplicatedMockId = 67l;\n        UserVO userVoDuplicatedMock = Mockito.mock(UserVO.class);\n        Mockito.doReturn(userName).when(userVoDuplicatedMock).getUsername();\n        Mockito.doReturn(userVoDuplicatedMockId).when(userVoDuplicatedMock).getId();\n\n        long accountIdUserDuplicated = 98l;\n        Mockito.doReturn(accountIdUserDuplicated).when(userVoDuplicatedMock).getAccountId();\n\n        Account accountUserDuplicatedMock = Mockito.mock(Account.class);\n        Mockito.doReturn(accountIdUserDuplicated).when(accountUserDuplicatedMock).getId();\n        Mockito.doReturn(45l).when(accountUserDuplicatedMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n        usersWithSameUserName.add(userVoMock);\n        usersWithSameUserName.add(userVoDuplicatedMock);\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(accountDaoMock).findById(accountMockId);\n        Mockito.doReturn(accountUserDuplicatedMock).when(accountDaoMock).findById(accountIdUserDuplicated);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":480,"status":"B"},{"authorDate":"2018-05-02 20:19:06","commitOrder":1,"curCode":"    public void validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(accountDaoMock).findById(accountMockId);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","date":"2018-05-02 20:19:06","endLine":532,"groupId":"419","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fc/b0c57278b0deaf34b9c3cd7e3a796314e20699.src","preCode":"    public void validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(accountDaoMock).findById(accountMockId);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"B"}],"commitId":"3adc2b8485d8a56634a3d4c54074321431bf2fda","commitMessage":"@@@[CLOUDSTACK-5235] ask users current password when they are executing a password update (#2574)\n\n* [CLOUDSTACK-5235] Force users to enter old password when updating password\n\n* Formatting for checkstyle\n\n* Remove an unused import in AccountManagerImpl\n\n* Apply Nitin's suggestions\n\n* Change 'oldPassword' to 'currentPassword'\n\n* Second review of Resmo\n\n* Fix typos found by Nitin\n","date":"2018-05-02 20:19:06","modifiedFileCount":"11","status":"B","submitter":"Rafael Weing?rtner"},{"authorTime":"2019-07-16 17:25:35","codes":[{"authorDate":"2019-07-16 17:25:35","commitOrder":2,"curCode":"    public void validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        long userVoDuplicatedMockId = 67l;\n        UserVO userVoDuplicatedMock = Mockito.mock(UserVO.class);\n        Mockito.doReturn(userName).when(userVoDuplicatedMock).getUsername();\n        Mockito.doReturn(userVoDuplicatedMockId).when(userVoDuplicatedMock).getId();\n\n        long accountIdUserDuplicated = 98l;\n        Mockito.doReturn(accountIdUserDuplicated).when(userVoDuplicatedMock).getAccountId();\n\n        Account accountUserDuplicatedMock = Mockito.mock(Account.class);\n        Mockito.doReturn(accountIdUserDuplicated).when(accountUserDuplicatedMock).getId();\n        Mockito.doReturn(45l).when(accountUserDuplicatedMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n        usersWithSameUserName.add(userVoMock);\n        usersWithSameUserName.add(userVoDuplicatedMock);\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(_accountDao).findById(accountMockId);\n        Mockito.doReturn(accountUserDuplicatedMock).when(_accountDao).findById(accountIdUserDuplicated);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","date":"2019-07-16 17:25:35","endLine":512,"groupId":"419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/f0ae82ecb219e471d13f8751d1c9bc4ef5fcd8.src","preCode":"    public void validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        long userVoDuplicatedMockId = 67l;\n        UserVO userVoDuplicatedMock = Mockito.mock(UserVO.class);\n        Mockito.doReturn(userName).when(userVoDuplicatedMock).getUsername();\n        Mockito.doReturn(userVoDuplicatedMockId).when(userVoDuplicatedMock).getId();\n\n        long accountIdUserDuplicated = 98l;\n        Mockito.doReturn(accountIdUserDuplicated).when(userVoDuplicatedMock).getAccountId();\n\n        Account accountUserDuplicatedMock = Mockito.mock(Account.class);\n        Mockito.doReturn(accountIdUserDuplicated).when(accountUserDuplicatedMock).getId();\n        Mockito.doReturn(45l).when(accountUserDuplicatedMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n        usersWithSameUserName.add(userVoMock);\n        usersWithSameUserName.add(userVoDuplicatedMock);\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(accountDaoMock).findById(accountMockId);\n        Mockito.doReturn(accountUserDuplicatedMock).when(accountDaoMock).findById(accountIdUserDuplicated);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":480,"status":"M"},{"authorDate":"2019-07-16 17:25:35","commitOrder":2,"curCode":"    public void validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(_accountDao).findById(accountMockId);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","date":"2019-07-16 17:25:35","endLine":532,"groupId":"419","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/f0ae82ecb219e471d13f8751d1c9bc4ef5fcd8.src","preCode":"    public void validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(accountDaoMock).findById(accountMockId);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"}],"commitId":"e15c3112e4ff26bab341e8ca3127853b12764790","commitMessage":"@@@Merge pull request #3248 from shapeblue/storage-offering-domains-zones\n\nEnable service offerings to be scoped to domain(s) and zone(s) ","date":"2019-07-16 17:25:35","modifiedFileCount":"80","status":"M","submitter":"Paul Angus"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":3,"curCode":"    public void validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.lenient().doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        long userVoDuplicatedMockId = 67l;\n        UserVO userVoDuplicatedMock = Mockito.mock(UserVO.class);\n        Mockito.lenient().doReturn(userName).when(userVoDuplicatedMock).getUsername();\n        Mockito.doReturn(userVoDuplicatedMockId).when(userVoDuplicatedMock).getId();\n\n        long accountIdUserDuplicated = 98l;\n        Mockito.doReturn(accountIdUserDuplicated).when(userVoDuplicatedMock).getAccountId();\n\n        Account accountUserDuplicatedMock = Mockito.mock(AccountVO.class);\n        Mockito.lenient().doReturn(accountIdUserDuplicated).when(accountUserDuplicatedMock).getId();\n        Mockito.doReturn(45l).when(accountUserDuplicatedMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n        usersWithSameUserName.add(userVoMock);\n        usersWithSameUserName.add(userVoDuplicatedMock);\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.lenient().doReturn(accountMock).when(_accountDao).findById(accountMockId);\n        Mockito.doReturn(accountUserDuplicatedMock).when(_accountDao).findById(accountIdUserDuplicated);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","date":"2020-02-12 15:28:25","endLine":516,"groupId":"101214","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d8/415ff59564dce365b63290aad22adebd73ec5f.src","preCode":"    public void validateAndUpdateUsernameIfNeededTestDuplicatedUserButInDifferentDomains() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        long userVoDuplicatedMockId = 67l;\n        UserVO userVoDuplicatedMock = Mockito.mock(UserVO.class);\n        Mockito.doReturn(userName).when(userVoDuplicatedMock).getUsername();\n        Mockito.doReturn(userVoDuplicatedMockId).when(userVoDuplicatedMock).getId();\n\n        long accountIdUserDuplicated = 98l;\n        Mockito.doReturn(accountIdUserDuplicated).when(userVoDuplicatedMock).getAccountId();\n\n        Account accountUserDuplicatedMock = Mockito.mock(Account.class);\n        Mockito.doReturn(accountIdUserDuplicated).when(accountUserDuplicatedMock).getId();\n        Mockito.doReturn(45l).when(accountUserDuplicatedMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n        usersWithSameUserName.add(userVoMock);\n        usersWithSameUserName.add(userVoDuplicatedMock);\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(_accountDao).findById(accountMockId);\n        Mockito.doReturn(accountUserDuplicatedMock).when(_accountDao).findById(accountIdUserDuplicated);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":3,"curCode":"    public void validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.lenient().doReturn(userName).when(userVoMock).getUsername();\n        Mockito.lenient().doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.lenient().doReturn(accountMock).when(_accountDao).findById(accountMockId);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","date":"2020-02-12 15:28:25","endLine":536,"groupId":"101214","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d8/415ff59564dce365b63290aad22adebd73ec5f.src","preCode":"    public void validateAndUpdateUsernameIfNeededTestNoDuplicatedUserNames() {\n        long domanIdCurrentUser = 22l;\n\n        String userName = \"username\";\n        Mockito.doReturn(userName).when(UpdateUserCmdMock).getUsername();\n        Mockito.doReturn(userName).when(userVoMock).getUsername();\n        Mockito.doReturn(domanIdCurrentUser).when(accountMock).getDomainId();\n\n        List<UserVO> usersWithSameUserName = new ArrayList<>();\n\n        Mockito.doReturn(usersWithSameUserName).when(userDaoMock).findUsersByName(userName);\n\n        Mockito.doReturn(accountMock).when(_accountDao).findById(accountMockId);\n\n        accountManagerImpl.validateAndUpdateUsernameIfNeeded(UpdateUserCmdMock, userVoMock, accountMock);\n\n        Mockito.verify(userVoMock).setUsername(userName);\n    }\n","realPath":"server/src/test/java/com/cloud/user/AccountManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
