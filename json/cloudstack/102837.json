[{"authorTime":"2018-03-30 02:55:42","codes":[{"authorDate":"2018-03-30 02:55:42","commitOrder":1,"curCode":"    private void prepareAndExecuteTestcreateNewFileSrTestThrowingException(Class<? extends Throwable> exceptionClass) throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenThrow(Mockito.mock(exceptionClass));\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        assertNull(sr);\n        Mockito.verify(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n    }\n","date":"2018-03-30 02:55:42","endLine":341,"groupId":"17492","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareAndExecuteTestcreateNewFileSrTestThrowingException","params":"(Class<?extendsThrowable>exceptionClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/f99b6a600421ca142d8b456ac731bf1e700ef9.src","preCode":"    private void prepareAndExecuteTestcreateNewFileSrTestThrowingException(Class<? extends Throwable> exceptionClass) throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenThrow(Mockito.mock(exceptionClass));\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        assertNull(sr);\n        Mockito.verify(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n    }\n","realPath":"plugins/hypervisors/xenserver/src/test/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessorTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"},{"authorDate":"2018-03-30 02:55:42","commitOrder":1,"curCode":"    public void createNewFileSrTest() throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        SR srMock = Mockito.mock(SR.class);\n        Mockito.doReturn(srMock).when(xenserver625StorageProcessor).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenReturn(srMock);\n\n        PowerMockito.mockStatic(PBD.class);\n        PBD pbdMock = Mockito.mock(PBD.class);\n        PowerMockito.when(PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class))).thenReturn(pbdMock);\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        Assert.assertEquals(srMock, sr);\n        Mockito.verify(xenserver625StorageProcessor, times(0)).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        Mockito.verify(xenserver625StorageProcessor, times(0)).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n\n        Mockito.verify(srMock).scan(connectionMock);\n        Mockito.verify(pbdMock).plug(connectionMock);\n\n        PowerMockito.verifyStatic();\n        SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class));\n        PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class));\n    }\n","date":"2018-03-30 02:55:42","endLine":410,"groupId":"17492","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createNewFileSrTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0c/f99b6a600421ca142d8b456ac731bf1e700ef9.src","preCode":"    public void createNewFileSrTest() throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        SR srMock = Mockito.mock(SR.class);\n        Mockito.doReturn(srMock).when(xenserver625StorageProcessor).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenReturn(srMock);\n\n        PowerMockito.mockStatic(PBD.class);\n        PBD pbdMock = Mockito.mock(PBD.class);\n        PowerMockito.when(PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class))).thenReturn(pbdMock);\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        Assert.assertEquals(srMock, sr);\n        Mockito.verify(xenserver625StorageProcessor, times(0)).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        Mockito.verify(xenserver625StorageProcessor, times(0)).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n\n        Mockito.verify(srMock).scan(connectionMock);\n        Mockito.verify(pbdMock).plug(connectionMock);\n\n        PowerMockito.verifyStatic();\n        SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class));\n        PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class));\n    }\n","realPath":"plugins/hypervisors/xenserver/src/test/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessorTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"B"}],"commitId":"060715e9f5f929804b7f515cfba0b4b130581876","commitMessage":"@@@[CLOUDSTACK-10241] Duplicated file SRs being created in XenServer pools (#2414)\n\n* [CLOUDSTACK-10241] Duplicated file SRs being created in XenServer pools\n\nDue to a race condition between multiple management servers.  in some rare cases.  CloudStack is creating multiple file SRs to the same secondary folder. This causes a problem when introducing the SR to the XenServer pools.  as ?there will be VDIs with duplicated UUIDs?. The VDIs are the same.  but they are seen in different SRs.  and therefore cause an error.\n\nThe solution to avoid race conditions between management servers is to use a deterministic srUuid for the file SR to be created (we are leaving XenServer with the burden of managing race conditions). The UUID is based on the SR file path and is generated using  UUID#nameUUIDFromBytes. Therefore.  if there is an SR with the generated UUID.  this means that some other management server has just created it. An exception will occur and it will contain a message saying 'Db_exn.Uniqueness_constraint_violation'. In these unlikely events.  we catch the exception and use the method retrieveAlreadyConfiguredSrWithoutException to get the SR that has already been created for the given mount point.\n","date":"2018-03-30 02:55:42","modifiedFileCount":"3","status":"B","submitter":"Rafael Weing?rtner"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    private void prepareAndExecuteTestcreateNewFileSrTestThrowingException(Class<? extends Throwable> exceptionClass) throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenThrow(Mockito.mock(exceptionClass));\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        assertNull(sr);\n        Mockito.verify(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), nullable(SR.class), nullable(PBD.class));\n    }\n","date":"2020-02-12 15:28:25","endLine":342,"groupId":"102837","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"prepareAndExecuteTestcreateNewFileSrTestThrowingException","params":"(Class<?extendsThrowable>exceptionClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/70/22e6d4b67204ac917fb01f20bf578d0e692266.src","preCode":"    private void prepareAndExecuteTestcreateNewFileSrTestThrowingException(Class<? extends Throwable> exceptionClass) throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenThrow(Mockito.mock(exceptionClass));\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        assertNull(sr);\n        Mockito.verify(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n    }\n","realPath":"plugins/hypervisors/xenserver/src/test/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessorTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void createNewFileSrTest() throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        SR srMock = Mockito.mock(SR.class);\n        Mockito.doReturn(srMock).when(xenserver625StorageProcessor).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenReturn(srMock);\n\n        PowerMockito.mockStatic(PBD.class);\n        PBD pbdMock = Mockito.mock(PBD.class);\n        PowerMockito.when(PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class))).thenReturn(pbdMock);\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        Assert.assertEquals(srMock, sr);\n        Mockito.verify(xenserver625StorageProcessor, times(0)).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        Mockito.verify(xenserver625StorageProcessor, times(0)).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n\n        Mockito.verify(srMock).scan(connectionMock);\n        Mockito.verify(pbdMock).plug(connectionMock);\n\n        PowerMockito.verifyStatic(PBD.class);\n        SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class));\n        PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class));\n    }\n","date":"2020-02-12 15:28:25","endLine":411,"groupId":"102837","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createNewFileSrTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/70/22e6d4b67204ac917fb01f20bf578d0e692266.src","preCode":"    public void createNewFileSrTest() throws XenAPIException, XmlRpcException {\n        String uuid = \"hostUuid\";\n        Mockito.when(citrixResourceBase._host.getUuid()).thenReturn(uuid);\n\n        SR srMock = Mockito.mock(SR.class);\n        Mockito.doReturn(srMock).when(xenserver625StorageProcessor).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n        String srUuid = UUID.nameUUIDFromBytes(pathMock.getBytes()).toString();\n\n        Host hostMock = Mockito.mock(Host.class);\n\n        PowerMockito.mockStatic(Host.class);\n        PowerMockito.when(Host.getByUuid(connectionMock, uuid)).thenReturn(hostMock);\n\n        PowerMockito.mockStatic(SR.class);\n        PowerMockito.when(SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class))).thenReturn(srMock);\n\n        PowerMockito.mockStatic(PBD.class);\n        PBD pbdMock = Mockito.mock(PBD.class);\n        PowerMockito.when(PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class))).thenReturn(pbdMock);\n\n        Mockito.doNothing().when(xenserver625StorageProcessor).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        SR sr = xenserver625StorageProcessor.createNewFileSr(connectionMock, pathMock);\n\n        Assert.assertEquals(srMock, sr);\n        Mockito.verify(xenserver625StorageProcessor, times(0)).removeSrAndPbdIfPossible(Mockito.eq(connectionMock), Mockito.any(SR.class), Mockito.any(PBD.class));\n        Mockito.verify(xenserver625StorageProcessor, times(0)).retrieveAlreadyConfiguredSrWithoutException(connectionMock, pathMock);\n\n        Mockito.verify(srMock).scan(connectionMock);\n        Mockito.verify(pbdMock).plug(connectionMock);\n\n        PowerMockito.verifyStatic();\n        SR.introduce(Mockito.eq(connectionMock), Mockito.eq(srUuid), Mockito.eq(pathMock), Mockito.eq(pathMock), Mockito.eq(\"file\"), Mockito.eq(\"file\"), Mockito.eq(false),\n                Mockito.anyMapOf(String.class, String.class));\n        PBD.create(Mockito.eq(connectionMock), Mockito.any(Record.class));\n    }\n","realPath":"plugins/hypervisors/xenserver/src/test/java/com/cloud/hypervisor/xenserver/resource/Xenserver625StorageProcessorTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
