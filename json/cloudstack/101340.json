[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.getEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":797,"groupId":"22211","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/da/b741c3c274ded6ea2d8ba461cb81d920542cb3.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.getEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.getEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":899,"groupId":"15511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/da/b741c3c274ded6ea2d8ba461cb81d920542cb3.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.getEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":855,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-05-21 17:20:44","codes":[{"authorDate":"2018-05-21 17:20:44","commitOrder":2,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.getEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                userVm.setPassword(password);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2018-05-21 17:20:55","endLine":764,"groupId":"22211","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/df/157bf2bb51d521a0ba243497440ce85daafcc8.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.getEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":702,"status":"M"},{"authorDate":"2018-05-21 17:20:44","commitOrder":2,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.getEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(\"SSH.PublicKey\", sshPublicKey);\n            if (template.getEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2018-05-21 17:20:55","endLine":868,"groupId":"15511","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/df/157bf2bb51d521a0ba243497440ce85daafcc8.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.getEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":814,"status":"M"}],"commitId":"7c6777b8d33fb0dbb1ecacb1fbe96883fc34ca4f","commitMessage":"@@@Merge branch '4.11': allow config drives on primary storage for KVM (#2651)\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-05-21 17:20:55","modifiedFileCount":"10","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-09-22 23:20:48","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":3,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                userVm.setPassword(password);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2018-09-22 23:20:48","endLine":762,"groupId":"22211","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8d/bdf4bd862c76d5243ed3a85344222c16528eae.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.getEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                userVm.setPassword(password);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":700,"status":"M"},{"authorDate":"2018-09-22 23:20:48","commitOrder":3,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(\"SSH.PublicKey\", sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2018-09-22 23:20:48","endLine":866,"groupId":"15511","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8d/bdf4bd862c76d5243ed3a85344222c16528eae.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.getEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(\"SSH.PublicKey\", sshPublicKey);\n            if (template.getEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":812,"status":"M"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-10-05 07:48:42","codes":[{"authorDate":"2018-10-05 07:48:42","commitOrder":4,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2018-10-05 07:48:42","endLine":758,"groupId":"22211","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a0/6b595fa89151b60f0bcd03afd283b1c049da84.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                userVm.setPassword(password);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"M"},{"authorDate":"2018-10-05 07:48:42","commitOrder":4,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(\"SSH.PublicKey\", sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            } else {\n                _vmDao.saveDetails(userVm);\n            }\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2018-10-05 07:48:42","endLine":863,"groupId":"15511","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a0/6b595fa89151b60f0bcd03afd283b1c049da84.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(\"SSH.PublicKey\", sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":808,"status":"M"}],"commitId":"b6302d4e900e6eee53d6b700d85a7e81d4af5b9e","commitMessage":"@@@Merge remote-tracking branch 'origin/4.11'\n\nConflicts resolved for:\n\tengine/orchestration/src/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java\n\tengine/schema/src/com/cloud/vm/dao/UserVmDaoImpl.java\nserver/src/com/cloud/network/element/VirtualRouterElement.java\nserver/src/com/cloud/vm/UserVmManagerImpl.java\ntools/marvin/setup.py\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-10-05 07:48:42","modifiedFileCount":"7","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-06-27 11:44:47","codes":[{"authorDate":"2018-10-05 07:48:42","commitOrder":5,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2018-10-05 07:48:42","endLine":758,"groupId":"22211","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a0/6b595fa89151b60f0bcd03afd283b1c049da84.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"N"},{"authorDate":"2019-06-27 11:44:47","commitOrder":5,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            } else {\n                _vmDao.saveDetails(userVm);\n            }\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2019-06-27 11:44:47","endLine":873,"groupId":"15511","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/07/27a2a8593b62201f03ebcecf7cbdfd976a596f.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(\"SSH.PublicKey\", sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            } else {\n                _vmDao.saveDetails(userVm);\n            }\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"M"}],"commitId":"9f4f2c5348af93eeb790fbf4908cdde4f0b7806a","commitMessage":"@@@api: instance and template details are free text (#3240)\n\nProblem: Users don't know what keys/values to enter for template and VM details.\nRoot Cause: The feature does not exist that can list possible details and options.\nSolution: Based on the possible VM and template details handled by the\ncodebase.  those details were refactored and a list API is introduced\nthat can return users those details along with possible values. When\nusers add details now.  they will be presented with a list of key details\nand their possible options if any.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-06-27 11:44:47","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-12-06 20:56:38","codes":[{"authorDate":"2018-10-05 07:48:42","commitOrder":6,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2018-10-05 07:48:42","endLine":758,"groupId":"22211","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a0/6b595fa89151b60f0bcd03afd283b1c049da84.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"N"},{"authorDate":"2019-12-06 20:56:38","commitOrder":6,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2019-12-06 20:56:38","endLine":881,"groupId":"15511","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/11/c1effe951c83e3be29ff50830e05651bdecedb.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            } else {\n                _vmDao.saveDetails(userVm);\n            }\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"M"}],"commitId":"6f3694c4311fa3cdf4cb81c49b5f75378600d672","commitMessage":"@@@server: save SSH.PublicKey into user_vm_details regardless of password management (#3745)\n\nFixes: #3744\n\nSigned-off-by: Kai Takahashi <k-takahashi@creationline.com>","date":"2019-12-06 20:56:38","modifiedFileCount":"1","status":"M","submitter":"Kai Takahashi"},{"authorTime":"2020-06-11 19:47:20","codes":[{"authorDate":"2020-06-11 19:47:20","commitOrder":7,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId, false) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2020-06-11 19:47:20","endLine":803,"groupId":"22211","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ad/adf68c49da22bd013e080b8f597077c04b6f71.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":742,"status":"M"},{"authorDate":"2020-06-11 19:47:20","commitOrder":7,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId, false) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2020-06-11 19:47:20","endLine":908,"groupId":"15511","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ad/adf68c49da22bd013e080b8f597077c04b6f71.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":854,"status":"M"}],"commitId":"0795cd430b46f2001cbb902d705dd130c6f5dd7d","commitMessage":"@@@Boot into hardware setup menu on Vmware (#4021)\n\n","date":"2020-06-11 19:47:20","modifiedFileCount":"11","status":"M","submitter":"dahn"},{"authorTime":"2021-03-06 17:28:56","codes":[{"authorDate":"2021-03-06 17:28:56","commitOrder":8,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId, false, false) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2021-03-06 17:28:56","endLine":817,"groupId":"22211","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1e/afefa4c4c695e24682d516581f90262d2050e7.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId, false) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":756,"status":"M"},{"authorDate":"2021-03-06 17:28:56","commitOrder":8,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId, false, false) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2021-03-06 17:28:56","endLine":922,"groupId":"15511","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1e/afefa4c4c695e24682d516581f90262d2050e7.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId, false) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":868,"status":"M"}],"commitId":"81dfcbb5f56b616b9edcf97fffedb26c187a7fc2","commitMessage":"@@@server: Use ACPI event to reboot VM on KVM.  and Use 'forced' reboot option to stop and start the VM(s)  (#4681)\n\n* Updated libvirt's native reboot operation for VM on KVM using ACPI event.  and Added 'forced' reboot option to stop and start the VM (using rebootVirtualMachine API)\n\n* Added 'forced' reboot option for System VM and Router\n\n- New parameter 'forced' in rebootSystemVm API.  to stop and then start System VM\n- New parameter 'forced' in rebootRouter API.  to force stop and then start Router\n\n* Added force reboot tests for User VM.  System VM and Router","date":"2021-03-06 17:28:56","modifiedFileCount":"10","status":"M","submitter":"sureshanaparti"},{"authorTime":"2021-06-17 14:27:52","codes":[{"authorDate":"2021-03-06 17:28:56","commitOrder":9,"curCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId, false, false) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","date":"2021-03-06 17:28:56","endLine":817,"groupId":"101340","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"resetVMPasswordInternal","params":"(LongvmId@Stringpassword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1e/afefa4c4c695e24682d516581f90262d2050e7.src","preCode":"    private boolean resetVMPasswordInternal(Long vmId, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        if (password == null || password.equals(\"\")) {\n            return false;\n        }\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        if (template.isEnablePassword()) {\n            Nic defaultNic = _networkModel.getDefaultNic(vmId);\n            if (defaultNic == null) {\n                s_logger.error(\"Unable to reset password for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n                return false;\n            }\n\n            Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n            NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                    _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n            VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n\n            UserDataServiceProvider element = _networkMgr.getPasswordResetProvider(defaultNetwork);\n            if (element == null) {\n                throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for password reset\");\n            }\n\n            boolean result = element.savePassword(defaultNetwork, defaultNicProfile, vmProfile);\n\n            \r\n            \r\n            if (!result) {\n                s_logger.debug(\"Failed to reset password for the virtual machine; no need to reboot the vm\");\n                return false;\n            } else {\n                final UserVmVO userVm = _vmDao.findById(vmId);\n                _vmDao.loadDetails(userVm);\n                \r\n                \r\n                \r\n                encryptAndStorePassword(userVm, password);\n\n                if (vmInstance.getState() == State.Stopped) {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of password reset\");\n                    return true;\n                }\n\n                if (rebootVirtualMachine(userId, vmId, false, false) == null) {\n                    s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                    return false;\n                } else {\n                    s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of password reset\");\n                    return true;\n                }\n            }\n        } else {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Reset password called for a vm that is not using a password enabled template\");\n            }\n            return false;\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":756,"status":"N"},{"authorDate":"2021-06-17 14:27:52","commitOrder":9,"curCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId, false, false) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","date":"2021-06-17 14:27:52","endLine":931,"groupId":"101340","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"resetVMSSHKeyInternal","params":"(LongvmId@StringsshPublicKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c1/743e74623de2be691c41b21845cd5d5d33516c.src","preCode":"    private boolean resetVMSSHKeyInternal(Long vmId, String sshPublicKey, String password) throws ResourceUnavailableException, InsufficientCapacityException {\n        Long userId = CallContext.current().getCallingUserId();\n        VMInstanceVO vmInstance = _vmDao.findById(vmId);\n\n        VMTemplateVO template = _templateDao.findByIdIncludingRemoved(vmInstance.getTemplateId());\n        Nic defaultNic = _networkModel.getDefaultNic(vmId);\n        if (defaultNic == null) {\n            s_logger.error(\"Unable to reset SSH Key for vm \" + vmInstance + \" as the instance doesn't have default nic\");\n            return false;\n        }\n\n        Network defaultNetwork = _networkDao.findById(defaultNic.getNetworkId());\n        NicProfile defaultNicProfile = new NicProfile(defaultNic, defaultNetwork, null, null, null, _networkModel.isSecurityGroupSupportedInNetwork(defaultNetwork),\n                _networkModel.getNetworkTag(template.getHypervisorType(), defaultNetwork));\n\n        VirtualMachineProfile vmProfile = new VirtualMachineProfileImpl(vmInstance);\n\n        if (template.isEnablePassword()) {\n            vmProfile.setParameter(VirtualMachineProfile.Param.VmPassword, password);\n        }\n\n        UserDataServiceProvider element = _networkMgr.getSSHKeyResetProvider(defaultNetwork);\n        if (element == null) {\n            throw new CloudRuntimeException(\"Can't find network element for \" + Service.UserData.getName() + \" provider needed for SSH Key reset\");\n        }\n        boolean result = element.saveSSHKey(defaultNetwork, defaultNicProfile, vmProfile, sshPublicKey);\n\n        \r\n        if (!result) {\n            s_logger.debug(\"Failed to reset SSH Key for the virtual machine; no need to reboot the vm\");\n            return false;\n        } else {\n            final UserVmVO userVm = _vmDao.findById(vmId);\n            _vmDao.loadDetails(userVm);\n            userVm.setDetail(VmDetailConstants.SSH_PUBLIC_KEY, sshPublicKey);\n            if (template.isEnablePassword()) {\n                userVm.setPassword(password);\n                \r\n                encryptAndStorePassword(userVm, password);\n            }\n            _vmDao.saveDetails(userVm);\n\n            if (vmInstance.getState() == State.Stopped) {\n                s_logger.debug(\"Vm \" + vmInstance + \" is stopped, not rebooting it as a part of SSH Key reset\");\n                return true;\n            }\n            if (rebootVirtualMachine(userId, vmId, false, false) == null) {\n                s_logger.warn(\"Failed to reboot the vm \" + vmInstance);\n                return false;\n            } else {\n                s_logger.debug(\"Vm \" + vmInstance + \" is rebooted successfully as a part of SSH Key reset\");\n                return true;\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":886,"status":"M"}],"commitId":"a3f39db62b6e48e0e9677839f6bc6807be5b32be","commitMessage":"@@@server: Remove meaningless password regeneration on resetSSHKeyForVirtualMachine (#4819)\n\nOn API `resetSSHKeyForVirtualMachine`.  ACS also regenerates VM password when it uses a template with `Password Enabled` as true; there is already anAPI to reset VM password.  therefore.  the reset SSH keys API should not reset the VM SSH password as well.\n\nBesides running a meaningless process.  the VM's password regeneration slows down the main process and may cause a confusion in operations due to password change in the VM without being explicity requested.\n\nCo-authored-by: Daniel Augusto Veronezi Salvador <daniel@scclouds.com.br>","date":"2021-06-17 14:27:52","modifiedFileCount":"3","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
