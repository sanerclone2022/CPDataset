[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private String getMountParent() {\n        String mountParent = _configDao.getValue(Config.MountParent.key());\n        if (mountParent == null) {\n            mountParent = File.separator + \"mnt\";\n        }\n\n        String instance = _configDao.getValue(Config.InstanceName.key());\n        if (instance == null) {\n            instance = \"DEFAULT\";\n        }\n\n        if (instance != null) {\n            mountParent = mountParent + File.separator + instance;\n        }\n\n        return mountParent;\n    }\n","date":"2018-01-20 05:49:27","endLine":330,"groupId":"8805","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMountParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/63726d3474b358705ab6800d56fabb11436575.src","preCode":"    private String getMountParent() {\n        String mountParent = _configDao.getValue(Config.MountParent.key());\n        if (mountParent == null) {\n            mountParent = File.separator + \"mnt\";\n        }\n\n        String instance = _configDao.getValue(Config.InstanceName.key());\n        if (instance == null) {\n            instance = \"DEFAULT\";\n        }\n\n        if (instance != null) {\n            mountParent = mountParent + File.separator + instance;\n        }\n\n        return mountParent;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/manager/HypervManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        s_logger.info(\"Configure VmwareManagerImpl, manager name: \" + name);\n\n        if (!_configDao.isPremium()) {\n            s_logger.error(\"Vmware component can only run under premium distribution\");\n            throw new ConfigurationException(\"Vmware component can only run under premium distribution\");\n        }\n\n        _instance = _configDao.getValue(Config.InstanceName.key());\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n        s_logger.info(\"VmwareManagerImpl config - instance.name: \" + _instance);\n\n        _mountParent = _configDao.getValue(Config.MountParent.key());\n        if (_mountParent == null) {\n            _mountParent = File.separator + \"mnt\";\n        }\n\n        if (_instance != null) {\n            _mountParent = _mountParent + File.separator + _instance;\n        }\n        s_logger.info(\"VmwareManagerImpl config - _mountParent: \" + _mountParent);\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 1440) * 1000;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            _storage = new JavaStorageLayer();\n            _storage.configure(\"StorageLayer\", params);\n        }\n\n        value = _configDao.getValue(Config.VmwareCreateFullClone.key());\n        if (value == null) {\n            _fullCloneFlag = false;\n        } else {\n            _fullCloneFlag = Boolean.parseBoolean(value);\n        }\n\n        value = _configDao.getValue(Config.SetVmInternalNameUsingDisplayName.key());\n        if (value == null) {\n            _instanceNameFlag = false;\n        } else {\n            _instanceNameFlag = Boolean.parseBoolean(value);\n        }\n\n        _portsPerDvPortGroup = NumbersUtil.parseInt(_configDao.getValue(Config.VmwarePortsPerDVPortGroup.key()), _portsPerDvPortGroup);\n\n        _serviceConsoleName = _configDao.getValue(Config.VmwareServiceConsole.key());\n        if (_serviceConsoleName == null) {\n            _serviceConsoleName = \"Service Console\";\n        }\n\n        _managemetPortGroupName = _configDao.getValue(Config.VmwareManagementPortGroup.key());\n        if (_managemetPortGroupName == null) {\n            _managemetPortGroupName = \"Management Network\";\n        }\n\n        _defaultSystemVmNicAdapterType = _configDao.getValue(Config.VmwareSystemVmNicDeviceType.key());\n        if (_defaultSystemVmNicAdapterType == null) {\n            _defaultSystemVmNicAdapterType = VirtualEthernetCardType.E1000.toString();\n        }\n\n        _additionalPortRangeStart = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeStart.key()), 59000);\n        if (_additionalPortRangeStart > 65535) {\n            s_logger.warn(\"Invalid port range start port (\" + _additionalPortRangeStart + \") for additional VNC port allocation, reset it to default start port 59000\");\n            _additionalPortRangeStart = 59000;\n        }\n\n        _additionalPortRangeSize = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeSize.key()), 1000);\n        if (_additionalPortRangeSize < 0 || _additionalPortRangeStart + _additionalPortRangeSize > 65535) {\n            s_logger.warn(\"Invalid port range size (\" + _additionalPortRangeSize + \" for range starts at \" + _additionalPortRangeStart);\n            _additionalPortRangeSize = Math.min(1000, 65535 - _additionalPortRangeStart);\n        }\n\n        _routerExtraPublicNics = NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()), 2);\n\n        _vCenterSessionTimeout = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareVcenterSessionTimeout.key()), 1200) * 1000;\n        s_logger.info(\"VmwareManagerImpl config - vmware.vcenter.session.timeout: \" + _vCenterSessionTimeout);\n\n        _recycleHungWorker = _configDao.getValue(Config.VmwareRecycleHungWorker.key());\n        if (_recycleHungWorker == null || _recycleHungWorker.isEmpty()) {\n            _recycleHungWorker = \"false\";\n        }\n\n        _rootDiskController = _configDao.getValue(Config.VmwareRootDiskControllerType.key());\n        if (_rootDiskController == null || _rootDiskController.isEmpty()) {\n            _rootDiskController = DiskControllerType.ide.toString();\n        }\n\n        s_logger.info(\"Additional VNC port allocation range is settled at \" + _additionalPortRangeStart + \" to \" + (_additionalPortRangeStart + _additionalPortRangeSize));\n\n        ((VmwareStorageManagerImpl)_storageMgr).configure(params);\n\n        _agentMgr.registerForHostEvents(this, true, true, true);\n\n        s_logger.info(\"VmwareManagerImpl has been successfully configured\");\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":335,"groupId":"8805","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/149ab2bf9e06d565f1dc55c3096f39040582fe.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        s_logger.info(\"Configure VmwareManagerImpl, manager name: \" + name);\n\n        if (!_configDao.isPremium()) {\n            s_logger.error(\"Vmware component can only run under premium distribution\");\n            throw new ConfigurationException(\"Vmware component can only run under premium distribution\");\n        }\n\n        _instance = _configDao.getValue(Config.InstanceName.key());\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n        s_logger.info(\"VmwareManagerImpl config - instance.name: \" + _instance);\n\n        _mountParent = _configDao.getValue(Config.MountParent.key());\n        if (_mountParent == null) {\n            _mountParent = File.separator + \"mnt\";\n        }\n\n        if (_instance != null) {\n            _mountParent = _mountParent + File.separator + _instance;\n        }\n        s_logger.info(\"VmwareManagerImpl config - _mountParent: \" + _mountParent);\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 1440) * 1000;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            _storage = new JavaStorageLayer();\n            _storage.configure(\"StorageLayer\", params);\n        }\n\n        value = _configDao.getValue(Config.VmwareCreateFullClone.key());\n        if (value == null) {\n            _fullCloneFlag = false;\n        } else {\n            _fullCloneFlag = Boolean.parseBoolean(value);\n        }\n\n        value = _configDao.getValue(Config.SetVmInternalNameUsingDisplayName.key());\n        if (value == null) {\n            _instanceNameFlag = false;\n        } else {\n            _instanceNameFlag = Boolean.parseBoolean(value);\n        }\n\n        _portsPerDvPortGroup = NumbersUtil.parseInt(_configDao.getValue(Config.VmwarePortsPerDVPortGroup.key()), _portsPerDvPortGroup);\n\n        _serviceConsoleName = _configDao.getValue(Config.VmwareServiceConsole.key());\n        if (_serviceConsoleName == null) {\n            _serviceConsoleName = \"Service Console\";\n        }\n\n        _managemetPortGroupName = _configDao.getValue(Config.VmwareManagementPortGroup.key());\n        if (_managemetPortGroupName == null) {\n            _managemetPortGroupName = \"Management Network\";\n        }\n\n        _defaultSystemVmNicAdapterType = _configDao.getValue(Config.VmwareSystemVmNicDeviceType.key());\n        if (_defaultSystemVmNicAdapterType == null) {\n            _defaultSystemVmNicAdapterType = VirtualEthernetCardType.E1000.toString();\n        }\n\n        _additionalPortRangeStart = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeStart.key()), 59000);\n        if (_additionalPortRangeStart > 65535) {\n            s_logger.warn(\"Invalid port range start port (\" + _additionalPortRangeStart + \") for additional VNC port allocation, reset it to default start port 59000\");\n            _additionalPortRangeStart = 59000;\n        }\n\n        _additionalPortRangeSize = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeSize.key()), 1000);\n        if (_additionalPortRangeSize < 0 || _additionalPortRangeStart + _additionalPortRangeSize > 65535) {\n            s_logger.warn(\"Invalid port range size (\" + _additionalPortRangeSize + \" for range starts at \" + _additionalPortRangeStart);\n            _additionalPortRangeSize = Math.min(1000, 65535 - _additionalPortRangeStart);\n        }\n\n        _routerExtraPublicNics = NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()), 2);\n\n        _vCenterSessionTimeout = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareVcenterSessionTimeout.key()), 1200) * 1000;\n        s_logger.info(\"VmwareManagerImpl config - vmware.vcenter.session.timeout: \" + _vCenterSessionTimeout);\n\n        _recycleHungWorker = _configDao.getValue(Config.VmwareRecycleHungWorker.key());\n        if (_recycleHungWorker == null || _recycleHungWorker.isEmpty()) {\n            _recycleHungWorker = \"false\";\n        }\n\n        _rootDiskController = _configDao.getValue(Config.VmwareRootDiskControllerType.key());\n        if (_rootDiskController == null || _rootDiskController.isEmpty()) {\n            _rootDiskController = DiskControllerType.ide.toString();\n        }\n\n        s_logger.info(\"Additional VNC port allocation range is settled at \" + _additionalPortRangeStart + \" to \" + (_additionalPortRangeStart + _additionalPortRangeSize));\n\n        ((VmwareStorageManagerImpl)_storageMgr).configure(params);\n\n        _agentMgr.registerForHostEvents(this, true, true, true);\n\n        s_logger.info(\"VmwareManagerImpl has been successfully configured\");\n        return true;\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-05-12 00:51:31","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private String getMountParent() {\n        String mountParent = _configDao.getValue(Config.MountParent.key());\n        if (mountParent == null) {\n            mountParent = File.separator + \"mnt\";\n        }\n\n        String instance = _configDao.getValue(Config.InstanceName.key());\n        if (instance == null) {\n            instance = \"DEFAULT\";\n        }\n\n        if (instance != null) {\n            mountParent = mountParent + File.separator + instance;\n        }\n\n        return mountParent;\n    }\n","date":"2018-01-20 05:49:27","endLine":330,"groupId":"102817","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getMountParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/63726d3474b358705ab6800d56fabb11436575.src","preCode":"    private String getMountParent() {\n        String mountParent = _configDao.getValue(Config.MountParent.key());\n        if (mountParent == null) {\n            mountParent = File.separator + \"mnt\";\n        }\n\n        String instance = _configDao.getValue(Config.InstanceName.key());\n        if (instance == null) {\n            instance = \"DEFAULT\";\n        }\n\n        if (instance != null) {\n            mountParent = mountParent + File.separator + instance;\n        }\n\n        return mountParent;\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/manager/HypervManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"N"},{"authorDate":"2018-05-12 00:51:31","commitOrder":2,"curCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        s_logger.info(\"Configure VmwareManagerImpl, manager name: \" + name);\n\n        if (!_configDao.isPremium()) {\n            s_logger.error(\"Vmware component can only run under premium distribution\");\n            throw new ConfigurationException(\"Vmware component can only run under premium distribution\");\n        }\n\n        _instance = _configDao.getValue(Config.InstanceName.key());\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n        s_logger.info(\"VmwareManagerImpl config - instance.name: \" + _instance);\n\n        _mountParent = _configDao.getValue(Config.MountParent.key());\n        if (_mountParent == null) {\n            _mountParent = File.separator + \"mnt\";\n        }\n\n        if (_instance != null) {\n            _mountParent = _mountParent + File.separator + _instance;\n        }\n        s_logger.info(\"VmwareManagerImpl config - _mountParent: \" + _mountParent);\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 1440) * 1000;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            _storage = new JavaStorageLayer();\n            _storage.configure(\"StorageLayer\", params);\n        }\n\n        value = _configDao.getValue(Config.VmwareCreateFullClone.key());\n        if (value == null) {\n            _fullCloneFlag = false;\n        } else {\n            _fullCloneFlag = Boolean.parseBoolean(value);\n        }\n\n        value = _configDao.getValue(Config.SetVmInternalNameUsingDisplayName.key());\n        if (value == null) {\n            _instanceNameFlag = false;\n        } else {\n            _instanceNameFlag = Boolean.parseBoolean(value);\n        }\n\n        _serviceConsoleName = _configDao.getValue(Config.VmwareServiceConsole.key());\n        if (_serviceConsoleName == null) {\n            _serviceConsoleName = \"Service Console\";\n        }\n\n        _managemetPortGroupName = _configDao.getValue(Config.VmwareManagementPortGroup.key());\n        if (_managemetPortGroupName == null) {\n            _managemetPortGroupName = \"Management Network\";\n        }\n\n        _defaultSystemVmNicAdapterType = _configDao.getValue(Config.VmwareSystemVmNicDeviceType.key());\n        if (_defaultSystemVmNicAdapterType == null) {\n            _defaultSystemVmNicAdapterType = VirtualEthernetCardType.E1000.toString();\n        }\n\n        _additionalPortRangeStart = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeStart.key()), 59000);\n        if (_additionalPortRangeStart > 65535) {\n            s_logger.warn(\"Invalid port range start port (\" + _additionalPortRangeStart + \") for additional VNC port allocation, reset it to default start port 59000\");\n            _additionalPortRangeStart = 59000;\n        }\n\n        _additionalPortRangeSize = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeSize.key()), 1000);\n        if (_additionalPortRangeSize < 0 || _additionalPortRangeStart + _additionalPortRangeSize > 65535) {\n            s_logger.warn(\"Invalid port range size (\" + _additionalPortRangeSize + \" for range starts at \" + _additionalPortRangeStart);\n            _additionalPortRangeSize = Math.min(1000, 65535 - _additionalPortRangeStart);\n        }\n\n        _routerExtraPublicNics = NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()), 2);\n\n        _vCenterSessionTimeout = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareVcenterSessionTimeout.key()), 1200) * 1000;\n        s_logger.info(\"VmwareManagerImpl config - vmware.vcenter.session.timeout: \" + _vCenterSessionTimeout);\n\n        _recycleHungWorker = _configDao.getValue(Config.VmwareRecycleHungWorker.key());\n        if (_recycleHungWorker == null || _recycleHungWorker.isEmpty()) {\n            _recycleHungWorker = \"false\";\n        }\n\n        _rootDiskController = _configDao.getValue(Config.VmwareRootDiskControllerType.key());\n        if (_rootDiskController == null || _rootDiskController.isEmpty()) {\n            _rootDiskController = DiskControllerType.ide.toString();\n        }\n\n        s_logger.info(\"Additional VNC port allocation range is settled at \" + _additionalPortRangeStart + \" to \" + (_additionalPortRangeStart + _additionalPortRangeSize));\n\n        ((VmwareStorageManagerImpl)_storageMgr).configure(params);\n\n        _agentMgr.registerForHostEvents(this, true, true, true);\n\n        s_logger.info(\"VmwareManagerImpl has been successfully configured\");\n        return true;\n    }\n","date":"2018-05-12 00:51:44","endLine":334,"groupId":"102817","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(Stringname@Map<String@Object>params)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f5/86f39382154d33d051ca17cd79d15f025babe9.src","preCode":"    public boolean configure(String name, Map<String, Object> params) throws ConfigurationException {\n        s_logger.info(\"Configure VmwareManagerImpl, manager name: \" + name);\n\n        if (!_configDao.isPremium()) {\n            s_logger.error(\"Vmware component can only run under premium distribution\");\n            throw new ConfigurationException(\"Vmware component can only run under premium distribution\");\n        }\n\n        _instance = _configDao.getValue(Config.InstanceName.key());\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n        s_logger.info(\"VmwareManagerImpl config - instance.name: \" + _instance);\n\n        _mountParent = _configDao.getValue(Config.MountParent.key());\n        if (_mountParent == null) {\n            _mountParent = File.separator + \"mnt\";\n        }\n\n        if (_instance != null) {\n            _mountParent = _mountParent + File.separator + _instance;\n        }\n        s_logger.info(\"VmwareManagerImpl config - _mountParent: \" + _mountParent);\n\n        String value = (String)params.get(\"scripts.timeout\");\n        _timeout = NumbersUtil.parseInt(value, 1440) * 1000;\n\n        _storage = (StorageLayer)params.get(StorageLayer.InstanceConfigKey);\n        if (_storage == null) {\n            _storage = new JavaStorageLayer();\n            _storage.configure(\"StorageLayer\", params);\n        }\n\n        value = _configDao.getValue(Config.VmwareCreateFullClone.key());\n        if (value == null) {\n            _fullCloneFlag = false;\n        } else {\n            _fullCloneFlag = Boolean.parseBoolean(value);\n        }\n\n        value = _configDao.getValue(Config.SetVmInternalNameUsingDisplayName.key());\n        if (value == null) {\n            _instanceNameFlag = false;\n        } else {\n            _instanceNameFlag = Boolean.parseBoolean(value);\n        }\n\n        _portsPerDvPortGroup = NumbersUtil.parseInt(_configDao.getValue(Config.VmwarePortsPerDVPortGroup.key()), _portsPerDvPortGroup);\n\n        _serviceConsoleName = _configDao.getValue(Config.VmwareServiceConsole.key());\n        if (_serviceConsoleName == null) {\n            _serviceConsoleName = \"Service Console\";\n        }\n\n        _managemetPortGroupName = _configDao.getValue(Config.VmwareManagementPortGroup.key());\n        if (_managemetPortGroupName == null) {\n            _managemetPortGroupName = \"Management Network\";\n        }\n\n        _defaultSystemVmNicAdapterType = _configDao.getValue(Config.VmwareSystemVmNicDeviceType.key());\n        if (_defaultSystemVmNicAdapterType == null) {\n            _defaultSystemVmNicAdapterType = VirtualEthernetCardType.E1000.toString();\n        }\n\n        _additionalPortRangeStart = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeStart.key()), 59000);\n        if (_additionalPortRangeStart > 65535) {\n            s_logger.warn(\"Invalid port range start port (\" + _additionalPortRangeStart + \") for additional VNC port allocation, reset it to default start port 59000\");\n            _additionalPortRangeStart = 59000;\n        }\n\n        _additionalPortRangeSize = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareAdditionalVncPortRangeSize.key()), 1000);\n        if (_additionalPortRangeSize < 0 || _additionalPortRangeStart + _additionalPortRangeSize > 65535) {\n            s_logger.warn(\"Invalid port range size (\" + _additionalPortRangeSize + \" for range starts at \" + _additionalPortRangeStart);\n            _additionalPortRangeSize = Math.min(1000, 65535 - _additionalPortRangeStart);\n        }\n\n        _routerExtraPublicNics = NumbersUtil.parseInt(_configDao.getValue(Config.RouterExtraPublicNics.key()), 2);\n\n        _vCenterSessionTimeout = NumbersUtil.parseInt(_configDao.getValue(Config.VmwareVcenterSessionTimeout.key()), 1200) * 1000;\n        s_logger.info(\"VmwareManagerImpl config - vmware.vcenter.session.timeout: \" + _vCenterSessionTimeout);\n\n        _recycleHungWorker = _configDao.getValue(Config.VmwareRecycleHungWorker.key());\n        if (_recycleHungWorker == null || _recycleHungWorker.isEmpty()) {\n            _recycleHungWorker = \"false\";\n        }\n\n        _rootDiskController = _configDao.getValue(Config.VmwareRootDiskControllerType.key());\n        if (_rootDiskController == null || _rootDiskController.isEmpty()) {\n            _rootDiskController = DiskControllerType.ide.toString();\n        }\n\n        s_logger.info(\"Additional VNC port allocation range is settled at \" + _additionalPortRangeStart + \" to \" + (_additionalPortRangeStart + _additionalPortRangeSize));\n\n        ((VmwareStorageManagerImpl)_storageMgr).configure(params);\n\n        _agentMgr.registerForHostEvents(this, true, true, true);\n\n        s_logger.info(\"VmwareManagerImpl has been successfully configured\");\n        return true;\n    }\n","realPath":"plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"7ce2c2eaf0cf0c6097a64ba80336b138200be085","commitMessage":"@@@Merge branch '4.11': Fixes #2631 VMware dvs portgroup autogrowth (#2634)\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-05-12 00:51:44","modifiedFileCount":"3","status":"M","submitter":"Rohit Yadav"}]
