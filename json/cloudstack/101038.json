[{"authorTime":"2018-12-25 02:12:57","codes":[{"authorDate":"2018-12-25 02:12:57","commitOrder":1,"curCode":"    public void testCanHandle() {\n        Network network = Mockito.mock(Network.class);\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderForNetwork(Network.Provider.VirtualRouter, networkId)).thenReturn(true);\n\n        assertTrue(virtualRouterElement.canHandle(network, null));\n    }\n","date":"2018-12-25 02:12:57","endLine":473,"groupId":"21780","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCanHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2d/66ea70f6c401673c4ff302954b40a2b3875fae.src","preCode":"    public void testCanHandle() {\n        Network network = Mockito.mock(Network.class);\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderForNetwork(Network.Provider.VirtualRouter, networkId)).thenReturn(true);\n\n        assertTrue(virtualRouterElement.canHandle(network, null));\n    }\n","realPath":"server/src/test/java/com/cloud/network/element/VirtualRouterElementTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"B"},{"authorDate":"2018-12-25 02:12:57","commitOrder":1,"curCode":"    public void testAddPasswordAndUserdata() throws Exception {\n        Network network = Mockito.mock(Network.class);\n        VirtualMachineProfile vm = Mockito.mock(VirtualMachineProfile.class);\n        NicProfile nic = Mockito.mock(NicProfile.class);\n        DeployDestination dest = Mockito.mock(DeployDestination.class);\n        ReservationContext context = Mockito.mock(ReservationContext.class);\n        Service service = Service.UserData;\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        when(vm.getType()).thenReturn(VirtualMachine.Type.User);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderSupportServiceInNetwork(networkId, service, Network.Provider.VirtualRouter)).thenReturn(true);\n\n        when(virtualRouterElement._dcDao.findById(dataCenterId)).thenReturn(Mockito.mock(DataCenterVO.class));\n\n        when(virtualRouterElement.canHandle(network, service)).thenReturn(false);\n\n        assertTrue(virtualRouterElement.addPasswordAndUserdata(network, nic, vm, dest, context));\n    }\n","date":"2018-12-25 02:12:57","endLine":507,"groupId":"21783","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPasswordAndUserdata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2d/66ea70f6c401673c4ff302954b40a2b3875fae.src","preCode":"    public void testAddPasswordAndUserdata() throws Exception {\n        Network network = Mockito.mock(Network.class);\n        VirtualMachineProfile vm = Mockito.mock(VirtualMachineProfile.class);\n        NicProfile nic = Mockito.mock(NicProfile.class);\n        DeployDestination dest = Mockito.mock(DeployDestination.class);\n        ReservationContext context = Mockito.mock(ReservationContext.class);\n        Service service = Service.UserData;\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        when(vm.getType()).thenReturn(VirtualMachine.Type.User);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderSupportServiceInNetwork(networkId, service, Network.Provider.VirtualRouter)).thenReturn(true);\n\n        when(virtualRouterElement._dcDao.findById(dataCenterId)).thenReturn(Mockito.mock(DataCenterVO.class));\n\n        when(virtualRouterElement.canHandle(network, service)).thenReturn(false);\n\n        assertTrue(virtualRouterElement.addPasswordAndUserdata(network, nic, vm, dest, context));\n    }\n","realPath":"server/src/test/java/com/cloud/network/element/VirtualRouterElementTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"B"}],"commitId":"2699586d92c79017b8de09b0ad888f103b7d72f0","commitMessage":"@@@network: Send userdata to Virtual Router if IPv6 is enabled (#3100)\n\nThere is no reason to not send userdata+password to the VR as all\nInstances in CloudStack are Dual-Stacked. They have IPv4 and IPv6\nso they can query their metadata over IPv4 at the VR.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2018-12-25 02:12:57","modifiedFileCount":"2","status":"B","submitter":"Wido den Hollander"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testCanHandle() {\n        Network network = Mockito.mock(Network.class);\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        lenient().when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        lenient().when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        lenient().when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        lenient().when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderForNetwork(Network.Provider.VirtualRouter, networkId)).thenReturn(true);\n\n        assertTrue(virtualRouterElement.canHandle(network, null));\n    }\n","date":"2020-02-12 15:28:25","endLine":474,"groupId":"101038","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCanHandle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7c/2a3c781785eb7a44d0c9e14a0e18c8bfb1c649.src","preCode":"    public void testCanHandle() {\n        Network network = Mockito.mock(Network.class);\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderForNetwork(Network.Provider.VirtualRouter, networkId)).thenReturn(true);\n\n        assertTrue(virtualRouterElement.canHandle(network, null));\n    }\n","realPath":"server/src/test/java/com/cloud/network/element/VirtualRouterElementTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void testAddPasswordAndUserdata() throws Exception {\n        Network network = Mockito.mock(Network.class);\n        VirtualMachineProfile vm = Mockito.mock(VirtualMachineProfile.class);\n        NicProfile nic = Mockito.mock(NicProfile.class);\n        DeployDestination dest = Mockito.mock(DeployDestination.class);\n        ReservationContext context = Mockito.mock(ReservationContext.class);\n        Service service = Service.UserData;\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        lenient().when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        lenient().when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        lenient().when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        lenient().when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        lenient().when(vm.getType()).thenReturn(VirtualMachine.Type.User);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderSupportServiceInNetwork(networkId, service, Network.Provider.VirtualRouter)).thenReturn(true);\n\n        lenient().when(virtualRouterElement._dcDao.findById(dataCenterId)).thenReturn(Mockito.mock(DataCenterVO.class));\n\n        when(virtualRouterElement.canHandle(network, service)).thenReturn(false);\n\n        assertTrue(virtualRouterElement.addPasswordAndUserdata(network, nic, vm, dest, context));\n    }\n","date":"2020-02-12 15:28:25","endLine":508,"groupId":"101038","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPasswordAndUserdata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7c/2a3c781785eb7a44d0c9e14a0e18c8bfb1c649.src","preCode":"    public void testAddPasswordAndUserdata() throws Exception {\n        Network network = Mockito.mock(Network.class);\n        VirtualMachineProfile vm = Mockito.mock(VirtualMachineProfile.class);\n        NicProfile nic = Mockito.mock(NicProfile.class);\n        DeployDestination dest = Mockito.mock(DeployDestination.class);\n        ReservationContext context = Mockito.mock(ReservationContext.class);\n        Service service = Service.UserData;\n\n        final long networkId = 1;\n        final long physicalNetworkId = 42;\n        final long networkOfferingId = 10;\n        final long dataCenterId = 33;\n\n        when(network.getId()).thenReturn(networkId);\n        when(network.getPhysicalNetworkId()).thenReturn(physicalNetworkId);\n        when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(network.getNetworkOfferingId()).thenReturn(networkOfferingId);\n        when(network.getDataCenterId()).thenReturn(dataCenterId);\n        when(network.getVpcId()).thenReturn(null);\n\n        when(vm.getType()).thenReturn(VirtualMachine.Type.User);\n\n        when(virtualRouterElement._networkMdl.getPhysicalNetworkId(network)).thenReturn(physicalNetworkId);\n        when(virtualRouterElement._networkMdl.isProviderEnabledInPhysicalNetwork(physicalNetworkId, Network.Provider.VirtualRouter.getName())).thenReturn(true);\n        when(virtualRouterElement._networkMdl.isProviderSupportServiceInNetwork(networkId, service, Network.Provider.VirtualRouter)).thenReturn(true);\n\n        when(virtualRouterElement._dcDao.findById(dataCenterId)).thenReturn(Mockito.mock(DataCenterVO.class));\n\n        when(virtualRouterElement.canHandle(network, service)).thenReturn(false);\n\n        assertTrue(virtualRouterElement.addPasswordAndUserdata(network, nic, vm, dest, context));\n    }\n","realPath":"server/src/test/java/com/cloud/network/element/VirtualRouterElementTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
