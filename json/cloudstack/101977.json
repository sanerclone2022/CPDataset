[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean maintain(DataStore store) {\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO pool = primaryDataStoreDao.findById(store.getId());\n        try {\n            List<StoragePoolVO> spes = null;\n            \r\n            \r\n            if (pool.getScope() == ScopeType.ZONE) {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), null, null, ScopeType.ZONE);\n            } else {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), pool.getPodId(), pool.getClusterId(), ScopeType.CLUSTER);\n            }\n            for (StoragePoolVO sp : spes) {\n                if (sp.getStatus() == StoragePoolStatus.PrepareForMaintenance) {\n                    throw new CloudRuntimeException(\"Only one storage pool in a cluster can be in PrepareForMaintenance mode, \" + sp.getId() +\n                        \" is already in  PrepareForMaintenance mode \");\n                }\n            }\n            StoragePool storagePool = (StoragePool)store;\n\n            \r\n            List<HostVO> hosts = new ArrayList<HostVO>();\n            \r\n            \r\n            if (pool.getScope().equals(ScopeType.ZONE)) {\n                if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n                }\n                else {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(pool.getHypervisor(), pool.getDataCenterId());\n                }\n            } else {\n                hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n            }\n\n            if (hosts == null || hosts.size() == 0) {\n                pool.setStatus(StoragePoolStatus.Maintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n                return true;\n            } else {\n                \r\n                pool.setStatus(StoragePoolStatus.PrepareForMaintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n            }\n            \r\n            for (HostVO host : hosts) {\n                ModifyStoragePoolCommand cmd = new ModifyStoragePoolCommand(false, storagePool);\n                final Answer answer = agentMgr.easySend(host.getId(), cmd);\n                if (answer == null || !answer.getResult()) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                    }\n                } else {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false succeeded\");\n                    }\n                }\n            }\n            \r\n            \r\n            \r\n            List<StoragePoolVO> upPools = primaryDataStoreDao.listByStatusInZone(pool.getDataCenterId(), StoragePoolStatus.Up);\n            boolean restart = true;\n            if (upPools == null || upPools.size() == 0) {\n                restart = false;\n            }\n\n            \r\n            List<VolumeVO> allVolumes = volumeDao.findByPoolId(pool.getId());\n\n            \r\n            for (VolumeVO volume : allVolumes) {\n                VMInstanceVO vmInstance = vmDao.findById(volume.getInstanceId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {\n\n                    try {\n                        StoragePoolWorkVO work = new StoragePoolWorkVO(vmInstance.getId(), pool.getId(), false, false, server.getId());\n                        _storagePoolWorkDao.persist(work);\n                    } catch (Exception e) {\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Work record already exists, re-using by re-setting values\");\n                        }\n                        StoragePoolWorkVO work = _storagePoolWorkDao.findByPoolIdAndVmId(pool.getId(), vmInstance.getId());\n                        work.setStartedAfterMaintenance(false);\n                        work.setStoppedForMaintenance(false);\n                        work.setManagementServerId(server.getId());\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n\n            \r\n            List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForPrepareForMaintenanceByPoolId(pool.getId());\n\n            for (StoragePoolWorkVO work : pendingWork) {\n                \r\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n                    \r\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(consoleProxy.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n\n                        vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                if (vmInstance.getType() == VirtualMachine.Type.User) {\n                    UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(userVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO secStrgVm = _secStrgDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(secStrgVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(secStrgVm.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(domR.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(domR.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Exception in enabling primary storage maintenance:\", e);\n            pool.setStatus(StoragePoolStatus.ErrorInMaintenance);\n            primaryDataStoreDao.update(pool.getId(), pool);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":284,"groupId":"7538","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"maintain","params":"(DataStorestore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4f/fd7d80b0df5acd226bffd7efcad6b18d63426b.src","preCode":"    public boolean maintain(DataStore store) {\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO pool = primaryDataStoreDao.findById(store.getId());\n        try {\n            List<StoragePoolVO> spes = null;\n            \r\n            \r\n            if (pool.getScope() == ScopeType.ZONE) {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), null, null, ScopeType.ZONE);\n            } else {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), pool.getPodId(), pool.getClusterId(), ScopeType.CLUSTER);\n            }\n            for (StoragePoolVO sp : spes) {\n                if (sp.getStatus() == StoragePoolStatus.PrepareForMaintenance) {\n                    throw new CloudRuntimeException(\"Only one storage pool in a cluster can be in PrepareForMaintenance mode, \" + sp.getId() +\n                        \" is already in  PrepareForMaintenance mode \");\n                }\n            }\n            StoragePool storagePool = (StoragePool)store;\n\n            \r\n            List<HostVO> hosts = new ArrayList<HostVO>();\n            \r\n            \r\n            if (pool.getScope().equals(ScopeType.ZONE)) {\n                if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n                }\n                else {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(pool.getHypervisor(), pool.getDataCenterId());\n                }\n            } else {\n                hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n            }\n\n            if (hosts == null || hosts.size() == 0) {\n                pool.setStatus(StoragePoolStatus.Maintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n                return true;\n            } else {\n                \r\n                pool.setStatus(StoragePoolStatus.PrepareForMaintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n            }\n            \r\n            for (HostVO host : hosts) {\n                ModifyStoragePoolCommand cmd = new ModifyStoragePoolCommand(false, storagePool);\n                final Answer answer = agentMgr.easySend(host.getId(), cmd);\n                if (answer == null || !answer.getResult()) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                    }\n                } else {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false succeeded\");\n                    }\n                }\n            }\n            \r\n            \r\n            \r\n            List<StoragePoolVO> upPools = primaryDataStoreDao.listByStatusInZone(pool.getDataCenterId(), StoragePoolStatus.Up);\n            boolean restart = true;\n            if (upPools == null || upPools.size() == 0) {\n                restart = false;\n            }\n\n            \r\n            List<VolumeVO> allVolumes = volumeDao.findByPoolId(pool.getId());\n\n            \r\n            for (VolumeVO volume : allVolumes) {\n                VMInstanceVO vmInstance = vmDao.findById(volume.getInstanceId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {\n\n                    try {\n                        StoragePoolWorkVO work = new StoragePoolWorkVO(vmInstance.getId(), pool.getId(), false, false, server.getId());\n                        _storagePoolWorkDao.persist(work);\n                    } catch (Exception e) {\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Work record already exists, re-using by re-setting values\");\n                        }\n                        StoragePoolWorkVO work = _storagePoolWorkDao.findByPoolIdAndVmId(pool.getId(), vmInstance.getId());\n                        work.setStartedAfterMaintenance(false);\n                        work.setStoppedForMaintenance(false);\n                        work.setManagementServerId(server.getId());\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n\n            \r\n            List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForPrepareForMaintenanceByPoolId(pool.getId());\n\n            for (StoragePoolWorkVO work : pendingWork) {\n                \r\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n                    \r\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(consoleProxy.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n\n                        vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                if (vmInstance.getType() == VirtualMachine.Type.User) {\n                    UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(userVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO secStrgVm = _secStrgDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(secStrgVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(secStrgVm.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(domR.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(domR.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Exception in enabling primary storage maintenance:\", e);\n            pool.setStatus(StoragePoolStatus.ErrorInMaintenance);\n            primaryDataStoreDao.update(pool.getId(), pool);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StoragePoolAutomationImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean cancelMaintain(DataStore store) {\n        \r\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO poolVO = primaryDataStoreDao.findById(store.getId());\n        StoragePool pool = (StoragePool)store;\n\n        \r\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        \r\n        if (poolVO.getScope().equals(ScopeType.ZONE)) {\n            if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n            }\n            else {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(poolVO.getHypervisor(), pool.getDataCenterId());\n            }\n        } else {\n            hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n        }\n\n        if (hosts == null || hosts.size() == 0) {\n            return true;\n        }\n        \r\n        for (HostVO host : hosts) {\n            ModifyStoragePoolCommand msPoolCmd = new ModifyStoragePoolCommand(true, pool);\n            final Answer answer = agentMgr.easySend(host.getId(), msPoolCmd);\n            if (answer == null || !answer.getResult()) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                }\n            } else {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add secceeded\");\n                }\n            }\n        }\n\n        \r\n        List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForCancelMaintenanceByPoolId(poolVO.getId());\n\n        \r\n        for (StoragePoolWorkVO work : pendingWork) {\n            try {\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao\n                            .findById(vmInstance.getId());\n                    vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(\n                        VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO ssVm = _secStrgDao.findById(vmInstance\n                            .getId());\n                    vmMgr.advanceStart(ssVm.getUuid(), null, null);\n\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStart(domR.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.User)) {\n                    \r\n                    \r\n                    \r\n                    if (volumeDao.findByInstanceAndType(vmInstance.getId(), Volume.Type.ROOT).isEmpty()) {\n                        _storagePoolWorkDao.remove(work.getId());\n                    } else {\n                        UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n\n                        vmMgr.advanceStart(userVm.getUuid(), null, null);\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            } catch (Exception e) {\n                s_logger.debug(\"Failed start vm\", e);\n                throw new CloudRuntimeException(e.toString());\n            }\n        }\n        return false;\n    }\n","date":"2018-01-20 05:49:27","endLine":394,"groupId":"7541","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelMaintain","params":"(DataStorestore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4f/fd7d80b0df5acd226bffd7efcad6b18d63426b.src","preCode":"    public boolean cancelMaintain(DataStore store) {\n        \r\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO poolVO = primaryDataStoreDao.findById(store.getId());\n        StoragePool pool = (StoragePool)store;\n\n        \r\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        \r\n        if (poolVO.getScope().equals(ScopeType.ZONE)) {\n            if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n            }\n            else {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(poolVO.getHypervisor(), pool.getDataCenterId());\n            }\n        } else {\n            hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n        }\n\n        if (hosts == null || hosts.size() == 0) {\n            return true;\n        }\n        \r\n        for (HostVO host : hosts) {\n            ModifyStoragePoolCommand msPoolCmd = new ModifyStoragePoolCommand(true, pool);\n            final Answer answer = agentMgr.easySend(host.getId(), msPoolCmd);\n            if (answer == null || !answer.getResult()) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                }\n            } else {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add secceeded\");\n                }\n            }\n        }\n\n        \r\n        List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForCancelMaintenanceByPoolId(poolVO.getId());\n\n        \r\n        for (StoragePoolWorkVO work : pendingWork) {\n            try {\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao\n                            .findById(vmInstance.getId());\n                    vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(\n                        VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO ssVm = _secStrgDao.findById(vmInstance\n                            .getId());\n                    vmMgr.advanceStart(ssVm.getUuid(), null, null);\n\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStart(domR.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.User)) {\n                    \r\n                    \r\n                    \r\n                    if (volumeDao.findByInstanceAndType(vmInstance.getId(), Volume.Type.ROOT).isEmpty()) {\n                        _storagePoolWorkDao.remove(work.getId());\n                    } else {\n                        UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n\n                        vmMgr.advanceStart(userVm.getUuid(), null, null);\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            } catch (Exception e) {\n                s_logger.debug(\"Failed start vm\", e);\n                throw new CloudRuntimeException(e.toString());\n            }\n        }\n        return false;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StoragePoolAutomationImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    public boolean maintain(DataStore store) {\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO pool = primaryDataStoreDao.findById(store.getId());\n        try {\n            List<StoragePoolVO> spes = null;\n            \r\n            \r\n            if (pool.getScope() == ScopeType.ZONE) {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), null, null, ScopeType.ZONE);\n            } else {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), pool.getPodId(), pool.getClusterId(), ScopeType.CLUSTER);\n            }\n            for (StoragePoolVO sp : spes) {\n                if (sp.getParent() != pool.getParent() && sp.getId() != pool.getParent()) { \r\n                    if (sp.getStatus() == StoragePoolStatus.PrepareForMaintenance) {\n                        throw new CloudRuntimeException(\"Only one storage pool in a cluster can be in PrepareForMaintenance mode, \" + sp.getId() +\n                                \" is already in  PrepareForMaintenance mode \");\n                    }\n                }\n            }\n            StoragePool storagePool = (StoragePool)store;\n\n            \r\n            List<HostVO> hosts = new ArrayList<HostVO>();\n            \r\n            \r\n            if (pool.getScope().equals(ScopeType.ZONE)) {\n                if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n                }\n                else {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(pool.getHypervisor(), pool.getDataCenterId());\n                }\n            } else {\n                hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n            }\n\n            if (hosts == null || hosts.size() == 0) {\n                pool.setStatus(StoragePoolStatus.Maintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n                return true;\n            } else {\n                \r\n                pool.setStatus(StoragePoolStatus.PrepareForMaintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n            }\n            \r\n            for (HostVO host : hosts) {\n                ModifyStoragePoolCommand cmd = new ModifyStoragePoolCommand(false, storagePool);\n                final Answer answer = agentMgr.easySend(host.getId(), cmd);\n                if (answer == null || !answer.getResult()) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                    }\n                } else {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false succeeded\");\n                    }\n                }\n            }\n            \r\n            \r\n            \r\n            List<StoragePoolVO> upPools = primaryDataStoreDao.listByStatusInZone(pool.getDataCenterId(), StoragePoolStatus.Up);\n            boolean restart = true;\n            if (upPools == null || upPools.size() == 0) {\n                restart = false;\n            }\n\n            \r\n            List<VolumeVO> allVolumes = volumeDao.findByPoolId(pool.getId());\n\n            \r\n            for (VolumeVO volume : allVolumes) {\n                VMInstanceVO vmInstance = vmDao.findById(volume.getInstanceId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {\n\n                    try {\n                        StoragePoolWorkVO work = new StoragePoolWorkVO(vmInstance.getId(), pool.getId(), false, false, server.getId());\n                        _storagePoolWorkDao.persist(work);\n                    } catch (Exception e) {\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Work record already exists, re-using by re-setting values\");\n                        }\n                        StoragePoolWorkVO work = _storagePoolWorkDao.findByPoolIdAndVmId(pool.getId(), vmInstance.getId());\n                        work.setStartedAfterMaintenance(false);\n                        work.setStoppedForMaintenance(false);\n                        work.setManagementServerId(server.getId());\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n\n            \r\n            List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForPrepareForMaintenanceByPoolId(pool.getId());\n\n            for (StoragePoolWorkVO work : pendingWork) {\n                \r\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n                    \r\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(consoleProxy.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n\n                        vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                if (vmInstance.getType() == VirtualMachine.Type.User) {\n                    UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(userVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO secStrgVm = _secStrgDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(secStrgVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(secStrgVm.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(domR.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(domR.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Exception in enabling primary storage maintenance:\", e);\n            pool.setStatus(StoragePoolStatus.ErrorInMaintenance);\n            primaryDataStoreDao.update(pool.getId(), pool);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n        return true;\n    }\n","date":"2020-10-26 21:24:14","endLine":286,"groupId":"7538","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"maintain","params":"(DataStorestore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/8822e67eb3521ed73fe78a904194977c4fd5ad.src","preCode":"    public boolean maintain(DataStore store) {\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO pool = primaryDataStoreDao.findById(store.getId());\n        try {\n            List<StoragePoolVO> spes = null;\n            \r\n            \r\n            if (pool.getScope() == ScopeType.ZONE) {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), null, null, ScopeType.ZONE);\n            } else {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), pool.getPodId(), pool.getClusterId(), ScopeType.CLUSTER);\n            }\n            for (StoragePoolVO sp : spes) {\n                if (sp.getStatus() == StoragePoolStatus.PrepareForMaintenance) {\n                    throw new CloudRuntimeException(\"Only one storage pool in a cluster can be in PrepareForMaintenance mode, \" + sp.getId() +\n                        \" is already in  PrepareForMaintenance mode \");\n                }\n            }\n            StoragePool storagePool = (StoragePool)store;\n\n            \r\n            List<HostVO> hosts = new ArrayList<HostVO>();\n            \r\n            \r\n            if (pool.getScope().equals(ScopeType.ZONE)) {\n                if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n                }\n                else {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(pool.getHypervisor(), pool.getDataCenterId());\n                }\n            } else {\n                hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n            }\n\n            if (hosts == null || hosts.size() == 0) {\n                pool.setStatus(StoragePoolStatus.Maintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n                return true;\n            } else {\n                \r\n                pool.setStatus(StoragePoolStatus.PrepareForMaintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n            }\n            \r\n            for (HostVO host : hosts) {\n                ModifyStoragePoolCommand cmd = new ModifyStoragePoolCommand(false, storagePool);\n                final Answer answer = agentMgr.easySend(host.getId(), cmd);\n                if (answer == null || !answer.getResult()) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                    }\n                } else {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false succeeded\");\n                    }\n                }\n            }\n            \r\n            \r\n            \r\n            List<StoragePoolVO> upPools = primaryDataStoreDao.listByStatusInZone(pool.getDataCenterId(), StoragePoolStatus.Up);\n            boolean restart = true;\n            if (upPools == null || upPools.size() == 0) {\n                restart = false;\n            }\n\n            \r\n            List<VolumeVO> allVolumes = volumeDao.findByPoolId(pool.getId());\n\n            \r\n            for (VolumeVO volume : allVolumes) {\n                VMInstanceVO vmInstance = vmDao.findById(volume.getInstanceId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {\n\n                    try {\n                        StoragePoolWorkVO work = new StoragePoolWorkVO(vmInstance.getId(), pool.getId(), false, false, server.getId());\n                        _storagePoolWorkDao.persist(work);\n                    } catch (Exception e) {\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Work record already exists, re-using by re-setting values\");\n                        }\n                        StoragePoolWorkVO work = _storagePoolWorkDao.findByPoolIdAndVmId(pool.getId(), vmInstance.getId());\n                        work.setStartedAfterMaintenance(false);\n                        work.setStoppedForMaintenance(false);\n                        work.setManagementServerId(server.getId());\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n\n            \r\n            List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForPrepareForMaintenanceByPoolId(pool.getId());\n\n            for (StoragePoolWorkVO work : pendingWork) {\n                \r\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n                    \r\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(consoleProxy.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n\n                        vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                if (vmInstance.getType() == VirtualMachine.Type.User) {\n                    UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(userVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO secStrgVm = _secStrgDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(secStrgVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(secStrgVm.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(domR.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(domR.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Exception in enabling primary storage maintenance:\", e);\n            pool.setStatus(StoragePoolStatus.ErrorInMaintenance);\n            primaryDataStoreDao.update(pool.getId(), pool);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StoragePoolAutomationImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":2,"curCode":"    public boolean cancelMaintain(DataStore store) {\n        \r\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO poolVO = primaryDataStoreDao.findById(store.getId());\n        StoragePool pool = (StoragePool)store;\n\n        \r\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        \r\n        if (poolVO.getScope().equals(ScopeType.ZONE)) {\n            if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n            }\n            else {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(poolVO.getHypervisor(), pool.getDataCenterId());\n            }\n        } else {\n            hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n        }\n\n        if (hosts == null || hosts.size() == 0) {\n            return true;\n        }\n        \r\n        for (HostVO host : hosts) {\n            ModifyStoragePoolCommand msPoolCmd = new ModifyStoragePoolCommand(true, pool);\n            final Answer answer = agentMgr.easySend(host.getId(), msPoolCmd);\n            if (answer == null || !answer.getResult()) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                }\n            } else {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add succeeded\");\n                }\n            }\n        }\n\n        \r\n        List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForCancelMaintenanceByPoolId(poolVO.getId());\n\n        \r\n        for (StoragePoolWorkVO work : pendingWork) {\n            try {\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao\n                            .findById(vmInstance.getId());\n                    vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(\n                        VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO ssVm = _secStrgDao.findById(vmInstance\n                            .getId());\n                    vmMgr.advanceStart(ssVm.getUuid(), null, null);\n\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStart(domR.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.User)) {\n                    \r\n                    \r\n                    \r\n                    if (volumeDao.findByInstanceAndType(vmInstance.getId(), Volume.Type.ROOT).isEmpty()) {\n                        _storagePoolWorkDao.remove(work.getId());\n                    } else {\n                        UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n\n                        vmMgr.advanceStart(userVm.getUuid(), null, null);\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            } catch (Exception e) {\n                s_logger.debug(\"Failed start vm\", e);\n                throw new CloudRuntimeException(e.toString());\n            }\n        }\n        return false;\n    }\n","date":"2020-10-26 21:24:14","endLine":396,"groupId":"7541","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cancelMaintain","params":"(DataStorestore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/8822e67eb3521ed73fe78a904194977c4fd5ad.src","preCode":"    public boolean cancelMaintain(DataStore store) {\n        \r\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO poolVO = primaryDataStoreDao.findById(store.getId());\n        StoragePool pool = (StoragePool)store;\n\n        \r\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        \r\n        if (poolVO.getScope().equals(ScopeType.ZONE)) {\n            if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n            }\n            else {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(poolVO.getHypervisor(), pool.getDataCenterId());\n            }\n        } else {\n            hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n        }\n\n        if (hosts == null || hosts.size() == 0) {\n            return true;\n        }\n        \r\n        for (HostVO host : hosts) {\n            ModifyStoragePoolCommand msPoolCmd = new ModifyStoragePoolCommand(true, pool);\n            final Answer answer = agentMgr.easySend(host.getId(), msPoolCmd);\n            if (answer == null || !answer.getResult()) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                }\n            } else {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add secceeded\");\n                }\n            }\n        }\n\n        \r\n        List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForCancelMaintenanceByPoolId(poolVO.getId());\n\n        \r\n        for (StoragePoolWorkVO work : pendingWork) {\n            try {\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao\n                            .findById(vmInstance.getId());\n                    vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(\n                        VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO ssVm = _secStrgDao.findById(vmInstance\n                            .getId());\n                    vmMgr.advanceStart(ssVm.getUuid(), null, null);\n\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStart(domR.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.User)) {\n                    \r\n                    \r\n                    \r\n                    if (volumeDao.findByInstanceAndType(vmInstance.getId(), Volume.Type.ROOT).isEmpty()) {\n                        _storagePoolWorkDao.remove(work.getId());\n                    } else {\n                        UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n\n                        vmMgr.advanceStart(userVm.getUuid(), null, null);\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            } catch (Exception e) {\n                s_logger.debug(\"Failed start vm\", e);\n                throw new CloudRuntimeException(e.toString());\n            }\n        }\n        return false;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StoragePoolAutomationImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2021-05-07 19:07:42","codes":[{"authorDate":"2021-05-07 19:07:42","commitOrder":3,"curCode":"    public boolean maintain(DataStore store) {\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO pool = primaryDataStoreDao.findById(store.getId());\n        try {\n            List<StoragePoolVO> spes = null;\n            \r\n            \r\n            if (pool.getScope() == ScopeType.ZONE) {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), null, null, ScopeType.ZONE);\n            } else {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), pool.getPodId(), pool.getClusterId(), ScopeType.CLUSTER);\n            }\n            for (StoragePoolVO sp : spes) {\n                if (sp.getParent() != pool.getParent() && sp.getId() != pool.getParent()) { \r\n                    if (sp.getStatus() == StoragePoolStatus.PrepareForMaintenance) {\n                        throw new CloudRuntimeException(\"Only one storage pool in a cluster can be in PrepareForMaintenance mode, \" + sp.getId() +\n                                \" is already in  PrepareForMaintenance mode \");\n                    }\n                }\n            }\n            StoragePool storagePool = (StoragePool)store;\n\n            \r\n            List<HostVO> hosts = new ArrayList<HostVO>();\n            \r\n            \r\n            if (pool.getScope().equals(ScopeType.ZONE)) {\n                if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n                }\n                else {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(pool.getHypervisor(), pool.getDataCenterId());\n                }\n            } else {\n                hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n            }\n\n            if (hosts == null || hosts.size() == 0) {\n                pool.setStatus(StoragePoolStatus.Maintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n                return true;\n            } else {\n                \r\n                pool.setStatus(StoragePoolStatus.PrepareForMaintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n            }\n            \r\n            for (HostVO host : hosts) {\n                ModifyStoragePoolCommand cmd = new ModifyStoragePoolCommand(false, storagePool);\n                final Answer answer = agentMgr.easySend(host.getId(), cmd);\n                if (answer == null || !answer.getResult()) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                    }\n                } else {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false succeeded\");\n                    }\n                    if (pool.getPoolType() == Storage.StoragePoolType.DatastoreCluster) {\n                        s_logger.debug(String.format(\"Started synchronising datastore cluster storage pool %s with vCenter\", pool.getUuid()));\n                        storageManager.syncDatastoreClusterStoragePool(pool.getId(), ((ModifyStoragePoolAnswer) answer).getDatastoreClusterChildren(), host.getId());\n                    }\n                }\n            }\n            \r\n            \r\n            \r\n            List<StoragePoolVO> upPools = primaryDataStoreDao.listByStatusInZone(pool.getDataCenterId(), StoragePoolStatus.Up);\n            boolean restart = true;\n            if (upPools == null || upPools.size() == 0) {\n                restart = false;\n            }\n\n            \r\n            List<VolumeVO> allVolumes = volumeDao.findByPoolId(pool.getId());\n\n            \r\n            for (VolumeVO volume : allVolumes) {\n                VMInstanceVO vmInstance = vmDao.findById(volume.getInstanceId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {\n\n                    try {\n                        StoragePoolWorkVO work = new StoragePoolWorkVO(vmInstance.getId(), pool.getId(), false, false, server.getId());\n                        _storagePoolWorkDao.persist(work);\n                    } catch (Exception e) {\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Work record already exists, re-using by re-setting values\");\n                        }\n                        StoragePoolWorkVO work = _storagePoolWorkDao.findByPoolIdAndVmId(pool.getId(), vmInstance.getId());\n                        work.setStartedAfterMaintenance(false);\n                        work.setStoppedForMaintenance(false);\n                        work.setManagementServerId(server.getId());\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n\n            \r\n            List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForPrepareForMaintenanceByPoolId(pool.getId());\n\n            for (StoragePoolWorkVO work : pendingWork) {\n                \r\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n                    \r\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(consoleProxy.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n\n                        vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                if (vmInstance.getType() == VirtualMachine.Type.User) {\n                    UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(userVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO secStrgVm = _secStrgDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(secStrgVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(secStrgVm.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(domR.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(domR.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Exception in enabling primary storage maintenance:\", e);\n            pool.setStatus(StoragePoolStatus.ErrorInMaintenance);\n            primaryDataStoreDao.update(pool.getId(), pool);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n        return true;\n    }\n","date":"2021-05-07 19:07:42","endLine":293,"groupId":"101977","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"maintain","params":"(DataStorestore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/77/2b947128d09e7493a26032365d4e40e3f59ca9.src","preCode":"    public boolean maintain(DataStore store) {\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO pool = primaryDataStoreDao.findById(store.getId());\n        try {\n            List<StoragePoolVO> spes = null;\n            \r\n            \r\n            if (pool.getScope() == ScopeType.ZONE) {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), null, null, ScopeType.ZONE);\n            } else {\n                spes = primaryDataStoreDao.listBy(pool.getDataCenterId(), pool.getPodId(), pool.getClusterId(), ScopeType.CLUSTER);\n            }\n            for (StoragePoolVO sp : spes) {\n                if (sp.getParent() != pool.getParent() && sp.getId() != pool.getParent()) { \r\n                    if (sp.getStatus() == StoragePoolStatus.PrepareForMaintenance) {\n                        throw new CloudRuntimeException(\"Only one storage pool in a cluster can be in PrepareForMaintenance mode, \" + sp.getId() +\n                                \" is already in  PrepareForMaintenance mode \");\n                    }\n                }\n            }\n            StoragePool storagePool = (StoragePool)store;\n\n            \r\n            List<HostVO> hosts = new ArrayList<HostVO>();\n            \r\n            \r\n            if (pool.getScope().equals(ScopeType.ZONE)) {\n                if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n                }\n                else {\n                    hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(pool.getHypervisor(), pool.getDataCenterId());\n                }\n            } else {\n                hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n            }\n\n            if (hosts == null || hosts.size() == 0) {\n                pool.setStatus(StoragePoolStatus.Maintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n                return true;\n            } else {\n                \r\n                pool.setStatus(StoragePoolStatus.PrepareForMaintenance);\n                primaryDataStoreDao.update(pool.getId(), pool);\n            }\n            \r\n            for (HostVO host : hosts) {\n                ModifyStoragePoolCommand cmd = new ModifyStoragePoolCommand(false, storagePool);\n                final Answer answer = agentMgr.easySend(host.getId(), cmd);\n                if (answer == null || !answer.getResult()) {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                    }\n                } else {\n                    if (s_logger.isDebugEnabled()) {\n                        s_logger.debug(\"ModifyStoragePool false succeeded\");\n                    }\n                }\n            }\n            \r\n            \r\n            \r\n            List<StoragePoolVO> upPools = primaryDataStoreDao.listByStatusInZone(pool.getDataCenterId(), StoragePoolStatus.Up);\n            boolean restart = true;\n            if (upPools == null || upPools.size() == 0) {\n                restart = false;\n            }\n\n            \r\n            List<VolumeVO> allVolumes = volumeDao.findByPoolId(pool.getId());\n\n            \r\n            for (VolumeVO volume : allVolumes) {\n                VMInstanceVO vmInstance = vmDao.findById(volume.getInstanceId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {\n\n                    try {\n                        StoragePoolWorkVO work = new StoragePoolWorkVO(vmInstance.getId(), pool.getId(), false, false, server.getId());\n                        _storagePoolWorkDao.persist(work);\n                    } catch (Exception e) {\n                        if (s_logger.isDebugEnabled()) {\n                            s_logger.debug(\"Work record already exists, re-using by re-setting values\");\n                        }\n                        StoragePoolWorkVO work = _storagePoolWorkDao.findByPoolIdAndVmId(pool.getId(), vmInstance.getId());\n                        work.setStartedAfterMaintenance(false);\n                        work.setStoppedForMaintenance(false);\n                        work.setManagementServerId(server.getId());\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n\n            \r\n            List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForPrepareForMaintenanceByPoolId(pool.getId());\n\n            for (StoragePoolWorkVO work : pendingWork) {\n                \r\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n                    \r\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(consoleProxy.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n\n                        vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                if (vmInstance.getType() == VirtualMachine.Type.User) {\n                    UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(userVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO secStrgVm = _secStrgDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(secStrgVm.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(secStrgVm.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStop(domR.getUuid(), false);\n                    \r\n                    work.setStoppedForMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n\n                    if (restart) {\n                        vmMgr.advanceStart(domR.getUuid(), null, null);\n                        \r\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            s_logger.error(\"Exception in enabling primary storage maintenance:\", e);\n            pool.setStatus(StoragePoolStatus.ErrorInMaintenance);\n            primaryDataStoreDao.update(pool.getId(), pool);\n            throw new CloudRuntimeException(e.getMessage());\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StoragePoolAutomationImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-05-07 19:07:42","commitOrder":3,"curCode":"    public boolean cancelMaintain(DataStore store) {\n        \r\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO poolVO = primaryDataStoreDao.findById(store.getId());\n        StoragePool pool = (StoragePool)store;\n\n        \r\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        \r\n        if (poolVO.getScope().equals(ScopeType.ZONE)) {\n            if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n            }\n            else {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(poolVO.getHypervisor(), pool.getDataCenterId());\n            }\n        } else {\n            hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n        }\n\n        if (hosts == null || hosts.size() == 0) {\n            return true;\n        }\n        \r\n        for (HostVO host : hosts) {\n            ModifyStoragePoolCommand msPoolCmd = new ModifyStoragePoolCommand(true, pool);\n            final Answer answer = agentMgr.easySend(host.getId(), msPoolCmd);\n            if (answer == null || !answer.getResult()) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                }\n            } else {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add succeeded\");\n                }\n                if (pool.getPoolType() == Storage.StoragePoolType.DatastoreCluster) {\n                    s_logger.debug(String.format(\"Started synchronising datastore cluster storage pool %s with vCenter\", pool.getUuid()));\n                    storageManager.syncDatastoreClusterStoragePool(pool.getId(), ((ModifyStoragePoolAnswer) answer).getDatastoreClusterChildren(), host.getId());\n                }\n            }\n        }\n\n        \r\n        List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForCancelMaintenanceByPoolId(poolVO.getId());\n\n        \r\n        for (StoragePoolWorkVO work : pendingWork) {\n            try {\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao\n                            .findById(vmInstance.getId());\n                    vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(\n                        VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO ssVm = _secStrgDao.findById(vmInstance\n                            .getId());\n                    vmMgr.advanceStart(ssVm.getUuid(), null, null);\n\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStart(domR.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.User)) {\n                    \r\n                    \r\n                    \r\n                    if (volumeDao.findByInstanceAndType(vmInstance.getId(), Volume.Type.ROOT).isEmpty()) {\n                        _storagePoolWorkDao.remove(work.getId());\n                    } else {\n                        UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n\n                        vmMgr.advanceStart(userVm.getUuid(), null, null);\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            } catch (Exception e) {\n                s_logger.debug(\"Failed start vm\", e);\n                throw new CloudRuntimeException(e.toString());\n            }\n        }\n        return false;\n    }\n","date":"2021-05-07 19:07:42","endLine":407,"groupId":"101977","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"cancelMaintain","params":"(DataStorestore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/77/2b947128d09e7493a26032365d4e40e3f59ca9.src","preCode":"    public boolean cancelMaintain(DataStore store) {\n        \r\n        Long userId = CallContext.current().getCallingUserId();\n        User user = _userDao.findById(userId);\n        Account account = CallContext.current().getCallingAccount();\n        StoragePoolVO poolVO = primaryDataStoreDao.findById(store.getId());\n        StoragePool pool = (StoragePool)store;\n\n        \r\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        \r\n        if (poolVO.getScope().equals(ScopeType.ZONE)) {\n            if (HypervisorType.Any.equals(pool.getHypervisor())) {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZone(pool.getDataCenterId());\n            }\n            else {\n                hosts = _resourceMgr.listAllUpAndEnabledHostsInOneZoneByHypervisor(poolVO.getHypervisor(), pool.getDataCenterId());\n            }\n        } else {\n            hosts = _resourceMgr.listHostsInClusterByStatus(pool.getClusterId(), Status.Up);\n        }\n\n        if (hosts == null || hosts.size() == 0) {\n            return true;\n        }\n        \r\n        for (HostVO host : hosts) {\n            ModifyStoragePoolCommand msPoolCmd = new ModifyStoragePoolCommand(true, pool);\n            final Answer answer = agentMgr.easySend(host.getId(), msPoolCmd);\n            if (answer == null || !answer.getResult()) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add failed due to \" + ((answer == null) ? \"answer null\" : answer.getDetails()));\n                }\n            } else {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"ModifyStoragePool add succeeded\");\n                }\n            }\n        }\n\n        \r\n        List<StoragePoolWorkVO> pendingWork = _storagePoolWorkDao.listPendingWorkForCancelMaintenanceByPoolId(poolVO.getId());\n\n        \r\n        for (StoragePoolWorkVO work : pendingWork) {\n            try {\n                VMInstanceVO vmInstance = vmDao.findById(work.getVmId());\n\n                if (vmInstance == null) {\n                    continue;\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {\n\n                    ConsoleProxyVO consoleProxy = _consoleProxyDao\n                            .findById(vmInstance.getId());\n                    vmMgr.advanceStart(consoleProxy.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(\n                        VirtualMachine.Type.SecondaryStorageVm)) {\n                    SecondaryStorageVmVO ssVm = _secStrgDao.findById(vmInstance\n                            .getId());\n                    vmMgr.advanceStart(ssVm.getUuid(), null, null);\n\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {\n                    DomainRouterVO domR = _domrDao.findById(vmInstance.getId());\n                    vmMgr.advanceStart(domR.getUuid(), null, null);\n                    \r\n                    work.setStartedAfterMaintenance(true);\n                    _storagePoolWorkDao.update(work.getId(), work);\n                }\n\n                \r\n                if (vmInstance.getType().equals(VirtualMachine.Type.User)) {\n                    \r\n                    \r\n                    \r\n                    if (volumeDao.findByInstanceAndType(vmInstance.getId(), Volume.Type.ROOT).isEmpty()) {\n                        _storagePoolWorkDao.remove(work.getId());\n                    } else {\n                        UserVmVO userVm = userVmDao.findById(vmInstance.getId());\n\n                        vmMgr.advanceStart(userVm.getUuid(), null, null);\n                        work.setStartedAfterMaintenance(true);\n                        _storagePoolWorkDao.update(work.getId(), work);\n                    }\n                }\n            } catch (Exception e) {\n                s_logger.debug(\"Failed start vm\", e);\n                throw new CloudRuntimeException(e.toString());\n            }\n        }\n        return false;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StoragePoolAutomationImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"}],"commitId":"cb167072a176054edfef2fdee403d0f71c3c7052","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-05-07 19:07:42","modifiedFileCount":"20","status":"M","submitter":"Rohit Yadav"}]
