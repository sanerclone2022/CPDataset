[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        intf.setVirtualPortType(\"openvswitch\");\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vsp) {\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","date":"2018-01-20 05:49:27","endLine":151,"groupId":"4258","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/06/cd1617b78251c4789496be4e060644e75e0ae8.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        intf.setVirtualPortType(\"openvswitch\");\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vsp) {\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","date":"2018-01-20 05:49:27","endLine":59,"groupId":"11841","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b8/763fa8da7a83adfe5f90bcecf5918c6d324985.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/DirectVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-11-07 20:29:01","codes":[{"authorDate":"2018-11-07 20:29:01","commitOrder":2,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        if (!_libvirtComputingResource.dpdkSupport || nic.isDpdkDisabled()) {\n            \r\n            \r\n            intf.setVirtualPortType(\"openvswitch\");\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    if (_libvirtComputingResource.dpdkSupport && !nic.isDpdkDisabled()) {\n                        s_logger.debug(\"DPDK support enabled: configuring per traffic label \" + trafficLabel);\n                        if (StringUtils.isBlank(_libvirtComputingResource.dpdkOvsPath)) {\n                            throw new CloudRuntimeException(\"DPDK is enabled on the host but no OVS path has been provided\");\n                        }\n                        String port = getNextDpdkPort();\n                        addDpdkPort(_pifs.get(trafficLabel), port, vlanId);\n                        intf.defDpdkNet(_libvirtComputingResource.dpdkOvsPath, port, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), 0, getExtraDpdkProperties(extraConfig));\n                    } else {\n                        s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                        intf.setVlanTag(Integer.parseInt(vlanId));\n                    }\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vsp) {\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":218,"groupId":"4258","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ea/4fd4a58fe40d913df1547d850f160bb0d8fe16.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        intf.setVirtualPortType(\"openvswitch\");\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vsp) {\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2018-11-07 20:29:01","commitOrder":2,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":62,"groupId":"11841","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/65a379f92db1f3680fc48bdfd14a6bdf77eba5.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/DirectVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"4de4eabd18386fdb5d4242f371ec780f6d9097a5","commitMessage":"@@@Enable DPDK support on KVM (#2839)\n\n* Enable DPDK support on KVM\n\n* Allow DPDK deployments on user VMs only\n\n* Fix port name ordering\n","date":"2018-11-07 20:29:01","modifiedFileCount":"21","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-11-07 20:29:01","codes":[{"authorDate":"2019-05-14 16:58:24","commitOrder":3,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        if (!_libvirtComputingResource.dpdkSupport || nic.isDpdkDisabled()) {\n            \r\n            \r\n            intf.setVirtualPortType(\"openvswitch\");\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    if (_libvirtComputingResource.dpdkSupport && !nic.isDpdkDisabled()) {\n                        s_logger.debug(\"DPDK support enabled: configuring per traffic label \" + trafficLabel);\n                        if (StringUtils.isBlank(_libvirtComputingResource.dpdkOvsPath)) {\n                            throw new CloudRuntimeException(\"DPDK is enabled on the host but no OVS path has been provided\");\n                        }\n                        String port = getNextDpdkPort();\n                        addDpdkPort(_pifs.get(trafficLabel), port, vlanId);\n                        intf.defDpdkNet(_libvirtComputingResource.dpdkOvsPath, port, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), 0, getExtraDpdkProperties(extraConfig));\n                    } else {\n                        s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                        intf.setVlanTag(Integer.parseInt(vlanId));\n                    }\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","date":"2019-05-14 16:58:24","endLine":214,"groupId":"4258","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/db/3ee4dd3507648424db80b1ebec4f5dec431868.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        if (!_libvirtComputingResource.dpdkSupport || nic.isDpdkDisabled()) {\n            \r\n            \r\n            intf.setVirtualPortType(\"openvswitch\");\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    if (_libvirtComputingResource.dpdkSupport && !nic.isDpdkDisabled()) {\n                        s_logger.debug(\"DPDK support enabled: configuring per traffic label \" + trafficLabel);\n                        if (StringUtils.isBlank(_libvirtComputingResource.dpdkOvsPath)) {\n                            throw new CloudRuntimeException(\"DPDK is enabled on the host but no OVS path has been provided\");\n                        }\n                        String port = getNextDpdkPort();\n                        addDpdkPort(_pifs.get(trafficLabel), port, vlanId);\n                        intf.defDpdkNet(_libvirtComputingResource.dpdkOvsPath, port, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), 0, getExtraDpdkProperties(extraConfig));\n                    } else {\n                        s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                        intf.setVlanTag(Integer.parseInt(vlanId));\n                    }\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vsp) {\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2018-11-07 20:29:01","commitOrder":3,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":62,"groupId":"11841","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/65a379f92db1f3680fc48bdfd14a6bdf77eba5.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/DirectVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"}],"commitId":"e11f7ee1bad4f5a91b9cb82fdabb34231c04c102","commitMessage":"@@@RIP Nuage Cloudstack Plugin (#3146)\n\nmay it rest in peaces","date":"2019-05-14 16:58:24","modifiedFileCount":"16","status":"M","submitter":"Frank Maximus"},{"authorTime":"2018-11-07 20:29:01","codes":[{"authorDate":"2019-05-29 19:36:33","commitOrder":4,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        if (!_libvirtComputingResource.dpdkSupport || nic.isDpdkDisabled()) {\n            \r\n            \r\n            intf.setVirtualPortType(\"openvswitch\");\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    if (_libvirtComputingResource.dpdkSupport && !nic.isDpdkDisabled()) {\n                        s_logger.debug(\"DPDK support enabled: configuring per traffic label \" + trafficLabel);\n                        String dpdkOvsPath = _libvirtComputingResource.dpdkOvsPath;\n                        if (StringUtils.isBlank(dpdkOvsPath)) {\n                            throw new CloudRuntimeException(\"DPDK is enabled on the host but no OVS path has been provided\");\n                        }\n                        String port = dpdkDriver.getNextDpdkPort();\n                        DPDKHelper.VHostUserMode dpdKvHostUserMode = dpdkDriver.getDPDKvHostUserMode(extraConfig);\n                        dpdkDriver.addDpdkPort(_pifs.get(trafficLabel), port, vlanId, dpdKvHostUserMode, dpdkOvsPath);\n                        String interfaceMode = dpdkDriver.getGuestInterfacesModeFromDPDKVhostUserMode(dpdKvHostUserMode);\n                        intf.defDpdkNet(dpdkOvsPath, port, nic.getMac(),\n                                getGuestNicModel(guestOsType, nicAdapter), 0,\n                                dpdkDriver.getExtraDpdkProperties(extraConfig),\n                                interfaceMode);\n                    } else {\n                        s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                        intf.setVlanTag(Integer.parseInt(vlanId));\n                    }\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","date":"2019-05-29 19:36:33","endLine":178,"groupId":"4258","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/82/08530ce22da83a2a9b881e5122258ff31421fc.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        if (!_libvirtComputingResource.dpdkSupport || nic.isDpdkDisabled()) {\n            \r\n            \r\n            intf.setVirtualPortType(\"openvswitch\");\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    if (_libvirtComputingResource.dpdkSupport && !nic.isDpdkDisabled()) {\n                        s_logger.debug(\"DPDK support enabled: configuring per traffic label \" + trafficLabel);\n                        if (StringUtils.isBlank(_libvirtComputingResource.dpdkOvsPath)) {\n                            throw new CloudRuntimeException(\"DPDK is enabled on the host but no OVS path has been provided\");\n                        }\n                        String port = getNextDpdkPort();\n                        addDpdkPort(_pifs.get(trafficLabel), port, vlanId);\n                        intf.defDpdkNet(_libvirtComputingResource.dpdkOvsPath, port, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), 0, getExtraDpdkProperties(extraConfig));\n                    } else {\n                        s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                        intf.setVlanTag(Integer.parseInt(vlanId));\n                    }\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2018-11-07 20:29:01","commitOrder":4,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":62,"groupId":"11841","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/65a379f92db1f3680fc48bdfd14a6bdf77eba5.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/DirectVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"}],"commitId":"501aa7cd9199c90d4904b113d159779ffa5b8eeb","commitMessage":"@@@DPDK vHost User mode selection (#3153)\n\n* DPDK vHost User mode selection\n\n* SQL text field and DPDK classes refactor\n\n* Fix NullPointerException after refactor\n\n* Fix unit test\n\n* Refactor details type\n","date":"2019-05-29 19:36:33","modifiedFileCount":"7","status":"M","submitter":"Nicolas Vazquez"},{"authorTime":"2018-11-07 20:29:01","codes":[{"authorDate":"2019-06-25 23:23:09","commitOrder":5,"curCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        if (!_libvirtComputingResource.dpdkSupport || !nic.isDpdkEnabled()) {\n            \r\n            \r\n            intf.setVirtualPortType(\"openvswitch\");\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    if (_libvirtComputingResource.dpdkSupport && nic.isDpdkEnabled()) {\n                        plugDPDKInterface(intf, trafficLabel, extraConfig, vlanId, guestOsType, nic, nicAdapter);\n                    } else {\n                        s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                        intf.setVlanTag(Integer.parseInt(vlanId));\n                    }\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","date":"2019-06-25 23:23:09","endLine":188,"groupId":"103306","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1e/7f4d5cc20986a1db9d90f5360b0c01af10ed5c.src","preCode":"    public InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        s_logger.debug(\"plugging nic=\" + nic);\n\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n        if (!_libvirtComputingResource.dpdkSupport || nic.isDpdkDisabled()) {\n            \r\n            \r\n            intf.setVirtualPortType(\"openvswitch\");\n        }\n\n        String vlanId = null;\n        String logicalSwitchUuid = null;\n        if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan) {\n            vlanId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch) {\n            logicalSwitchUuid = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n        } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) {\n            \r\n            vlanId = NetUtils.getPrimaryPvlanFromUri(nic.getBroadcastUri());\n        }\n        String trafficLabel = nic.getName();\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if ((nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan || nic.getBroadcastType() == Networks.BroadcastDomainType.Pvlan) &&\n                    !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    if (_libvirtComputingResource.dpdkSupport && !nic.isDpdkDisabled()) {\n                        s_logger.debug(\"DPDK support enabled: configuring per traffic label \" + trafficLabel);\n                        String dpdkOvsPath = _libvirtComputingResource.dpdkOvsPath;\n                        if (StringUtils.isBlank(dpdkOvsPath)) {\n                            throw new CloudRuntimeException(\"DPDK is enabled on the host but no OVS path has been provided\");\n                        }\n                        String port = dpdkDriver.getNextDpdkPort();\n                        DPDKHelper.VHostUserMode dpdKvHostUserMode = dpdkDriver.getDPDKvHostUserMode(extraConfig);\n                        dpdkDriver.addDpdkPort(_pifs.get(trafficLabel), port, vlanId, dpdKvHostUserMode, dpdkOvsPath);\n                        String interfaceMode = dpdkDriver.getGuestInterfacesModeFromDPDKVhostUserMode(dpdKvHostUserMode);\n                        intf.defDpdkNet(dpdkOvsPath, port, nic.getMac(),\n                                getGuestNicModel(guestOsType, nicAdapter), 0,\n                                dpdkDriver.getExtraDpdkProperties(extraConfig),\n                                interfaceMode);\n                    } else {\n                        s_logger.debug(\"creating a vlan dev and bridge for guest traffic per traffic label \" + trafficLabel);\n                        intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                        intf.setVlanTag(Integer.parseInt(vlanId));\n                    }\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Lswitch || nic.getBroadcastType() == Networks.BroadcastDomainType.OpenDaylight) {\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + logicalSwitchUuid);\n                intf.setVirtualPortInterfaceId(nic.getUuid());\n                String brName = (trafficLabel != null && !trafficLabel.isEmpty()) ? _pifs.get(trafficLabel) : _pifs.get(\"private\");\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vswitch) {\n                String vnetId = Networks.BroadcastDomainType.getValue(nic.getBroadcastUri());\n                String brName = \"OVSTunnel\" + vnetId;\n                s_logger.debug(\"nic \" + nic + \" needs to be connected to LogicalSwitch \" + brName);\n                intf.defBridgeNet(brName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            } else {\n                intf.defBridgeNet(_bridges.get(\"guest\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Control) {\n            \n            createControlNetwork(_bridges.get(\"linklocal\"));\n            intf.defBridgeNet(_bridges.get(\"linklocal\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            if (nic.getBroadcastType() == Networks.BroadcastDomainType.Vlan && !vlanId.equalsIgnoreCase(\"untagged\")) {\n                if (trafficLabel != null && !trafficLabel.isEmpty()) {\n                    s_logger.debug(\"creating a vlan dev and bridge for public traffic per traffic label \" + trafficLabel);\n                    intf.defBridgeNet(_pifs.get(trafficLabel), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                } else {\n                    intf.defBridgeNet(_pifs.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n                    intf.setVlanTag(Integer.parseInt(vlanId));\n                }\n            } else {\n                intf.defBridgeNet(_bridges.get(\"public\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter), networkRateKBps);\n            }\n        } else if (nic.getType() == Networks.TrafficType.Management) {\n            intf.defBridgeNet(_bridges.get(\"private\"), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        } else if (nic.getType() == Networks.TrafficType.Storage) {\n            String storageBrName = nic.getName() == null ? _bridges.get(\"private\") : nic.getName();\n            intf.defBridgeNet(storageBrName, null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter));\n        }\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/OvsVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2018-11-07 20:29:01","commitOrder":5,"curCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","date":"2018-11-07 20:29:01","endLine":62,"groupId":"103306","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"plug","params":"(NicTOnic@StringguestOsType@StringnicAdapter@Map<String@String>extraConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/65a379f92db1f3680fc48bdfd14a6bdf77eba5.src","preCode":"    public LibvirtVMDef.InterfaceDef plug(NicTO nic, String guestOsType, String nicAdapter, Map<String, String> extraConfig) throws InternalErrorException, LibvirtException {\n        LibvirtVMDef.InterfaceDef intf = new LibvirtVMDef.InterfaceDef();\n\n        if (nic.getType() == Networks.TrafficType.Guest) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n\n        } else if (nic.getType() == Networks.TrafficType.Public) {\n            Integer networkRateKBps = (nic.getNetworkRateMbps() != null && nic.getNetworkRateMbps().intValue() != -1) ? nic.getNetworkRateMbps().intValue() * 128 : 0;\n            intf.defDirectNet(_libvirtComputingResource.getNetworkDirectDevice(), null, nic.getMac(), getGuestNicModel(guestOsType, nicAdapter),\n                _libvirtComputingResource.getNetworkDirectSourceMode(), networkRateKBps);\n        }\n\n        return intf;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/DirectVifDriver.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"}],"commitId":"a75444a585b952aeb3e984430238cae9e6be4dc5","commitMessage":"@@@KVM: DPDK live migrations (#3365)\n\n* DPDK live migrations\n\n* Remove DPDK created ports if VM migration fails or prepare migration fails\n\n* Rename DPDK classes lowercase\n","date":"2019-06-25 23:23:09","modifiedFileCount":"19","status":"M","submitter":"Nicolas Vazquez"}]
