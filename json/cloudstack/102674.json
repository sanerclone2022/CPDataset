[{"authorTime":"2015-08-26 02:44:50","codes":[{"authorDate":"2015-08-26 02:44:50","commitOrder":1,"curCode":"    public static Long[] cidrToLong(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        int cidrSizeNum = -1;\n\n        try {\n            cidrSizeNum = Integer.parseInt(cidrSize);\n        } catch (final Exception e) {\n            return null;\n        }\n        final long numericNetmask = 0xffffffff >> MAX_CIDR - cidrSizeNum << MAX_CIDR - cidrSizeNum;\n        final long ipAddr = ip2Long(cidrAddress);\n        final Long[] cidrlong = {ipAddr & numericNetmask, (long)cidrSizeNum};\n        return cidrlong;\n\n    }\n","date":"2015-08-26 02:44:52","endLine":895,"groupId":"18993","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"cidrToLong","params":"(finalStringcidr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/3129b20ffa7e30aad7b508a07eb11accc86799.src","preCode":"    public static Long[] cidrToLong(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        int cidrSizeNum = -1;\n\n        try {\n            cidrSizeNum = Integer.parseInt(cidrSize);\n        } catch (final Exception e) {\n            return null;\n        }\n        final long numericNetmask = 0xffffffff >> MAX_CIDR - cidrSizeNum << MAX_CIDR - cidrSizeNum;\n        final long ipAddr = ip2Long(cidrAddress);\n        final Long[] cidrlong = {ipAddr & numericNetmask, (long)cidrSizeNum};\n        return cidrlong;\n\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/net/NetUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"B"},{"authorDate":"2015-08-26 02:44:50","commitOrder":1,"curCode":"    public static String getCidrSubNet(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        int cidrSizeNum = -1;\n\n        try {\n            cidrSizeNum = Integer.parseInt(cidrSize);\n        } catch (final Exception e) {\n            return null;\n        }\n        final long numericNetmask = 0xffffffff >> MAX_CIDR - cidrSizeNum << MAX_CIDR - cidrSizeNum;\n        final String netmask = NetUtils.long2Ip(numericNetmask);\n        return getSubNet(cidrAddress, netmask);\n    }\n","date":"2015-08-26 02:44:52","endLine":920,"groupId":"18993","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCidrSubNet","params":"(finalStringcidr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/88/3129b20ffa7e30aad7b508a07eb11accc86799.src","preCode":"    public static String getCidrSubNet(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        int cidrSizeNum = -1;\n\n        try {\n            cidrSizeNum = Integer.parseInt(cidrSize);\n        } catch (final Exception e) {\n            return null;\n        }\n        final long numericNetmask = 0xffffffff >> MAX_CIDR - cidrSizeNum << MAX_CIDR - cidrSizeNum;\n        final String netmask = NetUtils.long2Ip(numericNetmask);\n        return getSubNet(cidrAddress, netmask);\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/net/NetUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":897,"status":"B"}],"commitId":"44ba14d17ba3b8fa00cd05c97eaceed49367816c","commitMessage":"@@@Merge pull request #737 from miguelaferreira/feature/mferreira/ncx-follow-redirects-gardened-rebase\n\nCLOUDSTACK-8758: Handle redirects in communication with NXS controller (a.k.a. Nicira NVP)When an NSX controller node is part of a cluster it will redirect API calls to the master controller. Because the ACS management server does not follow such redirects.  if there is a change of master within a NSX cluster.  the NSX device (a.k.a.  NiciraNvp) needs to be reconfigured (via the management server DB).\n\nThe goal of this PR is to enable ACS management server to follow HTTP redirects sent by NSX controllers. However.  other changes were made to the cloud-utils module that provides the REST client that the NSX plugin uses.\n\nCosmetic changes:\n* Upgrade maven module structure for cloud-utils and cloud-plugin-netowkr-nvp to comply with maven default\n* Several refactorings on both modules to consistently format the code.  remove unused code.  declare final when possible.  remove auto generated comments.  etc\n\nOther changes:\n* Upgrade HTTP library used in REST client to version 4.5 of Apache HTTP Components\n* Implement generic REST client that supports HTTP redirects\n* Implement NSX specific REST client\n* Simplify NSX api implementation\n* Previously existing unit tests for both the REST client and NSX api were either maintained in the same test classes.  moved to new test classes (because code under tests also moved).  or removed (because code under tests was also removed)\n* New Marvin tests for NSX controllers\n\nTesting:\n* Ran all unit tests present in the project\n* Ran Java Integration tests for NSX api targeting both a master and a slave controller\n* Ran new Marvin test for NSX controller\n* Manual inspection of logs to confirm redirection is taking place\n\n* pr/737:\n  Use NSX specific RestClient in API implementation (NiciraNvpApi)\n  Refactor NSX api implementation (NiciraNvpApi)\n  Add NSX specific RestClient implementation\n  Delegate HTTP protocol activity in RESTServiceConnector to RestClient\n  Add basic RestClient implentation based on HTTP Components 4.5\n  Code clean up in cloud-plugin-network-nvp project\n  Code clean up in cloud-utils project\n  Refactor cloud-plugin-network-nvp project into Maven default structure\n  Refactor cloud-utils project into Maven default structure\n  Fix unit-test library dependencies\n  Add Marvin test for Nicira NVP plugin\n  Create Nicira NVP devices and enable plugin at deploy\n\nSigned-off-by: Remi Bergsma <github@remi.nl>\n","date":"2015-08-26 02:44:52","modifiedFileCount":"0","status":"B","submitter":"Remi Bergsma"},{"authorTime":"2015-12-07 03:10:56","codes":[{"authorDate":"2015-12-07 03:10:56","commitOrder":2,"curCode":"    public static Long[] cidrToLong(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            throw new CloudRuntimeException(\"empty cidr can not be converted to longs\");\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            throw new CloudRuntimeException(\"cidr is not formatted correctly: \"+ cidr);\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            throw new CloudRuntimeException(\"cidr is not valid in ip space\" + cidr);\n        }\n        long cidrSizeNum = getCidrSizeFromString(cidrSize);\n        final long numericNetmask = netMaskFromCidr(cidrSizeNum);\n        final long ipAddr = ip2Long(cidrAddress);\n        final Long[] cidrlong = {ipAddr & numericNetmask, cidrSizeNum};\n        return cidrlong;\n\n    }\n","date":"2015-12-07 03:10:57","endLine":904,"groupId":"4054","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"cidrToLong","params":"(finalStringcidr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/90/a43fa7e2a93f3f0f71934006fb77655d817cf4.src","preCode":"    public static Long[] cidrToLong(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        int cidrSizeNum = -1;\n\n        try {\n            cidrSizeNum = Integer.parseInt(cidrSize);\n        } catch (final Exception e) {\n            return null;\n        }\n        final long numericNetmask = 0xffffffff >> MAX_CIDR - cidrSizeNum << MAX_CIDR - cidrSizeNum;\n        final long ipAddr = ip2Long(cidrAddress);\n        final Long[] cidrlong = {ipAddr & numericNetmask, (long)cidrSizeNum};\n        return cidrlong;\n\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/net/NetUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":885,"status":"M"},{"authorDate":"2015-12-07 03:10:56","commitOrder":2,"curCode":"    public static String getCidrSubNet(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        long cidrSizeNum = getCidrSizeFromString(cidrSize);\n        final long numericNetmask = netMaskFromCidr(cidrSizeNum);\n        final String netmask = NetUtils.long2Ip(numericNetmask);\n        return getSubNet(cidrAddress, netmask);\n    }\n","date":"2015-12-07 03:10:57","endLine":942,"groupId":"18993","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCidrSubNet","params":"(finalStringcidr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/90/a43fa7e2a93f3f0f71934006fb77655d817cf4.src","preCode":"    public static String getCidrSubNet(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        int cidrSizeNum = -1;\n\n        try {\n            cidrSizeNum = Integer.parseInt(cidrSize);\n        } catch (final Exception e) {\n            return null;\n        }\n        final long numericNetmask = 0xffffffff >> MAX_CIDR - cidrSizeNum << MAX_CIDR - cidrSizeNum;\n        final String netmask = NetUtils.long2Ip(numericNetmask);\n        return getSubNet(cidrAddress, netmask);\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/net/NetUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":925,"status":"M"}],"commitId":"afe11309200ac1e9b90571411b9855194a5e24d0","commitMessage":"@@@Merge pull request #1057 from DaanHoogland/CWE-190\n\nCwe 190coverity warnings of this type adressed. Some where dismissed and maybe with reason but it seemed possible to remove them and hence obligatory ;p\n\n* pr/1057:\n  move back to original contract of isNetworksOverlap()\n  Changed the behavior of methods that use NetUtils.cidrToLong(String)\n  CWE-190 unit test for extremes of long netMaskFromCidr(long)\n  CWE-190 netmask as long form cidr-size as method\n  CID-1116482 cidrToLong cleanup of bitshift problem\n  CID-1116483 cidr to netmask bitshifts guarded with casts\n  CID-1116484 cast to long and use long as cidrsize type  and simpel test\n  CID-1116485: cast cidr during bit shifting  and simple test included\n  CID-1175714 casts before bit shift\n\nSigned-off-by: Daan Hoogland <daan@onecht.net>\n","date":"2015-12-07 03:10:57","modifiedFileCount":"3","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2018-01-04 13:26:30","codes":[{"authorDate":"2018-01-04 13:26:30","commitOrder":3,"curCode":"    public static Long[] cidrToLong(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            throw new CloudRuntimeException(\"empty cidr can not be converted to longs\");\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            throw new CloudRuntimeException(\"cidr is not formatted correctly: \"+ cidr);\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp4(cidrAddress)) {\n            throw new CloudRuntimeException(\"cidr is not valid in ip space\" + cidr);\n        }\n        long cidrSizeNum = getCidrSizeFromString(cidrSize);\n        final long numericNetmask = netMaskFromCidr(cidrSizeNum);\n        final long ipAddr = ip2Long(cidrAddress);\n        final Long[] cidrlong = {ipAddr & numericNetmask, cidrSizeNum};\n        return cidrlong;\n\n    }\n","date":"2018-01-04 13:26:30","endLine":805,"groupId":"102674","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"cidrToLong","params":"(finalStringcidr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1b/d08a32b259e6c60e0f1f62ee9e6914d777b96f.src","preCode":"    public static Long[] cidrToLong(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            throw new CloudRuntimeException(\"empty cidr can not be converted to longs\");\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            throw new CloudRuntimeException(\"cidr is not formatted correctly: \"+ cidr);\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            throw new CloudRuntimeException(\"cidr is not valid in ip space\" + cidr);\n        }\n        long cidrSizeNum = getCidrSizeFromString(cidrSize);\n        final long numericNetmask = netMaskFromCidr(cidrSizeNum);\n        final long ipAddr = ip2Long(cidrAddress);\n        final Long[] cidrlong = {ipAddr & numericNetmask, cidrSizeNum};\n        return cidrlong;\n\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/net/NetUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"M"},{"authorDate":"2018-01-04 13:26:30","commitOrder":3,"curCode":"    public static String getCidrSubNet(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp4(cidrAddress)) {\n            return null;\n        }\n        long cidrSizeNum = getCidrSizeFromString(cidrSize);\n        final long numericNetmask = netMaskFromCidr(cidrSizeNum);\n        final String netmask = NetUtils.long2Ip(numericNetmask);\n        return getSubNet(cidrAddress, netmask);\n    }\n","date":"2018-01-04 13:26:30","endLine":843,"groupId":"102674","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCidrSubNet","params":"(finalStringcidr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1b/d08a32b259e6c60e0f1f62ee9e6914d777b96f.src","preCode":"    public static String getCidrSubNet(final String cidr) {\n        if (cidr == null || cidr.isEmpty()) {\n            return null;\n        }\n        final String[] cidrPair = cidr.split(\"\\\\/\");\n        if (cidrPair.length != 2) {\n            return null;\n        }\n        final String cidrAddress = cidrPair[0];\n        final String cidrSize = cidrPair[1];\n        if (!isValidIp(cidrAddress)) {\n            return null;\n        }\n        long cidrSizeNum = getCidrSizeFromString(cidrSize);\n        final long numericNetmask = netMaskFromCidr(cidrSizeNum);\n        final String netmask = NetUtils.long2Ip(numericNetmask);\n        return getSubNet(cidrAddress, netmask);\n    }\n","realPath":"utils/src/main/java/com/cloud/utils/net/NetUtils.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":826,"status":"M"}],"commitId":"9988c269b259b84c0b8436bad17f88dbc1d706e7","commitMessage":"@@@CLOUDSTACK-7958: Add configuration for limit to CIDRs for Admin API calls (#2046)\n\n* Cleanup and Improve NetUtils\n\nThis class had many unused methods.  inconsistent names and redundant code.\n\nThis commit cleans up code.  renames a few methods and constants.\n\nThe global/account setting 'api.allowed.source.cidr.list' is set\nto 0.0.0.0/0. ::/0 by default preserve the current behavior and thus\nallow API calls for accounts from all IPv4 and IPv6 subnets.\n\nUsers can set it to a comma-separated list of IPv4/IPv6 subnets to\nrestrict API calls for Admin accounts to certain parts of their network(s).\n\nThis is to improve Security. Should an attacker steal the Access/Secret key\nof an account he/she still needs to be in a subnet from where accounts are\nallowed to perform API calls.\n\nThis is a good security measure for APIs which are connected to the public internet.\n\nSigned-off-by: Wido den Hollander <wido@widodh.nl>","date":"2018-01-04 13:26:30","modifiedFileCount":"40","status":"M","submitter":"Wido den Hollander"}]
