[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services) throws ResourceUnavailableException {\n        boolean canHandle = true;\n        for (final Service service : services) {\n            if (!canHandle(network, service)) {\n                canHandle = false;\n                break;\n            }\n        }\n        boolean result = true;\n        if (canHandle) {\n            final List<DomainRouterVO> routers = getRouters(network);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to associate ip addresses on the backend; virtual \" + \"router doesn't exist in the network \" + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.associatePublicIP(network, ipAddress, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":437,"groupId":"24369","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"applyIps","params":"(finalNetworknetwork@finalList<?extendsPublicIpAddress>ipAddress@finalSet<Service>services)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    public boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services) throws ResourceUnavailableException {\n        boolean canHandle = true;\n        for (final Service service : services) {\n            if (!canHandle(network, service)) {\n                canHandle = false;\n                break;\n            }\n        }\n        boolean result = true;\n        if (canHandle) {\n            final List<DomainRouterVO> routers = getRouters(network);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to associate ip addresses on the backend; virtual \" + \"router doesn't exist in the network \" + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.associatePublicIP(network, ipAddress, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean applyLBRules(final Network network, final List<LoadBalancingRule> rules)\n            throws ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.Lb)) {\n            if (!canHandleLbRules(rules)) {\n                return false;\n            }\n\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(\n                    network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to apply firewall rules on the backend; virtual \"\n                        + \"router doesn't exist in the network \"\n                        + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyLoadBalancingRules(network, rules, domainRouterVO);\n                if (!result) {\n                    s_logger.debug(\"Failed to apply load balancing rules in network \" + network.getId());\n                }\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":533,"groupId":"24369","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"applyLBRules","params":"(finalNetworknetwork@finalList<LoadBalancingRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/b92f92601119bd2d8490ad0f9d7c93530919a7.src","preCode":"    public boolean applyLBRules(final Network network, final List<LoadBalancingRule> rules)\n            throws ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.Lb)) {\n            if (!canHandleLbRules(rules)) {\n                return false;\n            }\n\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(\n                    network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to apply firewall rules on the backend; virtual \"\n                        + \"router doesn't exist in the network \"\n                        + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyLoadBalancingRules(network, rules, domainRouterVO);\n                if (!result) {\n                    s_logger.debug(\"Failed to apply load balancing rules in network \" + network.getId());\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/element/OvsElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-08-16 15:49:43","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services) throws ResourceUnavailableException {\n        boolean canHandle = true;\n        for (final Service service : services) {\n            if (!canHandle(network, service)) {\n                canHandle = false;\n                break;\n            }\n        }\n        boolean result = true;\n        if (canHandle) {\n            final List<DomainRouterVO> routers = getRouters(network);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to associate ip addresses on the backend; virtual \" + \"router doesn't exist in the network \" + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.associatePublicIP(network, ipAddress, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","date":"2018-01-20 05:49:27","endLine":437,"groupId":"101685","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"applyIps","params":"(finalNetworknetwork@finalList<?extendsPublicIpAddress>ipAddress@finalSet<Service>services)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/6a4892920cc41aa8a45edd577c7586de0ad4a7.src","preCode":"    public boolean applyIps(final Network network, final List<? extends PublicIpAddress> ipAddress, final Set<Service> services) throws ResourceUnavailableException {\n        boolean canHandle = true;\n        for (final Service service : services) {\n            if (!canHandle(network, service)) {\n                canHandle = false;\n                break;\n            }\n        }\n        boolean result = true;\n        if (canHandle) {\n            final List<DomainRouterVO> routers = getRouters(network);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to associate ip addresses on the backend; virtual \" + \"router doesn't exist in the network \" + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.associatePublicIP(network, ipAddress, domainRouterVO);\n            }\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/com/cloud/network/element/VirtualRouterElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"N"},{"authorDate":"2018-08-16 15:49:43","commitOrder":2,"curCode":"    public boolean applyLBRules(final Network network, final List<LoadBalancingRule> rules)\n            throws ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.Lb)) {\n            if (!canHandleLbRules(rules)) {\n                return false;\n            }\n\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(\n                    network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to apply load balancing rules on the backend; virtual \"\n                        + \"router doesn't exist in the network \"\n                        + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyLoadBalancingRules(network, rules, domainRouterVO);\n                if (!result) {\n                    s_logger.debug(\"Failed to apply load balancing rules in network \" + network.getId());\n                }\n            }\n        }\n        return result;\n    }\n","date":"2018-08-16 15:49:43","endLine":533,"groupId":"101685","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"applyLBRules","params":"(finalNetworknetwork@finalList<LoadBalancingRule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/89e7bae622639e30732582966844b37252ce54.src","preCode":"    public boolean applyLBRules(final Network network, final List<LoadBalancingRule> rules)\n            throws ResourceUnavailableException {\n        boolean result = true;\n        if (canHandle(network, Service.Lb)) {\n            if (!canHandleLbRules(rules)) {\n                return false;\n            }\n\n            final List<DomainRouterVO> routers = _routerDao.listByNetworkAndRole(\n                    network.getId(), Role.VIRTUAL_ROUTER);\n            if (routers == null || routers.isEmpty()) {\n                s_logger.debug(\"Virtual router elemnt doesn't need to apply firewall rules on the backend; virtual \"\n                        + \"router doesn't exist in the network \"\n                        + network.getId());\n                return true;\n            }\n\n            final DataCenterVO dcVO = _dcDao.findById(network.getDataCenterId());\n            final NetworkTopology networkTopology = _networkTopologyContext.retrieveNetworkTopology(dcVO);\n\n            for (final DomainRouterVO domainRouterVO : routers) {\n                result = result && networkTopology.applyLoadBalancingRules(network, rules, domainRouterVO);\n                if (!result) {\n                    s_logger.debug(\"Failed to apply load balancing rules in network \" + network.getId());\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/element/OvsElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"M"}],"commitId":"e57003f93f2067b876864b26071e1ef9952a9be1","commitMessage":"@@@Fix some log messages that do not match with their function (#2796)\n\n\n","date":"2018-08-16 15:49:43","modifiedFileCount":"13","status":"M","submitter":"lzh3636"}]
