[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-01-15 18:38:33","commitOrder":2,"curCode":"    public String getMountPoint(String storageUrl, Integer nfsVersion) {\n        String mountPoint = storageMounts.get(storageUrl);\n        if (mountPoint != null) {\n            return mountPoint;\n        }\n\n        URI uri;\n        try {\n            uri = new URI(storageUrl);\n        } catch (URISyntaxException e) {\n            s_logger.error(\"Invalid storage URL format \", e);\n            throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n        }\n\n        mountPoint = mount(uri.getHost() + \":\" + uri.getPath(), MOUNT_PARENT.value(), nfsVersion);\n        if (mountPoint == null) {\n            s_logger.error(\"Unable to create mount point for \" + storageUrl);\n            throw new CloudRuntimeException(\"Unable to create mount point for \" + storageUrl);\n        }\n\n        storageMounts.putIfAbsent(storageUrl, mountPoint);\n        return mountPoint;\n    }\n","date":"2020-01-15 18:38:33","endLine":85,"groupId":"22791","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMountPoint","params":"(StringstorageUrl@IntegernfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/50/ef13654512a5dbf3f95a9ee3e78f4136704bb9.src","preCode":"    public String getMountPoint(String storageUrl, Integer nfsVersion) {\n        String mountPoint = storageMounts.get(storageUrl);\n        if (mountPoint != null) {\n            return mountPoint;\n        }\n\n        URI uri;\n        try {\n            uri = new URI(storageUrl);\n        } catch (URISyntaxException e) {\n            s_logger.error(\"Invalid storage URL format \", e);\n            throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n        }\n\n        mountPoint = mount(uri.getHost() + \":\" + uri.getPath(), MOUNT_PARENT.value(), nfsVersion);\n        if (mountPoint == null) {\n            s_logger.error(\"Unable to create mount point for \" + storageUrl);\n            throw new CloudRuntimeException(\"Unable to create mount point for \" + storageUrl);\n        }\n\n        storageMounts.putIfAbsent(storageUrl, mountPoint);\n        return mountPoint;\n    }\n","realPath":"server/src/main/java/org/apache/cloudstack/storage/NfsMountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private String getMountPoint(String storageUrl) {\n        String mountPoint = null;\n        synchronized (_storageMounts) {\n            mountPoint = _storageMounts.get(storageUrl);\n            if (mountPoint != null) {\n                return mountPoint;\n            }\n\n            URI uri;\n            try {\n                uri = new URI(storageUrl);\n            } catch (URISyntaxException e) {\n                s_logger.error(\"Invalid storage URL format \", e);\n                throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n            }\n\n            mountPoint = mount(File.separator + File.separator + uri.getHost() + uri.getPath(), getMountParent(),\n                uri.getScheme(), uri.getQuery());\n            if (mountPoint == null) {\n                s_logger.error(\"Unable to create mount point for \" + storageUrl);\n                return \"/mnt/sec\";\n            }\n\n            _storageMounts.put(storageUrl, mountPoint);\n            return mountPoint;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":222,"groupId":"23683","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMountPoint","params":"(StringstorageUrl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/63726d3474b358705ab6800d56fabb11436575.src","preCode":"    private String getMountPoint(String storageUrl) {\n        String mountPoint = null;\n        synchronized (_storageMounts) {\n            mountPoint = _storageMounts.get(storageUrl);\n            if (mountPoint != null) {\n                return mountPoint;\n            }\n\n            URI uri;\n            try {\n                uri = new URI(storageUrl);\n            } catch (URISyntaxException e) {\n                s_logger.error(\"Invalid storage URL format \", e);\n                throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n            }\n\n            mountPoint = mount(File.separator + File.separator + uri.getHost() + uri.getPath(), getMountParent(),\n                uri.getScheme(), uri.getQuery());\n            if (mountPoint == null) {\n                s_logger.error(\"Unable to create mount point for \" + storageUrl);\n                return \"/mnt/sec\";\n            }\n\n            _storageMounts.put(storageUrl, mountPoint);\n            return mountPoint;\n        }\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/manager/HypervManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"NB"}],"commitId":"be97470d83a0c6e834d97c9860354176016f2c64","commitMessage":"@@@Get Diagnostics: Download logs and diagnostics data from SSVM.  CPVM.  Router (#3350)\n\n* * Complete API implementation\n* Complete UI integration\n* Complete marvin test\n* Complete Secondary storage GC background task\n\n* improve UI labels\n\n* slight reword and add another missing description\n\n* improve download message clarity\n\n* Address comments\n\n* multiple fixes and cleanups\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* fix more bugs.  let it return ip rule list in another log file\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* fix missing iprule bug\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* add support for ARCHIVE type of object to be linked/setup on secstorage\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n\n* Fix retrieving files for Xenserver\n\n* Update get_diagnostics_files.py\n\n* Fix bug where executable scripts weren't handled\n\n* Fixed error on script cmd generation\n\n* Do not filter name for log files as it would override similar prefix script names\n\n* Addressed code review comments\n\n* log error instead of printstacktrace\n\n* Treat script as executable and shell script\n\n* Check missing script name case and write to output instead of catching exception\n\n* Use shell = true instead of shlex to support any executable\n\n* fix xenserver bug\n\n* don't set dir permission for vmware\n\n* Code review comments - refactoring\n\n* Add check for possible NPE\n\n* Remove unused imoprt after rebase\n\n* Add better description for configs\n\nCo-authored-by: Nicolas Vazquez <nicovazquez90@gmail.com>\nCo-authored-by: Rohit Yadav <rohit@apache.org>\nCo-authored-by: Anurag Awasthi <anurag.awasthi@shapeblue.com>\n","date":"2020-01-15 18:38:33","modifiedFileCount":"15","status":"M","submitter":"Paul Angus"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-19 17:23:38","commitOrder":3,"curCode":"    public String getMountPoint(String storageUrl, String nfsVersion) {\n        String mountPoint = storageMounts.get(storageUrl);\n        if (mountPoint != null) {\n            return mountPoint;\n        }\n\n        URI uri;\n        try {\n            uri = new URI(storageUrl);\n        } catch (URISyntaxException e) {\n            s_logger.error(\"Invalid storage URL format \", e);\n            throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n        }\n\n        mountPoint = mount(uri.getHost() + \":\" + uri.getPath(), MOUNT_PARENT.value(), nfsVersion);\n        if (mountPoint == null) {\n            s_logger.error(\"Unable to create mount point for \" + storageUrl);\n            throw new CloudRuntimeException(\"Unable to create mount point for \" + storageUrl);\n        }\n\n        storageMounts.putIfAbsent(storageUrl, mountPoint);\n        return mountPoint;\n    }\n","date":"2020-08-19 17:23:38","endLine":85,"groupId":"102090","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getMountPoint","params":"(StringstorageUrl@StringnfsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b6/105d589cd286c5dee11ab1178c3809921c9535.src","preCode":"    public String getMountPoint(String storageUrl, Integer nfsVersion) {\n        String mountPoint = storageMounts.get(storageUrl);\n        if (mountPoint != null) {\n            return mountPoint;\n        }\n\n        URI uri;\n        try {\n            uri = new URI(storageUrl);\n        } catch (URISyntaxException e) {\n            s_logger.error(\"Invalid storage URL format \", e);\n            throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n        }\n\n        mountPoint = mount(uri.getHost() + \":\" + uri.getPath(), MOUNT_PARENT.value(), nfsVersion);\n        if (mountPoint == null) {\n            s_logger.error(\"Unable to create mount point for \" + storageUrl);\n            throw new CloudRuntimeException(\"Unable to create mount point for \" + storageUrl);\n        }\n\n        storageMounts.putIfAbsent(storageUrl, mountPoint);\n        return mountPoint;\n    }\n","realPath":"server/src/main/java/org/apache/cloudstack/storage/NfsMountManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private String getMountPoint(String storageUrl) {\n        String mountPoint = null;\n        synchronized (_storageMounts) {\n            mountPoint = _storageMounts.get(storageUrl);\n            if (mountPoint != null) {\n                return mountPoint;\n            }\n\n            URI uri;\n            try {\n                uri = new URI(storageUrl);\n            } catch (URISyntaxException e) {\n                s_logger.error(\"Invalid storage URL format \", e);\n                throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n            }\n\n            mountPoint = mount(File.separator + File.separator + uri.getHost() + uri.getPath(), getMountParent(),\n                uri.getScheme(), uri.getQuery());\n            if (mountPoint == null) {\n                s_logger.error(\"Unable to create mount point for \" + storageUrl);\n                return \"/mnt/sec\";\n            }\n\n            _storageMounts.put(storageUrl, mountPoint);\n            return mountPoint;\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":222,"groupId":"102090","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMountPoint","params":"(StringstorageUrl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9d/63726d3474b358705ab6800d56fabb11436575.src","preCode":"    private String getMountPoint(String storageUrl) {\n        String mountPoint = null;\n        synchronized (_storageMounts) {\n            mountPoint = _storageMounts.get(storageUrl);\n            if (mountPoint != null) {\n                return mountPoint;\n            }\n\n            URI uri;\n            try {\n                uri = new URI(storageUrl);\n            } catch (URISyntaxException e) {\n                s_logger.error(\"Invalid storage URL format \", e);\n                throw new CloudRuntimeException(\"Unable to create mount point due to invalid storage URL format \" + storageUrl);\n            }\n\n            mountPoint = mount(File.separator + File.separator + uri.getHost() + uri.getPath(), getMountParent(),\n                uri.getScheme(), uri.getQuery());\n            if (mountPoint == null) {\n                s_logger.error(\"Unable to create mount point for \" + storageUrl);\n                return \"/mnt/sec\";\n            }\n\n            _storageMounts.put(storageUrl, mountPoint);\n            return mountPoint;\n        }\n    }\n","realPath":"plugins/hypervisors/hyperv/src/main/java/com/cloud/hypervisor/hyperv/manager/HypervManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"d57aa835174c9dd045930d1396ce4bee9a275a60","commitMessage":"@@@server: Added nfs minor version support (#4180)\n\nThis PR adds minor version support when mounting nfs on the SSVM as requested in #2861\n\nThe global setting \"secstorage.nfs.version\" has been changed to use the String data type which allows any minor version to be specified.","date":"2020-08-19 17:23:38","modifiedFileCount":"30","status":"M","submitter":"Spaceman1984"}]
