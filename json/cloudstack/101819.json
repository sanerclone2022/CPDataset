[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n        int haproxy_stats_port = Integer.parseInt(_configDao.getValue(Config.NetworkLBHaproxyStatsPort.key()));\n        if (rule.getSourcePortStart() == haproxy_stats_port) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Can't create LB on port \"+ haproxy_stats_port +\", haproxy is listening for  LB stats on this port\");\n            }\n            return false;\n        }\n\n        for (final LoadBalancingRule.LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy.getParams();\n\n            if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n\n            } else if (LbStickinessMethod.StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: expire is not in timeformat: \" + expire);\n                }\n                if (tablesize != null && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: tablesize is not in size format: \" + tablesize);\n\n                }\n            } else if (LbStickinessMethod.StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: length is not a number: \" + length);\n                }\n                if (holdTime != null && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(holdTime, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: holdtime is not in timeformat: \" + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":842,"groupId":"895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateHAProxyLBRule","params":"(finalLoadBalancingRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fa/17e7bc315947670f7b3f615f4f7bc699034bda.src","preCode":"    public boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n        int haproxy_stats_port = Integer.parseInt(_configDao.getValue(Config.NetworkLBHaproxyStatsPort.key()));\n        if (rule.getSourcePortStart() == haproxy_stats_port) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Can't create LB on port \"+ haproxy_stats_port +\", haproxy is listening for  LB stats on this port\");\n            }\n            return false;\n        }\n\n        for (final LoadBalancingRule.LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy.getParams();\n\n            if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n\n            } else if (LbStickinessMethod.StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: expire is not in timeformat: \" + expire);\n                }\n                if (tablesize != null && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: tablesize is not in size format: \" + tablesize);\n\n                }\n            } else if (LbStickinessMethod.StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: length is not a number: \" + length);\n                }\n                if (holdTime != null && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(holdTime, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: holdtime is not in timeformat: \" + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":781,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n\n        for (final LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy\n                    .getParams();\n\n            if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(\n                    stickinessPolicy.getMethodName())) {\n\n            } else if (StickinessMethodType.SourceBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null\n                        && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: expire is not in timeformat: \"\n                            + expire);\n                }\n                if (tablesize != null\n                        && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \"\n                                    + rule.getId()\n                                    + \" Cause: tablesize is not in size format: \"\n                                    + tablesize);\n\n                }\n            } else if (StickinessMethodType.AppCookieBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: length is not a number: \"\n                            + length);\n                }\n                if (holdTime != null\n                        && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(\n                                holdTime, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: holdtime is not in timeformat: \"\n                            + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":655,"groupId":"13260","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateHAProxyLBRule","params":"(finalLoadBalancingRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/b92f92601119bd2d8490ad0f9d7c93530919a7.src","preCode":"    public static boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n\n        for (final LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy\n                    .getParams();\n\n            if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(\n                    stickinessPolicy.getMethodName())) {\n\n            } else if (StickinessMethodType.SourceBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null\n                        && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: expire is not in timeformat: \"\n                            + expire);\n                }\n                if (tablesize != null\n                        && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \"\n                                    + rule.getId()\n                                    + \" Cause: tablesize is not in size format: \"\n                                    + tablesize);\n\n                }\n            } else if (StickinessMethodType.AppCookieBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: length is not a number: \"\n                            + length);\n                }\n                if (holdTime != null\n                        && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(\n                                holdTime, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: holdtime is not in timeformat: \"\n                            + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/element/OvsElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-12-02 16:59:34","commitOrder":2,"curCode":"    public boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n        int haproxy_stats_port = Integer.parseInt(_configDao.getValue(Config.NetworkLBHaproxyStatsPort.key()));\n        if (rule.getSourcePortStart() == haproxy_stats_port) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Can't create LB on port \"+ haproxy_stats_port +\", haproxy is listening for  LB stats on this port\");\n            }\n            return false;\n        }\n        String lbProtocol = rule.getLbProtocol();\n        if (lbProtocol != null && lbProtocol.toLowerCase().equals(NetUtils.UDP_PROTO)) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Can't create LB rule as haproxy does not support udp\");\n            }\n            return false;\n        }\n\n        for (final LoadBalancingRule.LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy.getParams();\n\n            if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n\n            } else if (LbStickinessMethod.StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: expire is not in timeformat: \" + expire);\n                }\n                if (tablesize != null && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: tablesize is not in size format: \" + tablesize);\n\n                }\n            } else if (LbStickinessMethod.StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: length is not a number: \" + length);\n                }\n                if (holdTime != null && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(holdTime, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: holdtime is not in timeformat: \" + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","date":"2020-12-02 16:59:34","endLine":860,"groupId":"101819","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateHAProxyLBRule","params":"(finalLoadBalancingRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/97/51ddb7667c98116b67fabcb493a5f9684c1559.src","preCode":"    public boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n        int haproxy_stats_port = Integer.parseInt(_configDao.getValue(Config.NetworkLBHaproxyStatsPort.key()));\n        if (rule.getSourcePortStart() == haproxy_stats_port) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Can't create LB on port \"+ haproxy_stats_port +\", haproxy is listening for  LB stats on this port\");\n            }\n            return false;\n        }\n\n        for (final LoadBalancingRule.LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy.getParams();\n\n            if (LbStickinessMethod.StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n\n            } else if (LbStickinessMethod.StickinessMethodType.SourceBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: expire is not in timeformat: \" + expire);\n                }\n                if (tablesize != null && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: tablesize is not in size format: \" + tablesize);\n\n                }\n            } else if (LbStickinessMethod.StickinessMethodType.AppCookieBased.getName().equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: length is not a number: \" + length);\n                }\n                if (holdTime != null && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(holdTime, null)) {\n                    throw new InvalidParameterValueException(\"Failed LB in validation rule id: \" + rule.getId() + \" Cause: holdtime is not in timeformat: \" + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/NetworkHelperImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":792,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public static boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n\n        for (final LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy\n                    .getParams();\n\n            if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(\n                    stickinessPolicy.getMethodName())) {\n\n            } else if (StickinessMethodType.SourceBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null\n                        && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: expire is not in timeformat: \"\n                            + expire);\n                }\n                if (tablesize != null\n                        && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \"\n                                    + rule.getId()\n                                    + \" Cause: tablesize is not in size format: \"\n                                    + tablesize);\n\n                }\n            } else if (StickinessMethodType.AppCookieBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: length is not a number: \"\n                            + length);\n                }\n                if (holdTime != null\n                        && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(\n                                holdTime, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: holdtime is not in timeformat: \"\n                            + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":655,"groupId":"101819","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateHAProxyLBRule","params":"(finalLoadBalancingRulerule)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/bf/b92f92601119bd2d8490ad0f9d7c93530919a7.src","preCode":"    public static boolean validateHAProxyLBRule(final LoadBalancingRule rule) {\n        final String timeEndChar = \"dhms\";\n\n        for (final LbStickinessPolicy stickinessPolicy : rule.getStickinessPolicies()) {\n            final List<Pair<String, String>> paramsList = stickinessPolicy\n                    .getParams();\n\n            if (StickinessMethodType.LBCookieBased.getName().equalsIgnoreCase(\n                    stickinessPolicy.getMethodName())) {\n\n            } else if (StickinessMethodType.SourceBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String tablesize = \"200k\"; \r\n                String expire = \"30m\"; \r\n\n                \n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"tablesize\".equalsIgnoreCase(key)) {\n                        tablesize = value;\n                    }\n                    if (\"expire\".equalsIgnoreCase(key)) {\n                        expire = value;\n                    }\n                }\n                if (expire != null\n                        && !containsOnlyNumbers(expire, timeEndChar)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: expire is not in timeformat: \"\n                            + expire);\n                }\n                if (tablesize != null\n                        && !containsOnlyNumbers(tablesize, \"kmg\")) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \"\n                                    + rule.getId()\n                                    + \" Cause: tablesize is not in size format: \"\n                                    + tablesize);\n\n                }\n            } else if (StickinessMethodType.AppCookieBased.getName()\n                    .equalsIgnoreCase(stickinessPolicy.getMethodName())) {\n                String length = null; \r\n                String holdTime = null; \r\n\n                for (final Pair<String, String> paramKV : paramsList) {\n                    final String key = paramKV.first();\n                    final String value = paramKV.second();\n                    if (\"length\".equalsIgnoreCase(key)) {\n                        length = value;\n                    }\n                    if (\"holdtime\".equalsIgnoreCase(key)) {\n                        holdTime = value;\n                    }\n                }\n\n                if (length != null && !containsOnlyNumbers(length, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: length is not a number: \"\n                            + length);\n                }\n                if (holdTime != null\n                        && !containsOnlyNumbers(holdTime, timeEndChar) && !containsOnlyNumbers(\n                                holdTime, null)) {\n                    throw new InvalidParameterValueException(\n                            \"Failed LB in validation rule id: \" + rule.getId()\n                            + \" Cause: holdtime is not in timeformat: \"\n                            + holdTime);\n                }\n            }\n        }\n        return true;\n    }\n","realPath":"plugins/network-elements/ovs/src/main/java/com/cloud/network/element/OvsElement.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"N"}],"commitId":"5bea0a1ea4c43568ac33c5e55a39dc739a97a3f8","commitMessage":"@@@Merge remote-tracking branch 'origin/4.14'\n","date":"2020-12-02 16:59:34","modifiedFileCount":"1","status":"M","submitter":"Rohit Yadav"}]
