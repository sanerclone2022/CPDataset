[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            String guestCidr = _networkService.getNetwork(getNetworkId()).getCidr();\n\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source cidrs formatting error \" + cidr);\n                }\n                if (cidr.equals(NetUtils.ALL_IP4_CIDRS)) {\n                    continue;\n                }\n                if (!NetUtils.isNetworkAWithinNetworkB(cidr, guestCidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, cidr + \" is not within the guest cidr \" + guestCidr);\n                }\n            }\n        }\n\n        \r\n        if(destCidrList != null){\n            for(String cidr : destCidrList){\n                if(!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Destination cidrs formatting error\" + cidr);\n                }\n            }\n        }\n\n        if (getProtocol().equalsIgnoreCase(NetUtils.ALL_PROTO)) {\n            if (getSourcePortStart() != null && getSourcePortEnd() != null) {\n                throw new InvalidParameterValueException(\"Do not pass ports to protocol ALL, protocol ALL do not require ports. Unable to create \" +\n                    \"firewall rule for the network id=\" + networkId);\n            }\n        }\n\n        if (getVpcId() != null) {\n                throw new  InvalidParameterValueException(\"Unable to create firewall rule for the network id=\" + networkId +\n                        \" as firewall egress rule can be created only for non vpc networks.\");\n            }\n\n        try {\n            FirewallRule result = _firewallService.createEgressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.info(\"Network rule conflict: \" + ex.getMessage());\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":293,"groupId":"6702","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/92/99c3ddd2c8c39431019b2a1130c97df8428a62.src","preCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            String guestCidr = _networkService.getNetwork(getNetworkId()).getCidr();\n\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source cidrs formatting error \" + cidr);\n                }\n                if (cidr.equals(NetUtils.ALL_IP4_CIDRS)) {\n                    continue;\n                }\n                if (!NetUtils.isNetworkAWithinNetworkB(cidr, guestCidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, cidr + \" is not within the guest cidr \" + guestCidr);\n                }\n            }\n        }\n\n        \r\n        if(destCidrList != null){\n            for(String cidr : destCidrList){\n                if(!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Destination cidrs formatting error\" + cidr);\n                }\n            }\n        }\n\n        if (getProtocol().equalsIgnoreCase(NetUtils.ALL_PROTO)) {\n            if (getSourcePortStart() != null && getSourcePortEnd() != null) {\n                throw new InvalidParameterValueException(\"Do not pass ports to protocol ALL, protocol ALL do not require ports. Unable to create \" +\n                    \"firewall rule for the network id=\" + networkId);\n            }\n        }\n\n        if (getVpcId() != null) {\n                throw new  InvalidParameterValueException(\"Unable to create firewall rule for the network id=\" + networkId +\n                        \" as firewall egress rule can be created only for non vpc networks.\");\n            }\n\n        try {\n            FirewallRule result = _firewallService.createEgressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.info(\"Network rule conflict: \" + ex.getMessage());\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/firewall/CreateEgressFirewallRuleCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source CIDRs formatting error \" + cidr);\n                }\n            }\n        }\n        try {\n            FirewallRule result = _firewallService.createIngressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.info(\"Network rule conflict: \" + ex.getMessage());\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":261,"groupId":"6702","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fa/b7d9eef29a6f1d0ab3aab41c1bda33af849832.src","preCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source CIDRs formatting error \" + cidr);\n                }\n            }\n        }\n        try {\n            FirewallRule result = _firewallService.createIngressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.info(\"Network rule conflict: \" + ex.getMessage());\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/firewall/CreateFirewallRuleCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-04-16 15:07:16","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            String guestCidr = _networkService.getNetwork(getNetworkId()).getCidr();\n\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source cidrs formatting error \" + cidr);\n                }\n                if (cidr.equals(NetUtils.ALL_IP4_CIDRS)) {\n                    continue;\n                }\n                if (!NetUtils.isNetworkAWithinNetworkB(cidr, guestCidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, cidr + \" is not within the guest cidr \" + guestCidr);\n                }\n            }\n        }\n\n        \r\n        if(destCidrList != null){\n            for(String cidr : destCidrList){\n                if(!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Destination cidrs formatting error\" + cidr);\n                }\n            }\n        }\n\n        if (getProtocol().equalsIgnoreCase(NetUtils.ALL_PROTO)) {\n            if (getSourcePortStart() != null && getSourcePortEnd() != null) {\n                throw new InvalidParameterValueException(\"Do not pass ports to protocol ALL, protocol ALL do not require ports. Unable to create \" +\n                    \"firewall rule for the network id=\" + networkId);\n            }\n        }\n\n        if (getVpcId() != null) {\n                throw new  InvalidParameterValueException(\"Unable to create firewall rule for the network id=\" + networkId +\n                        \" as firewall egress rule can be created only for non vpc networks.\");\n            }\n\n        try {\n            FirewallRule result = _firewallService.createEgressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.info(\"Network rule conflict: \" + ex.getMessage());\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":293,"groupId":"102448","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/92/99c3ddd2c8c39431019b2a1130c97df8428a62.src","preCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            String guestCidr = _networkService.getNetwork(getNetworkId()).getCidr();\n\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source cidrs formatting error \" + cidr);\n                }\n                if (cidr.equals(NetUtils.ALL_IP4_CIDRS)) {\n                    continue;\n                }\n                if (!NetUtils.isNetworkAWithinNetworkB(cidr, guestCidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, cidr + \" is not within the guest cidr \" + guestCidr);\n                }\n            }\n        }\n\n        \r\n        if(destCidrList != null){\n            for(String cidr : destCidrList){\n                if(!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Destination cidrs formatting error\" + cidr);\n                }\n            }\n        }\n\n        if (getProtocol().equalsIgnoreCase(NetUtils.ALL_PROTO)) {\n            if (getSourcePortStart() != null && getSourcePortEnd() != null) {\n                throw new InvalidParameterValueException(\"Do not pass ports to protocol ALL, protocol ALL do not require ports. Unable to create \" +\n                    \"firewall rule for the network id=\" + networkId);\n            }\n        }\n\n        if (getVpcId() != null) {\n                throw new  InvalidParameterValueException(\"Unable to create firewall rule for the network id=\" + networkId +\n                        \" as firewall egress rule can be created only for non vpc networks.\");\n            }\n\n        try {\n            FirewallRule result = _firewallService.createEgressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.info(\"Network rule conflict: \" + ex.getMessage());\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/firewall/CreateEgressFirewallRuleCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"},{"authorDate":"2018-04-16 15:07:16","commitOrder":2,"curCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source CIDRs formatting error \" + cidr);\n                }\n            }\n        }\n        try {\n            FirewallRule result = _firewallService.createIngressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage(), ex);\n        }\n    }\n","date":"2018-04-16 15:07:16","endLine":260,"groupId":"102448","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/02/c425553d8e0b264f40c55a2b21ad524212a183.src","preCode":"    public void create() {\n        if (getSourceCidrList() != null) {\n            for (String cidr : getSourceCidrList()) {\n                if (!NetUtils.isValidIp4Cidr(cidr) && !NetUtils.isValidIp6Cidr(cidr)) {\n                    throw new ServerApiException(ApiErrorCode.PARAM_ERROR, \"Source CIDRs formatting error \" + cidr);\n                }\n            }\n        }\n        try {\n            FirewallRule result = _firewallService.createIngressFirewallRule(this);\n            if (result != null) {\n                setEntityId(result.getId());\n                setEntityUuid(result.getUuid());\n            }\n        } catch (NetworkRuleConflictException ex) {\n            s_logger.info(\"Network rule conflict: \" + ex.getMessage());\n            s_logger.trace(\"Network Rule Conflict: \", ex);\n            throw new ServerApiException(ApiErrorCode.NETWORK_RULE_CONFLICT_ERROR, ex.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/user/firewall/CreateFirewallRuleCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"106a9a34e12843a76cd67d9ab13837f56d79785a","commitMessage":"@@@Update inconsistent debugging info in catch block (#2553)\n\n* Add stack traces information\n\n* update stack trace info\n\n* update stack trace to make them consistent\n\n* update stack traces\n\n* update stacktraces\n\n* update stacktraces for other similar situations\n\n* fix some other situations\n\n* enhance other situations\n","date":"2018-04-16 15:07:16","modifiedFileCount":"11","status":"M","submitter":"lzh3636"}]
