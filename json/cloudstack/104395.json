[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    Set<String> commands = annotationRoleBasedApisMap.get(role);\n                    if (!commands.contains(command.name()))\n                        commands.add(command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","date":"2018-01-20 05:49:27","endLine":115,"groupId":"9553","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fc/78268fc6240a93b4a8a6d1993490f786cebc08.src","preCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    Set<String> commands = annotationRoleBasedApisMap.get(role);\n                    if (!commands.contains(command.name()))\n                        commands.add(command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","realPath":"plugins/acl/static-role-based/src/main/java/org/apache/cloudstack/acl/StaticRoleBasedAPIAccessChecker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    addApiToRoleBasedAnnotationsMap(role, command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","date":"2018-01-20 05:49:27","endLine":133,"groupId":"9553","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3d/fdb01b2e533e19b01d948a07c67863136d391a.src","preCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    addApiToRoleBasedAnnotationsMap(role, command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","realPath":"plugins/acl/dynamic-role-based/src/main/java/org/apache/cloudstack/acl/DynamicRoleBasedAPIAccessChecker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-04-24 21:05:38","commitOrder":2,"curCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    Set<String> commands = annotationRoleBasedApisMap.get(role);\n                    if (!commands.contains(command.name()))\n                        commands.add(command.name());\n                }\n                if (!commandNames.contains(command.name())) {\n                    commandNames.add(command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","date":"2018-04-24 21:05:38","endLine":125,"groupId":"104395","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4a/33a0876c3ce4c05cec632701837869b96ae061.src","preCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    Set<String> commands = annotationRoleBasedApisMap.get(role);\n                    if (!commands.contains(command.name()))\n                        commands.add(command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","realPath":"plugins/acl/static-role-based/src/main/java/org/apache/cloudstack/acl/StaticRoleBasedAPIAccessChecker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    addApiToRoleBasedAnnotationsMap(role, command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","date":"2018-01-20 05:49:27","endLine":133,"groupId":"104395","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3d/fdb01b2e533e19b01d948a07c67863136d391a.src","preCode":"    public boolean start() {\n        for (PluggableService service : services) {\n            for (Class<?> clz : service.getCommands()) {\n                APICommand command = clz.getAnnotation(APICommand.class);\n                for (RoleType role : command.authorized()) {\n                    addApiToRoleBasedAnnotationsMap(role, command.name());\n                }\n            }\n        }\n        return super.start();\n    }\n","realPath":"plugins/acl/dynamic-role-based/src/main/java/org/apache/cloudstack/acl/DynamicRoleBasedAPIAccessChecker.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"N"}],"commitId":"5ff2f172cbf0a77b4fb3c0061260de548ae80c37","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-04-24 21:05:38","modifiedFileCount":"4","status":"M","submitter":"Rohit Yadav"}]
