[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.MASTER){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":925,"groupId":"8753","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateSite2SiteVpnConnectionState","params":"(finalList<DomainRouterVO>routers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f3/035d05e61271ea58a41be185404248abc43aea.src","preCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.MASTER){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":841,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":762,"groupId":"25729","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"markDisconnectVpnConnByVpc","params":"(longvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ae/bc87174850974a2502b2f035b15d2a69cddc7c.src","preCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpn/Site2SiteVpnManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-02-18 16:51:36","commitOrder":2,"curCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            if (router.getRole() == Role.INTERNAL_LB_VM) {\n                continue;\n            }\n\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.MASTER){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","date":"2020-02-18 16:51:36","endLine":974,"groupId":"8753","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateSite2SiteVpnConnectionState","params":"(finalList<DomainRouterVO>routers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/50/cd8a4876f281e4815dd70347679c363fe90cf8.src","preCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.MASTER){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":886,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":762,"groupId":"25729","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"markDisconnectVpnConnByVpc","params":"(longvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ae/bc87174850974a2502b2f035b15d2a69cddc7c.src","preCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpn/Site2SiteVpnManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"N"}],"commitId":"0c46dfa64abc903e7a071476a5ff0da9b4a7f564","commitMessage":"@@@Merge remote-tracking branch 'origin/4.13'\n","date":"2020-02-18 16:51:36","modifiedFileCount":"1","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-06-08 18:14:53","commitOrder":3,"curCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            if (router.getRole() == Role.INTERNAL_LB_VM) {\n                continue;\n            }\n\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.PRIMARY){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-06-08 18:17:20","endLine":886,"groupId":"8753","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updateSite2SiteVpnConnectionState","params":"(finalList<DomainRouterVO>routers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/7f/f911393f1a8dda37c3b11ef96154df131ea184.src","preCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            if (router.getRole() == Role.INTERNAL_LB_VM) {\n                continue;\n            }\n\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.MASTER){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":798,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":762,"groupId":"25729","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"markDisconnectVpnConnByVpc","params":"(longvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ae/bc87174850974a2502b2f035b15d2a69cddc7c.src","preCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpn/Site2SiteVpnManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"N"}],"commitId":"958182481e200afa95f04022fe37044393085265","commitMessage":"@@@cloudstack: make code more inclusive\n\nInclusivity changes for CloudStack\n\n- Change default git branch name from 'master' to 'main' (post renaming/changing default git branch to 'main' in git repo)\n- Rename some offensive words/terms as appropriate for inclusiveness.\n\nThis PR updates the default git branch to 'main'.  as part of #4887.\n\nSigned-off-by: Suresh Kumar Anaparti <suresh.anaparti@shapeblue.com>\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-06-08 18:17:20","modifiedFileCount":"68","status":"M","submitter":"Suresh Kumar Anaparti"},{"authorTime":"2021-08-18 19:26:19","codes":[{"authorDate":"2021-08-18 19:26:19","commitOrder":4,"curCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            if (router.getRole() == Role.INTERNAL_LB_VM) {\n                continue;\n            }\n\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.PRIMARY){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected\n                    && conn.getState() != Site2SiteVpnConnection.State.Connecting) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected && conn.getState() != Site2SiteVpnConnection.State.Connecting) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-08-18 19:26:19","endLine":887,"groupId":"101821","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"updateSite2SiteVpnConnectionState","params":"(finalList<DomainRouterVO>routers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/3ac58fba83269610cee7383b6ba23d83acdc09.src","preCode":"    protected void updateSite2SiteVpnConnectionState(final List<DomainRouterVO> routers) {\n        for (final DomainRouterVO router : routers) {\n            if (router.getRole() == Role.INTERNAL_LB_VM) {\n                continue;\n            }\n\n            final List<Site2SiteVpnConnectionVO> conns = _s2sVpnMgr.getConnectionsForRouter(router);\n            if (conns == null || conns.isEmpty()) {\n                continue;\n            }\n            if (router.getIsRedundantRouter() && router.getRedundantState() != RedundantState.PRIMARY){\n                continue;\n            }\n            if (router.getState() != VirtualMachine.State.Running) {\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    if (conn.getState() != Site2SiteVpnConnection.State.Error) {\n                        conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                        _s2sVpnConnectionDao.persist(conn);\n                    }\n                }\n                continue;\n            }\n            final List<String> ipList = new ArrayList<String>();\n            for (final Site2SiteVpnConnectionVO conn : conns) {\n                if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                    continue;\n                }\n                final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n                ipList.add(gw.getGatewayIp());\n            }\n            final String privateIP = router.getPrivateIpAddress();\n            final HostVO host = _hostDao.findById(router.getHostId());\n            if (host == null || host.getState() != Status.Up) {\n                continue;\n            } else if (host.getManagementServerId() != ManagementServerNode.getManagementServerId()) {\n                \n                continue;\n            } else if (privateIP != null) {\n                final CheckS2SVpnConnectionsCommand command = new CheckS2SVpnConnectionsCommand(ipList);\n                command.setAccessDetail(NetworkElementCommand.ROUTER_IP, _routerControlHelper.getRouterControlIp(router.getId()));\n                command.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                command.setWait(30);\n                final Answer origAnswer = _agentMgr.easySend(router.getHostId(), command);\n                CheckS2SVpnConnectionsAnswer answer = null;\n                if (origAnswer instanceof CheckS2SVpnConnectionsAnswer) {\n                    answer = (CheckS2SVpnConnectionsAnswer) origAnswer;\n                } else {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                if (!answer.getResult()) {\n                    s_logger.warn(\"Unable to update router \" + router.getHostName() + \"'s VPN connection status\");\n                    continue;\n                }\n                for (final Site2SiteVpnConnectionVO conn : conns) {\n                    final Site2SiteVpnConnectionVO lock = _s2sVpnConnectionDao.acquireInLockTable(conn.getId());\n                    if (lock == null) {\n                        throw new CloudRuntimeException(\"Unable to acquire lock for site to site vpn connection id \" + conn.getId());\n                    }\n                    try {\n                        if (conn.getState() != Site2SiteVpnConnection.State.Connected && conn.getState() != Site2SiteVpnConnection.State.Disconnected) {\n                            continue;\n                        }\n                        final Site2SiteVpnConnection.State oldState = conn.getState();\n                        final Site2SiteCustomerGateway gw = _s2sCustomerGatewayDao.findById(conn.getCustomerGatewayId());\n\n                        if (answer.isIPPresent(gw.getGatewayIp())) {\n                            if (answer.isConnected(gw.getGatewayIp())) {\n                                conn.setState(Site2SiteVpnConnection.State.Connected);\n                            } else {\n                                conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                            }\n                            _s2sVpnConnectionDao.persist(conn);\n                            if (oldState != conn.getState()) {\n                                final String title = \"Site-to-site Vpn Connection to \" + gw.getName() + \" just switched from \" + oldState + \" to \" + conn.getState();\n                                final String context =\n                                        \"Site-to-site Vpn Connection to \" + gw.getName() + \" on router \" + router.getHostName() + \"(id: \" + router.getId() + \") \" +\n                                                \" just switched from \" + oldState + \" to \" + conn.getState();\n                                s_logger.info(context);\n                                _alertMgr.sendAlert(AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER, router.getDataCenterId(), router.getPodIdToDeployIn(), title, context);\n                            }\n                        }\n                    } finally {\n                        _s2sVpnConnectionDao.releaseFromLockTable(lock.getId());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/router/VirtualNetworkApplianceManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":798,"status":"M"},{"authorDate":"2021-08-18 19:26:19","commitOrder":4,"curCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected || conn.getState() == Site2SiteVpnConnection.State.Connecting) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","date":"2021-08-18 19:26:19","endLine":807,"groupId":"101821","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"markDisconnectVpnConnByVpc","params":"(longvpcId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5b/444c292a67e879172d094bbadac578260265d5.src","preCode":"    public void markDisconnectVpnConnByVpc(long vpcId) {\n        List<Site2SiteVpnConnectionVO> conns = _vpnConnectionDao.listByVpcId(vpcId);\n        for (Site2SiteVpnConnectionVO conn : conns) {\n            if (conn == null) {\n                continue;\n            }\n            Site2SiteVpnConnectionVO lock = _vpnConnectionDao.acquireInLockTable(conn.getId());\n            if (lock == null) {\n                throw new CloudRuntimeException(\"Unable to acquire lock on \" + conn);\n            }\n            try {\n                if (conn.getState() == Site2SiteVpnConnection.State.Connected) {\n                    conn.setState(Site2SiteVpnConnection.State.Disconnected);\n                    _vpnConnectionDao.persist(conn);\n                }\n            } finally {\n                _vpnConnectionDao.releaseFromLockTable(lock.getId());\n            }\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/network/vpn/Site2SiteVpnManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":788,"status":"M"}],"commitId":"953f5b81ed44e61a45f4bfeab2a10afdc5daaacf","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15' into main\n","date":"2021-08-18 19:26:19","modifiedFileCount":"3","status":"M","submitter":"Rohit Yadav"}]
