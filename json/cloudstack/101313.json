[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Pair<List<? extends Vlan>, Integer> searchForVlans(final ListVlanIpRangesCmd cmd) {\n        \r\n        final String accountName = cmd.getAccountName();\n        final Long domainId = cmd.getDomainId();\n        Long accountId = null;\n        final Long networkId = cmd.getNetworkId();\n        final Boolean forVirtual = cmd.getForVirtualNetwork();\n        String vlanType = null;\n        final Long projectId = cmd.getProjectId();\n        final Long physicalNetworkId = cmd.getPhysicalNetworkId();\n\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            final Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in specified domain\");\n                \r\n                \r\n                final DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        if (forVirtual != null) {\n            if (forVirtual) {\n                vlanType = VlanType.VirtualNetwork.toString();\n            } else {\n                vlanType = VlanType.DirectAttached.toString();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            final Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n                ex.addProxyObject(projectId.toString(), \"projectId\");\n                throw ex;\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        final Filter searchFilter = new Filter(VlanVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        final Object id = cmd.getId();\n        final Object vlan = cmd.getVlan();\n        final Object dataCenterId = cmd.getZoneId();\n        final Object podId = cmd.getPodId();\n        final Object keyword = cmd.getKeyword();\n\n        final SearchBuilder<VlanVO> sb = _vlanDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"dataCenterId\", sb.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"networkId\", sb.entity().getNetworkId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlanType\", sb.entity().getVlanType(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (accountId != null) {\n            final SearchBuilder<AccountVlanMapVO> accountVlanMapSearch = _accountVlanMapDao.createSearchBuilder();\n            accountVlanMapSearch.and(\"accountId\", accountVlanMapSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n            sb.join(\"accountVlanMapSearch\", accountVlanMapSearch, sb.entity().getId(), accountVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        if (podId != null) {\n            final SearchBuilder<PodVlanMapVO> podVlanMapSearch = _podVlanMapDao.createSearchBuilder();\n            podVlanMapSearch.and(\"podId\", podVlanMapSearch.entity().getPodId(), SearchCriteria.Op.EQ);\n            sb.join(\"podVlanMapSearch\", podVlanMapSearch, sb.entity().getId(), podVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        final SearchCriteria<VlanVO> sc = sb.create();\n        if (keyword != null) {\n            final SearchCriteria<VlanVO> ssc = _vlanDao.createSearchCriteria();\n            ssc.addOr(\"vlanTag\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"ipRange\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            sc.addAnd(\"vlanTag\", SearchCriteria.Op.SC, ssc);\n        } else {\n            if (id != null) {\n                sc.setParameters(\"id\", id);\n            }\n\n            if (vlan != null) {\n                sc.setParameters(\"vlan\", vlan);\n            }\n\n            if (dataCenterId != null) {\n                sc.setParameters(\"dataCenterId\", dataCenterId);\n            }\n\n            if (networkId != null) {\n                sc.setParameters(\"networkId\", networkId);\n            }\n\n            if (accountId != null) {\n                sc.setJoinParameters(\"accountVlanMapSearch\", \"accountId\", accountId);\n            }\n\n            if (podId != null) {\n                sc.setJoinParameters(\"podVlanMapSearch\", \"podId\", podId);\n            }\n            if (vlanType != null) {\n                sc.setParameters(\"vlanType\", vlanType);\n            }\n\n            if (physicalNetworkId != null) {\n                sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n            }\n        }\n\n        final Pair<List<VlanVO>, Integer> result = _vlanDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends Vlan>, Integer>(result.first(), result.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":1698,"groupId":"4585","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"searchForVlans","params":"(finalListVlanIpRangesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/56/c912d29c1214a445a5fb7dbc190fcd1e7fb2b7.src","preCode":"    public Pair<List<? extends Vlan>, Integer> searchForVlans(final ListVlanIpRangesCmd cmd) {\n        \r\n        final String accountName = cmd.getAccountName();\n        final Long domainId = cmd.getDomainId();\n        Long accountId = null;\n        final Long networkId = cmd.getNetworkId();\n        final Boolean forVirtual = cmd.getForVirtualNetwork();\n        String vlanType = null;\n        final Long projectId = cmd.getProjectId();\n        final Long physicalNetworkId = cmd.getPhysicalNetworkId();\n\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            final Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in specified domain\");\n                \r\n                \r\n                final DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        if (forVirtual != null) {\n            if (forVirtual) {\n                vlanType = VlanType.VirtualNetwork.toString();\n            } else {\n                vlanType = VlanType.DirectAttached.toString();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            final Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n                ex.addProxyObject(projectId.toString(), \"projectId\");\n                throw ex;\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        final Filter searchFilter = new Filter(VlanVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        final Object id = cmd.getId();\n        final Object vlan = cmd.getVlan();\n        final Object dataCenterId = cmd.getZoneId();\n        final Object podId = cmd.getPodId();\n        final Object keyword = cmd.getKeyword();\n\n        final SearchBuilder<VlanVO> sb = _vlanDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"dataCenterId\", sb.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"networkId\", sb.entity().getNetworkId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlanType\", sb.entity().getVlanType(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (accountId != null) {\n            final SearchBuilder<AccountVlanMapVO> accountVlanMapSearch = _accountVlanMapDao.createSearchBuilder();\n            accountVlanMapSearch.and(\"accountId\", accountVlanMapSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n            sb.join(\"accountVlanMapSearch\", accountVlanMapSearch, sb.entity().getId(), accountVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        if (podId != null) {\n            final SearchBuilder<PodVlanMapVO> podVlanMapSearch = _podVlanMapDao.createSearchBuilder();\n            podVlanMapSearch.and(\"podId\", podVlanMapSearch.entity().getPodId(), SearchCriteria.Op.EQ);\n            sb.join(\"podVlanMapSearch\", podVlanMapSearch, sb.entity().getId(), podVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        final SearchCriteria<VlanVO> sc = sb.create();\n        if (keyword != null) {\n            final SearchCriteria<VlanVO> ssc = _vlanDao.createSearchCriteria();\n            ssc.addOr(\"vlanTag\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"ipRange\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            sc.addAnd(\"vlanTag\", SearchCriteria.Op.SC, ssc);\n        } else {\n            if (id != null) {\n                sc.setParameters(\"id\", id);\n            }\n\n            if (vlan != null) {\n                sc.setParameters(\"vlan\", vlan);\n            }\n\n            if (dataCenterId != null) {\n                sc.setParameters(\"dataCenterId\", dataCenterId);\n            }\n\n            if (networkId != null) {\n                sc.setParameters(\"networkId\", networkId);\n            }\n\n            if (accountId != null) {\n                sc.setJoinParameters(\"accountVlanMapSearch\", \"accountId\", accountId);\n            }\n\n            if (podId != null) {\n                sc.setJoinParameters(\"podVlanMapSearch\", \"podId\", podId);\n            }\n            if (vlanType != null) {\n                sc.setParameters(\"vlanType\", vlanType);\n            }\n\n            if (physicalNetworkId != null) {\n                sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n            }\n        }\n\n        final Pair<List<VlanVO>, Integer> result = _vlanDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends Vlan>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/server/ManagementServerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1577,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Pair<List<? extends GuestVlan>, Integer> listDedicatedGuestVlanRanges(ListDedicatedGuestVlanRangesCmd cmd) {\n        Long id = cmd.getId();\n        String accountName = cmd.getAccountName();\n        Long domainId = cmd.getDomainId();\n        Long projectId = cmd.getProjectId();\n        String guestVlanRange = cmd.getGuestVlanRange();\n        Long physicalNetworkId = cmd.getPhysicalNetworkId();\n        Long zoneId = cmd.getZoneId();\n\n        Long accountId = null;\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName);\n                DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throwInvalidIdException(\"Unable to find project by id \" + projectId, projectId.toString(), \"projectId\");\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        SearchBuilder<AccountGuestVlanMapVO> sb = _accountGuestVlanMapDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"accountId\", sb.entity().getAccountId(), SearchCriteria.Op.EQ);\n        sb.and(\"guestVlanRange\", sb.entity().getGuestVlanRange(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (zoneId != null) {\n            SearchBuilder<PhysicalNetworkVO> physicalnetworkSearch = _physicalNetworkDao.createSearchBuilder();\n            physicalnetworkSearch.and(\"zoneId\", physicalnetworkSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n            sb.join(\"physicalnetworkSearch\", physicalnetworkSearch, sb.entity().getPhysicalNetworkId(), physicalnetworkSearch.entity().getId(), JoinBuilder.JoinType.INNER);\n        }\n\n        SearchCriteria<AccountGuestVlanMapVO> sc = sb.create();\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        if (accountId != null) {\n            sc.setParameters(\"accountId\", accountId);\n        }\n\n        if (guestVlanRange != null) {\n            sc.setParameters(\"guestVlanRange\", guestVlanRange);\n        }\n\n        if (physicalNetworkId != null) {\n            sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n        }\n\n        if (zoneId != null) {\n            sc.setJoinParameters(\"physicalnetworkSearch\", \"zoneId\", zoneId);\n        }\n\n        Filter searchFilter = new Filter(AccountGuestVlanMapVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Pair<List<AccountGuestVlanMapVO>, Integer> result = _accountGuestVlanMapDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestVlan>, Integer>(result.first(), result.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":3584,"groupId":"7835","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"listDedicatedGuestVlanRanges","params":"(ListDedicatedGuestVlanRangesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    public Pair<List<? extends GuestVlan>, Integer> listDedicatedGuestVlanRanges(ListDedicatedGuestVlanRangesCmd cmd) {\n        Long id = cmd.getId();\n        String accountName = cmd.getAccountName();\n        Long domainId = cmd.getDomainId();\n        Long projectId = cmd.getProjectId();\n        String guestVlanRange = cmd.getGuestVlanRange();\n        Long physicalNetworkId = cmd.getPhysicalNetworkId();\n        Long zoneId = cmd.getZoneId();\n\n        Long accountId = null;\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName);\n                DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throwInvalidIdException(\"Unable to find project by id \" + projectId, projectId.toString(), \"projectId\");\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        SearchBuilder<AccountGuestVlanMapVO> sb = _accountGuestVlanMapDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"accountId\", sb.entity().getAccountId(), SearchCriteria.Op.EQ);\n        sb.and(\"guestVlanRange\", sb.entity().getGuestVlanRange(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (zoneId != null) {\n            SearchBuilder<PhysicalNetworkVO> physicalnetworkSearch = _physicalNetworkDao.createSearchBuilder();\n            physicalnetworkSearch.and(\"zoneId\", physicalnetworkSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n            sb.join(\"physicalnetworkSearch\", physicalnetworkSearch, sb.entity().getPhysicalNetworkId(), physicalnetworkSearch.entity().getId(), JoinBuilder.JoinType.INNER);\n        }\n\n        SearchCriteria<AccountGuestVlanMapVO> sc = sb.create();\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        if (accountId != null) {\n            sc.setParameters(\"accountId\", accountId);\n        }\n\n        if (guestVlanRange != null) {\n            sc.setParameters(\"guestVlanRange\", guestVlanRange);\n        }\n\n        if (physicalNetworkId != null) {\n            sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n        }\n\n        if (zoneId != null) {\n            sc.setJoinParameters(\"physicalnetworkSearch\", \"zoneId\", zoneId);\n        }\n\n        Filter searchFilter = new Filter(AccountGuestVlanMapVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Pair<List<AccountGuestVlanMapVO>, Integer> result = _accountGuestVlanMapDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestVlan>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3510,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-05-10 00:14:40","commitOrder":2,"curCode":"    public Pair<List<? extends Vlan>, Integer> searchForVlans(final ListVlanIpRangesCmd cmd) {\n        \r\n        final String accountName = cmd.getAccountName();\n        final Long domainId = cmd.getDomainId();\n        Long accountId = null;\n        final Long networkId = cmd.getNetworkId();\n        final Boolean forVirtual = cmd.isForVirtualNetwork();\n        String vlanType = null;\n        final Long projectId = cmd.getProjectId();\n        final Long physicalNetworkId = cmd.getPhysicalNetworkId();\n\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            final Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in specified domain\");\n                \r\n                \r\n                final DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        if (forVirtual != null) {\n            if (forVirtual) {\n                vlanType = VlanType.VirtualNetwork.toString();\n            } else {\n                vlanType = VlanType.DirectAttached.toString();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            final Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n                ex.addProxyObject(projectId.toString(), \"projectId\");\n                throw ex;\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        final Filter searchFilter = new Filter(VlanVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        final Object id = cmd.getId();\n        final Object vlan = cmd.getVlan();\n        final Object dataCenterId = cmd.getZoneId();\n        final Object podId = cmd.getPodId();\n        final Object keyword = cmd.getKeyword();\n\n        final SearchBuilder<VlanVO> sb = _vlanDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"dataCenterId\", sb.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"networkId\", sb.entity().getNetworkId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlanType\", sb.entity().getVlanType(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (accountId != null) {\n            final SearchBuilder<AccountVlanMapVO> accountVlanMapSearch = _accountVlanMapDao.createSearchBuilder();\n            accountVlanMapSearch.and(\"accountId\", accountVlanMapSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n            sb.join(\"accountVlanMapSearch\", accountVlanMapSearch, sb.entity().getId(), accountVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        if (podId != null) {\n            final SearchBuilder<PodVlanMapVO> podVlanMapSearch = _podVlanMapDao.createSearchBuilder();\n            podVlanMapSearch.and(\"podId\", podVlanMapSearch.entity().getPodId(), SearchCriteria.Op.EQ);\n            sb.join(\"podVlanMapSearch\", podVlanMapSearch, sb.entity().getId(), podVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        final SearchCriteria<VlanVO> sc = sb.create();\n        if (keyword != null) {\n            final SearchCriteria<VlanVO> ssc = _vlanDao.createSearchCriteria();\n            ssc.addOr(\"vlanTag\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"ipRange\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            sc.addAnd(\"vlanTag\", SearchCriteria.Op.SC, ssc);\n        } else {\n            if (id != null) {\n                sc.setParameters(\"id\", id);\n            }\n\n            if (vlan != null) {\n                sc.setParameters(\"vlan\", vlan);\n            }\n\n            if (dataCenterId != null) {\n                sc.setParameters(\"dataCenterId\", dataCenterId);\n            }\n\n            if (networkId != null) {\n                sc.setParameters(\"networkId\", networkId);\n            }\n\n            if (accountId != null) {\n                sc.setJoinParameters(\"accountVlanMapSearch\", \"accountId\", accountId);\n            }\n\n            if (podId != null) {\n                sc.setJoinParameters(\"podVlanMapSearch\", \"podId\", podId);\n            }\n            if (vlanType != null) {\n                sc.setParameters(\"vlanType\", vlanType);\n            }\n\n            if (physicalNetworkId != null) {\n                sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n            }\n        }\n\n        final Pair<List<VlanVO>, Integer> result = _vlanDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends Vlan>, Integer>(result.first(), result.second());\n    }\n","date":"2018-05-10 00:14:40","endLine":1706,"groupId":"4585","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"searchForVlans","params":"(finalListVlanIpRangesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/fa/a81f317b071cb1f5b7390fa067df2982e242c0.src","preCode":"    public Pair<List<? extends Vlan>, Integer> searchForVlans(final ListVlanIpRangesCmd cmd) {\n        \r\n        final String accountName = cmd.getAccountName();\n        final Long domainId = cmd.getDomainId();\n        Long accountId = null;\n        final Long networkId = cmd.getNetworkId();\n        final Boolean forVirtual = cmd.getForVirtualNetwork();\n        String vlanType = null;\n        final Long projectId = cmd.getProjectId();\n        final Long physicalNetworkId = cmd.getPhysicalNetworkId();\n\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            final Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in specified domain\");\n                \r\n                \r\n                final DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        if (forVirtual != null) {\n            if (forVirtual) {\n                vlanType = VlanType.VirtualNetwork.toString();\n            } else {\n                vlanType = VlanType.DirectAttached.toString();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            final Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n                ex.addProxyObject(projectId.toString(), \"projectId\");\n                throw ex;\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        final Filter searchFilter = new Filter(VlanVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        final Object id = cmd.getId();\n        final Object vlan = cmd.getVlan();\n        final Object dataCenterId = cmd.getZoneId();\n        final Object podId = cmd.getPodId();\n        final Object keyword = cmd.getKeyword();\n\n        final SearchBuilder<VlanVO> sb = _vlanDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"dataCenterId\", sb.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"networkId\", sb.entity().getNetworkId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlanType\", sb.entity().getVlanType(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (accountId != null) {\n            final SearchBuilder<AccountVlanMapVO> accountVlanMapSearch = _accountVlanMapDao.createSearchBuilder();\n            accountVlanMapSearch.and(\"accountId\", accountVlanMapSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n            sb.join(\"accountVlanMapSearch\", accountVlanMapSearch, sb.entity().getId(), accountVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        if (podId != null) {\n            final SearchBuilder<PodVlanMapVO> podVlanMapSearch = _podVlanMapDao.createSearchBuilder();\n            podVlanMapSearch.and(\"podId\", podVlanMapSearch.entity().getPodId(), SearchCriteria.Op.EQ);\n            sb.join(\"podVlanMapSearch\", podVlanMapSearch, sb.entity().getId(), podVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        final SearchCriteria<VlanVO> sc = sb.create();\n        if (keyword != null) {\n            final SearchCriteria<VlanVO> ssc = _vlanDao.createSearchCriteria();\n            ssc.addOr(\"vlanTag\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"ipRange\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            sc.addAnd(\"vlanTag\", SearchCriteria.Op.SC, ssc);\n        } else {\n            if (id != null) {\n                sc.setParameters(\"id\", id);\n            }\n\n            if (vlan != null) {\n                sc.setParameters(\"vlan\", vlan);\n            }\n\n            if (dataCenterId != null) {\n                sc.setParameters(\"dataCenterId\", dataCenterId);\n            }\n\n            if (networkId != null) {\n                sc.setParameters(\"networkId\", networkId);\n            }\n\n            if (accountId != null) {\n                sc.setJoinParameters(\"accountVlanMapSearch\", \"accountId\", accountId);\n            }\n\n            if (podId != null) {\n                sc.setJoinParameters(\"podVlanMapSearch\", \"podId\", podId);\n            }\n            if (vlanType != null) {\n                sc.setParameters(\"vlanType\", vlanType);\n            }\n\n            if (physicalNetworkId != null) {\n                sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n            }\n        }\n\n        final Pair<List<VlanVO>, Integer> result = _vlanDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends Vlan>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/server/ManagementServerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1585,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Pair<List<? extends GuestVlan>, Integer> listDedicatedGuestVlanRanges(ListDedicatedGuestVlanRangesCmd cmd) {\n        Long id = cmd.getId();\n        String accountName = cmd.getAccountName();\n        Long domainId = cmd.getDomainId();\n        Long projectId = cmd.getProjectId();\n        String guestVlanRange = cmd.getGuestVlanRange();\n        Long physicalNetworkId = cmd.getPhysicalNetworkId();\n        Long zoneId = cmd.getZoneId();\n\n        Long accountId = null;\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName);\n                DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throwInvalidIdException(\"Unable to find project by id \" + projectId, projectId.toString(), \"projectId\");\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        SearchBuilder<AccountGuestVlanMapVO> sb = _accountGuestVlanMapDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"accountId\", sb.entity().getAccountId(), SearchCriteria.Op.EQ);\n        sb.and(\"guestVlanRange\", sb.entity().getGuestVlanRange(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (zoneId != null) {\n            SearchBuilder<PhysicalNetworkVO> physicalnetworkSearch = _physicalNetworkDao.createSearchBuilder();\n            physicalnetworkSearch.and(\"zoneId\", physicalnetworkSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n            sb.join(\"physicalnetworkSearch\", physicalnetworkSearch, sb.entity().getPhysicalNetworkId(), physicalnetworkSearch.entity().getId(), JoinBuilder.JoinType.INNER);\n        }\n\n        SearchCriteria<AccountGuestVlanMapVO> sc = sb.create();\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        if (accountId != null) {\n            sc.setParameters(\"accountId\", accountId);\n        }\n\n        if (guestVlanRange != null) {\n            sc.setParameters(\"guestVlanRange\", guestVlanRange);\n        }\n\n        if (physicalNetworkId != null) {\n            sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n        }\n\n        if (zoneId != null) {\n            sc.setJoinParameters(\"physicalnetworkSearch\", \"zoneId\", zoneId);\n        }\n\n        Filter searchFilter = new Filter(AccountGuestVlanMapVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Pair<List<AccountGuestVlanMapVO>, Integer> result = _accountGuestVlanMapDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestVlan>, Integer>(result.first(), result.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":3584,"groupId":"7835","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"listDedicatedGuestVlanRanges","params":"(ListDedicatedGuestVlanRangesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    public Pair<List<? extends GuestVlan>, Integer> listDedicatedGuestVlanRanges(ListDedicatedGuestVlanRangesCmd cmd) {\n        Long id = cmd.getId();\n        String accountName = cmd.getAccountName();\n        Long domainId = cmd.getDomainId();\n        Long projectId = cmd.getProjectId();\n        String guestVlanRange = cmd.getGuestVlanRange();\n        Long physicalNetworkId = cmd.getPhysicalNetworkId();\n        Long zoneId = cmd.getZoneId();\n\n        Long accountId = null;\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName);\n                DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throwInvalidIdException(\"Unable to find project by id \" + projectId, projectId.toString(), \"projectId\");\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        SearchBuilder<AccountGuestVlanMapVO> sb = _accountGuestVlanMapDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"accountId\", sb.entity().getAccountId(), SearchCriteria.Op.EQ);\n        sb.and(\"guestVlanRange\", sb.entity().getGuestVlanRange(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (zoneId != null) {\n            SearchBuilder<PhysicalNetworkVO> physicalnetworkSearch = _physicalNetworkDao.createSearchBuilder();\n            physicalnetworkSearch.and(\"zoneId\", physicalnetworkSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n            sb.join(\"physicalnetworkSearch\", physicalnetworkSearch, sb.entity().getPhysicalNetworkId(), physicalnetworkSearch.entity().getId(), JoinBuilder.JoinType.INNER);\n        }\n\n        SearchCriteria<AccountGuestVlanMapVO> sc = sb.create();\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        if (accountId != null) {\n            sc.setParameters(\"accountId\", accountId);\n        }\n\n        if (guestVlanRange != null) {\n            sc.setParameters(\"guestVlanRange\", guestVlanRange);\n        }\n\n        if (physicalNetworkId != null) {\n            sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n        }\n\n        if (zoneId != null) {\n            sc.setJoinParameters(\"physicalnetworkSearch\", \"zoneId\", zoneId);\n        }\n\n        Filter searchFilter = new Filter(AccountGuestVlanMapVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Pair<List<AccountGuestVlanMapVO>, Integer> result = _accountGuestVlanMapDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestVlan>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3510,"status":"N"}],"commitId":"951f73b10749b1d713ab1d740e6667def4bac212","commitMessage":"@@@CLOUDSTACK-10362: Change the \"getXXX\" method names to \"isXXX\" (#2600)\n\nThese Boolean-return methods are named \"getXXX\".  but other Boolean-return methods are named \"isXXX\".  such as the following two methods. They will return boolean values.  rename them as \"isXXX\" should be more clear than \"getXXX\".","date":"2018-05-10 00:14:40","modifiedFileCount":"22","status":"M","submitter":"Kui LIU"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2021-09-20 13:07:21","commitOrder":3,"curCode":"    public Pair<List<? extends Vlan>, Integer> searchForVlans(final ListVlanIpRangesCmd cmd) {\n        \r\n        final String accountName = cmd.getAccountName();\n        final Long domainId = cmd.getDomainId();\n        Long accountId = null;\n        final Long networkId = cmd.getNetworkId();\n        final Boolean forVirtual = cmd.isForVirtualNetwork();\n        String vlanType = null;\n        final Long projectId = cmd.getProjectId();\n        final Long physicalNetworkId = cmd.getPhysicalNetworkId();\n\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            final Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in specified domain\");\n                \r\n                \r\n                final DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        if (forVirtual != null) {\n            if (forVirtual) {\n                vlanType = VlanType.VirtualNetwork.toString();\n            } else {\n                vlanType = VlanType.DirectAttached.toString();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            final Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n                ex.addProxyObject(projectId.toString(), \"projectId\");\n                throw ex;\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        final Filter searchFilter = new Filter(VlanVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        final Object id = cmd.getId();\n        final Object vlan = cmd.getVlan();\n        final Object dataCenterId = cmd.getZoneId();\n        final Object podId = cmd.getPodId();\n        final Object keyword = cmd.getKeyword();\n\n        final SearchBuilder<VlanVO> sb = _vlanDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"dataCenterId\", sb.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"networkId\", sb.entity().getNetworkId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlanType\", sb.entity().getVlanType(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (accountId != null) {\n            final SearchBuilder<AccountVlanMapVO> accountVlanMapSearch = _accountVlanMapDao.createSearchBuilder();\n            accountVlanMapSearch.and(\"accountId\", accountVlanMapSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n            sb.join(\"accountVlanMapSearch\", accountVlanMapSearch, sb.entity().getId(), accountVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        if (domainId != null) {\n            DomainVO domain = ApiDBUtils.findDomainById(domainId);\n            if (domain == null) {\n                throw new InvalidParameterValueException(\"Unable to find domain with id \" + domainId);\n            }\n            final SearchBuilder<DomainVlanMapVO> domainVlanMapSearch = _domainVlanMapDao.createSearchBuilder();\n            domainVlanMapSearch.and(\"domainId\", domainVlanMapSearch.entity().getDomainId(), SearchCriteria.Op.EQ);\n            sb.join(\"domainVlanMapSearch\", domainVlanMapSearch, sb.entity().getId(), domainVlanMapSearch.entity().getVlanDbId(), JoinType.INNER);\n        }\n\n        if (podId != null) {\n            final SearchBuilder<PodVlanMapVO> podVlanMapSearch = _podVlanMapDao.createSearchBuilder();\n            podVlanMapSearch.and(\"podId\", podVlanMapSearch.entity().getPodId(), SearchCriteria.Op.EQ);\n            sb.join(\"podVlanMapSearch\", podVlanMapSearch, sb.entity().getId(), podVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        final SearchCriteria<VlanVO> sc = sb.create();\n        if (keyword != null) {\n            final SearchCriteria<VlanVO> ssc = _vlanDao.createSearchCriteria();\n            ssc.addOr(\"vlanTag\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"ipRange\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            sc.addAnd(\"vlanTag\", SearchCriteria.Op.SC, ssc);\n        } else {\n            if (id != null) {\n                sc.setParameters(\"id\", id);\n            }\n\n            if (vlan != null) {\n                sc.setParameters(\"vlan\", vlan);\n            }\n\n            if (dataCenterId != null) {\n                sc.setParameters(\"dataCenterId\", dataCenterId);\n            }\n\n            if (networkId != null) {\n                sc.setParameters(\"networkId\", networkId);\n            }\n\n            if (accountId != null) {\n                sc.setJoinParameters(\"accountVlanMapSearch\", \"accountId\", accountId);\n            }\n\n            if (podId != null) {\n                sc.setJoinParameters(\"podVlanMapSearch\", \"podId\", podId);\n            }\n            if (vlanType != null) {\n                sc.setParameters(\"vlanType\", vlanType);\n            }\n\n            if (physicalNetworkId != null) {\n                sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n            }\n\n            if (domainId != null) {\n                sc.setJoinParameters(\"domainVlanMapSearch\", \"domainId\", domainId);\n            }\n        }\n\n        final Pair<List<VlanVO>, Integer> result = _vlanDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends Vlan>, Integer>(result.first(), result.second());\n    }\n","date":"2021-09-20 13:07:21","endLine":1962,"groupId":"101313","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"searchForVlans","params":"(finalListVlanIpRangesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b2/7ad8ce3d7880967552442f6755d658a8d5296e.src","preCode":"    public Pair<List<? extends Vlan>, Integer> searchForVlans(final ListVlanIpRangesCmd cmd) {\n        \r\n        final String accountName = cmd.getAccountName();\n        final Long domainId = cmd.getDomainId();\n        Long accountId = null;\n        final Long networkId = cmd.getNetworkId();\n        final Boolean forVirtual = cmd.isForVirtualNetwork();\n        String vlanType = null;\n        final Long projectId = cmd.getProjectId();\n        final Long physicalNetworkId = cmd.getPhysicalNetworkId();\n\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            final Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName + \" in specified domain\");\n                \r\n                \r\n                final DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        if (forVirtual != null) {\n            if (forVirtual) {\n                vlanType = VlanType.VirtualNetwork.toString();\n            } else {\n                vlanType = VlanType.DirectAttached.toString();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            final Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                final InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find project by id \" + projectId);\n                ex.addProxyObject(projectId.toString(), \"projectId\");\n                throw ex;\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        final Filter searchFilter = new Filter(VlanVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n\n        final Object id = cmd.getId();\n        final Object vlan = cmd.getVlan();\n        final Object dataCenterId = cmd.getZoneId();\n        final Object podId = cmd.getPodId();\n        final Object keyword = cmd.getKeyword();\n\n        final SearchBuilder<VlanVO> sb = _vlanDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"dataCenterId\", sb.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlan\", sb.entity().getVlanTag(), SearchCriteria.Op.EQ);\n        sb.and(\"networkId\", sb.entity().getNetworkId(), SearchCriteria.Op.EQ);\n        sb.and(\"vlanType\", sb.entity().getVlanType(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (accountId != null) {\n            final SearchBuilder<AccountVlanMapVO> accountVlanMapSearch = _accountVlanMapDao.createSearchBuilder();\n            accountVlanMapSearch.and(\"accountId\", accountVlanMapSearch.entity().getAccountId(), SearchCriteria.Op.EQ);\n            sb.join(\"accountVlanMapSearch\", accountVlanMapSearch, sb.entity().getId(), accountVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        if (podId != null) {\n            final SearchBuilder<PodVlanMapVO> podVlanMapSearch = _podVlanMapDao.createSearchBuilder();\n            podVlanMapSearch.and(\"podId\", podVlanMapSearch.entity().getPodId(), SearchCriteria.Op.EQ);\n            sb.join(\"podVlanMapSearch\", podVlanMapSearch, sb.entity().getId(), podVlanMapSearch.entity().getVlanDbId(), JoinBuilder.JoinType.INNER);\n        }\n\n        final SearchCriteria<VlanVO> sc = sb.create();\n        if (keyword != null) {\n            final SearchCriteria<VlanVO> ssc = _vlanDao.createSearchCriteria();\n            ssc.addOr(\"vlanTag\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            ssc.addOr(\"ipRange\", SearchCriteria.Op.LIKE, \"%\" + keyword + \"%\");\n            sc.addAnd(\"vlanTag\", SearchCriteria.Op.SC, ssc);\n        } else {\n            if (id != null) {\n                sc.setParameters(\"id\", id);\n            }\n\n            if (vlan != null) {\n                sc.setParameters(\"vlan\", vlan);\n            }\n\n            if (dataCenterId != null) {\n                sc.setParameters(\"dataCenterId\", dataCenterId);\n            }\n\n            if (networkId != null) {\n                sc.setParameters(\"networkId\", networkId);\n            }\n\n            if (accountId != null) {\n                sc.setJoinParameters(\"accountVlanMapSearch\", \"accountId\", accountId);\n            }\n\n            if (podId != null) {\n                sc.setJoinParameters(\"podVlanMapSearch\", \"podId\", podId);\n            }\n            if (vlanType != null) {\n                sc.setParameters(\"vlanType\", vlanType);\n            }\n\n            if (physicalNetworkId != null) {\n                sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n            }\n        }\n\n        final Pair<List<VlanVO>, Integer> result = _vlanDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends Vlan>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/server/ManagementServerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1827,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public Pair<List<? extends GuestVlan>, Integer> listDedicatedGuestVlanRanges(ListDedicatedGuestVlanRangesCmd cmd) {\n        Long id = cmd.getId();\n        String accountName = cmd.getAccountName();\n        Long domainId = cmd.getDomainId();\n        Long projectId = cmd.getProjectId();\n        String guestVlanRange = cmd.getGuestVlanRange();\n        Long physicalNetworkId = cmd.getPhysicalNetworkId();\n        Long zoneId = cmd.getZoneId();\n\n        Long accountId = null;\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName);\n                DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throwInvalidIdException(\"Unable to find project by id \" + projectId, projectId.toString(), \"projectId\");\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        SearchBuilder<AccountGuestVlanMapVO> sb = _accountGuestVlanMapDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"accountId\", sb.entity().getAccountId(), SearchCriteria.Op.EQ);\n        sb.and(\"guestVlanRange\", sb.entity().getGuestVlanRange(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (zoneId != null) {\n            SearchBuilder<PhysicalNetworkVO> physicalnetworkSearch = _physicalNetworkDao.createSearchBuilder();\n            physicalnetworkSearch.and(\"zoneId\", physicalnetworkSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n            sb.join(\"physicalnetworkSearch\", physicalnetworkSearch, sb.entity().getPhysicalNetworkId(), physicalnetworkSearch.entity().getId(), JoinBuilder.JoinType.INNER);\n        }\n\n        SearchCriteria<AccountGuestVlanMapVO> sc = sb.create();\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        if (accountId != null) {\n            sc.setParameters(\"accountId\", accountId);\n        }\n\n        if (guestVlanRange != null) {\n            sc.setParameters(\"guestVlanRange\", guestVlanRange);\n        }\n\n        if (physicalNetworkId != null) {\n            sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n        }\n\n        if (zoneId != null) {\n            sc.setJoinParameters(\"physicalnetworkSearch\", \"zoneId\", zoneId);\n        }\n\n        Filter searchFilter = new Filter(AccountGuestVlanMapVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Pair<List<AccountGuestVlanMapVO>, Integer> result = _accountGuestVlanMapDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestVlan>, Integer>(result.first(), result.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":3584,"groupId":"101313","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"listDedicatedGuestVlanRanges","params":"(ListDedicatedGuestVlanRangesCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d7/ae6276f85511393488e99fb7d4ffb01a44b673.src","preCode":"    public Pair<List<? extends GuestVlan>, Integer> listDedicatedGuestVlanRanges(ListDedicatedGuestVlanRangesCmd cmd) {\n        Long id = cmd.getId();\n        String accountName = cmd.getAccountName();\n        Long domainId = cmd.getDomainId();\n        Long projectId = cmd.getProjectId();\n        String guestVlanRange = cmd.getGuestVlanRange();\n        Long physicalNetworkId = cmd.getPhysicalNetworkId();\n        Long zoneId = cmd.getZoneId();\n\n        Long accountId = null;\n        if (accountName != null && domainId != null) {\n            if (projectId != null) {\n                throw new InvalidParameterValueException(\"Account and projectId can't be specified together\");\n            }\n            Account account = _accountDao.findActiveAccount(accountName, domainId);\n            if (account == null) {\n                InvalidParameterValueException ex = new InvalidParameterValueException(\"Unable to find account \" + accountName);\n                DomainVO domain = ApiDBUtils.findDomainById(domainId);\n                String domainUuid = domainId.toString();\n                if (domain != null) {\n                    domainUuid = domain.getUuid();\n                }\n                ex.addProxyObject(domainUuid, \"domainId\");\n                throw ex;\n            } else {\n                accountId = account.getId();\n            }\n        }\n\n        \r\n        if (projectId != null) {\n            Project project = _projectMgr.getProject(projectId);\n            if (project == null) {\n                throwInvalidIdException(\"Unable to find project by id \" + projectId, projectId.toString(), \"projectId\");\n            }\n            accountId = project.getProjectAccountId();\n        }\n\n        SearchBuilder<AccountGuestVlanMapVO> sb = _accountGuestVlanMapDao.createSearchBuilder();\n        sb.and(\"id\", sb.entity().getId(), SearchCriteria.Op.EQ);\n        sb.and(\"accountId\", sb.entity().getAccountId(), SearchCriteria.Op.EQ);\n        sb.and(\"guestVlanRange\", sb.entity().getGuestVlanRange(), SearchCriteria.Op.EQ);\n        sb.and(\"physicalNetworkId\", sb.entity().getPhysicalNetworkId(), SearchCriteria.Op.EQ);\n\n        if (zoneId != null) {\n            SearchBuilder<PhysicalNetworkVO> physicalnetworkSearch = _physicalNetworkDao.createSearchBuilder();\n            physicalnetworkSearch.and(\"zoneId\", physicalnetworkSearch.entity().getDataCenterId(), SearchCriteria.Op.EQ);\n            sb.join(\"physicalnetworkSearch\", physicalnetworkSearch, sb.entity().getPhysicalNetworkId(), physicalnetworkSearch.entity().getId(), JoinBuilder.JoinType.INNER);\n        }\n\n        SearchCriteria<AccountGuestVlanMapVO> sc = sb.create();\n        if (id != null) {\n            sc.setParameters(\"id\", id);\n        }\n\n        if (accountId != null) {\n            sc.setParameters(\"accountId\", accountId);\n        }\n\n        if (guestVlanRange != null) {\n            sc.setParameters(\"guestVlanRange\", guestVlanRange);\n        }\n\n        if (physicalNetworkId != null) {\n            sc.setParameters(\"physicalNetworkId\", physicalNetworkId);\n        }\n\n        if (zoneId != null) {\n            sc.setJoinParameters(\"physicalnetworkSearch\", \"zoneId\", zoneId);\n        }\n\n        Filter searchFilter = new Filter(AccountGuestVlanMapVO.class, \"id\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        Pair<List<AccountGuestVlanMapVO>, Integer> result = _accountGuestVlanMapDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestVlan>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/network/NetworkServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3510,"status":"N"}],"commitId":"3b4523f22ad5921f6686fcecbea90bd17beeadd7","commitMessage":"@@@Display vlan ip range for specified domainid (#4634)\n\n* Display vlan ip range for specified domainid\n\nCurrently if we try to list vlan ip range by passing\ndomainid then it lists for all domain. Make sure that\nit lists only for that domain\n\n* orgazine imports\n\nCo-authored-by: Rakesh Venkatesh <rakeshv@apache.org>","date":"2021-09-20 13:07:21","modifiedFileCount":"1","status":"M","submitter":"Rakesh"}]
