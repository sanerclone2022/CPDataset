[{"authorTime":"2018-09-11 07:09:26","codes":[{"authorDate":"2018-09-11 07:09:26","commitOrder":1,"curCode":"    public void buildMapUsingUserInformationTestUserDefinedMigrationMapEmpty() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        Assert.assertTrue(volumeToPoolObjectMap.isEmpty());\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(0)).keySet();\n    }\n","date":"2018-09-11 07:09:26","endLine":295,"groupId":"14322","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildMapUsingUserInformationTestUserDefinedMigrationMapEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c4/844ac82d067a4b5a1a5830346d6b29ebaca97a.src","preCode":"    public void buildMapUsingUserInformationTestUserDefinedMigrationMapEmpty() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        Assert.assertTrue(volumeToPoolObjectMap.isEmpty());\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(0)).keySet();\n    }\n","realPath":"engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"},{"authorDate":"2018-09-11 07:09:26","commitOrder":1,"curCode":"    public void buildMapUsingUserInformationTestTargetHostHasAccessToPool() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n        userDefinedVolumeToStoragePoolMap.put(volumeMockId, storagePoolVoMockId);\n\n        Mockito.doNothing().when(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolProvided(Mockito.any(StoragePoolVO.class), Mockito.any(VolumeVO.class),\n                Mockito.any(StoragePoolVO.class));\n        Mockito.doReturn(Mockito.mock(StoragePoolHostVO.class)).when(storagePoolHostDaoMock).findByPoolHost(storagePoolVoMockId, hostMockId);\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n        Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(1)).keySet();\n    }\n","date":"2018-09-11 07:09:26","endLine":324,"groupId":"14322","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMapUsingUserInformationTestTargetHostHasAccessToPool","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c4/844ac82d067a4b5a1a5830346d6b29ebaca97a.src","preCode":"    public void buildMapUsingUserInformationTestTargetHostHasAccessToPool() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n        userDefinedVolumeToStoragePoolMap.put(volumeMockId, storagePoolVoMockId);\n\n        Mockito.doNothing().when(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolProvided(Mockito.any(StoragePoolVO.class), Mockito.any(VolumeVO.class),\n                Mockito.any(StoragePoolVO.class));\n        Mockito.doReturn(Mockito.mock(StoragePoolHostVO.class)).when(storagePoolHostDaoMock).findByPoolHost(storagePoolVoMockId, hostMockId);\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n        Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(1)).keySet();\n    }\n","realPath":"engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"}],"commitId":"f550d703053fb3ccf9df739cee31ab823d132f3a","commitMessage":"@@@Add managed storage pool constraints to MigrateWithVolume API method (#2761)\n\n* Add managed storage pool constraints to MigrateWithVolume API method\n\n* Apply mike's suggestions\n\n* Apply Mike's suggestion in a second review\n\n* Mike's suggestions\n\n* Confused bit\n\n* just executeManagedStorageChecks\n\n* Created methods `executeManagedStorageChecksWhenTargetStoragePoolNotProvided` and `executeManagedStorageChecksWhenTargetStoragePoolProvided`\n\n* improve \"executeManagedStorageChecksWhenTargetStoragePoolNotProvided\"\n\n* Fix \"findVolumesThatWereNotMappedByTheUser\" method\n\n* Applu Mike's suggestion to improve \"createMappingVolumeAndStoragePool\" method\n\n* Unit tests to cover modified code\n","date":"2018-09-11 07:09:26","modifiedFileCount":"2","status":"B","submitter":"Rafael Weing?rtner"},{"authorTime":"2019-01-25 20:05:13","codes":[{"authorDate":"2018-09-11 07:09:26","commitOrder":2,"curCode":"    public void buildMapUsingUserInformationTestUserDefinedMigrationMapEmpty() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        Assert.assertTrue(volumeToPoolObjectMap.isEmpty());\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(0)).keySet();\n    }\n","date":"2018-09-11 07:09:26","endLine":295,"groupId":"10525","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildMapUsingUserInformationTestUserDefinedMigrationMapEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/c4/844ac82d067a4b5a1a5830346d6b29ebaca97a.src","preCode":"    public void buildMapUsingUserInformationTestUserDefinedMigrationMapEmpty() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        Assert.assertTrue(volumeToPoolObjectMap.isEmpty());\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(0)).keySet();\n    }\n","realPath":"engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"N"},{"authorDate":"2019-01-25 20:05:13","commitOrder":2,"curCode":"    public void buildMapUsingUserInformationTestTargetHostHasAccessToPool() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n        userDefinedVolumeToStoragePoolMap.put(volumeMockId, storagePoolVoMockId);\n\n        Mockito.doNothing().when(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolProvided(Mockito.any(StoragePoolVO.class), Mockito.any(VolumeVO.class),\n                Mockito.any(StoragePoolVO.class));\n        Mockito.doReturn(Mockito.mock(StoragePoolHostVO.class)).when(storagePoolHostDaoMock).findByPoolHost(storagePoolVoMockId, hostMockId);\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        assertFalse(volumeToPoolObjectMap.isEmpty());\n        Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(1)).keySet();\n    }\n","date":"2019-01-25 20:05:13","endLine":326,"groupId":"10525","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMapUsingUserInformationTestTargetHostHasAccessToPool","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0e/7579ea5fd3782c101e59841b92df8987dddde4.src","preCode":"    public void buildMapUsingUserInformationTestTargetHostHasAccessToPool() {\n        HashMap<Long, Long> userDefinedVolumeToStoragePoolMap = Mockito.spy(new HashMap<>());\n        userDefinedVolumeToStoragePoolMap.put(volumeMockId, storagePoolVoMockId);\n\n        Mockito.doNothing().when(virtualMachineManagerImpl).executeManagedStorageChecksWhenTargetStoragePoolProvided(Mockito.any(StoragePoolVO.class), Mockito.any(VolumeVO.class),\n                Mockito.any(StoragePoolVO.class));\n        Mockito.doReturn(Mockito.mock(StoragePoolHostVO.class)).when(storagePoolHostDaoMock).findByPoolHost(storagePoolVoMockId, hostMockId);\n\n        Map<Volume, StoragePool> volumeToPoolObjectMap = virtualMachineManagerImpl.buildMapUsingUserInformation(virtualMachineProfileMock, hostMock, userDefinedVolumeToStoragePoolMap);\n\n        Assert.assertFalse(volumeToPoolObjectMap.isEmpty());\n        Assert.assertEquals(storagePoolVoMock, volumeToPoolObjectMap.get(volumeVoMock));\n\n        Mockito.verify(userDefinedVolumeToStoragePoolMap, times(1)).keySet();\n    }\n","realPath":"engine/orchestration/src/test/java/com/cloud/vm/VirtualMachineManagerImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"b363fd49f70ac2092ebe6226a72a3d911dc99e1f","commitMessage":"@@@Vmware offline migration (#2848)\n\n* - Offline VM and Volume migration on Vmware hypervisor hosts\n- Also add VM disk consolidation call on successful VM migrations\n\n* Fix indentation of marvin test file and reformat against PEP8\n\n* * Fix few comment typos\n* Refactor debug messages to use String.format() when debug log level is enabled.\n\n* Send list of commands returned by hypervisor Guru instead of explicitly selecting the first one\n\n* Fix unhandled NPE during VM migration\n\n* Revert back to distinct event descriptions for VM to host or storage pool migration\n\n* Reformat test_primary_storage file against PEP-8 and Remove unused imports\n\n* Revert back the deprecation messages in the custom StringUtils class to favour the use of the ApacheUtils\n","date":"2019-01-25 20:05:13","modifiedFileCount":"35","status":"M","submitter":"dahn"}]
