[{"authorTime":"2019-01-25 20:05:13","codes":[{"authorDate":"2019-06-27 11:51:09","commitOrder":2,"curCode":"    private Snapshot takeSnapshotInternal(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        VMInstanceVO vm = null;\n        if (volume.getInstanceId() != null) {\n            vm = _vmInstanceDao.findById(volume.getInstanceId());\n        }\n\n        if (vm != null) {\n            \r\n            AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n            if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n                \r\n\n                VmWorkJobVO placeHolder = null;\n                placeHolder = createPlaceHolderWork(vm.getId());\n                try {\n                    return orchestrateTakeVolumeSnapshot(volumeId, policyId, snapshotId, account, quiescevm, locationType, asyncBackup);\n                } finally {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n\n            } else {\n                Outcome<Snapshot> outcome = takeVolumeSnapshotThroughJobQueue(vm.getId(), volumeId, policyId, snapshotId, account.getId(), quiescevm, locationType, asyncBackup);\n\n                try {\n                    outcome.get();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(\"Operation is interrupted\", e);\n                } catch (java.util.concurrent.ExecutionException e) {\n                    throw new RuntimeException(\"Execution excetion\", e);\n                }\n\n                Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n                if (jobResult != null) {\n                    if (jobResult instanceof ConcurrentOperationException) {\n                        throw (ConcurrentOperationException)jobResult;\n                    } else if (jobResult instanceof ResourceAllocationException) {\n                        throw (ResourceAllocationException)jobResult;\n                    } else if (jobResult instanceof Throwable) {\n                        throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                    }\n                }\n\n                return _snapshotDao.findById(snapshotId);\n            }\n        } else {\n            CreateSnapshotPayload payload = new CreateSnapshotPayload();\n            payload.setSnapshotId(snapshotId);\n            payload.setSnapshotPolicyId(policyId);\n            payload.setAccount(account);\n            payload.setQuiescevm(quiescevm);\n            payload.setAsyncBackup(asyncBackup);\n            volume.addPayload(payload);\n            return volService.takeSnapshot(volume);\n        }\n    }\n","date":"2019-06-27 11:51:08","endLine":2430,"groupId":"13485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"takeSnapshotInternal","params":"(LongvolumeId@LongpolicyId@LongsnapshotId@Accountaccount@booleanquiescevm@Snapshot.LocationTypelocationType@booleanasyncBackup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/20/22d5b5be13f3ab1fe9f8aef1a09f38ec4a5ffb.src","preCode":"    private Snapshot takeSnapshotInternal(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        VMInstanceVO vm = null;\n        if (volume.getInstanceId() != null) {\n            vm = _vmInstanceDao.findById(volume.getInstanceId());\n        }\n\n        if (vm != null) {\n            \r\n            AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n            if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n                \r\n\n                VmWorkJobVO placeHolder = null;\n                placeHolder = createPlaceHolderWork(vm.getId());\n                try {\n                    return orchestrateTakeVolumeSnapshot(volumeId, policyId, snapshotId, account, quiescevm, locationType, asyncBackup);\n                } finally {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n\n            } else {\n                Outcome<Snapshot> outcome = takeVolumeSnapshotThroughJobQueue(vm.getId(), volumeId, policyId, snapshotId, account.getId(), quiescevm, locationType, asyncBackup);\n\n                try {\n                    outcome.get();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(\"Operation is interrupted\", e);\n                } catch (java.util.concurrent.ExecutionException e) {\n                    throw new RuntimeException(\"Execution excetion\", e);\n                }\n\n                Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n                if (jobResult != null) {\n                    if (jobResult instanceof ConcurrentOperationException) {\n                        throw (ConcurrentOperationException)jobResult;\n                    } else if (jobResult instanceof ResourceAllocationException) {\n                        throw (ResourceAllocationException)jobResult;\n                    } else if (jobResult instanceof Throwable) {\n                        throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                    }\n                }\n\n                return _snapshotDao.findById(snapshotId);\n            }\n        } else {\n            CreateSnapshotPayload payload = new CreateSnapshotPayload();\n            payload.setSnapshotId(snapshotId);\n            payload.setSnapshotPolicyId(policyId);\n            payload.setAccount(account);\n            payload.setQuiescevm(quiescevm);\n            payload.setAsyncBackup(asyncBackup);\n            volume.addPayload(payload);\n            return volService.takeSnapshot(volume);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2360,"status":"B"},{"authorDate":"2019-01-25 20:05:13","commitOrder":2,"curCode":"    private Snapshot orchestrateTakeVolumeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        CreateSnapshotPayload payload = new CreateSnapshotPayload();\n\n        payload.setSnapshotId(snapshotId);\n        payload.setSnapshotPolicyId(policyId);\n        payload.setAccount(account);\n        payload.setQuiescevm(quiescevm);\n        payload.setLocationType(locationType);\n        payload.setAsyncBackup(asyncBackup);\n        volume.addPayload(payload);\n\n        return volService.takeSnapshot(volume);\n    }\n","date":"2019-01-25 20:05:13","endLine":2428,"groupId":"17062","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"orchestrateTakeVolumeSnapshot","params":"(LongvolumeId@LongpolicyId@LongsnapshotId@Accountaccount@booleanquiescevm@Snapshot.LocationTypelocationType@booleanasyncBackup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/23/b56e98da389ad1e9beb7e87976f0c2649574a3.src","preCode":"    private Snapshot orchestrateTakeVolumeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        CreateSnapshotPayload payload = new CreateSnapshotPayload();\n\n        payload.setSnapshotId(snapshotId);\n        payload.setSnapshotPolicyId(policyId);\n        payload.setAccount(account);\n        payload.setQuiescevm(quiescevm);\n        payload.setLocationType(locationType);\n        payload.setAsyncBackup(asyncBackup);\n        volume.addPayload(payload);\n\n        return volService.takeSnapshot(volume);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2404,"status":"NB"}],"commitId":"58474530f69825f5108d249ac3f5e4a153d0c8d6","commitMessage":"@@@api: snapshot.  snapshotpolicy tag support (#3228)\n\nProblem: Currently tags cannot be applied to snapshot when it is being created but through separate ?create tags? API calls. For snapshot policies tags cannot be set either at creation or through ?create tags? API.\n\nRoot Cause: The ?create snapshots? API does not support adding tags during creation and it can only be done through ?create tags? API. Snapshot policy as a resource does not support tags and no tags can be set for them through any API.\n\nSolution: Tag support for snapshot policy has been added. Snapshot policy with tags when executed will produce snapshots containing the same tags from snapshot policy.\n\nFollowing APIs have been updated:\n\nBoth ?create snapshotpolicy? and ?create snapshot? now accepts ?tags? as a new parameter. The expected format for ?tags? parameter is similar to parameter ?tags? in ?create tags? API.\nDeletion support for tags associated with snapshots policy has been added to ?delete snapshotpolicies? API.\nTags set for snapshot policies are added to the Response of ?list snapshotpolicies? API.\nUI support for setting tags to snapshots and snapshot policy is provided through the corresponding menus with a new section in each form to set tags.\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n","date":"2019-06-27 11:51:08","modifiedFileCount":"13","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2019-01-25 20:05:13","codes":[{"authorDate":"2021-04-26 17:03:58","commitOrder":3,"curCode":"    private Snapshot takeSnapshotInternal(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n        Account caller = CallContext.current().getCallingAccount();\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        _accountMgr.checkAccess(caller, null, true, volume);\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        VMInstanceVO vm = null;\n        if (volume.getInstanceId() != null) {\n            vm = _vmInstanceDao.findById(volume.getInstanceId());\n        }\n\n        if (vm != null) {\n            _accountMgr.checkAccess(caller, null, true, vm);\n            \r\n            AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n            if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n                \r\n\n                VmWorkJobVO placeHolder = null;\n                placeHolder = createPlaceHolderWork(vm.getId());\n                try {\n                    return orchestrateTakeVolumeSnapshot(volumeId, policyId, snapshotId, account, quiescevm, locationType, asyncBackup);\n                } finally {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n\n            } else {\n                Outcome<Snapshot> outcome = takeVolumeSnapshotThroughJobQueue(vm.getId(), volumeId, policyId, snapshotId, account.getId(), quiescevm, locationType, asyncBackup);\n\n                try {\n                    outcome.get();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(\"Operation is interrupted\", e);\n                } catch (java.util.concurrent.ExecutionException e) {\n                    throw new RuntimeException(\"Execution excetion\", e);\n                }\n\n                Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n                if (jobResult != null) {\n                    if (jobResult instanceof ConcurrentOperationException) {\n                        throw (ConcurrentOperationException)jobResult;\n                    } else if (jobResult instanceof ResourceAllocationException) {\n                        throw (ResourceAllocationException)jobResult;\n                    } else if (jobResult instanceof Throwable) {\n                        throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                    }\n                }\n\n                return _snapshotDao.findById(snapshotId);\n            }\n        } else {\n            CreateSnapshotPayload payload = new CreateSnapshotPayload();\n            payload.setSnapshotId(snapshotId);\n            payload.setSnapshotPolicyId(policyId);\n            payload.setAccount(account);\n            payload.setQuiescevm(quiescevm);\n            payload.setAsyncBackup(asyncBackup);\n            volume.addPayload(payload);\n            return volService.takeSnapshot(volume);\n        }\n    }\n","date":"2021-04-26 17:03:58","endLine":2722,"groupId":"121958","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"takeSnapshotInternal","params":"(LongvolumeId@LongpolicyId@LongsnapshotId@Accountaccount@booleanquiescevm@Snapshot.LocationTypelocationType@booleanasyncBackup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cd/a3e15399df6c59a385140d5fa6bf6c029736ad.src","preCode":"    private Snapshot takeSnapshotInternal(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        StoragePoolVO storagePoolVO = _storagePoolDao.findById(volume.getPoolId());\n\n        if (storagePoolVO.isManaged() && locationType == null) {\n            locationType = Snapshot.LocationType.PRIMARY;\n        }\n\n        VMInstanceVO vm = null;\n        if (volume.getInstanceId() != null) {\n            vm = _vmInstanceDao.findById(volume.getInstanceId());\n        }\n\n        if (vm != null) {\n            \r\n            AsyncJobExecutionContext jobContext = AsyncJobExecutionContext.getCurrentExecutionContext();\n            if (jobContext.isJobDispatchedBy(VmWorkConstants.VM_WORK_JOB_DISPATCHER)) {\n                \r\n\n                VmWorkJobVO placeHolder = null;\n                placeHolder = createPlaceHolderWork(vm.getId());\n                try {\n                    return orchestrateTakeVolumeSnapshot(volumeId, policyId, snapshotId, account, quiescevm, locationType, asyncBackup);\n                } finally {\n                    _workJobDao.expunge(placeHolder.getId());\n                }\n\n            } else {\n                Outcome<Snapshot> outcome = takeVolumeSnapshotThroughJobQueue(vm.getId(), volumeId, policyId, snapshotId, account.getId(), quiescevm, locationType, asyncBackup);\n\n                try {\n                    outcome.get();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(\"Operation is interrupted\", e);\n                } catch (java.util.concurrent.ExecutionException e) {\n                    throw new RuntimeException(\"Execution excetion\", e);\n                }\n\n                Object jobResult = _jobMgr.unmarshallResultObject(outcome.getJob());\n                if (jobResult != null) {\n                    if (jobResult instanceof ConcurrentOperationException) {\n                        throw (ConcurrentOperationException)jobResult;\n                    } else if (jobResult instanceof ResourceAllocationException) {\n                        throw (ResourceAllocationException)jobResult;\n                    } else if (jobResult instanceof Throwable) {\n                        throw new RuntimeException(\"Unexpected exception\", (Throwable)jobResult);\n                    }\n                }\n\n                return _snapshotDao.findById(snapshotId);\n            }\n        } else {\n            CreateSnapshotPayload payload = new CreateSnapshotPayload();\n            payload.setSnapshotId(snapshotId);\n            payload.setSnapshotPolicyId(policyId);\n            payload.setAccount(account);\n            payload.setQuiescevm(quiescevm);\n            payload.setAsyncBackup(asyncBackup);\n            volume.addPayload(payload);\n            return volService.takeSnapshot(volume);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2648,"status":"M"},{"authorDate":"2019-01-25 20:05:13","commitOrder":3,"curCode":"    private Snapshot orchestrateTakeVolumeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        CreateSnapshotPayload payload = new CreateSnapshotPayload();\n\n        payload.setSnapshotId(snapshotId);\n        payload.setSnapshotPolicyId(policyId);\n        payload.setAccount(account);\n        payload.setQuiescevm(quiescevm);\n        payload.setLocationType(locationType);\n        payload.setAsyncBackup(asyncBackup);\n        volume.addPayload(payload);\n\n        return volService.takeSnapshot(volume);\n    }\n","date":"2019-01-25 20:05:13","endLine":2428,"groupId":"121958","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"orchestrateTakeVolumeSnapshot","params":"(LongvolumeId@LongpolicyId@LongsnapshotId@Accountaccount@booleanquiescevm@Snapshot.LocationTypelocationType@booleanasyncBackup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/23/b56e98da389ad1e9beb7e87976f0c2649574a3.src","preCode":"    private Snapshot orchestrateTakeVolumeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm, Snapshot.LocationType locationType, boolean asyncBackup)\n            throws ResourceAllocationException {\n\n        VolumeInfo volume = volFactory.getVolume(volumeId);\n\n        if (volume == null) {\n            throw new InvalidParameterValueException(\"Creating snapshot failed due to volume:\" + volumeId + \" doesn't exist\");\n        }\n\n        if (volume.getState() != Volume.State.Ready) {\n            throw new InvalidParameterValueException(\"VolumeId: \" + volumeId + \" is not in \" + Volume.State.Ready + \" state but \" + volume.getState() + \". Cannot take snapshot.\");\n        }\n\n        CreateSnapshotPayload payload = new CreateSnapshotPayload();\n\n        payload.setSnapshotId(snapshotId);\n        payload.setSnapshotPolicyId(policyId);\n        payload.setAccount(account);\n        payload.setQuiescevm(quiescevm);\n        payload.setLocationType(locationType);\n        payload.setAsyncBackup(asyncBackup);\n        volume.addPayload(payload);\n\n        return volService.takeSnapshot(volume);\n    }\n","realPath":"server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2404,"status":"N"}],"commitId":"42c83b08f54ceaf1a363c29b125f3970480c7b0d","commitMessage":"@@@Merge remote-tracking branch 'apache/4.15'\n","date":"2021-04-26 17:03:58","modifiedFileCount":"15","status":"M","submitter":"Abhishek Kumar"}]
