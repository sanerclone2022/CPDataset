[{"authorTime":"2018-06-06 15:11:18","codes":[{"authorDate":"2018-06-06 15:11:18","commitOrder":1,"curCode":"    public void buildConfigDriveTestIoException() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class)).thenThrow(IOException.class);\n\n        \r\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n    }\n","date":"2018-06-06 15:11:18","endLine":141,"groupId":"12997","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildConfigDriveTestIoException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/96/032738edcb97e5037d3b4289330980b2794431.src","preCode":"    public void buildConfigDriveTestIoException() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class)).thenThrow(IOException.class);\n\n        \r\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2018-06-06 15:11:18","commitOrder":1,"curCode":"    public void buildConfigDriveTest() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method writeVendorAndNetworkEmptyJsonFileMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVendorAndNetworkEmptyJsonFileMethod).withArguments(Mockito.any(File.class));\n\n        Method writeVmMetadataMethod = getWriteVmMetadataMethod();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVmMetadataMethod).withArguments(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n\n        Method linkUserDataMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"linkUserData\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, linkUserDataMethod).withArguments(Mockito.anyString());\n\n        Method generateAndRetrieveIsoAsBase64IsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.doReturn(\"mockIsoDataBase64\").when(ConfigDriveBuilder.class, generateAndRetrieveIsoAsBase64IsoMethod).withArguments(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        String returnedIsoData = ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n\n        Assert.assertEquals(\"mockIsoDataBase64\", returnedIsoData);\n\n        PowerMockito.verifyStatic();\n        ConfigDriveBuilder.writeVendorAndNetworkEmptyJsonFile(Mockito.any(File.class));\n        ConfigDriveBuilder.writeVmMetadata(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n        ConfigDriveBuilder.linkUserData(Mockito.anyString());\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n    }\n","date":"2018-06-06 15:11:18","endLine":173,"groupId":"12997","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildConfigDriveTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/96/032738edcb97e5037d3b4289330980b2794431.src","preCode":"    public void buildConfigDriveTest() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method writeVendorAndNetworkEmptyJsonFileMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVendorAndNetworkEmptyJsonFileMethod).withArguments(Mockito.any(File.class));\n\n        Method writeVmMetadataMethod = getWriteVmMetadataMethod();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVmMetadataMethod).withArguments(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n\n        Method linkUserDataMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"linkUserData\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, linkUserDataMethod).withArguments(Mockito.anyString());\n\n        Method generateAndRetrieveIsoAsBase64IsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.doReturn(\"mockIsoDataBase64\").when(ConfigDriveBuilder.class, generateAndRetrieveIsoAsBase64IsoMethod).withArguments(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        String returnedIsoData = ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n\n        Assert.assertEquals(\"mockIsoDataBase64\", returnedIsoData);\n\n        PowerMockito.verifyStatic();\n        ConfigDriveBuilder.writeVendorAndNetworkEmptyJsonFile(Mockito.any(File.class));\n        ConfigDriveBuilder.writeVmMetadata(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n        ConfigDriveBuilder.linkUserData(Mockito.anyString());\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"9146d7b7a0df2867d86e3cec352c631b4826962e","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-06-06 15:11:18","modifiedFileCount":"15","status":"B","submitter":"Rohit Yadav"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void buildConfigDriveTestIoException() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method method1 = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeFile\")).iterator().next();\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(nullable(File.class)).thenThrow(CloudRuntimeException.class);\n\n        \r\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n    }\n","date":"2020-02-12 15:28:25","endLine":146,"groupId":"10859","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"buildConfigDriveTestIoException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/50/cab35e78d1ed9d909d55fbb9ed4c8a22ec2d48.src","preCode":"    public void buildConfigDriveTestIoException() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method method = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n        PowerMockito.when(ConfigDriveBuilder.class, method).withArguments(Mockito.any(File.class)).thenThrow(IOException.class);\n\n        \r\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":2,"curCode":"    public void buildConfigDriveTest() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method writeVendorAndNetworkEmptyJsonFileMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVendorAndNetworkEmptyJsonFileMethod).withArguments(Mockito.any(File.class));\n\n        Method writeVmMetadataMethod = getWriteVmMetadataMethod();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVmMetadataMethod).withArguments(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n\n        Method linkUserDataMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"linkUserData\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, linkUserDataMethod).withArguments(Mockito.anyString());\n\n        Method generateAndRetrieveIsoAsBase64IsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.doReturn(\"mockIsoDataBase64\").when(ConfigDriveBuilder.class, generateAndRetrieveIsoAsBase64IsoMethod).withArguments(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        String returnedIsoData = ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n\n        Assert.assertEquals(\"mockIsoDataBase64\", returnedIsoData);\n\n        PowerMockito.verifyStatic(ConfigDriveBuilder.class);\n        ConfigDriveBuilder.writeVendorAndNetworkEmptyJsonFile(Mockito.any(File.class));\n        ConfigDriveBuilder.writeVmMetadata(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n        ConfigDriveBuilder.linkUserData(Mockito.anyString());\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n    }\n","date":"2020-02-12 15:28:25","endLine":178,"groupId":"10859","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"buildConfigDriveTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/50/cab35e78d1ed9d909d55fbb9ed4c8a22ec2d48.src","preCode":"    public void buildConfigDriveTest() throws Exception {\n        PowerMockito.mockStatic(ConfigDriveBuilder.class);\n\n        Method writeVendorAndNetworkEmptyJsonFileMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"writeVendorAndNetworkEmptyJsonFile\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVendorAndNetworkEmptyJsonFileMethod).withArguments(Mockito.any(File.class));\n\n        Method writeVmMetadataMethod = getWriteVmMetadataMethod();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, writeVmMetadataMethod).withArguments(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n\n        Method linkUserDataMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"linkUserData\")).iterator().next();\n        PowerMockito.doNothing().when(ConfigDriveBuilder.class, linkUserDataMethod).withArguments(Mockito.anyString());\n\n        Method generateAndRetrieveIsoAsBase64IsoMethod = ReflectionUtils.getMethods(ConfigDriveBuilder.class, ReflectionUtils.withName(\"generateAndRetrieveIsoAsBase64Iso\")).iterator().next();\n        PowerMockito.doReturn(\"mockIsoDataBase64\").when(ConfigDriveBuilder.class, generateAndRetrieveIsoAsBase64IsoMethod).withArguments(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n\n        \r\n        PowerMockito.when(ConfigDriveBuilder.class, new ArrayList<>(), \"teste\", \"C:\").thenCallRealMethod();\n\n        String returnedIsoData = ConfigDriveBuilder.buildConfigDrive(new ArrayList<>(), \"teste\", \"C:\");\n\n        Assert.assertEquals(\"mockIsoDataBase64\", returnedIsoData);\n\n        PowerMockito.verifyStatic();\n        ConfigDriveBuilder.writeVendorAndNetworkEmptyJsonFile(Mockito.any(File.class));\n        ConfigDriveBuilder.writeVmMetadata(Mockito.anyListOf(String[].class), Mockito.anyString(), Mockito.any(File.class));\n        ConfigDriveBuilder.linkUserData(Mockito.anyString());\n        ConfigDriveBuilder.generateAndRetrieveIsoAsBase64Iso(Mockito.anyString(), Mockito.anyString(), Mockito.anyString());\n    }\n","realPath":"engine/storage/configdrive/src/test/java/org/apache/cloudstack/storage/configdrive/ConfigDriveBuilderTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
