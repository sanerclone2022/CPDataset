[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void execute() {\n\n        Host destinationHost = _resourceService.getHost(getHostId());\n        if (destinationHost == null) {\n            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n        }\n        try {\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n            \r\n            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":142,"groupId":"18211","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/97/acfe0c46a758370f8f0e5f3ee0bb3075558162.src","preCode":"    public void execute() {\n\n        Host destinationHost = _resourceService.getHost(getHostId());\n        if (destinationHost == null) {\n            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n        }\n        try {\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n            \r\n            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/systemvm/MigrateSystemVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        }\n\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm)migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":188,"groupId":"14792","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/d6/d62720123ae67688b49852a30221997997382f.src","preCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        }\n\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm)migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-05-03 19:02:00","codes":[{"authorDate":"2018-05-03 19:02:00","commitOrder":2,"curCode":"    public void execute() {\n\n        Host destinationHost = _resourceService.getHost(getHostId());\n        if (destinationHost == null) {\n            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n        }\n        try {\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()));\n            \r\n            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2018-05-03 19:02:00","endLine":142,"groupId":"18211","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ab/0018b9e803e85b4d793b5663bfba18e2aa1786.src","preCode":"    public void execute() {\n\n        Host destinationHost = _resourceService.getHost(getHostId());\n        if (destinationHost == null) {\n            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n        }\n        try {\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n            \r\n            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/systemvm/MigrateSystemVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-05-03 19:02:00","commitOrder":2,"curCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + ((getHostId() != null) ?  \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()) : \"\" ));\n        }\n\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to storage pool Id: \" + this._uuidMgr.getUuid(StoragePool.class, getStoragePoolId()));\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm)migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2018-05-03 19:02:00","endLine":194,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b5/683e3f144a077678684d9e8a3f7c16732dac18.src","preCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        }\n\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm)migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"1ff171db902b98df5d172ae468c33a07ea1204d5","commitMessage":"@@@CLOUDSTACK-9781: record resource uuid in events instead of integer id (#1940)\n\nThis changes several event logging to use uuid of resource than integer id when creating API events.","date":"2018-05-03 19:02:00","modifiedFileCount":"72","status":"M","submitter":"jayantpatil1234"},{"authorTime":"2019-01-25 20:05:13","codes":[{"authorDate":"2018-05-03 19:02:00","commitOrder":3,"curCode":"    public void execute() {\n\n        Host destinationHost = _resourceService.getHost(getHostId());\n        if (destinationHost == null) {\n            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n        }\n        try {\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()));\n            \r\n            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2018-05-03 19:02:00","endLine":142,"groupId":"18211","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ab/0018b9e803e85b4d793b5663bfba18e2aa1786.src","preCode":"    public void execute() {\n\n        Host destinationHost = _resourceService.getHost(getHostId());\n        if (destinationHost == null) {\n            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n        }\n        try {\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()));\n            \r\n            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/systemvm/MigrateSystemVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2019-01-25 20:05:13","commitOrder":3,"curCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        }\n\n        \r\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm) migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (VirtualMachineMigrationException | ConcurrentOperationException | ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2019-01-25 20:05:13","endLine":191,"groupId":"14792","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9f/73ae586a0835a79c71263cff68db714bf3c324.src","preCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + ((getHostId() != null) ?  \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()) : \"\" ));\n        }\n\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to storage pool Id: \" + this._uuidMgr.getUuid(StoragePool.class, getStoragePoolId()));\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm)migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"b363fd49f70ac2092ebe6226a72a3d911dc99e1f","commitMessage":"@@@Vmware offline migration (#2848)\n\n* - Offline VM and Volume migration on Vmware hypervisor hosts\n- Also add VM disk consolidation call on successful VM migrations\n\n* Fix indentation of marvin test file and reformat against PEP8\n\n* * Fix few comment typos\n* Refactor debug messages to use String.format() when debug log level is enabled.\n\n* Send list of commands returned by hypervisor Guru instead of explicitly selecting the first one\n\n* Fix unhandled NPE during VM migration\n\n* Revert back to distinct event descriptions for VM to host or storage pool migration\n\n* Reformat test_primary_storage file against PEP-8 and Remove unused imports\n\n* Revert back the deprecation messages in the custom StringUtils class to favour the use of the ApacheUtils\n","date":"2019-01-25 20:05:13","modifiedFileCount":"35","status":"M","submitter":"dahn"},{"authorTime":"2019-01-25 20:05:13","codes":[{"authorDate":"2021-02-12 15:11:41","commitOrder":4,"curCode":"    public void execute() {\n        if (getHostId() == null && getStorageId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStorageId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n        try {\n            \r\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                Host destinationHost = _resourceService.getHost(getHostId());\n                if (destinationHost == null) {\n                    throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n                }\n                if (destinationHost.getType() != Host.Type.Routing) {\n                    throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n                }\n                CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n                migratedVm = _userVmService.migrateVirtualMachineWithVolume(getVirtualMachineId(), destinationHost, new HashMap<String, String>());\n            } else if (getStorageId() != null) {\n                \r\n                StoragePool destStoragePool = _storageService.getStoragePool(getStorageId());\n                if (destStoragePool == null) {\n                    throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n                }\n                CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStorageId());\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2021-02-12 15:11:41","endLine":175,"groupId":"18211","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/50/129a580b317020cbe580d1c3be3031b596284b.src","preCode":"    public void execute() {\n\n        Host destinationHost = _resourceService.getHost(getHostId());\n        if (destinationHost == null) {\n            throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n        }\n        try {\n            CallContext.current().setEventDetails(\"VM Id: \" + this._uuidMgr.getUuid(VirtualMachine.class, getVirtualMachineId()) + \" to host Id: \" + this._uuidMgr.getUuid(Host.class, getHostId()));\n            \r\n            VirtualMachine migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/systemvm/MigrateSystemVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2019-01-25 20:05:13","commitOrder":4,"curCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        }\n\n        \r\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm) migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (VirtualMachineMigrationException | ConcurrentOperationException | ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2019-01-25 20:05:13","endLine":191,"groupId":"14792","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9f/73ae586a0835a79c71263cff68db714bf3c324.src","preCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        }\n\n        \r\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm) migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (VirtualMachineMigrationException | ConcurrentOperationException | ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"}],"commitId":"d6e8b53736d92363d0f8689997259769356122de","commitMessage":"@@@vmware: vm migration improvements (#4385)\n\n- Fixes inter-cluster migration of VMs\n- Allows migration of stopped VM with disks attached to different and suitable pools\n- Improves inter-cluster detached volume migration\n- Allows inter-cluster migration (clusters of same Pod) for system VMs.  VRs on VMware\n- Allows storage migration for stopped system VMs.  VRs on VMware within same Pod if StoragePool cluster scopetype\n\nLinked Primate PR: https://github.com/apache/cloudstack-primate/pull/789 [Changes merged in this PR after new UI merge]\nDocumentation PR: https://github.com/apache/cloudstack-documentation/pull/170\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-02-12 15:11:41","modifiedFileCount":"26","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2021-08-10 12:25:57","codes":[{"authorDate":"2021-08-10 12:25:57","commitOrder":5,"curCode":"    public void execute() {\n        if (getHostId() != null && getStorageId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        try {\n            \r\n            VirtualMachine migratedVm = null;\n            if (getStorageId() != null) {\n                \r\n                StoragePool destStoragePool = _storageService.getStoragePool(getStorageId());\n                if (destStoragePool == null) {\n                    throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n                }\n                CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStorageId());\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            } else {\n                Host destinationHost = null;\n                if (getHostId() != null) {\n                    destinationHost =_resourceService.getHost(getHostId());\n                    if (destinationHost == null) {\n                        throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n                    }\n                    if (destinationHost.getType() != Host.Type.Routing) {\n                        throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n                    }\n                } else if (! isAutoSelect()) {\n                    throw new InvalidParameterValueException(\"Please specify a host or storage as destination, or pass 'autoselect=true' to automatically select a destination host which do not require storage migration\");\n                }\n                CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n                if (destinationHost == null) {\n                    migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), null);\n                } else {\n                    migratedVm = _userVmService.migrateVirtualMachineWithVolume(getVirtualMachineId(), destinationHost, new HashMap<String, String>());\n                }\n            }\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2021-08-10 12:25:57","endLine":192,"groupId":"102263","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/cc722e86f10654efc0e194be66602742b8edd9.src","preCode":"    public void execute() {\n        if (getHostId() == null && getStorageId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStorageId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n        try {\n            \r\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                Host destinationHost = _resourceService.getHost(getHostId());\n                if (destinationHost == null) {\n                    throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n                }\n                if (destinationHost.getType() != Host.Type.Routing) {\n                    throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n                }\n                CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n                migratedVm = _userVmService.migrateVirtualMachineWithVolume(getVirtualMachineId(), destinationHost, new HashMap<String, String>());\n            } else if (getStorageId() != null) {\n                \r\n                StoragePool destStoragePool = _storageService.getStoragePool(getStorageId());\n                if (destStoragePool == null) {\n                    throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n                }\n                CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStorageId());\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                \r\n                SystemVmResponse response = _responseGenerator.createSystemVmResponse(migratedVm);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate the system vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (ConcurrentOperationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        } catch (VirtualMachineMigrationException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/systemvm/MigrateSystemVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-08-10 12:25:57","commitOrder":5,"curCode":"    public void execute() {\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        \r\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        } else if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        } else if (! isAutoSelect()) {\n            throw new InvalidParameterValueException(\"Please specify a host or storage as destination, or pass 'autoselect=true' to automatically select a destination host which do not require storage migration\");\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getStoragePoolId() == null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm) migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (VirtualMachineMigrationException | ConcurrentOperationException | ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","date":"2021-08-10 12:25:57","endLine":198,"groupId":"102263","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2c/68d86f4450fd752c8b30a5ffac902330148894.src","preCode":"    public void execute() {\n        if (getHostId() == null && getStoragePoolId() == null) {\n            throw new InvalidParameterValueException(\"Either hostId or storageId must be specified\");\n        }\n\n        if (getHostId() != null && getStoragePoolId() != null) {\n            throw new InvalidParameterValueException(\"Only one of hostId and storageId can be specified\");\n        }\n\n        UserVm userVm = _userVmService.getUserVm(getVirtualMachineId());\n        if (userVm == null) {\n            throw new InvalidParameterValueException(\"Unable to find the VM by id=\" + getVirtualMachineId());\n        }\n\n        Host destinationHost = null;\n        if (getHostId() != null) {\n            destinationHost = _resourceService.getHost(getHostId());\n            if (destinationHost == null) {\n                throw new InvalidParameterValueException(\"Unable to find the host to migrate the VM, host id=\" + getHostId());\n            }\n            if (destinationHost.getType() != Host.Type.Routing) {\n                throw new InvalidParameterValueException(\"The specified host(\" + destinationHost.getName() + \") is not suitable to migrate the VM, please specify another one\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to host Id: \" + getHostId());\n        }\n\n        \r\n        StoragePool destStoragePool = null;\n        if (getStoragePoolId() != null) {\n            destStoragePool = _storageService.getStoragePool(getStoragePoolId());\n            if (destStoragePool == null) {\n                throw new InvalidParameterValueException(\"Unable to find the storage pool to migrate the VM\");\n            }\n            CallContext.current().setEventDetails(\"VM Id: \" + getVirtualMachineId() + \" to storage pool Id: \" + getStoragePoolId());\n        }\n\n        try {\n            VirtualMachine migratedVm = null;\n            if (getHostId() != null) {\n                migratedVm = _userVmService.migrateVirtualMachine(getVirtualMachineId(), destinationHost);\n            } else if (getStoragePoolId() != null) {\n                migratedVm = _userVmService.vmStorageMigration(getVirtualMachineId(), destStoragePool);\n            }\n            if (migratedVm != null) {\n                UserVmResponse response = _responseGenerator.createUserVmResponse(ResponseView.Full, \"virtualmachine\", (UserVm) migratedVm).get(0);\n                response.setResponseName(getCommandName());\n                setResponseObject(response);\n            } else {\n                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to migrate vm\");\n            }\n        } catch (ResourceUnavailableException ex) {\n            s_logger.warn(\"Exception: \", ex);\n            throw new ServerApiException(ApiErrorCode.RESOURCE_UNAVAILABLE_ERROR, ex.getMessage());\n        } catch (VirtualMachineMigrationException | ConcurrentOperationException | ManagementServerException e) {\n            s_logger.warn(\"Exception: \", e);\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, e.getMessage());\n        }\n    }\n","realPath":"api/src/main/java/org/apache/cloudstack/api/command/admin/vm/MigrateVMCmd.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"846efdbfe4b218d71063f628449adda22a6f9902","commitMessage":"@@@server: Optional destination host when migrate a vm (#4378)\n\n* server: Optional destination host when migrate a vm\n\n* #4378: migrate systemvms/routers with optional host\n\n* #4378: fix mistake\n\n* #4378: fix issue when migrate systemvm\n\n* #4378 add autoselect to migrate api commands\n\n* #4378: more ui change\n\n* #4378: add label label.migrate.auto.select\n\n* #4378: add method chooseVmMigrationDestination\n\n* #4378: fix vm migration wih storageid on vmware\n\n* #4378: add method to collect vm disk/network statistics\n\n* #4378: set autoSelect to default 'true'\n\n* #4378: use BooleanUtils.isNotFalse\n\nCo-authored-by: Wei Zhou <weizhou@apache.org>","date":"2021-08-10 12:25:57","modifiedFileCount":"4","status":"M","submitter":"Wei Zhou"}]
