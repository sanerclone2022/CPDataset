[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","date":"2018-01-20 05:49:27","endLine":336,"groupId":"24457","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"completeAsyncJob","params":"(finallongjobId@finalStatusjobStatus@finalintresultCode@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/e96a677fb4fc94c6a0b853ba2d95a3dd20ddd5.src","preCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","date":"2018-01-20 05:49:27","endLine":366,"groupId":"24458","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAsyncJobStatus","params":"(finallongjobId@finalintprocessStatus@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/e96a677fb4fc94c6a0b853ba2d95a3dd20ddd5.src","preCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-07-25 17:18:01","commitOrder":2,"curCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        final List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(final TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                final Date currentGMTTime = DateUtil.currentGMTTime();\n                job.setLastUpdated(currentGMTTime);\n                job.setRemoved(currentGMTTime);\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                final List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","date":"2018-07-25 17:18:01","endLine":338,"groupId":"24457","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"completeAsyncJob","params":"(finallongjobId@finalStatusjobStatus@finalintresultCode@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/18/45dbf8aa1c00787d9aa6a07dc16dd3204c4b56.src","preCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","date":"2018-01-20 05:49:27","endLine":366,"groupId":"24458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAsyncJobStatus","params":"(finallongjobId@finalintprocessStatus@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/e96a677fb4fc94c6a0b853ba2d95a3dd20ddd5.src","preCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"N"}],"commitId":"542d4da16c18e9c2c49730e6507d1dcf021f1724","commitMessage":"@@@asyncjobs: add endtime to async jobs (#2739)\n\nThere is currently no functional mechanism that captures or persists the end time of when an asynchronous job has finished. As a result.  users are not able to do any reporting about the duration of various asynchronous jobs in Cloudstack.\nLink to FS:\nhttps://cwiki.apache.org/confluence/display/CLOUDSTACK/Add+End+Time+To+Asynchronous+Jobs\n","date":"2018-07-25 17:18:01","modifiedFileCount":"9","status":"M","submitter":"ernjvr"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-04-16 21:27:52","commitOrder":3,"curCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            String resultObj = obfuscatePassword(resultObject, HidePassword.value());\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObj);\n        }\n\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        final List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(final TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                final Date currentGMTTime = DateUtil.currentGMTTime();\n                job.setLastUpdated(currentGMTTime);\n                job.setRemoved(currentGMTTime);\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                final List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","date":"2020-04-16 21:27:52","endLine":344,"groupId":"24457","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"completeAsyncJob","params":"(finallongjobId@finalStatusjobStatus@finalintresultCode@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cb/04d22d9e0b9f5a1d18971b5c72a0ef7b338d7e.src","preCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        final List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(final TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                final Date currentGMTTime = DateUtil.currentGMTTime();\n                job.setLastUpdated(currentGMTTime);\n                job.setRemoved(currentGMTTime);\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                final List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","date":"2018-01-20 05:49:27","endLine":366,"groupId":"24458","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAsyncJobStatus","params":"(finallongjobId@finalintprocessStatus@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/e96a677fb4fc94c6a0b853ba2d95a3dd20ddd5.src","preCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"N"}],"commitId":"8e4be6dc60ad2bed1d393384d00887b858ee7cf4","commitMessage":"@@@Merge branch '4.13'\n","date":"2020-04-16 21:27:52","modifiedFileCount":"4","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-08-13 18:25:16","commitOrder":4,"curCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            String resultObj = obfuscatePassword(resultObject, HidePassword.value());\n            resultObj = convertHumanReadableJson(resultObj);\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObj);\n        }\n\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        final List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(final TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                final Date currentGMTTime = DateUtil.currentGMTTime();\n                job.setLastUpdated(currentGMTTime);\n                job.setRemoved(currentGMTTime);\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                final List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","date":"2020-08-13 18:25:16","endLine":347,"groupId":"24457","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"completeAsyncJob","params":"(finallongjobId@finalStatusjobStatus@finalintresultCode@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a1/6fc62f869238e62bcfb573d98bdbddeba62a18.src","preCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            String resultObj = obfuscatePassword(resultObject, HidePassword.value());\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObj);\n        }\n\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        final List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(final TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                final Date currentGMTTime = DateUtil.currentGMTTime();\n                job.setLastUpdated(currentGMTTime);\n                job.setRemoved(currentGMTTime);\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                final List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","date":"2018-01-20 05:49:27","endLine":366,"groupId":"24458","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAsyncJobStatus","params":"(finallongjobId@finalintprocessStatus@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/e96a677fb4fc94c6a0b853ba2d95a3dd20ddd5.src","preCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"N"}],"commitId":"b586eb22f1b31f3cab2f2cb1aaeafca4f4646abd","commitMessage":"@@@Human readable sizes in logs (#4207)\n\nThis PR adds outputting human readable byte sizes in the management server logs.  agent logs.  and usage records. A non-dynamic global variable is added (display.human.readable.sizes) to control switching this feature on and off. This setting is sent to the agent on connection and is only read from the database when the management server is started up. The setting is kept in memory by the use of a static field on the NumbersUtil class and is available throughout the codebase.\n\nInstead of seeing things like:\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"106496\". \"bytesReceived\":\"0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nThe KB MB and GB values will be printed out:\n\n2020-07-23 15:31:58. 593 DEBUG [c.c.a.t.Request] (AgentManager-Handler-12:null) (logid:) Seq 8-1863645820801253428: Processing: { Ans: .  MgmtId: 52238089807.  via: 8.  Ver: v1.  Flags: 10.  [{\"com.cloud.agent.api.NetworkUsageAnswer\":{\"routerName\":\"r-224-VM\". \"bytesSent\":\"(104.00 KB) 106496\". \"bytesReceived\":\"(0 bytes) 0\". \"result\":\"true\". \"details\":\"\". \"wait\":\"0\". }}] }\n\nFS: https://cwiki.apache.org/confluence/display/CLOUDSTACK/Human+Readable+Byte+sizes","date":"2020-08-13 18:25:16","modifiedFileCount":"55","status":"M","submitter":"Spaceman1984"},{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2020-12-14 14:09:54","commitOrder":5,"curCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        String resultObj = null;\n        if (s_logger.isDebugEnabled()) {\n            resultObj = convertHumanReadableJson(obfuscatePassword(resultObject, HidePassword.value()));\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObj);\n        }\n\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObj);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        final List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(final TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                final Date currentGMTTime = DateUtil.currentGMTTime();\n                job.setLastUpdated(currentGMTTime);\n                job.setRemoved(currentGMTTime);\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                final List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","date":"2020-12-14 14:09:54","endLine":347,"groupId":"104850","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"completeAsyncJob","params":"(finallongjobId@finalStatusjobStatus@finalintresultCode@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/54/ce065f9cd8d60f6b4ea6f76e1085c79a93b62c.src","preCode":"    public void completeAsyncJob(final long jobId, final Status jobStatus, final int resultCode, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            String resultObj = obfuscatePassword(resultObject, HidePassword.value());\n            resultObj = convertHumanReadableJson(resultObj);\n            s_logger.debug(\"Complete async job-\" + jobId + \", jobStatus: \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" + resultObj);\n        }\n\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log completion info here. \" + jobStatus + \", resultCode: \" + resultCode + \", result: \" +\n                    resultObject);\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (job.getStatus() != JobInfo.Status.IN_PROGRESS) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" is already completed.\");\n            }\n            \r\n            _queueMgr.purgeAsyncJobQueueItemId(jobId);\n            return;\n        }\n\n        if (resultObject != null) {\n            job.setResult(resultObject);\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Publish async job-\" + jobId + \" complete on message bus\");\n        }\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Wake up jobs related to job-\" + jobId);\n        }\n        final List<Long> wakeupList = Transaction.execute(new TransactionCallback<List<Long>>() {\n            @Override\n            public List<Long> doInTransaction(final TransactionStatus status) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Update db status for job-\" + jobId);\n                }\n                job.setCompleteMsid(getMsid());\n                job.setStatus(jobStatus);\n                job.setResultCode(resultCode);\n\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                } else {\n                    job.setResult(null);\n                }\n\n                final Date currentGMTTime = DateUtil.currentGMTTime();\n                job.setLastUpdated(currentGMTTime);\n                job.setRemoved(currentGMTTime);\n                job.setExecutingMsid(null);\n                _jobDao.update(jobId, job);\n\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(\"Wake up jobs joined with job-\" + jobId + \" and disjoin all subjobs created from job- \" + jobId);\n                }\n                final List<Long> wakeupList = wakeupByJoinedJobCompletion(jobId);\n                _joinMapDao.disjoinAllJobs(jobId);\n\n                \r\n                _queueMgr.purgeAsyncJobQueueItemId(jobId);\n\n                return wakeupList;\n            }\n        });\n\n        publishOnEventBus(job, \"complete\"); \r\n\n        \r\n        \r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        _messageBus.publish(null, AsyncJob.Topics.JOB_STATE, PublishScope.GLOBAL, jobId);\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","date":"2018-01-20 05:49:27","endLine":366,"groupId":"104850","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"updateAsyncJobStatus","params":"(finallongjobId@finalintprocessStatus@finalStringresultObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/e96a677fb4fc94c6a0b853ba2d95a3dd20ddd5.src","preCode":"    public void updateAsyncJobStatus(final long jobId, final int processStatus, final String resultObject) {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Update async-job progress, job-\" + jobId + \", processStatus: \" + processStatus + \", result: \" + resultObject);\n        }\n\n        final AsyncJobVO job = _jobDao.findById(jobId);\n        if (job == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"job-\" + jobId + \" no longer exists, we just log progress info here. progress status: \" + processStatus);\n            }\n\n            return;\n        }\n\n        publishOnEventBus(job, \"update\");\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                job.setProcessStatus(processStatus);\n                if (resultObject != null) {\n                    job.setResult(resultObject);\n                }\n                job.setLastUpdated(DateUtil.currentGMTTime());\n                _jobDao.update(jobId, job);\n            }\n        });\n    }\n","realPath":"framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"N"}],"commitId":"3689b9da41ffd05e6e84a4438a1848a6aa8e1c37","commitMessage":"@@@jobs: The patch remove the password from resultObject and make it be humanreadable (#4538)\n\nThis PR fixes CLOUDSTACK-10425.\n\nCo-authored-by: lujie <lujie@foxmail.com>","date":"2020-12-14 14:09:54","modifiedFileCount":"1","status":"M","submitter":"lujiefsi"}]
