[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected NetworkVO getDefaultNetworkForAdvancedZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Advanced) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \" is not advanced.\");\n        }\n\n        if (dc.isSecurityGroupEnabled()) {\n            List<NetworkVO> networks = _networkDao.listByZoneSecurityGroup(dc.getId());\n            if (CollectionUtils.isEmpty(networks)) {\n                throw new CloudRuntimeException(\"Can not found security enabled network in SG Zone \" + dc);\n            }\n\n            return networks.get(0);\n        }\n        else {\n            TrafficType defaultTrafficType = TrafficType.Public;\n            List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n            \r\n            if (defaultNetworks.size() != 1) {\n                throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n            }\n\n            return defaultNetworks.get(0);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":718,"groupId":"24670","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getDefaultNetworkForAdvancedZone","params":"(DataCenterdc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/fff3c7219cceb44a61a820fcddfdef364d7f89.src","preCode":"    protected NetworkVO getDefaultNetworkForAdvancedZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Advanced) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \" is not advanced.\");\n        }\n\n        if (dc.isSecurityGroupEnabled()) {\n            List<NetworkVO> networks = _networkDao.listByZoneSecurityGroup(dc.getId());\n            if (CollectionUtils.isEmpty(networks)) {\n                throw new CloudRuntimeException(\"Can not found security enabled network in SG Zone \" + dc);\n            }\n\n            return networks.get(0);\n        }\n        else {\n            TrafficType defaultTrafficType = TrafficType.Public;\n            List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n            \r\n            if (defaultNetworks.size() != 1) {\n                throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n            }\n\n            return defaultNetworks.get(0);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected NetworkVO getDefaultNetworkForBasicZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Basic) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \"is not basic.\");\n        }\n\n        TrafficType defaultTrafficType = TrafficType.Guest;\n        List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n        \r\n        if (defaultNetworks.size() != 1) {\n            throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n        }\n\n        return defaultNetworks.get(0);\n    }\n","date":"2018-01-20 05:49:27","endLine":741,"groupId":"24668","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDefaultNetworkForBasicZone","params":"(DataCenterdc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/fff3c7219cceb44a61a820fcddfdef364d7f89.src","preCode":"    protected NetworkVO getDefaultNetworkForBasicZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Basic) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \"is not basic.\");\n        }\n\n        TrafficType defaultTrafficType = TrafficType.Guest;\n        List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n        \r\n        if (defaultNetworks.size() != 1) {\n            throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n        }\n\n        return defaultNetworks.get(0);\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":727,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2021-07-28 06:56:14","codes":[{"authorDate":"2021-07-28 06:56:14","commitOrder":2,"curCode":"    protected NetworkVO getDefaultNetworkForAdvancedZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Advanced) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \" is not advanced.\");\n        }\n\n        if (dc.isSecurityGroupEnabled()) {\n            List<NetworkVO> networks = networkDao.listByZoneSecurityGroup(dc.getId());\n            if (CollectionUtils.isEmpty(networks)) {\n                throw new CloudRuntimeException(\"Can not found security enabled network in SG Zone \" + dc);\n            }\n\n            return networks.get(0);\n        }\n        else {\n            TrafficType defaultTrafficType = TrafficType.Public;\n            List<NetworkVO> defaultNetworks = networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n            if (defaultNetworks.size() != 1) {\n                throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n            }\n\n            return defaultNetworks.get(0);\n        }\n    }\n","date":"2021-07-28 06:56:14","endLine":634,"groupId":"101979","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getDefaultNetworkForAdvancedZone","params":"(DataCenterdc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6c/c0ace1e05600559e196cd0be536313c3c1cd80.src","preCode":"    protected NetworkVO getDefaultNetworkForAdvancedZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Advanced) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \" is not advanced.\");\n        }\n\n        if (dc.isSecurityGroupEnabled()) {\n            List<NetworkVO> networks = _networkDao.listByZoneSecurityGroup(dc.getId());\n            if (CollectionUtils.isEmpty(networks)) {\n                throw new CloudRuntimeException(\"Can not found security enabled network in SG Zone \" + dc);\n            }\n\n            return networks.get(0);\n        }\n        else {\n            TrafficType defaultTrafficType = TrafficType.Public;\n            List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n            \r\n            if (defaultNetworks.size() != 1) {\n                throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n            }\n\n            return defaultNetworks.get(0);\n        }\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-07-28 06:56:14","commitOrder":2,"curCode":"    protected NetworkVO getDefaultNetworkForBasicZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Basic) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \"is not basic.\");\n        }\n\n        TrafficType defaultTrafficType = TrafficType.Guest;\n        List<NetworkVO> defaultNetworks = networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n        if (defaultNetworks.size() != 1) {\n            throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n        }\n\n        return defaultNetworks.get(0);\n    }\n","date":"2021-07-28 06:56:14","endLine":656,"groupId":"101979","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getDefaultNetworkForBasicZone","params":"(DataCenterdc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/6c/c0ace1e05600559e196cd0be536313c3c1cd80.src","preCode":"    protected NetworkVO getDefaultNetworkForBasicZone(DataCenter dc) {\n        if (dc.getNetworkType() != NetworkType.Basic) {\n            throw new CloudRuntimeException(\"Zone \" + dc + \"is not basic.\");\n        }\n\n        TrafficType defaultTrafficType = TrafficType.Guest;\n        List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);\n\n        \r\n        if (defaultNetworks.size() != 1) {\n            throw new CloudRuntimeException(\"Found \" + defaultNetworks.size() + \" networks of type \" + defaultTrafficType + \" when expect to find 1\");\n        }\n\n        return defaultNetworks.get(0);\n    }\n","realPath":"server/src/main/java/com/cloud/consoleproxy/ConsoleProxyManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"M"}],"commitId":"1f5ee5b3e3855c7f46d7e850465a8a0ec3a5c19c","commitMessage":"@@@Improve logs on ConsoleProxyManagerImpl and refactor a few process (#4959)\n\n","date":"2021-07-28 06:56:14","modifiedFileCount":"3","status":"M","submitter":"Daniel Augusto Veronezi Salvador"}]
