[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n                vm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    final String zoneName = _dcDao.findById(vm.getDataCenterId()).getName();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, zoneName, vm.getInstanceName(), vm.getId(),\n                            (String) profile.getParameter(VirtualMachineProfile.Param.VmSshPubKey), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2018-01-20 05:49:27","endLine":2594,"groupId":"7841","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/37/5b091062473ccd85428a27886ac001b7c6652b.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n                vm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    final String zoneName = _dcDao.findById(vm.getDataCenterId()).getName();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, zoneName, vm.getInstanceName(), vm.getId(),\n                            (String) profile.getParameter(VirtualMachineProfile.Param.VmSshPubKey), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2459,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                final String zoneName = _dcDao.findById(vm.getDataCenterId()).getName();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, zoneName, vm.getInstanceName(), vm.getId(),\n                        (String) profile.getParameter(VirtualMachineProfile.Param.VmSshPubKey), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2018-01-20 05:49:27","endLine":4145,"groupId":"5020","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/da/b741c3c274ded6ea2d8ba461cb81d920542cb3.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                final String zoneName = _dcDao.findById(vm.getDataCenterId()).getName();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, zoneName, vm.getInstanceName(), vm.getId(),\n                        (String) profile.getParameter(VirtualMachineProfile.Param.VmSshPubKey), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4114,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-04-26 21:14:49","codes":[{"authorDate":"2018-04-26 21:14:49","commitOrder":2,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2018-04-26 21:14:49","endLine":2617,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/1d/430c6f2538ce2dc934fd6420fcfb4164a106e6.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n                vm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    final String zoneName = _dcDao.findById(vm.getDataCenterId()).getName();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, zoneName, vm.getInstanceName(), vm.getId(),\n                            (String) profile.getParameter(VirtualMachineProfile.Param.VmSshPubKey), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2483,"status":"M"},{"authorDate":"2018-04-26 21:14:49","commitOrder":2,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2018-04-26 21:14:49","endLine":4106,"groupId":"12704","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/75/58419661e30350a932ec3656a4fd4a49c9754a.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                final String zoneName = _dcDao.findById(vm.getDataCenterId()).getName();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, zoneName, vm.getInstanceName(), vm.getId(),\n                        (String) profile.getParameter(VirtualMachineProfile.Param.VmSshPubKey), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4076,"status":"M"}],"commitId":"b3c22df71d0ec3c29fbe37dc3c9812353c1685d9","commitMessage":"@@@Forward merge branch '4.11' to master\n\nConfigDrive fixes: CLOUDSTACK-10288.  CLOUDSTACK-10289 (#2566)\nCLOUDSTACK-9677: Adding storage policy support for swift as secondary\nstorage (#2412)\n","date":"2018-04-26 21:14:49","modifiedFileCount":"15","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-05-16 15:54:04","codes":[{"authorDate":"2018-05-16 15:54:04","commitOrder":3,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2018-05-16 15:54:14","endLine":2617,"groupId":"8479","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/09/26de1bebc58424ea255a252a466daad11fa109.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2483,"status":"M"},{"authorDate":"2018-05-16 15:54:04","commitOrder":3,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2018-05-16 15:54:14","endLine":4110,"groupId":"9493","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/0b2c39e35dcf60132324eaa0c0d5a369266834.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4080,"status":"M"}],"commitId":"a7e248983e0a63e0fb14b30dc0131ef0958ab881","commitMessage":"@@@Merge branch '4.11': config-drive: use hostname of VM instance of internal VM id (#2645)\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2018-05-16 15:54:14","modifiedFileCount":"8","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2018-05-16 15:54:04","codes":[{"authorDate":"2018-07-19 17:53:40","commitOrder":4,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2018-07-19 17:53:40","endLine":2601,"groupId":"8479","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/aa/76a08bca26ab21e87b59a2003e93c0aa033f84.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2467,"status":"M"},{"authorDate":"2018-05-16 15:54:04","commitOrder":4,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2018-05-16 15:54:14","endLine":4110,"groupId":"9493","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/0b2c39e35dcf60132324eaa0c0d5a369266834.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4080,"status":"N"}],"commitId":"94dedd65f1edbf2cdba79bb74691132688369389","commitMessage":"@@@Refactor userVmDetailsDao field and remove unusued fields (#2750)\n\n* Refactor userVmDetailsDao field and remove unusued fields\n\n* Setting injected attributes to private instead of protected and amending unit test\n","date":"2018-07-19 17:53:40","modifiedFileCount":"2","status":"M","submitter":"Dingane Hlaluku"},{"authorTime":"2018-08-17 19:01:14","codes":[{"authorDate":"2018-07-19 17:53:40","commitOrder":5,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2018-07-19 17:53:40","endLine":2601,"groupId":"8479","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/aa/76a08bca26ab21e87b59a2003e93c0aa033f84.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2467,"status":"N"},{"authorDate":"2018-08-17 19:01:14","commitOrder":5,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2018-08-17 19:01:14","endLine":4132,"groupId":"9493","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/47/aa0528692f2559b95d4d98d2cd78bb34c635a6.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = _vmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4104,"status":"M"}],"commitId":"8993c0ea99dd4a0dbc2f1bf95c0925a4cc013e22","commitMessage":"@@@server: refactor UserVmDetailsDao duplicate field (#2807)\n\nRemoving UserVmDetailsDao duplicate field;\nFound the following repeated field in the UserVmManagerImpl class\n@Inject\nprivate UserVmDetailsDao _vmDetailsDao;\n@Inject\nprivate UserVmDetailsDao _uservmDetailsDao;\n\nRefactored to a single field;\n@Inject\nprivate UserVmDetailsDao userVmDetailsDao;\n\nSimilar to this PR: https://github.com/apache/cloudstack/pull/2750/files","date":"2018-08-17 19:01:14","modifiedFileCount":"1","status":"M","submitter":"Dingane Hlaluku"},{"authorTime":"2018-08-17 19:01:14","codes":[{"authorDate":"2018-09-11 07:09:26","commitOrder":6,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2018-09-11 07:09:26","endLine":2668,"groupId":"8479","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/11a2fdd848bb261f7c267e9c0e80453eef5b4a.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = getPoolListForVolumesForMigration(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2534,"status":"M"},{"authorDate":"2018-08-17 19:01:14","commitOrder":6,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2018-08-17 19:01:14","endLine":4132,"groupId":"9493","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/47/aa0528692f2559b95d4d98d2cd78bb34c635a6.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4104,"status":"N"}],"commitId":"f550d703053fb3ccf9df739cee31ab823d132f3a","commitMessage":"@@@Add managed storage pool constraints to MigrateWithVolume API method (#2761)\n\n* Add managed storage pool constraints to MigrateWithVolume API method\n\n* Apply mike's suggestions\n\n* Apply Mike's suggestion in a second review\n\n* Mike's suggestions\n\n* Confused bit\n\n* just executeManagedStorageChecks\n\n* Created methods `executeManagedStorageChecksWhenTargetStoragePoolNotProvided` and `executeManagedStorageChecksWhenTargetStoragePoolProvided`\n\n* improve \"executeManagedStorageChecksWhenTargetStoragePoolNotProvided\"\n\n* Fix \"findVolumesThatWereNotMappedByTheUser\" method\n\n* Applu Mike's suggestion to improve \"createMappingVolumeAndStoragePool\" method\n\n* Unit tests to cover modified code\n","date":"2018-09-11 07:09:26","modifiedFileCount":"2","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2019-06-27 11:44:47","codes":[{"authorDate":"2018-09-11 07:09:26","commitOrder":7,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2018-09-11 07:09:26","endLine":2668,"groupId":"8479","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3e/11a2fdd848bb261f7c267e9c0e80453eef5b4a.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2534,"status":"N"},{"authorDate":"2019-06-27 11:44:47","commitOrder":7,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2019-06-27 11:44:47","endLine":4225,"groupId":"19032","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/07/27a2a8593b62201f03ebcecf7cbdfd976a596f.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4197,"status":"M"}],"commitId":"9f4f2c5348af93eeb790fbf4908cdde4f0b7806a","commitMessage":"@@@api: instance and template details are free text (#3240)\n\nProblem: Users don't know what keys/values to enter for template and VM details.\nRoot Cause: The feature does not exist that can list possible details and options.\nSolution: Based on the possible VM and template details handled by the\ncodebase.  those details were refactored and a list API is introduced\nthat can return users those details along with possible values. When\nusers add details now.  they will be presented with a list of key details\nand their possible options if any.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-06-27 11:44:47","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2020-07-01 11:14:11","codes":[{"authorDate":"2020-07-01 11:14:11","commitOrder":8,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n        List<String[]> vmData = null;\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, VirtualMachineManager.getHypervisorHostname(destination.getHost().getName()));\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n                _networkMgr.setHypervisorHostname(profile, destination, false);\n            } else {\n                _networkMgr.setHypervisorHostname(profile, destination, true);\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2020-07-01 11:14:11","endLine":2995,"groupId":"12921","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/0a/e249c584f88fec5be799063a20fa6c1902e9ac.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            List<String[]> vmData = null;\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2861,"status":"M"},{"authorDate":"2020-07-01 11:14:11","commitOrder":8,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost().getName());\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2020-07-01 11:14:11","endLine":4359,"groupId":"5219","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4e/f4d1e42e70cb52e512805052d6de83f7e92b19.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4332,"status":"M"}],"commitId":"a73712ec4ea0deae58d0b43edcbe9ca5e8f33fd4","commitMessage":"@@@server: Enable sending hypervior host name via metadata - VR and Config Drive (#3976)\n\nEnable sending hypervisor host details via metadata for VR and Config Drive providers\n\nCo-authored-by: Pearl Dsilva <pearl.dsilva@shapeblue.com>","date":"2020-07-01 11:14:11","modifiedFileCount":"23","status":"M","submitter":"Pearl Dsilva"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2020-10-26 21:24:14","commitOrder":9,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n        List<String[]> vmData = null;\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows,\n                            VirtualMachineManager.getHypervisorHostname(destination.getHost() != null ? destination.getHost().getName() : \"\"));\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n                _networkMgr.setHypervisorHostname(profile, destination, false);\n            } else {\n                _networkMgr.setHypervisorHostname(profile, destination, true);\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2020-10-26 21:24:14","endLine":3040,"groupId":"4279","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8e/9ec450b1ed7b3b97645bd472313fd926bfc998.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n        List<String[]> vmData = null;\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, VirtualMachineManager.getHypervisorHostname(destination.getHost().getName()));\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n                _networkMgr.setHypervisorHostname(profile, destination, false);\n            } else {\n                _networkMgr.setHypervisorHostname(profile, destination, true);\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2905,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":9,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost() != null ? dest.getHost().getName() : \"\");\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2020-10-26 21:24:14","endLine":4434,"groupId":"15958","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a9/31159ea21125aa8851b37d78b52e71ba6eff61.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost().getName());\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4407,"status":"M"}],"commitId":"1a75872cd484dd387552bae58996a56679fdb51e","commitMessage":"@@@Merge pull request #4307 from shapeblue/ovfprops-and-vsphere-adv-together\n\n[VMware] vSphere advanced capabilities and Full OVF properties support","date":"2020-10-26 21:24:14","modifiedFileCount":"173","status":"M","submitter":"Boris Stoyanov - a.k.a Bobby"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2021-02-12 15:11:41","commitOrder":10,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n        List<String[]> vmData = null;\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            if (defaultNic != null && VirtualMachine.Type.User.equals(vm.getType())) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows,\n                            VirtualMachineManager.getHypervisorHostname(destination.getHost() != null ? destination.getHost().getName() : \"\"));\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n                _networkMgr.setHypervisorHostname(profile, destination, false);\n            } else {\n                _networkMgr.setHypervisorHostname(profile, destination, true);\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2021-02-12 15:11:41","endLine":3150,"groupId":"2994","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/de/1ef20f883ee21b0b04ce2d977f024d7b8f7b32.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n        List<String[]> vmData = null;\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            if (defaultNic != null) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows,\n                            VirtualMachineManager.getHypervisorHostname(destination.getHost() != null ? destination.getHost().getName() : \"\"));\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n                _networkMgr.setHypervisorHostname(profile, destination, false);\n            } else {\n                _networkMgr.setHypervisorHostname(profile, destination, true);\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3015,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":10,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost() != null ? dest.getHost().getName() : \"\");\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2020-10-26 21:24:14","endLine":4434,"groupId":"15958","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a9/31159ea21125aa8851b37d78b52e71ba6eff61.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost() != null ? dest.getHost().getName() : \"\");\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4407,"status":"N"}],"commitId":"d6e8b53736d92363d0f8689997259769356122de","commitMessage":"@@@vmware: vm migration improvements (#4385)\n\n- Fixes inter-cluster migration of VMs\n- Allows migration of stopped VM with disks attached to different and suitable pools\n- Improves inter-cluster detached volume migration\n- Allows inter-cluster migration (clusters of same Pod) for system VMs.  VRs on VMware\n- Allows storage migration for stopped system VMs.  VRs on VMware within same Pod if StoragePool cluster scopetype\n\nLinked Primate PR: https://github.com/apache/cloudstack-primate/pull/789 [Changes merged in this PR after new UI merge]\nDocumentation PR: https://github.com/apache/cloudstack-documentation/pull/170\n\nSigned-off-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-02-12 15:11:41","modifiedFileCount":"26","status":"M","submitter":"Abhishek Kumar"},{"authorTime":"2020-10-26 21:24:14","codes":[{"authorDate":"2021-02-24 17:28:33","commitOrder":11,"curCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        final VirtualMachineProfile vmSrc = new VirtualMachineProfileImpl(vm);\n        vmSrc.setHost(srcHost);\n        for (final NicProfile nic : _networkMgr.getNicProfiles(vm)) {\n            vmSrc.addNic(nic);\n        }\n\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm, null, _offeringDao.findById(vm.getId(), vm.getServiceOfferingId()), null, null);\n        profile.setHost(destHost);\n\n        \r\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n        List<String[]> vmData = null;\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            if (defaultNic != null && VirtualMachine.Type.User.equals(vm.getType())) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows,\n                            VirtualMachineManager.getHypervisorHostname(destination.getHost() != null ? destination.getHost().getName() : \"\"));\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _networkMgr.rollbackNicForMigration(vmSrc, profile);\n                volumeMgr.release(vm.getId(), destHostId);\n\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n                _networkMgr.setHypervisorHostname(profile, destination, false);\n            } else {\n                _networkMgr.commitNicForMigration(vmSrc, profile);\n                volumeMgr.release(vm.getId(), srcHostId);\n                _networkMgr.setHypervisorHostname(profile, destination, true);\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","date":"2021-02-24 17:28:33","endLine":3178,"groupId":"12558","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"orchestrateMigrateWithStorage","params":"(finalStringvmUuid@finallongsrcHostId@finallongdestHostId@finalMap<Long@Long>volumeToPool)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/df/ec0b1de77881a5a59a098404ec19de1ccca48e.src","preCode":"    private void orchestrateMigrateWithStorage(final String vmUuid, final long srcHostId, final long destHostId, final Map<Long, Long> volumeToPool) throws ResourceUnavailableException,\n    ConcurrentOperationException {\n\n        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n\n        final HostVO srcHost = _hostDao.findById(srcHostId);\n        final HostVO destHost = _hostDao.findById(destHostId);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n\n        final DataCenterVO dc = _dcDao.findById(destHost.getDataCenterId());\n        final HostPodVO pod = _podDao.findById(destHost.getPodId());\n        final Cluster cluster = _clusterDao.findById(destHost.getClusterId());\n        final DeployDestination destination = new DeployDestination(dc, pod, cluster, destHost);\n\n        \r\n        final VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n        final Map<Volume, StoragePool> volumeToPoolMap = createMappingVolumeAndStoragePool(profile, destHost, volumeToPool);\n\n        \r\n        \r\n        if (volumeToPoolMap == null || volumeToPoolMap.isEmpty()) {\n            throw new InvalidParameterValueException(\"Migration of the vm \" + vm + \"from host \" + srcHost + \" to destination host \" + destHost +\n                    \" doesn't involve migrating the volumes.\");\n        }\n\n        AlertManager.AlertType alertType = AlertManager.AlertType.ALERT_TYPE_USERVM_MIGRATE;\n        if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_DOMAIN_ROUTER_MIGRATE;\n        } else if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {\n            alertType = AlertManager.AlertType.ALERT_TYPE_CONSOLE_PROXY_MIGRATE;\n        }\n\n        _networkMgr.prepareNicForMigration(profile, destination);\n        volumeMgr.prepareForMigration(profile, destination);\n        final HypervisorGuru hvGuru = _hvGuruMgr.getGuru(vm.getHypervisorType());\n        final VirtualMachineTO to = hvGuru.implement(profile);\n\n        ItWorkVO work = new ItWorkVO(UUID.randomUUID().toString(), _nodeId, State.Migrating, vm.getType(), vm.getId());\n        work.setStep(Step.Prepare);\n        work.setResourceType(ItWorkVO.ResourceType.Host);\n        work.setResourceId(destHostId);\n        work = _workDao.persist(work);\n\n\n        \r\n        vm.setLastHostId(srcHostId);\n        vm.setPodIdToDeployIn(destHost.getPodId());\n        moveVmToMigratingState(vm, destHostId, work);\n        List<String[]> vmData = null;\n\n        boolean migrated = false;\n        try {\n\n            \r\n            \r\n            \r\n\n            Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n\n            if (defaultNic != null && VirtualMachine.Type.User.equals(vm.getType())) {\n                UserVmVO userVm = _userVmDao.findById(vm.getId());\n                Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n                userVm.setDetails(details);\n\n                Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n                if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                    final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                    boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                    vmData = _networkModel.generateVmData(userVm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                            vm.getUuid(), defaultNic.getMacAddress(), userVm.getDetail(\"SSH.PublicKey\"), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows,\n                            VirtualMachineManager.getHypervisorHostname(destination.getHost() != null ? destination.getHost().getName() : \"\"));\n                    String vmName = vm.getInstanceName();\n                    String configDriveIsoRootFolder = \"/tmp\";\n                    String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                    profile.setVmData(vmData);\n                    profile.setConfigDriveLabel(VmConfigDriveLabel.value());\n                    profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                    profile.setConfigDriveIsoFile(isoFile);\n\n                    \r\n                    AttachOrDettachConfigDriveCommand dettachCommand = new AttachOrDettachConfigDriveCommand(vm.getInstanceName(), vmData, VmConfigDriveLabel.value(), false);\n                    try {\n                        _agentMgr.send(srcHost.getId(), dettachCommand);\n                        s_logger.debug(\"Deleted config drive ISO for  vm \" + vm.getInstanceName() + \" In host \" + srcHost);\n                    } catch (OperationTimedoutException e) {\n                        s_logger.debug(\"TIme out occured while exeuting command AttachOrDettachConfigDrive \" + e.getMessage());\n\n                    }\n                }\n            }\n\n            \r\n            volumeMgr.migrateVolumes(vm, to, srcHost, destHost, volumeToPoolMap);\n\n            \r\n            moveVmOutofMigratingStateOnSuccess(vm, destHost.getId(), work);\n\n            try {\n                if (!checkVmOnHost(vm, destHostId)) {\n                    s_logger.error(\"Vm not found on destination host. Unable to complete migration for \" + vm);\n                    try {\n                        _agentMgr.send(srcHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    } catch (final AgentUnavailableException e) {\n                        s_logger.error(\"AgentUnavailableException while cleanup on source host: \" + srcHostId);\n                    }\n                    cleanup(vmGuru, new VirtualMachineProfileImpl(vm), work, Event.AgentReportStopped, true);\n                    throw new CloudRuntimeException(\"VM not found on desintation host. Unable to complete migration for \" + vm);\n                }\n            } catch (final OperationTimedoutException e) {\n                s_logger.warn(\"Error while checking the vm \" + vm + \" is on host \" + destHost, e);\n            }\n            migrated = true;\n        } finally {\n            if (!migrated) {\n                s_logger.info(\"Migration was unsuccessful.  Cleaning up: \" + vm);\n                _alertMgr.sendAlert(alertType, srcHost.getDataCenterId(), srcHost.getPodId(),\n                        \"Unable to migrate vm \" + vm.getInstanceName() + \" from host \" + srcHost.getName() + \" in zone \" + dc.getName() + \" and pod \" + dc.getName(),\n                        \"Migrate Command failed.  Please check logs.\");\n                try {\n                    _agentMgr.send(destHostId, new Commands(cleanup(vm.getInstanceName())), null);\n                    vm.setPodIdToDeployIn(srcHost.getPodId());\n                    stateTransitTo(vm, Event.OperationFailed, srcHostId);\n                } catch (final AgentUnavailableException e) {\n                    s_logger.warn(\"Looks like the destination Host is unavailable for cleanup.\", e);\n                } catch (final NoTransitionException e) {\n                    s_logger.error(\"Error while transitioning vm from migrating to running state.\", e);\n                }\n                _networkMgr.setHypervisorHostname(profile, destination, false);\n            } else {\n                _networkMgr.setHypervisorHostname(profile, destination, true);\n            }\n\n            work.setStep(Step.Done);\n            _workDao.update(work.getId(), work);\n        }\n    }\n","realPath":"engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":3031,"status":"M"},{"authorDate":"2020-10-26 21:24:14","commitOrder":11,"curCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost() != null ? dest.getHost().getName() : \"\");\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","date":"2020-10-26 21:24:14","endLine":4434,"groupId":"12558","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"finalizeVirtualMachineProfile","params":"(VirtualMachineProfileprofile@DeployDestinationdest@ReservationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/a9/31159ea21125aa8851b37d78b52e71ba6eff61.src","preCode":"    public boolean finalizeVirtualMachineProfile(VirtualMachineProfile profile, DeployDestination dest, ReservationContext context) {\n        UserVmVO vm = _vmDao.findById(profile.getId());\n        Map<String, String> details = userVmDetailsDao.listDetailsKeyPairs(vm.getId());\n        vm.setDetails(details);\n\n        \r\n        Nic defaultNic = _networkModel.getDefaultNic(vm.getId());\n        if(defaultNic != null) {\n            Network network = _networkModel.getNetwork(defaultNic.getNetworkId());\n            if (_networkModel.isSharedNetworkWithoutServices(network.getId())) {\n                final String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getId(), vm.getServiceOfferingId()).getDisplayText();\n                boolean isWindows = _guestOSCategoryDao.findById(_guestOSDao.findById(vm.getGuestOSId()).getCategoryId()).getName().equalsIgnoreCase(\"Windows\");\n                String destHostname = VirtualMachineManager.getHypervisorHostname(dest.getHost() != null ? dest.getHost().getName() : \"\");\n                List<String[]> vmData = _networkModel.generateVmData(vm.getUserData(), serviceOffering, vm.getDataCenterId(), vm.getInstanceName(), vm.getHostName(), vm.getId(),\n                        vm.getUuid(), defaultNic.getIPv4Address(), vm.getDetail(VmDetailConstants.SSH_PUBLIC_KEY), (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword), isWindows, destHostname);\n                String vmName = vm.getInstanceName();\n                String configDriveIsoRootFolder = \"/tmp\";\n                String isoFile = configDriveIsoRootFolder + \"/\" + vmName + \"/configDrive/\" + vmName + \".iso\";\n                profile.setVmData(vmData);\n                profile.setConfigDriveLabel(VirtualMachineManager.VmConfigDriveLabel.value());\n                profile.setConfigDriveIsoRootFolder(configDriveIsoRootFolder);\n                profile.setConfigDriveIsoFile(isoFile);\n            }\n        }\n\n        _templateMgr.prepareIsoForVmProfile(profile, dest);\n        return true;\n    }\n","realPath":"server/src/main/java/com/cloud/vm/UserVmManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":4407,"status":"N"}],"commitId":"eba186aa40f16911c019bf06cd33d7d0cbbc303b","commitMessage":"@@@storage: New Dell EMC PowerFlex Plugin (formerly ScaleIO.  VxFlexOS) (#4304)\n\nAdded support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack (for KVM hypervisor) and enabled VM/Volume operations on that pool (using pool tag).\nPlease find more details in the FS here:\nhttps://cwiki.apache.org/confluence/x/cDl4CQ\n\nDocumentation PR: apache/cloudstack-documentation#169\n\nThis enables support for PowerFlex/ScaleIO (v3.5 onwards) storage pool as a primary storage in CloudStack\n\nOther improvements addressed in addition to PowerFlex/ScaleIO support:\n\n- Added support for config drives in host cache for KVM\n\t=> Changed configuration \"vm.configdrive.primarypool.enabled\" scope from Global to Zone level\n\t=> Introduced new zone level configuration \"vm.configdrive.force.host.cache.use\" (default: false) to force host cache for config drives\n\t=> Introduced new zone level configuration \"vm.configdrive.use.host.cache.on.unsupported.pool\" (default: true) to use host cache for config drives when storage pool doesn't support config drive\n\t=> Added new parameter \"host.cache.location\" (default: /var/cache/cloud) in KVM agent.properties for specifying the host cache path and create config drives on the \"/config\" directory on the host cache path\n\t=> Maintain the config drive location and use it when required on any config drive operation (migrate.  delete)\n\n- Detect virtual size from the template URL while registering direct download qcow2 (of KVM hypervisor) templates\n\n- Updated full deployment destination for preparing the network(s) on VM start\n\n- Propagate the direct download certificates uploaded to the newly added KVM hosts\n\n- Discover the template size for direct download templates using any available host from the zones specified on template registration\n\t=> When zones are not specified while registering template.  template size discovery is performed using any available host.  which is picked up randomly from one of the available zones\n\n- Release the VM resources when VM is sync-ed to Stopped state on PowerReportMissing (after graceful period)\n\n- Retry VM deployment/start when the host cannot grant access to volume/template\n\n- Mark never-used or downloaded templates as Destroyed on deletion.  without sending any DeleteCommand\n\t=> Do not trigger any DeleteCommand for never-used or downloaded templates as these doesn't exist and cannot be deleted from the datastore\n\n- Check the router filesystem is writable or not.  before performing health checks\n\t=> Introduce a new test \"filesystem.writable.test\" to check the filesystem is writable or not\n\t=> The router health checks keeps the config info at \"/var/cache/cloud\" and updates the monitor results at \"/root\" for health checks.  both are different partitions. So.  test at both the locations.\n\t=> Added new script: \"filesystem_writable_check.py\" at /opt/cloud/bin/ to check the filesystem is writable or not\n\n- Fixed NPE issue.  template is null for DATA disks. Copy template to target storage for ROOT disk (with template id).  skip DATA disk(s)\n\n* Addressed some issues for few operations on PowerFlex storage pool.\n\n- Updated migration volume operation to sync the status and wait for migration to complete.\n\n- Updated VM Snapshot naming.  for uniqueness in ScaleIO volume name when more than one volume exists in the VM.\n\n- Added sync lock while spooling managed storage template before volume creation from the template (non-direct download).\n\n- Updated resize volume error message string.\n\n- Blocked the below operations on PowerFlex storage pool:\n  -> Extract Volume\n  -> Create Snapshot for VMSnapshot\n\n* Added the PowerFlex/ScaleIO client connection pool to manage the ScaleIO gateway clients.  which uses a single gateway client per Powerflex/ScaleIO storage pool and renews it when the session token expires.\n\n- The token is valid for 8 hours from the time it was created.  unless there has been no activity for 10 minutes.\n  Reference: https://cpsdocs.dellemc.com/bundle/PF_REST_API_RG/page/GUID-92430F19-9F44-42B6-B898-87D5307AE59B.html\n\nOther fixes included:\n\n- Fail the VM deployment when the host specified in the deployVirtualMachine cmd is not in the right state (i.e. either Resource State is not Enabled or Status is not Up)\n\n- Use the physical file size of the template to check the free space availability on the host.  while downloading the direct download templates.\n\n- Perform basic tests (for connectivity and file system) on router before updating the health check config data\n\t=> Validate the basic tests (connectivity and file system check) on router\n\t=> Cleanup the health check results when router is destroyed\n\n* Updated PowerFlex/ScaleIO storage plugin version to 4.16.0.0\n\n* UI Changes to support storage plugin for PowerFlex/ScaleIO storage pool.\n- PowerFlex pool URL generated from the UI inputs(Gateway.  Username.  Password.  Storage Pool) when adding \"PowerFlex\" Primary Storage\n- Updated protocol to \"custom\" for PowerFlex provider\n- Allow VM Snapshot for stopped VM on KVM hypervisor and PowerFlex/ScaleIO storage pool\n\nand Minor improvements in PowerFlex/ScaleIO storage plugin code\n\n* Added support for PowerFlex/ScaleIO volume migration across different PowerFlex storage instances.\n\n- findStoragePoolsForMigration API returns PowerFlex pool(s) of different instance as suitable pool(s).  for volume(s) on PowerFlex storage pool.\n- Volume(s) with snapshots are not allowed to migrate to different PowerFlex instance.\n- Volume(s) of running VM are not allowed to migrate to other PowerFlex storage pools.\n- Volume migration from PowerFlex pool to Non-PowerFlex pool.  and vice versa are not supported.\n\n* Fixed change service offering smoke tests in test_service_offerings.py.  test_vm_snapshots.py\n\n* Added the PowerFlex/ScaleIO volume/snapshot name to the paths of respective CloudStack resources (Templates.  Volumes.  Snapshots and VM Snapshots)\n\n* Added new response parameter ?supportsStorageSnapshot? (true/false) to volume response.  and Updated UI to hide the async backup option while taking snapshot for volume(s) with storage snapshot support.\n\n* Fix to remove the duplicate zone wide pools listed while finding storage pools for migration\n\n* Updated PowerFlex/ScaleIO volume migration checks and rollback migration on failure\n\n* Fixed the PowerFlex/ScaleIO volume name inconsistency issue in the volume path after migration.  due to rename failure","date":"2021-02-24 17:28:33","modifiedFileCount":"112","status":"M","submitter":"sureshanaparti"}]
