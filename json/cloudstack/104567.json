[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String name = param.split(\"=\")[0];\n            String value = param.split(\"=\")[1];\n            map.put(name, value);\n        }\n        return map;\n    }\n","date":"2018-01-20 05:49:27","endLine":213,"groupId":"7177","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"getQueryMap","params":"(Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/67/d986e4615ce447f79bd9da1d63d52f963f730c.src","preCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String name = param.split(\"=\")[0];\n            String value = param.split(\"=\")[1];\n            map.put(name, value);\n        }\n        return map;\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyThumbnailHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String[] paramTokens = param.split(\"=\");\n            if (paramTokens != null && paramTokens.length == 2) {\n                String name = param.split(\"=\")[0];\n                String value = param.split(\"=\")[1];\n                map.put(name, value);\n            } else if (paramTokens.length == 3) {\n                \r\n                String name = paramTokens[0];\n                String value = paramTokens[1] + \"=\" + paramTokens[2];\n                map.put(name, value);\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Invalid paramemter in URL found. param: \" + param);\n            }\n        }\n\n        \r\n        \r\n        if (map.get(\"token\") != null) {\n            ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(ConsoleProxy.getEncryptorPassword());\n\n            ConsoleProxyClientParam param = encryptor.decryptObject(ConsoleProxyClientParam.class, map.get(\"token\"));\n\n            \r\n            guardUserInput(map);\n            if (param != null) {\n                if (param.getClientHostAddress() != null) {\n                    s_logger.debug(\"decode token. host: \" + param.getClientHostAddress());\n                    map.put(\"host\", param.getClientHostAddress());\n                } else {\n                    s_logger.error(\"decode token. host info is not found!\");\n                }\n                if (param.getClientHostPort() != 0) {\n                    s_logger.debug(\"decode token. port: \" + param.getClientHostPort());\n                    map.put(\"port\", String.valueOf(param.getClientHostPort()));\n                } else {\n                    s_logger.error(\"decode token. port info is not found!\");\n                }\n                if (param.getClientTag() != null) {\n                    s_logger.debug(\"decode token. tag: \" + param.getClientTag());\n                    map.put(\"tag\", param.getClientTag());\n                } else {\n                    s_logger.error(\"decode token. tag info is not found!\");\n                }\n                if (param.getClientHostPassword() != null) {\n                    map.put(\"sid\", param.getClientHostPassword());\n                } else {\n                    s_logger.error(\"decode token. sid info is not found!\");\n                }\n                if (param.getClientTunnelUrl() != null)\n                    map.put(\"consoleurl\", param.getClientTunnelUrl());\n                if (param.getClientTunnelSession() != null)\n                    map.put(\"sessionref\", param.getClientTunnelSession());\n                if (param.getTicket() != null)\n                    map.put(\"ticket\", param.getTicket());\n                if (param.getLocale() != null)\n                    map.put(\"locale\", param.getLocale());\n                if (param.getHypervHost() != null)\n                    map.put(\"hypervHost\", param.getHypervHost());\n                if (param.getUsername() != null)\n                    map.put(\"username\", param.getUsername());\n                if (param.getPassword() != null)\n                    map.put(\"password\", param.getPassword());\n            } else {\n                s_logger.error(\"Unable to decode token\");\n            }\n        } else {\n            \r\n            guardUserInput(map);\n        }\n\n        return map;\n    }\n","date":"2018-01-20 05:49:27","endLine":103,"groupId":"7177","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getQueryMap","params":"(Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/51/a703ae4b4a23c4460bfefaa98022206f9ceb53.src","preCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String[] paramTokens = param.split(\"=\");\n            if (paramTokens != null && paramTokens.length == 2) {\n                String name = param.split(\"=\")[0];\n                String value = param.split(\"=\")[1];\n                map.put(name, value);\n            } else if (paramTokens.length == 3) {\n                \r\n                String name = paramTokens[0];\n                String value = paramTokens[1] + \"=\" + paramTokens[2];\n                map.put(name, value);\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Invalid paramemter in URL found. param: \" + param);\n            }\n        }\n\n        \r\n        \r\n        if (map.get(\"token\") != null) {\n            ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(ConsoleProxy.getEncryptorPassword());\n\n            ConsoleProxyClientParam param = encryptor.decryptObject(ConsoleProxyClientParam.class, map.get(\"token\"));\n\n            \r\n            guardUserInput(map);\n            if (param != null) {\n                if (param.getClientHostAddress() != null) {\n                    s_logger.debug(\"decode token. host: \" + param.getClientHostAddress());\n                    map.put(\"host\", param.getClientHostAddress());\n                } else {\n                    s_logger.error(\"decode token. host info is not found!\");\n                }\n                if (param.getClientHostPort() != 0) {\n                    s_logger.debug(\"decode token. port: \" + param.getClientHostPort());\n                    map.put(\"port\", String.valueOf(param.getClientHostPort()));\n                } else {\n                    s_logger.error(\"decode token. port info is not found!\");\n                }\n                if (param.getClientTag() != null) {\n                    s_logger.debug(\"decode token. tag: \" + param.getClientTag());\n                    map.put(\"tag\", param.getClientTag());\n                } else {\n                    s_logger.error(\"decode token. tag info is not found!\");\n                }\n                if (param.getClientHostPassword() != null) {\n                    map.put(\"sid\", param.getClientHostPassword());\n                } else {\n                    s_logger.error(\"decode token. sid info is not found!\");\n                }\n                if (param.getClientTunnelUrl() != null)\n                    map.put(\"consoleurl\", param.getClientTunnelUrl());\n                if (param.getClientTunnelSession() != null)\n                    map.put(\"sessionref\", param.getClientTunnelSession());\n                if (param.getTicket() != null)\n                    map.put(\"ticket\", param.getTicket());\n                if (param.getLocale() != null)\n                    map.put(\"locale\", param.getLocale());\n                if (param.getHypervHost() != null)\n                    map.put(\"hypervHost\", param.getHypervHost());\n                if (param.getUsername() != null)\n                    map.put(\"username\", param.getUsername());\n                if (param.getPassword() != null)\n                    map.put(\"password\", param.getPassword());\n            } else {\n                s_logger.error(\"Unable to decode token\");\n            }\n        } else {\n            \r\n            guardUserInput(map);\n        }\n\n        return map;\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyHttpHandlerHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2021-03-06 18:32:09","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String name = param.split(\"=\")[0];\n            String value = param.split(\"=\")[1];\n            map.put(name, value);\n        }\n        return map;\n    }\n","date":"2018-01-20 05:49:27","endLine":213,"groupId":"7177","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getQueryMap","params":"(Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/67/d986e4615ce447f79bd9da1d63d52f963f730c.src","preCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String name = param.split(\"=\")[0];\n            String value = param.split(\"=\")[1];\n            map.put(name, value);\n        }\n        return map;\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyThumbnailHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"},{"authorDate":"2021-03-06 18:32:09","commitOrder":2,"curCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String[] paramTokens = param.split(\"=\");\n            if (paramTokens != null && paramTokens.length == 2) {\n                String name = param.split(\"=\")[0];\n                String value = param.split(\"=\")[1];\n                map.put(name, value);\n            } else if (paramTokens.length == 3) {\n                \r\n                String name = paramTokens[0];\n                String value = paramTokens[1] + \"=\" + paramTokens[2];\n                map.put(name, value);\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Invalid paramemter in URL found. param: \" + param);\n            }\n        }\n\n        \r\n        \r\n        if (map.get(\"token\") != null) {\n            ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(ConsoleProxy.getEncryptorPassword());\n\n            ConsoleProxyClientParam param = encryptor.decryptObject(ConsoleProxyClientParam.class, map.get(\"token\"));\n\n            \r\n            guardUserInput(map);\n            if (param != null) {\n                if (param.getClientHostAddress() != null) {\n                    s_logger.debug(\"decode token. host: \" + param.getClientHostAddress());\n                    map.put(\"host\", param.getClientHostAddress());\n                } else {\n                    s_logger.error(\"decode token. host info is not found!\");\n                }\n                if (param.getClientHostPort() != 0) {\n                    s_logger.debug(\"decode token. port: \" + param.getClientHostPort());\n                    map.put(\"port\", String.valueOf(param.getClientHostPort()));\n                } else {\n                    s_logger.error(\"decode token. port info is not found!\");\n                }\n                if (param.getClientTag() != null) {\n                    s_logger.debug(\"decode token. tag: \" + param.getClientTag());\n                    map.put(\"tag\", param.getClientTag());\n                } else {\n                    s_logger.error(\"decode token. tag info is not found!\");\n                }\n                if (param.getClientHostPassword() != null) {\n                    map.put(\"sid\", param.getClientHostPassword());\n                } else {\n                    s_logger.error(\"decode token. sid info is not found!\");\n                }\n                if (param.getClientTunnelUrl() != null)\n                    map.put(\"consoleurl\", param.getClientTunnelUrl());\n                if (param.getClientTunnelSession() != null)\n                    map.put(\"sessionref\", param.getClientTunnelSession());\n                if (param.getTicket() != null)\n                    map.put(\"ticket\", param.getTicket());\n                if (param.getLocale() != null)\n                    map.put(\"locale\", param.getLocale());\n                if (param.getHypervHost() != null)\n                    map.put(\"hypervHost\", param.getHypervHost());\n                if (param.getUsername() != null)\n                    map.put(\"username\", param.getUsername());\n                if (param.getPassword() != null)\n                    map.put(\"password\", param.getPassword());\n                if (param.getSourceIP() != null)\n                    map.put(\"sourceIP\", param.getSourceIP());\n            } else {\n                s_logger.error(\"Unable to decode token\");\n            }\n        } else {\n            \r\n            guardUserInput(map);\n        }\n\n        return map;\n    }\n","date":"2021-03-06 18:32:09","endLine":105,"groupId":"7177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getQueryMap","params":"(Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/4b/ed1506a28043cdfad96f31c7be6a34fd8b9aa9.src","preCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String[] paramTokens = param.split(\"=\");\n            if (paramTokens != null && paramTokens.length == 2) {\n                String name = param.split(\"=\")[0];\n                String value = param.split(\"=\")[1];\n                map.put(name, value);\n            } else if (paramTokens.length == 3) {\n                \r\n                String name = paramTokens[0];\n                String value = paramTokens[1] + \"=\" + paramTokens[2];\n                map.put(name, value);\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Invalid paramemter in URL found. param: \" + param);\n            }\n        }\n\n        \r\n        \r\n        if (map.get(\"token\") != null) {\n            ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(ConsoleProxy.getEncryptorPassword());\n\n            ConsoleProxyClientParam param = encryptor.decryptObject(ConsoleProxyClientParam.class, map.get(\"token\"));\n\n            \r\n            guardUserInput(map);\n            if (param != null) {\n                if (param.getClientHostAddress() != null) {\n                    s_logger.debug(\"decode token. host: \" + param.getClientHostAddress());\n                    map.put(\"host\", param.getClientHostAddress());\n                } else {\n                    s_logger.error(\"decode token. host info is not found!\");\n                }\n                if (param.getClientHostPort() != 0) {\n                    s_logger.debug(\"decode token. port: \" + param.getClientHostPort());\n                    map.put(\"port\", String.valueOf(param.getClientHostPort()));\n                } else {\n                    s_logger.error(\"decode token. port info is not found!\");\n                }\n                if (param.getClientTag() != null) {\n                    s_logger.debug(\"decode token. tag: \" + param.getClientTag());\n                    map.put(\"tag\", param.getClientTag());\n                } else {\n                    s_logger.error(\"decode token. tag info is not found!\");\n                }\n                if (param.getClientHostPassword() != null) {\n                    map.put(\"sid\", param.getClientHostPassword());\n                } else {\n                    s_logger.error(\"decode token. sid info is not found!\");\n                }\n                if (param.getClientTunnelUrl() != null)\n                    map.put(\"consoleurl\", param.getClientTunnelUrl());\n                if (param.getClientTunnelSession() != null)\n                    map.put(\"sessionref\", param.getClientTunnelSession());\n                if (param.getTicket() != null)\n                    map.put(\"ticket\", param.getTicket());\n                if (param.getLocale() != null)\n                    map.put(\"locale\", param.getLocale());\n                if (param.getHypervHost() != null)\n                    map.put(\"hypervHost\", param.getHypervHost());\n                if (param.getUsername() != null)\n                    map.put(\"username\", param.getUsername());\n                if (param.getPassword() != null)\n                    map.put(\"password\", param.getPassword());\n            } else {\n                s_logger.error(\"Unable to decode token\");\n            }\n        } else {\n            \r\n            guardUserInput(map);\n        }\n\n        return map;\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyHttpHandlerHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"}],"commitId":"a1be9b02a6cc2b629a29b6cd6a712e9254f4eaa0","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-03-06 18:32:09","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-04-15 18:47:13","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String name = param.split(\"=\")[0];\n            String value = param.split(\"=\")[1];\n            map.put(name, value);\n        }\n        return map;\n    }\n","date":"2018-01-20 05:49:27","endLine":213,"groupId":"104567","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getQueryMap","params":"(Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/67/d986e4615ce447f79bd9da1d63d52f963f730c.src","preCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String name = param.split(\"=\")[0];\n            String value = param.split(\"=\")[1];\n            map.put(name, value);\n        }\n        return map;\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyThumbnailHandler.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"},{"authorDate":"2021-04-15 18:47:13","commitOrder":3,"curCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String[] paramTokens = param.split(\"=\");\n            if (paramTokens != null && paramTokens.length == 2) {\n                String name = param.split(\"=\")[0];\n                String value = param.split(\"=\")[1];\n                map.put(name, value);\n            } else if (paramTokens.length == 3) {\n                \r\n                String name = paramTokens[0];\n                String value = paramTokens[1] + \"=\" + paramTokens[2];\n                map.put(name, value);\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Invalid paramemter in URL found. param: \" + param);\n            }\n        }\n\n        \r\n        \r\n        if (map.get(\"token\") != null) {\n            ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(ConsoleProxy.getEncryptorPassword());\n\n            ConsoleProxyClientParam param = encryptor.decryptObject(ConsoleProxyClientParam.class, map.get(\"token\"));\n\n            \r\n            guardUserInput(map);\n            if (param != null) {\n                if (param.getClientHostAddress() != null) {\n                    s_logger.debug(\"decode token. host: \" + param.getClientHostAddress());\n                    map.put(\"host\", param.getClientHostAddress());\n                } else {\n                    s_logger.error(\"decode token. host info is not found!\");\n                }\n                if (param.getClientHostPort() != 0) {\n                    s_logger.debug(\"decode token. port: \" + param.getClientHostPort());\n                    map.put(\"port\", String.valueOf(param.getClientHostPort()));\n                } else {\n                    s_logger.error(\"decode token. port info is not found!\");\n                }\n                if (param.getClientTag() != null) {\n                    s_logger.debug(\"decode token. tag: \" + param.getClientTag());\n                    map.put(\"tag\", param.getClientTag());\n                } else {\n                    s_logger.error(\"decode token. tag info is not found!\");\n                }\n                if (param.getClientHostPassword() != null) {\n                    map.put(\"sid\", param.getClientHostPassword());\n                } else {\n                    s_logger.error(\"decode token. sid info is not found!\");\n                }\n                if (param.getClientTunnelUrl() != null)\n                    map.put(\"consoleurl\", param.getClientTunnelUrl());\n                if (param.getClientTunnelSession() != null)\n                    map.put(\"sessionref\", param.getClientTunnelSession());\n                if (param.getTicket() != null)\n                    map.put(\"ticket\", param.getTicket());\n                if (param.getLocale() != null)\n                    map.put(\"locale\", param.getLocale());\n                if (param.getHypervHost() != null)\n                    map.put(\"hypervHost\", param.getHypervHost());\n                if (param.getUsername() != null)\n                    map.put(\"username\", param.getUsername());\n                if (param.getPassword() != null)\n                    map.put(\"password\", param.getPassword());\n                if (param.getSourceIP() != null)\n                    map.put(\"sourceIP\", param.getSourceIP());\n                if (param.getWebsocketUrl() != null) {\n                    map.put(\"websocketUrl\", param.getWebsocketUrl());\n                }\n            } else {\n                s_logger.error(\"Unable to decode token\");\n            }\n        } else {\n            \r\n            guardUserInput(map);\n        }\n\n        return map;\n    }\n","date":"2021-04-15 18:47:13","endLine":108,"groupId":"104567","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getQueryMap","params":"(Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/f969a1e578233103861ef75a610afc86b12aa5.src","preCode":"    public static Map<String, String> getQueryMap(String query) {\n        String[] params = query.split(\"&\");\n        Map<String, String> map = new HashMap<String, String>();\n        for (String param : params) {\n            String[] paramTokens = param.split(\"=\");\n            if (paramTokens != null && paramTokens.length == 2) {\n                String name = param.split(\"=\")[0];\n                String value = param.split(\"=\")[1];\n                map.put(name, value);\n            } else if (paramTokens.length == 3) {\n                \r\n                String name = paramTokens[0];\n                String value = paramTokens[1] + \"=\" + paramTokens[2];\n                map.put(name, value);\n            } else {\n                if (s_logger.isDebugEnabled())\n                    s_logger.debug(\"Invalid paramemter in URL found. param: \" + param);\n            }\n        }\n\n        \r\n        \r\n        if (map.get(\"token\") != null) {\n            ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(ConsoleProxy.getEncryptorPassword());\n\n            ConsoleProxyClientParam param = encryptor.decryptObject(ConsoleProxyClientParam.class, map.get(\"token\"));\n\n            \r\n            guardUserInput(map);\n            if (param != null) {\n                if (param.getClientHostAddress() != null) {\n                    s_logger.debug(\"decode token. host: \" + param.getClientHostAddress());\n                    map.put(\"host\", param.getClientHostAddress());\n                } else {\n                    s_logger.error(\"decode token. host info is not found!\");\n                }\n                if (param.getClientHostPort() != 0) {\n                    s_logger.debug(\"decode token. port: \" + param.getClientHostPort());\n                    map.put(\"port\", String.valueOf(param.getClientHostPort()));\n                } else {\n                    s_logger.error(\"decode token. port info is not found!\");\n                }\n                if (param.getClientTag() != null) {\n                    s_logger.debug(\"decode token. tag: \" + param.getClientTag());\n                    map.put(\"tag\", param.getClientTag());\n                } else {\n                    s_logger.error(\"decode token. tag info is not found!\");\n                }\n                if (param.getClientHostPassword() != null) {\n                    map.put(\"sid\", param.getClientHostPassword());\n                } else {\n                    s_logger.error(\"decode token. sid info is not found!\");\n                }\n                if (param.getClientTunnelUrl() != null)\n                    map.put(\"consoleurl\", param.getClientTunnelUrl());\n                if (param.getClientTunnelSession() != null)\n                    map.put(\"sessionref\", param.getClientTunnelSession());\n                if (param.getTicket() != null)\n                    map.put(\"ticket\", param.getTicket());\n                if (param.getLocale() != null)\n                    map.put(\"locale\", param.getLocale());\n                if (param.getHypervHost() != null)\n                    map.put(\"hypervHost\", param.getHypervHost());\n                if (param.getUsername() != null)\n                    map.put(\"username\", param.getUsername());\n                if (param.getPassword() != null)\n                    map.put(\"password\", param.getPassword());\n                if (param.getSourceIP() != null)\n                    map.put(\"sourceIP\", param.getSourceIP());\n            } else {\n                s_logger.error(\"Unable to decode token\");\n            }\n        } else {\n            \r\n            guardUserInput(map);\n        }\n\n        return map;\n    }\n","realPath":"services/console-proxy/server/src/main/java/com/cloud/consoleproxy/ConsoleProxyHttpHandlerHelper.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"}],"commitId":"f42024714c39eacc004af0b61e016fc7d16e459a","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-04-15 18:47:13","modifiedFileCount":"12","status":"M","submitter":"Rohit Yadav"}]
