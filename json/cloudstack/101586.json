[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), \"keyboard\");\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":476,"groupId":"3582","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), \"keyboard\");\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2018-06-21 19:08:55","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2018-06-21 19:08:55","commitOrder":2,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo;\n        if (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance)) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), \"kvm.vnc.address\");\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), \"kvm.vnc.port\");\n            portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n        } else {\n            portInfo = _ms.getVncPort(vm);\n        }\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), \"keyboard\");\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-06-21 19:08:55","endLine":484,"groupId":"3582","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/8c/faa9fd69b2c33e90957794f2179fb4837b9ba5.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), \"keyboard\");\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"1d05fead49f5c856257a741b07122f5633d2e359","commitMessage":"@@@Merge branch '4.11'\n","date":"2018-06-21 19:08:55","modifiedFileCount":"9","status":"M","submitter":"Daan Hoogland"},{"authorTime":"2019-06-27 11:44:47","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":3,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2019-06-27 11:44:47","commitOrder":3,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo;\n        if (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance)) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n        } else {\n            portInfo = _ms.getVncPort(vm);\n        }\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2019-06-27 11:44:47","endLine":485,"groupId":"3582","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/5a/6c84f147952a90adbeaf1b381fce615d240cf4.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo;\n        if (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance)) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), \"kvm.vnc.address\");\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), \"kvm.vnc.port\");\n            portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n        } else {\n            portInfo = _ms.getVncPort(vm);\n        }\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), \"keyboard\");\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"9f4f2c5348af93eeb790fbf4908cdde4f0b7806a","commitMessage":"@@@api: instance and template details are free text (#3240)\n\nProblem: Users don't know what keys/values to enter for template and VM details.\nRoot Cause: The feature does not exist that can list possible details and options.\nSolution: Based on the possible VM and template details handled by the\ncodebase.  those details were refactored and a list API is introduced\nthat can return users those details along with possible values. When\nusers add details now.  they will be presented with a list of key details\nand their possible options if any.\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2019-06-27 11:44:47","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2019-12-19 23:36:20","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":4,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2019-12-19 23:36:20","commitOrder":4,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2019-12-19 23:36:20","endLine":493,"groupId":"3582","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ae/9b5c548e5608e820271eef60d654b21bb49bf7.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo;\n        if (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance)) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n        } else {\n            portInfo = _ms.getVncPort(vm);\n        }\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"4b43c2684f608861c1c2250b96f9488ab77c3f48","commitMessage":"@@@Better tracking host maintanence and handling of migration jobs (#3425)\n\n* Service layer changes for new way of tracking maintanence progress\n\n* Fixes after offline code review\n\n* Fix marvin tests\n\n* Change state name and add documentation\n\n* Fix test\n\n* Fix and add more unit tests for different caseS\n\n* Fix and enhance Marvin Tests\n\n* Fixes for corner cases\n\n* More fixes and logging\n\n* UI fixes\n\n* Some minor changes and reducing VMs on host for more contained tests\n\n* Fixed ssh client auth problem causing test failure\n\n* Code review changes + fixes + some more logging\n\n* Fix flaky tests by adding delays between host states\n\n* Added fetching only enabled hosts for tests\n\n* Make port blocking KVM specific and refactor to handle failure\n\n* Make failing migrations due to tagged host instead of port blocking\n\n* Added additional check for migrating VMs\n\n* Refactor to use single place for methods checking maintenance states\n","date":"2019-12-19 23:36:20","modifiedFileCount":"15","status":"M","submitter":"Anurag Awasthi"},{"authorTime":"2020-05-19 20:14:04","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":5,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2020-05-19 20:14:04","commitOrder":5,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc_lite.html?port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT + \"&token=\"\n                + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2020-05-19 20:14:04","endLine":501,"groupId":"3582","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/ed/73625d7e9cf5ee34929e2b13ad9633bb3caa4e.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"M"}],"commitId":"1756b0f64a30e7d2ffdbad99c64b7a633daae27e","commitMessage":"@@@noVNC console integration (#3967)\n\n* Adding noVNC repo\n\n* Adding support for noVNC\n\n* Adding Ctl+Esc\n\n* Removing device name from novnc header","date":"2020-05-19 20:14:04","modifiedFileCount":"5","status":"M","submitter":"davidjumani"},{"authorTime":"2020-09-22 20:12:30","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":6,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2020-09-22 20:12:30","commitOrder":6,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc.html?port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT + \"&token=\"\n                + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2020-09-22 20:12:30","endLine":501,"groupId":"3582","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/35be811e2a63bf16fe09f6e4cfcc3ef75f8546.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc_lite.html?port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT + \"&token=\"\n                + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"M"}],"commitId":"c06e7ded3c52b18eb92ec0dd53f0884db0b91004","commitMessage":"@@@systemvm: update novnc v1.2.0 (#4323)\n\nUpdate noVNC v1.2.0.  add support for clipboard.  explicit button toolbar and resize screensize","date":"2020-09-22 20:12:30","modifiedFileCount":"1","status":"M","submitter":"davidjumani"},{"authorTime":"2021-03-06 18:32:09","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":7,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2021-03-06 18:32:09","commitOrder":7,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, InetAddress addr) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        param.setSourceIP(addr != null ? addr.getHostAddress(): null);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc.html?port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT + \"&token=\"\n                + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2021-03-06 18:32:09","endLine":512,"groupId":"11348","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@InetAddressaddr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/3c/bb5f4b99e49598c1919314aab53549e94dd545.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc.html?port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT + \"&token=\"\n                + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"a1be9b02a6cc2b629a29b6cd6a712e9254f4eaa0","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-03-06 18:32:09","modifiedFileCount":"16","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-03-17 20:16:16","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":8,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"5299","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2021-03-17 20:16:16","commitOrder":8,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, InetAddress addr) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        param.setSourceIP(addr != null ? addr.getHostAddress(): null);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc.html\")\n                .append(\"?autoconnect=true\")\n                .append(\"&port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT)\n                .append(\"&token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2021-03-17 20:16:16","endLine":514,"groupId":"11348","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@InetAddressaddr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/62/2a4c847615969d4f953d4755271cf11df79b7b.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, InetAddress addr) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        param.setSourceIP(addr != null ? addr.getHostAddress(): null);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc.html?port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT + \"&token=\"\n                + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"775de36688b18dad651af69179cd7776d6d2b791","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n","date":"2021-03-17 20:16:16","modifiedFileCount":"3","status":"M","submitter":"Rohit Yadav"},{"authorTime":"2021-04-15 18:47:13","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":9,"curCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2018-01-20 05:49:27","endLine":415,"groupId":"101586","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"composeThumbnailUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@intw@inth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/cc/788c7b118383cb78ed4f1aa17672dba0eff3c5.src","preCode":"    private String composeThumbnailUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, int w, int h) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = _ms.getVncPort(vm);\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        String sid = vm.getVncPassword();\n        String tag = vm.getUuid();\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(portInfo.second());\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        sb.append(\"/ajaximg?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        sb.append(\"&w=\").append(w).append(\"&h=\").append(h).append(\"&key=0\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose thumbnail url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"N"},{"authorDate":"2021-04-15 18:47:13","commitOrder":9,"curCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, InetAddress addr) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        param.setSourceIP(addr != null ? addr.getHostAddress(): null);\n\n        if (requiresVncOverWebSocketConnection(vm, hostVo)) {\n            setWebsocketUrl(vm, param);\n        }\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc.html\")\n                .append(\"?autoconnect=true\")\n                .append(\"&port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT)\n                .append(\"&token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","date":"2021-04-15 18:47:13","endLine":568,"groupId":"101586","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"composeConsoleAccessUrl","params":"(StringrootUrl@VirtualMachinevm@HostVOhostVo@InetAddressaddr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/b7/55a84887d7451477c5ddd06af7b043fe91f627.src","preCode":"    private String composeConsoleAccessUrl(String rootUrl, VirtualMachine vm, HostVO hostVo, InetAddress addr) {\n        StringBuffer sb = new StringBuffer(rootUrl);\n        String host = hostVo.getPrivateIpAddress();\n\n        Pair<String, Integer> portInfo = null;\n        if (hostVo.getHypervisorType() == Hypervisor.HypervisorType.KVM &&\n                (hostVo.getResourceState().equals(ResourceState.ErrorInMaintenance) ||\n                        hostVo.getResourceState().equals(ResourceState.ErrorInPrepareForMaintenance))) {\n            UserVmDetailVO detailAddress = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_ADDRESS);\n            UserVmDetailVO detailPort = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KVM_VNC_PORT);\n            if (detailAddress != null && detailPort != null) {\n                portInfo = new Pair<>(detailAddress.getValue(), Integer.valueOf(detailPort.getValue()));\n            } else {\n                s_logger.warn(\"KVM Host in ErrorInMaintenance/ErrorInPrepareForMaintenance but \" +\n                        \"no VNC Address/Port was available. Falling back to default one from MS.\");\n            }\n        }\n\n        if (portInfo == null) {\n            portInfo = _ms.getVncPort(vm);\n        }\n\n        if (s_logger.isDebugEnabled())\n            s_logger.debug(\"Port info \" + portInfo.first());\n\n        Ternary<String, String, String> parsedHostInfo = parseHostInfo(portInfo.first());\n\n        int port = -1;\n        if (portInfo.second() == -9) {\n            \r\n            port = Integer.parseInt(_ms.findDetail(hostVo.getId(), \"rdp.server.port\").getValue());\n        } else {\n            port = portInfo.second();\n        }\n\n        String sid = vm.getVncPassword();\n        UserVmDetailVO details = _userVmDetailsDao.findDetail(vm.getId(), VmDetailConstants.KEYBOARD);\n\n        String tag = vm.getUuid();\n\n        String ticket = genAccessTicket(parsedHostInfo.first(), String.valueOf(port), sid, tag);\n        ConsoleProxyPasswordBasedEncryptor encryptor = new ConsoleProxyPasswordBasedEncryptor(getEncryptorPassword());\n        ConsoleProxyClientParam param = new ConsoleProxyClientParam();\n        param.setClientHostAddress(parsedHostInfo.first());\n        param.setClientHostPort(port);\n        param.setClientHostPassword(sid);\n        param.setClientTag(tag);\n        param.setTicket(ticket);\n        param.setSourceIP(addr != null ? addr.getHostAddress(): null);\n\n        if (details != null) {\n            param.setLocale(details.getValue());\n        }\n\n        if (portInfo.second() == -9) {\n            \r\n            param.setHypervHost(host);\n            param.setUsername(_ms.findDetail(hostVo.getId(), \"username\").getValue());\n            param.setPassword(_ms.findDetail(hostVo.getId(), \"password\").getValue());\n        }\n        if (parsedHostInfo.second() != null  && parsedHostInfo.third() != null) {\n            param.setClientTunnelUrl(parsedHostInfo.second());\n            param.setClientTunnelSession(parsedHostInfo.third());\n        }\n\n        if (param.getHypervHost() != null || !ConsoleProxyManager.NoVncConsoleDefault.value()) {\n            sb.append(\"/ajax?token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        } else {\n            sb.append(\"/resource/noVNC/vnc.html\")\n                .append(\"?autoconnect=true\")\n                .append(\"&port=\" + ConsoleProxyManager.DEFAULT_NOVNC_PORT)\n                .append(\"&token=\" + encryptor.encryptObject(ConsoleProxyClientParam.class, param));\n        }\n\n        \r\n        long guestOs = vm.getGuestOSId();\n        GuestOSVO guestOsVo = _ms.getGuestOs(guestOs);\n        if (guestOsVo.getCategoryId() == 6)\n            sb.append(\"&guest=windows\");\n\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Compose console url: \" + sb.toString());\n        }\n        return sb.toString();\n    }\n","realPath":"server/src/main/java/com/cloud/servlet/ConsoleProxyServlet.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":480,"status":"M"}],"commitId":"f42024714c39eacc004af0b61e016fc7d16e459a","commitMessage":"@@@Merge remote-tracking branch 'origin/4.15'\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>\n","date":"2021-04-15 18:47:13","modifiedFileCount":"12","status":"M","submitter":"Rohit Yadav"}]
