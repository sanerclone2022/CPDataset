[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":2532,"groupId":"15757","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"attachOrDetachDevice","params":"(finalConnectconn@finalbooleanattach@finalStringvmName@finalStringxml)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2503,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":1153,"groupId":"15757","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"attachOrDetachDevice","params":"(finalConnectconn@finalbooleanattach@finalStringvmName@finalStringxml)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/f0/9e8f7b0ea63f78c91238751e5c02986f3c7b59.src","preCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1123,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2021-06-18 09:21:49","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2018-01-20 05:49:27","endLine":2532,"groupId":"103330","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"attachOrDetachDevice","params":"(finalConnectconn@finalbooleanattach@finalStringvmName@finalStringxml)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/9b/7fb2ea0139852633e459ee1d9cc6507a8d43c5.src","preCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/LibvirtComputingResource.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2503,"status":"N"},{"authorDate":"2021-06-18 09:21:49","commitOrder":2,"curCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n                LibvirtDomainXMLParser parser = new LibvirtDomainXMLParser();\n                parser.parseDomainXML(dm.getXMLDesc(0));\n                List<DiskDef> disks = parser.getDisks();\n                for (DiskDef diskDef : disks) {\n                    if (StringUtils.contains(xml, diskDef.getDiskPath())) {\n                        throw new InternalErrorException(\"Could not detach volume. Probably the VM is in boot state at the moment\");\n                    }\n                }\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","date":"2021-06-18 09:21:49","endLine":1226,"groupId":"103330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"attachOrDetachDevice","params":"(finalConnectconn@finalbooleanattach@finalStringvmName@finalStringxml)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/2a/d3089cf371c9de13e74343a4924db618fc81cb.src","preCode":"    protected synchronized String attachOrDetachDevice(final Connect conn, final boolean attach, final String vmName, final String xml) throws LibvirtException, InternalErrorException {\n        Domain dm = null;\n        try {\n            dm = conn.domainLookupByName(vmName);\n\n            if (attach) {\n                s_logger.debug(\"Attaching device: \" + xml);\n                dm.attachDevice(xml);\n            } else {\n                s_logger.debug(\"Detaching device: \" + xml);\n                dm.detachDevice(xml);\n            }\n        } catch (final LibvirtException e) {\n            if (attach) {\n                s_logger.warn(\"Failed to attach device to \" + vmName + \": \" + e.getMessage());\n            } else {\n                s_logger.warn(\"Failed to detach device from \" + vmName + \": \" + e.getMessage());\n            }\n            throw e;\n        } finally {\n            if (dm != null) {\n                try {\n                    dm.free();\n                } catch (final LibvirtException l) {\n                    s_logger.trace(\"Ignoring libvirt error.\", l);\n                }\n            }\n        }\n\n        return null;\n    }\n","realPath":"plugins/hypervisors/kvm/src/main/java/com/cloud/hypervisor/kvm/storage/KVMStorageProcessor.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1188,"status":"M"}],"commitId":"8e33cf715948e4d17e323ac8e83fd22c6195ed7b","commitMessage":"@@@kvm: fix of detach volume while OS is in boot state (#4572)\n\n* fix of detach volume while OS is in boot state\n\n* check that the VM could be accessed trough ssh","date":"2021-06-18 09:21:49","modifiedFileCount":"1","status":"M","submitter":"slavkap"}]
