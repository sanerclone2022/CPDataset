[{"authorTime":"2018-01-20 05:49:27","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public Pair<List<? extends GuestOSHypervisor>, Integer> listGuestOSMappingByCriteria(final ListGuestOsMappingCmd cmd) {\n        final Filter searchFilter = new Filter(GuestOSHypervisorVO.class, \"hypervisorType\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        final Long id = cmd.getId();\n        final Long osTypeId = cmd.getOsTypeId();\n        final String hypervisor = cmd.getHypervisor();\n        final String hypervisorVersion = cmd.getHypervisorVersion();\n\n        \r\n        if (hypervisorVersion != null && (hypervisor == null || hypervisor.isEmpty())) {\n            throw new InvalidParameterValueException(\"Hypervisor version parameter cannot be used without specifying a hypervisor : XenServer, KVM or VMware\");\n        }\n\n        final SearchCriteria<GuestOSHypervisorVO> sc = _guestOSHypervisorDao.createSearchCriteria();\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (osTypeId != null) {\n            sc.addAnd(\"guestOsId\", SearchCriteria.Op.EQ, osTypeId);\n        }\n\n        if (hypervisor != null) {\n            sc.addAnd(\"hypervisorType\", SearchCriteria.Op.EQ, hypervisor);\n        }\n\n        if (hypervisorVersion != null) {\n            sc.addAnd(\"hypervisorVersion\", SearchCriteria.Op.EQ, hypervisorVersion);\n        }\n\n        final Pair<List<GuestOSHypervisorVO>, Integer> result = _guestOSHypervisorDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestOSHypervisor>, Integer>(result.first(), result.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":2061,"groupId":"2089","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"listGuestOSMappingByCriteria","params":"(finalListGuestOsMappingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/56/c912d29c1214a445a5fb7dbc190fcd1e7fb2b7.src","preCode":"    public Pair<List<? extends GuestOSHypervisor>, Integer> listGuestOSMappingByCriteria(final ListGuestOsMappingCmd cmd) {\n        final Filter searchFilter = new Filter(GuestOSHypervisorVO.class, \"hypervisorType\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        final Long id = cmd.getId();\n        final Long osTypeId = cmd.getOsTypeId();\n        final String hypervisor = cmd.getHypervisor();\n        final String hypervisorVersion = cmd.getHypervisorVersion();\n\n        \r\n        if (hypervisorVersion != null && (hypervisor == null || hypervisor.isEmpty())) {\n            throw new InvalidParameterValueException(\"Hypervisor version parameter cannot be used without specifying a hypervisor : XenServer, KVM or VMware\");\n        }\n\n        final SearchCriteria<GuestOSHypervisorVO> sc = _guestOSHypervisorDao.createSearchCriteria();\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (osTypeId != null) {\n            sc.addAnd(\"guestOsId\", SearchCriteria.Op.EQ, osTypeId);\n        }\n\n        if (hypervisor != null) {\n            sc.addAnd(\"hypervisorType\", SearchCriteria.Op.EQ, hypervisor);\n        }\n\n        if (hypervisorVersion != null) {\n            sc.addAnd(\"hypervisorVersion\", SearchCriteria.Op.EQ, hypervisorVersion);\n        }\n\n        final Pair<List<GuestOSHypervisorVO>, Integer> result = _guestOSHypervisorDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestOSHypervisor>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/server/ManagementServerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2029,"status":"B"},{"authorDate":"2018-01-20 05:49:27","commitOrder":1,"curCode":"    public CapacityVO getStoragePoolUsedStats(Long poolId, Long clusterId, Long podId, Long zoneId) {\n        SearchCriteria<StoragePoolVO> sc = _storagePoolDao.createSearchCriteria();\n        List<StoragePoolVO> pools = new ArrayList<StoragePoolVO>();\n\n        if (zoneId != null) {\n            sc.addAnd(\"dataCenterId\", SearchCriteria.Op.EQ, zoneId);\n        }\n\n        if (podId != null) {\n            sc.addAnd(\"podId\", SearchCriteria.Op.EQ, podId);\n        }\n\n        if (clusterId != null) {\n            sc.addAnd(\"clusterId\", SearchCriteria.Op.EQ, clusterId);\n        }\n\n        if (poolId != null) {\n            sc.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, poolId);\n        }\n        if (poolId != null) {\n            pools.add(_storagePoolDao.findById(poolId));\n        } else {\n            pools = _storagePoolDao.search(sc, null);\n        }\n\n        CapacityVO capacity = new CapacityVO(poolId, zoneId, podId, clusterId, 0, 0, Capacity.CAPACITY_TYPE_STORAGE);\n        for (StoragePoolVO PrimaryDataStoreVO : pools) {\n            StorageStats stats = ApiDBUtils.getStoragePoolStatistics(PrimaryDataStoreVO.getId());\n            if (stats == null) {\n                continue;\n            }\n            capacity.setUsedCapacity(stats.getByteUsed() + capacity.getUsedCapacity());\n            capacity.setTotalCapacity(stats.getCapacityBytes() + capacity.getTotalCapacity());\n        }\n        return capacity;\n    }\n","date":"2018-01-20 05:49:27","endLine":1626,"groupId":"14946","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getStoragePoolUsedStats","params":"(LongpoolId@LongclusterId@LongpodId@LongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/72/4ca8a474596505e6a75a7c09fc25744756157e.src","preCode":"    public CapacityVO getStoragePoolUsedStats(Long poolId, Long clusterId, Long podId, Long zoneId) {\n        SearchCriteria<StoragePoolVO> sc = _storagePoolDao.createSearchCriteria();\n        List<StoragePoolVO> pools = new ArrayList<StoragePoolVO>();\n\n        if (zoneId != null) {\n            sc.addAnd(\"dataCenterId\", SearchCriteria.Op.EQ, zoneId);\n        }\n\n        if (podId != null) {\n            sc.addAnd(\"podId\", SearchCriteria.Op.EQ, podId);\n        }\n\n        if (clusterId != null) {\n            sc.addAnd(\"clusterId\", SearchCriteria.Op.EQ, clusterId);\n        }\n\n        if (poolId != null) {\n            sc.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, poolId);\n        }\n        if (poolId != null) {\n            pools.add(_storagePoolDao.findById(poolId));\n        } else {\n            pools = _storagePoolDao.search(sc, null);\n        }\n\n        CapacityVO capacity = new CapacityVO(poolId, zoneId, podId, clusterId, 0, 0, Capacity.CAPACITY_TYPE_STORAGE);\n        for (StoragePoolVO PrimaryDataStoreVO : pools) {\n            StorageStats stats = ApiDBUtils.getStoragePoolStatistics(PrimaryDataStoreVO.getId());\n            if (stats == null) {\n                continue;\n            }\n            capacity.setUsedCapacity(stats.getByteUsed() + capacity.getUsedCapacity());\n            capacity.setTotalCapacity(stats.getCapacityBytes() + capacity.getTotalCapacity());\n        }\n        return capacity;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":1591,"status":"B"}],"commitId":"893a88d225276e45f12f9490e6af2c94a81c2965","commitMessage":"@@@CLOUDSTACK-10105: Use maven standard project structure in all projects (#2283)\n\nRemove maven standard module (which only a few were using) and get ride of maven customization for the projects structure.\n\n- moved all directories to src/main/java.  src/main/resources.  src/main/scripts.  src/test/java.  src/test/resources\n- grep scan to search for src/com and src/org left over\n- grep for <project>/scripts to fix pom.xml configuration\n- remove custom <build> configuration in pom.xml\n\nSigned-off-by: Marc-Aur?le Brothier <m@brothier.org>","date":"2018-01-20 05:49:27","modifiedFileCount":"1","status":"B","submitter":"Marc-Aur?le Brothier"},{"authorTime":"2021-09-10 19:57:35","codes":[{"authorDate":"2018-01-20 05:49:27","commitOrder":2,"curCode":"    public Pair<List<? extends GuestOSHypervisor>, Integer> listGuestOSMappingByCriteria(final ListGuestOsMappingCmd cmd) {\n        final Filter searchFilter = new Filter(GuestOSHypervisorVO.class, \"hypervisorType\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        final Long id = cmd.getId();\n        final Long osTypeId = cmd.getOsTypeId();\n        final String hypervisor = cmd.getHypervisor();\n        final String hypervisorVersion = cmd.getHypervisorVersion();\n\n        \r\n        if (hypervisorVersion != null && (hypervisor == null || hypervisor.isEmpty())) {\n            throw new InvalidParameterValueException(\"Hypervisor version parameter cannot be used without specifying a hypervisor : XenServer, KVM or VMware\");\n        }\n\n        final SearchCriteria<GuestOSHypervisorVO> sc = _guestOSHypervisorDao.createSearchCriteria();\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (osTypeId != null) {\n            sc.addAnd(\"guestOsId\", SearchCriteria.Op.EQ, osTypeId);\n        }\n\n        if (hypervisor != null) {\n            sc.addAnd(\"hypervisorType\", SearchCriteria.Op.EQ, hypervisor);\n        }\n\n        if (hypervisorVersion != null) {\n            sc.addAnd(\"hypervisorVersion\", SearchCriteria.Op.EQ, hypervisorVersion);\n        }\n\n        final Pair<List<GuestOSHypervisorVO>, Integer> result = _guestOSHypervisorDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestOSHypervisor>, Integer>(result.first(), result.second());\n    }\n","date":"2018-01-20 05:49:27","endLine":2061,"groupId":"10313","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"listGuestOSMappingByCriteria","params":"(finalListGuestOsMappingCmdcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/56/c912d29c1214a445a5fb7dbc190fcd1e7fb2b7.src","preCode":"    public Pair<List<? extends GuestOSHypervisor>, Integer> listGuestOSMappingByCriteria(final ListGuestOsMappingCmd cmd) {\n        final Filter searchFilter = new Filter(GuestOSHypervisorVO.class, \"hypervisorType\", true, cmd.getStartIndex(), cmd.getPageSizeVal());\n        final Long id = cmd.getId();\n        final Long osTypeId = cmd.getOsTypeId();\n        final String hypervisor = cmd.getHypervisor();\n        final String hypervisorVersion = cmd.getHypervisorVersion();\n\n        \r\n        if (hypervisorVersion != null && (hypervisor == null || hypervisor.isEmpty())) {\n            throw new InvalidParameterValueException(\"Hypervisor version parameter cannot be used without specifying a hypervisor : XenServer, KVM or VMware\");\n        }\n\n        final SearchCriteria<GuestOSHypervisorVO> sc = _guestOSHypervisorDao.createSearchCriteria();\n\n        if (id != null) {\n            sc.addAnd(\"id\", SearchCriteria.Op.EQ, id);\n        }\n\n        if (osTypeId != null) {\n            sc.addAnd(\"guestOsId\", SearchCriteria.Op.EQ, osTypeId);\n        }\n\n        if (hypervisor != null) {\n            sc.addAnd(\"hypervisorType\", SearchCriteria.Op.EQ, hypervisor);\n        }\n\n        if (hypervisorVersion != null) {\n            sc.addAnd(\"hypervisorVersion\", SearchCriteria.Op.EQ, hypervisorVersion);\n        }\n\n        final Pair<List<GuestOSHypervisorVO>, Integer> result = _guestOSHypervisorDao.searchAndCount(sc, searchFilter);\n        return new Pair<List<? extends GuestOSHypervisor>, Integer>(result.first(), result.second());\n    }\n","realPath":"server/src/main/java/com/cloud/server/ManagementServerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2029,"status":"N"},{"authorDate":"2021-09-10 19:57:35","commitOrder":2,"curCode":"    public CapacityVO getStoragePoolUsedStats(Long poolId, Long clusterId, Long podId, Long zoneId) {\n        SearchCriteria<StoragePoolVO> sc = _storagePoolDao.createSearchCriteria();\n        List<StoragePoolVO> pools = new ArrayList<StoragePoolVO>();\n\n        if (zoneId != null) {\n            sc.addAnd(\"dataCenterId\", SearchCriteria.Op.EQ, zoneId);\n        }\n\n        if (podId != null) {\n            sc.addAnd(\"podId\", SearchCriteria.Op.EQ, podId);\n        }\n\n        if (clusterId != null) {\n            sc.addAnd(\"clusterId\", SearchCriteria.Op.EQ, clusterId);\n        }\n\n        if (poolId != null) {\n            sc.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, poolId);\n        }\n        sc.addAnd(\"parent\", SearchCriteria.Op.EQ, 0L);\n        if (poolId != null) {\n            pools.add(_storagePoolDao.findById(poolId));\n        } else {\n            pools = _storagePoolDao.search(sc, null);\n        }\n\n        CapacityVO capacity = new CapacityVO(poolId, zoneId, podId, clusterId, 0, 0, Capacity.CAPACITY_TYPE_STORAGE);\n        for (StoragePoolVO PrimaryDataStoreVO : pools) {\n            StorageStats stats = ApiDBUtils.getStoragePoolStatistics(PrimaryDataStoreVO.getId());\n            if (stats == null) {\n                continue;\n            }\n            capacity.setUsedCapacity(stats.getByteUsed() + capacity.getUsedCapacity());\n            capacity.setTotalCapacity(stats.getCapacityBytes() + capacity.getTotalCapacity());\n        }\n        return capacity;\n    }\n","date":"2021-09-10 19:57:35","endLine":2100,"groupId":"10313","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getStoragePoolUsedStats","params":"(LongpoolId@LongclusterId@LongpodId@LongzoneId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/07/e36689d3c5cf03c6b72f92448d847639898dfb.src","preCode":"    public CapacityVO getStoragePoolUsedStats(Long poolId, Long clusterId, Long podId, Long zoneId) {\n        SearchCriteria<StoragePoolVO> sc = _storagePoolDao.createSearchCriteria();\n        List<StoragePoolVO> pools = new ArrayList<StoragePoolVO>();\n\n        if (zoneId != null) {\n            sc.addAnd(\"dataCenterId\", SearchCriteria.Op.EQ, zoneId);\n        }\n\n        if (podId != null) {\n            sc.addAnd(\"podId\", SearchCriteria.Op.EQ, podId);\n        }\n\n        if (clusterId != null) {\n            sc.addAnd(\"clusterId\", SearchCriteria.Op.EQ, clusterId);\n        }\n\n        if (poolId != null) {\n            sc.addAnd(\"hostOrPoolId\", SearchCriteria.Op.EQ, poolId);\n        }\n        if (poolId != null) {\n            pools.add(_storagePoolDao.findById(poolId));\n        } else {\n            pools = _storagePoolDao.search(sc, null);\n        }\n\n        CapacityVO capacity = new CapacityVO(poolId, zoneId, podId, clusterId, 0, 0, Capacity.CAPACITY_TYPE_STORAGE);\n        for (StoragePoolVO PrimaryDataStoreVO : pools) {\n            StorageStats stats = ApiDBUtils.getStoragePoolStatistics(PrimaryDataStoreVO.getId());\n            if (stats == null) {\n                continue;\n            }\n            capacity.setUsedCapacity(stats.getByteUsed() + capacity.getUsedCapacity());\n            capacity.setTotalCapacity(stats.getCapacityBytes() + capacity.getTotalCapacity());\n        }\n        return capacity;\n    }\n","realPath":"server/src/main/java/com/cloud/storage/StorageManagerImpl.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":2064,"status":"M"}],"commitId":"dc17cf4f39217d12850d560df39a5b6cb588e508","commitMessage":"@@@Prevent double counting storage pools (#5398)\n\n* Prevent double counting storage pools\n\nCurrenly.  getStoragePoolUsedStats fetch all pools\nundepended if a pool have a parent. Therefore as soon\nas a datastore cluster is used.  the cluster and the storages it contains are calculated together\nThe change fetch all storages without cluster and all datastore cluster\n\n* Update server/src/main/java/com/cloud/storage/StorageManagerImpl.java\n\nCo-authored-by: Abhishek Kumar <abhishek.mrt22@gmail.com>\n\nCo-authored-by: DK101010 <dirk.klahre@itelligence.de>\nCo-authored-by: Abhishek Kumar <abhishek.mrt22@gmail.com>","date":"2021-09-10 19:57:35","modifiedFileCount":"1","status":"M","submitter":"DK101010"}]
