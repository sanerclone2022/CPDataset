[{"authorTime":"2018-04-27 07:05:55","codes":[{"authorDate":"2018-04-27 07:05:55","commitOrder":1,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n    }\n","date":"2018-04-27 07:05:55","endLine":559,"groupId":"4556","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/937ec1b3f348d25cdc52fb6cb658fa5855169e.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"B"},{"authorDate":"2018-04-27 07:05:55","commitOrder":1,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVOMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(volumeVOMock).getVolumeType();\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n        inOrder.verify(newDiskOfferingMock).getTags();\n\n        inOrder.verify(volumeVOMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","date":"2018-04-27 07:05:55","endLine":588,"groupId":"4556","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/937ec1b3f348d25cdc52fb6cb658fa5855169e.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVOMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(volumeVOMock).getVolumeType();\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n        inOrder.verify(newDiskOfferingMock).getTags();\n\n        inOrder.verify(volumeVOMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"B"}],"commitId":"d6cbd774b76a044efbdbc531acd5c8c1925cc1d2","commitMessage":"@@@[CLOUDSTACK-10323] Allow changing disk offering during volume migration  (#2486)\n\n* [CLOUDSTACK-10323] Allow changing disk offering during volume migration\n\nThis is a continuation of work developed on PR #2425 (CLOUDSTACK-10240).  which provided root admins an override mechanism to move volumes between storage systems types (local/shared) even when the disk offering would not allow such operation. To complete the work.  we will now provide a way for administrators to enter a new disk offering that can reflect the new placement of the volume. We will add an extra parameter to allow the root admin inform a new disk offering for the volume. Therefore.  when the volume is being migrated.  it will be possible to replace the disk offering to reflect the new placement of the volume.\n\nThe API method will have the following parameters:\n\n* storageid (required)\n* volumeid (required)\n* livemigrate(optional)\n* newdiskofferingid (optional) ? this is the new parameter\n\nThe expected behavior is the following:\n\n* If ?newdiskofferingid? is not provided the current behavior is maintained. Override mechanism will also keep working as we have seen so far.\n* If the ?newdiskofferingid? is provided by the admin.  we will execute the following checks\n** new disk offering mode (local/shared) must match the target storage mode. If it does not match.  an exception will be thrown and the operator will receive a message indicating the problem.\n** we will check if the new disk offering tags match the target storage tags. If it does not match.  an exception will be thrown and the operator will receive a message indicating the problem.\n** check if the target storage has the capacity for the new volume. If it does not have enough space.  then an exception is thrown and the operator will receive a message indicating the problem.\n** check if the size of the volume is the same as the size of the new disk offering. If it is not the same.  we will ALLOW the change of the service offering.  and a warning message will be logged.\n\nWe execute the change of the Disk offering as soon as the migration of the volume finishes. Therefore.  if an error happens during the migration and the volume remains in the original storage system.  the disk offering will keep reflecting this situation.\n\n* Code formatting\n\n* Adding a test to cover migration with new disk offering (#4)\n\n* Adding a test to cover migration with new disk offering\n\n* Update test_volumes.py\n\n* Update test_volumes.py\n\n* fix test_11_migrate_volume_and_change_offering\n\n* Fix typo in Java doc\n","date":"2018-04-27 07:05:55","modifiedFileCount":"10","status":"B","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-05-08 20:40:58","codes":[{"authorDate":"2018-04-27 07:05:55","commitOrder":2,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n    }\n","date":"2018-04-27 07:05:55","endLine":559,"groupId":"4556","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/28/937ec1b3f348d25cdc52fb6cb658fa5855169e.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"N"},{"authorDate":"2018-05-08 20:40:58","commitOrder":2,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVOMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n        inOrder.verify(newDiskOfferingMock).getTags();\n\n        inOrder.verify(volumeVOMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","date":"2018-05-08 20:40:58","endLine":587,"groupId":"4556","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/55/dda53319381b520a2a1ab3b761e9f8eb0c772d.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVOMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(volumeVOMock).getVolumeType();\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n        inOrder.verify(newDiskOfferingMock).getTags();\n\n        inOrder.verify(volumeVOMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"}],"commitId":"55f45e75aa52ac8cbc31ec3766ef54c75a0df868","commitMessage":"@@@Allow changing disk offering of VMs' root volume (#2607)\n\nCurrently.  users are not able to change the disk offering of VMs' root volumes. It might be interesting to allow such changes.  so users would be able to move a VM initially deployed in shared storage to local storage and vice versa. It is also interesting to enable changing the quality of service offered to root disks.\n\nWe are allowing only administrators to execute the change of root volumes disk offerings during volume migration between storage. Therefore.  we perform all at once.  the migration of storage and the disk offering to reflect the new place.","date":"2018-05-08 20:40:58","modifiedFileCount":"2","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-05-17 03:59:17","codes":[{"authorDate":"2018-05-17 03:59:17","commitOrder":3,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n    }\n","date":"2018-05-17 03:59:17","endLine":584,"groupId":"4556","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dd/cf4758eee3167233c8c68a7d4ff6c0f21b3214.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"},{"authorDate":"2018-05-17 03:59:17","commitOrder":3,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVoMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n        inOrder.verify(newDiskOfferingMock).getTags();\n\n        inOrder.verify(volumeVoMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","date":"2018-05-17 03:59:17","endLine":612,"groupId":"4556","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dd/cf4758eee3167233c8c68a7d4ff6c0f21b3214.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVOMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVOMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVOMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n        inOrder.verify(newDiskOfferingMock).getTags();\n\n        inOrder.verify(volumeVOMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":587,"status":"M"}],"commitId":"15eddf3dd664d6c3e722dccaa03fb5adeaf85d49","commitMessage":"@@@Merge forward branch '4.11' PR #2629\n\nFix primary storage count when deleting volumes (#2629)\n","date":"2018-05-17 03:59:17","modifiedFileCount":"7","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-07-21 18:01:24","codes":[{"authorDate":"2018-05-17 03:59:17","commitOrder":4,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n    }\n","date":"2018-05-17 03:59:17","endLine":584,"groupId":"4556","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/dd/cf4758eee3167233c8c68a7d4ff6c0f21b3214.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"N"},{"authorDate":"2018-07-21 18:01:24","commitOrder":4,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVoMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        inOrder.verify(volumeVoMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","date":"2018-07-21 18:01:24","endLine":619,"groupId":"4556","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/89/0b1eab526d268f35a0ba9d49ad59cb3e76bd5b.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVoMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n        inOrder.verify(newDiskOfferingMock).getTags();\n\n        inOrder.verify(volumeVoMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"M"}],"commitId":"756a7e89cbcec7a1aa98b3f470cbdf8181af75ad","commitMessage":"@@@Fix limitation on tag matching in 'migrateVolume' with disk offering replacement (#2636)\n\n* Fix limitation on tag matching in 'migrateVolume' with disk offering replacement\n\nWhen the feature to enable disk offering replacement during volume migration was created.  we were forcing the tags of the new disk offering to exact the same as the tags of the target storage poll. However.  that is not how ACS manages volumes allocation. This change modifies this validation to make it consistent with volume allocation.\n\n* Address Nitin's suggestions\n\n* Apply Daan's suggestion regarding \"doesTargetStorageSupportDiskOffering\" method\n\n* fix problem\n","date":"2018-07-21 18:01:24","modifiedFileCount":"3","status":"M","submitter":"Rafael Weing?rtner"},{"authorTime":"2018-09-22 23:20:48","codes":[{"authorDate":"2018-09-22 23:20:48","commitOrder":5,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.isUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n    }\n","date":"2018-09-22 23:20:48","endLine":592,"groupId":"4556","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/727e42b922b63ca1769f7eff7e0c4ed1a02d7d.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"},{"authorDate":"2018-09-22 23:20:48","commitOrder":5,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.isUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVoMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).isUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        inOrder.verify(volumeVoMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","date":"2018-09-22 23:20:48","endLine":619,"groupId":"4556","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/af/727e42b922b63ca1769f7eff7e0c4ed1a02d7d.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.getUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVoMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).getUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        inOrder.verify(volumeVoMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"M"}],"commitId":"d53fc944857eb6e6d9542eef915f14066dab5861","commitMessage":"@@@CLOUDSTACK-10365: Change the \"getXXX\" boolean method names to \"isXXX\" (#2847)\n\nThese boolean-return methods are named as \"getXXX\".\nOther boolean-return methods are named as \"isXXX\".\nConsidering there methods will return boolean values.  it should be more clear and consistent to rename them as \"isXXX\".\n(rebase #2602 and #2816)\n","date":"2018-09-22 23:20:48","modifiedFileCount":"77","status":"M","submitter":"Kui LIU"},{"authorTime":"2020-02-12 15:28:25","codes":[{"authorDate":"2020-02-12 15:28:25","commitOrder":6,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.lenient().when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.isUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.lenient().when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n    }\n","date":"2020-02-12 15:28:25","endLine":603,"groupId":"101167","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/15/2cbb091516bf618cb440e45fb07a84ca95de75.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestTagsDoNotMatch() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.isUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(null).when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"},{"authorDate":"2020-02-12 15:28:25","commitOrder":6,"curCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.lenient().when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.isUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.lenient().when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVoMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).isUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        inOrder.verify(volumeVoMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","date":"2020-02-12 15:28:25","endLine":630,"groupId":"101167","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cloudstack-10-0.7/blobInfo/CC_OUT/blobs/15/2cbb091516bf618cb440e45fb07a84ca95de75.src","preCode":"    public void validateConditionsToReplaceDiskOfferingOfVolumeTestEverythingWorking() {\n        Mockito.when(volumeVoMock.getVolumeType()).thenReturn(Type.DATADISK);\n\n        Mockito.when(newDiskOfferingMock.isUseLocalStorage()).thenReturn(false);\n        Mockito.when(storagePoolMock.isShared()).thenReturn(true);\n\n        Mockito.when(newDiskOfferingMock.isShared()).thenReturn(true);\n        Mockito.when(storagePoolMock.isLocal()).thenReturn(false);\n\n        Mockito.when(newDiskOfferingMock.getTags()).thenReturn(\"tag1\");\n\n        Mockito.doReturn(\"tag1\").when(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        volumeApiServiceImpl.validateConditionsToReplaceDiskOfferingOfVolume(volumeVoMock, newDiskOfferingMock, storagePoolMock);\n\n        InOrder inOrder = Mockito.inOrder(volumeVoMock, newDiskOfferingMock, storagePoolMock, volumeApiServiceImpl);\n        inOrder.verify(storagePoolMock).isShared();\n        inOrder.verify(newDiskOfferingMock).isUseLocalStorage();\n        inOrder.verify(storagePoolMock).isLocal();\n        inOrder.verify(newDiskOfferingMock, times(0)).isShared();\n        inOrder.verify(volumeApiServiceImpl).getStoragePoolTags(storagePoolMock);\n\n        inOrder.verify(volumeVoMock).getSize();\n        inOrder.verify(newDiskOfferingMock).getDiskSize();\n    }\n","realPath":"server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java","repoName":"cloudstack","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"d90341ebf149d40a4dd03897960136dc29256677","commitMessage":"@@@cloudstack: add JDK11 support (#3601)\n\nThis adds support for JDK11 in CloudStack 4.14+:\n\n- Fixes code to build against JDK11\n- Bump to Debian 9 systemvmtemplate with openjdk-11\n- Fix Travis to run smoketests against openjdk-11\n- Use maven provided jdk11 compatible mysql-connector-java\n- Remove old agent init.d scripts\n\nSigned-off-by: Rohit Yadav <rohit.yadav@shapeblue.com>","date":"2020-02-12 15:28:25","modifiedFileCount":"118","status":"M","submitter":"Rohit Yadav"}]
