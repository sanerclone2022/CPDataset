[{"authorTime":"2019-10-29 09:54:48","codes":[{"authorDate":"2019-08-12 08:48:17","commitOrder":2,"curCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    \r\n    transitionState(inflightInstant, requestedInstant, Option.empty());\n    return requestedInstant;\n  }\n","date":"2019-08-12 08:48:17","endLine":281,"groupId":"4494","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"revertCompactionInflightToRequested","params":"(HoodieInstantinflightInstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c8/6c3a111a00f22736af4ead1486cacab872d9cb.src","preCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    \r\n    transitionState(inflightInstant, requestedInstant, Option.empty());\n    return requestedInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"NB"},{"authorDate":"2019-10-29 09:54:48","commitOrder":2,"curCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    createFileInAuxiliaryFolder(commitInstant, data);\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","date":"2019-11-12 02:40:16","endLine":339,"groupId":"4494","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"transitionCleanInflightToComplete","params":"(HoodieInstantinflightInstant@Option<byte[]>data)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/41/2851df8bf7df15a5dbc163a0faf560c548040b.src","preCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    createFileInAuxiliaryFolder(commitInstant, data);\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"B"}],"commitId":"1032fc3e549aa70a8817fd4782e971de976b682a","commitMessage":"@@@[HUDI-137] Hudi cleaning state changes should be consistent with compaction actions\n\nBefore this change.  Cleaner performs cleaning of old file versions and then stores the deleted files in .clean files.\nWith this setup.  we will not be able to track file deletions if a cleaner fails after deleting files but before writing .clean metadata.\nThis is fine for regular file-system view generation but Incremental timeline syncing relies on clean/commit/compaction metadata to keep a consistent file-system view.\n\nCleaner state transitions is now similar to that of compaction.\n\n1. Requested : HoodieWriteClient.scheduleClean() selects the list of files that needs to be deleted and stores them in metadata\n2. Inflight : HoodieWriteClient marks the state to be inflight before it starts deleting\n3. Completed : HoodieWriteClient marks the state after completing the deletion according to the cleaner plan\n","date":"2019-11-12 02:40:16","modifiedFileCount":"32","status":"M","submitter":"Balaji Varadarajan"},{"authorTime":"2019-10-29 09:54:48","codes":[{"authorDate":"2019-12-04 17:02:17","commitOrder":3,"curCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    if (metaClient.getTimelineLayoutVersion().isNullVersion()) {\n      \r\n      transitionState(inflightInstant, requestedInstant, Option.empty());\n    } else {\n      deleteInflight(inflightInstant);\n    }\n    return requestedInstant;\n  }\n","date":"2019-12-16 13:26:30","endLine":314,"groupId":"4494","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"revertCompactionInflightToRequested","params":"(HoodieInstantinflightInstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/81/d042b3a4e99357182ff88fd157d9c6ed0ce387.src","preCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    \r\n    transitionState(inflightInstant, requestedInstant, Option.empty());\n    return requestedInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"},{"authorDate":"2019-10-29 09:54:48","commitOrder":3,"curCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    createFileInAuxiliaryFolder(commitInstant, data);\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","date":"2019-11-12 02:40:16","endLine":339,"groupId":"4494","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"transitionCleanInflightToComplete","params":"(HoodieInstantinflightInstant@Option<byte[]>data)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/41/2851df8bf7df15a5dbc163a0faf560c548040b.src","preCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    createFileInAuxiliaryFolder(commitInstant, data);\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"9a1f698eef1044443adadbf7a1bf7b5eb94fb84e","commitMessage":"@@@[HUDI-308] Avoid Renames for tracking state transitions of all actions on dataset\n","date":"2019-12-16 13:26:30","modifiedFileCount":"42","status":"M","submitter":"Balaji Varadarajan"},{"authorTime":"2020-01-18 02:56:35","codes":[{"authorDate":"2019-12-04 17:02:17","commitOrder":4,"curCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    if (metaClient.getTimelineLayoutVersion().isNullVersion()) {\n      \r\n      transitionState(inflightInstant, requestedInstant, Option.empty());\n    } else {\n      deleteInflight(inflightInstant);\n    }\n    return requestedInstant;\n  }\n","date":"2019-12-16 13:26:30","endLine":314,"groupId":"4494","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"revertCompactionInflightToRequested","params":"(HoodieInstantinflightInstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/81/d042b3a4e99357182ff88fd157d9c6ed0ce387.src","preCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    if (metaClient.getTimelineLayoutVersion().isNullVersion()) {\n      \r\n      transitionState(inflightInstant, requestedInstant, Option.empty());\n    } else {\n      deleteInflight(inflightInstant);\n    }\n    return requestedInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"N"},{"authorDate":"2020-01-18 02:56:35","commitOrder":4,"curCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","date":"2020-01-18 02:56:35","endLine":381,"groupId":"4494","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"transitionCleanInflightToComplete","params":"(HoodieInstantinflightInstant@Option<byte[]>data)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a7/226a7e64ee00295a66323457104f0cbf83261f.src","preCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    createFileInAuxiliaryFolder(commitInstant, data);\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"}],"commitId":"923e2b4a1ef0645596eabcd41832cdf8acba4b9a","commitMessage":"@@@[HUDI-535] Ensure Compaction Plan is always written in .aux folder to avoid 0.5.0/0.5.1 reader-writer compatibility issues (#1229)\n\n","date":"2020-01-18 02:56:35","modifiedFileCount":"7","status":"M","submitter":"Balaji Varadarajan"},{"authorTime":"2020-03-14 08:28:05","codes":[{"authorDate":"2020-03-14 08:28:05","commitOrder":5,"curCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    ValidationUtils.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    ValidationUtils.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    if (metaClient.getTimelineLayoutVersion().isNullVersion()) {\n      \r\n      transitionState(inflightInstant, requestedInstant, Option.empty());\n    } else {\n      deleteInflight(inflightInstant);\n    }\n    return requestedInstant;\n  }\n","date":"2020-03-14 08:28:05","endLine":236,"groupId":"10980","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"revertCompactionInflightToRequested","params":"(HoodieInstantinflightInstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/38/9314fc6cbc9763d794a75fcb89a2a9d988db66.src","preCode":"  public HoodieInstant revertCompactionInflightToRequested(HoodieInstant inflightInstant) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.COMPACTION_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant requestedInstant =\n        new HoodieInstant(State.REQUESTED, COMPACTION_ACTION, inflightInstant.getTimestamp());\n    if (metaClient.getTimelineLayoutVersion().isNullVersion()) {\n      \r\n      transitionState(inflightInstant, requestedInstant, Option.empty());\n    } else {\n      deleteInflight(inflightInstant);\n    }\n    return requestedInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2020-03-14 08:28:05","commitOrder":5,"curCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    ValidationUtils.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    ValidationUtils.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","date":"2020-03-14 08:28:05","endLine":292,"groupId":"10980","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"transitionCleanInflightToComplete","params":"(HoodieInstantinflightInstant@Option<byte[]>data)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/38/9314fc6cbc9763d794a75fcb89a2a9d988db66.src","preCode":"  public HoodieInstant transitionCleanInflightToComplete(HoodieInstant inflightInstant, Option<byte[]> data) {\n    Preconditions.checkArgument(inflightInstant.getAction().equals(HoodieTimeline.CLEAN_ACTION));\n    Preconditions.checkArgument(inflightInstant.isInflight());\n    HoodieInstant commitInstant = new HoodieInstant(State.COMPLETED, CLEAN_ACTION, inflightInstant.getTimestamp());\n    \r\n    transitionState(inflightInstant, commitInstant, data);\n    return commitInstant;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieActiveTimeline.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"99b7e9eb9ef8827c1e06b7e8621b6be6403b061e","commitMessage":"@@@[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java (#1350)\n\n* [HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java","date":"2020-03-14 08:28:05","modifiedFileCount":"47","status":"M","submitter":"Suneel Marthi"}]
