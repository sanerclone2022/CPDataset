[{"authorTime":"2021-01-11 13:19:52","codes":[{"authorDate":"2021-01-11 13:19:52","commitOrder":1,"curCode":"  public void testDatePartitionedTableWithAssumeDateIsFalse() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    DATE_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable.withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllPartitionPaths().size() == 0);\n  }\n","date":"2021-01-11 13:19:52","endLine":113,"groupId":"245","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatePartitionedTableWithAssumeDateIsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e4/4054f3aab36dab133ea2da33f532dff5e58622.src","preCode":"  public void testDatePartitionedTableWithAssumeDateIsFalse() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    DATE_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable.withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllPartitionPaths().size() == 0);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/metadata/TestFileSystemBackedTableMetadata.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2021-01-11 13:19:52","commitOrder":1,"curCode":"  public void testOneLevelPartitionedTable() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    ONE_LEVEL_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable.withPartitionMetaFiles(p)\n            .withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllPartitionPaths().size() == 3);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllFilesInPartition(new Path(basePath + \"/\" + ONE_LEVEL_PARTITIONS.get(0))).length == 10);\n  }\n","date":"2021-01-11 13:19:52","endLine":133,"groupId":"245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneLevelPartitionedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e4/4054f3aab36dab133ea2da33f532dff5e58622.src","preCode":"  public void testOneLevelPartitionedTable() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    ONE_LEVEL_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable.withPartitionMetaFiles(p)\n            .withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllPartitionPaths().size() == 3);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllFilesInPartition(new Path(basePath + \"/\" + ONE_LEVEL_PARTITIONS.get(0))).length == 10);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/metadata/TestFileSystemBackedTableMetadata.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"7ce3ac778eb475bf23ffa31243dc0843ec7d089a","commitMessage":"@@@[HUDI-1479] Use HoodieEngineContext to parallelize fetching of partiton paths (#2417)\n\n* [HUDI-1479] Use HoodieEngineContext to parallelize fetching of partition paths\n\n* Adding testClass for FileSystemBackedTableMetadata\n\nCo-authored-by: Nishith Agarwal <nagarwal@uber.com>","date":"2021-01-11 13:19:52","modifiedFileCount":"34","status":"B","submitter":"Udit Mehrotra"},{"authorTime":"2021-08-04 05:47:40","codes":[{"authorDate":"2021-08-04 05:47:40","commitOrder":2,"curCode":"  public void testDatePartitionedTableWithAssumeDateIsFalse() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    DATE_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable\n            .withPartitionMetaFiles(p)\n            .withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertEquals(3, fileSystemBackedTableMetadata.getAllPartitionPaths().size());\n\n    List<String> fullPartitionPaths = DATE_PARTITIONS.stream().map(p -> basePath + \"/\" + p).collect(Collectors.toList());\n    Map<String, FileStatus[]> partitionToFilesMap = fileSystemBackedTableMetadata.getAllFilesInPartitions(fullPartitionPaths);\n    for (String p : fullPartitionPaths) {\n      Assertions.assertEquals(10, partitionToFilesMap.get(p).length);\n    }\n  }\n","date":"2021-08-04 05:47:40","endLine":133,"groupId":"10869","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testDatePartitionedTableWithAssumeDateIsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9e/c793daa01279f4a8f9b02a3cce75dcae7e914a.src","preCode":"  public void testDatePartitionedTableWithAssumeDateIsFalse() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    DATE_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable.withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllPartitionPaths().size() == 0);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/metadata/TestFileSystemBackedTableMetadata.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-08-04 05:47:40","commitOrder":2,"curCode":"  public void testOneLevelPartitionedTable() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    ONE_LEVEL_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable.withPartitionMetaFiles(p)\n            .withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertEquals(3, fileSystemBackedTableMetadata.getAllPartitionPaths().size());\n    Assertions.assertEquals(10, fileSystemBackedTableMetadata.getAllFilesInPartition(new Path(basePath + \"/\" + ONE_LEVEL_PARTITIONS.get(0))).length);\n\n    List<String> fullPartitionPaths = ONE_LEVEL_PARTITIONS.stream().map(p -> basePath + \"/\" + p).collect(Collectors.toList());\n    Map<String, FileStatus[]> partitionToFilesMap = fileSystemBackedTableMetadata.getAllFilesInPartitions(fullPartitionPaths);\n    for (String p : fullPartitionPaths) {\n      Assertions.assertEquals(10, partitionToFilesMap.get(p).length);\n    }\n  }\n","date":"2021-08-04 05:47:40","endLine":159,"groupId":"10869","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOneLevelPartitionedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9e/c793daa01279f4a8f9b02a3cce75dcae7e914a.src","preCode":"  public void testOneLevelPartitionedTable() throws Exception {\n    String instant = \"100\";\n    hoodieTestTable = hoodieTestTable.addCommit(instant);\n    \r\n    ONE_LEVEL_PARTITIONS.stream().forEach(p -> {\n      try {\n        hoodieTestTable = hoodieTestTable.withPartitionMetaFiles(p)\n            .withBaseFilesInPartition(p, IntStream.range(0, 10).toArray());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    HoodieLocalEngineContext localEngineContext = new HoodieLocalEngineContext(metaClient.getHadoopConf());\n    FileSystemBackedTableMetadata fileSystemBackedTableMetadata =\n        new FileSystemBackedTableMetadata(localEngineContext, new SerializableConfiguration(metaClient.getHadoopConf()), basePath, false);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllPartitionPaths().size() == 3);\n    Assertions.assertTrue(fileSystemBackedTableMetadata.getAllFilesInPartition(new Path(basePath + \"/\" + ONE_LEVEL_PARTITIONS.get(0))).length == 10);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/metadata/TestFileSystemBackedTableMetadata.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"1ff2d3459a89e384f7f0b4805aa8fe5e6f488f46","commitMessage":"@@@[HUDI-1371] [HUDI-1893] Support metadata based listing for Spark DataSource and Spark SQL (#2893)\n\n","date":"2021-08-04 05:47:40","modifiedFileCount":"6","status":"M","submitter":"Udit Mehrotra"}]
