[{"authorTime":"2019-08-12 08:48:17","codes":[{"authorDate":"2019-08-12 08:48:17","commitOrder":1,"curCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    log.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata = AvroUtils.deserializeAvroMetadata(\n        timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n    log.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","date":"2019-08-12 08:48:17","endLine":231,"groupId":"1687","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addRestoreInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/22/cc53bbd5bd66abeeb97fb9dd148883e2ef4342.src","preCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    log.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata = AvroUtils.deserializeAvroMetadata(\n        timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n    log.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"},{"authorDate":"2019-08-12 08:48:17","commitOrder":1,"curCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    log.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata = AvroUtils.deserializeAvroMetadata(\n        timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    log.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","date":"2019-08-12 08:48:17","endLine":248,"groupId":"2034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addRollbackInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/22/cc53bbd5bd66abeeb97fb9dd148883e2ef4342.src","preCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    log.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata = AvroUtils.deserializeAvroMetadata(\n        timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    log.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"B"}],"commitId":"a4f9d7575f39bb79089714049ffea12ba5f25ec8","commitMessage":"@@@HUDI-123 Rename code packages/constants to org.apache.hudi (#830)\n\n- Rename com.uber.hoodie to org.apache.hudi\n- Flag to pass com.uber.hoodie Input formats for hoodie-sync\n- Works with HUDI demo. \n- Also tested for backwards compatibility with datasets built by com.uber.hoodie packages\n- Migration guide : https://cwiki.apache.org/confluence/display/HUDI/Migration+Guide+From+com.uber.hoodie+to+org.apache.hudi","date":"2019-08-12 08:48:17","modifiedFileCount":"0","status":"B","submitter":"Balaji Varadarajan"},{"authorTime":"2019-12-10 19:23:38","codes":[{"authorDate":"2019-12-10 19:23:38","commitOrder":2,"curCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata =\n        AvroUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n    LOG.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","date":"2019-12-10 19:23:38","endLine":235,"groupId":"1687","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addRestoreInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/31/1f1697d9e3a9e25151afade9abbbd68deb07e6.src","preCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    log.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata =\n        AvroUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n    log.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2019-12-10 19:23:38","commitOrder":2,"curCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata =\n        AvroUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","date":"2019-12-10 19:23:38","endLine":252,"groupId":"2034","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addRollbackInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/31/1f1697d9e3a9e25151afade9abbbd68deb07e6.src","preCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    log.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata =\n        AvroUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    log.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"d447e2d7518fc6ee87f1620542e45f1454a5ba0f","commitMessage":"@@@[checkstyle] Unify LOG form (#1092)\n\n","date":"2019-12-10 19:23:38","modifiedFileCount":"100","status":"M","submitter":"lamber-ken"},{"authorTime":"2020-03-30 01:58:49","codes":[{"authorDate":"2020-03-30 01:58:49","commitOrder":3,"curCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata =\n        TimelineMetadataUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n    LOG.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","date":"2020-03-30 01:58:49","endLine":236,"groupId":"1687","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addRestoreInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/00/78174718f0bccefb06d2e8ec6cfb1bb6e6a658.src","preCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata =\n        AvroUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n    LOG.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2020-03-30 01:58:49","commitOrder":3,"curCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata =\n        TimelineMetadataUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","date":"2020-03-30 01:58:49","endLine":253,"groupId":"2034","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addRollbackInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/00/78174718f0bccefb06d2e8ec6cfb1bb6e6a658.src","preCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata =\n        AvroUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"e057c27603301d8b49e9b50b78a3ffce247b1059","commitMessage":"@@@[HUDI-744] Restructure hudi-common and clean up files under util packages (#1462)\n\n - Brings more order and cohesion to the classes in hudi-common\n - Utils classes related to a particular concept (avro.  timeline. ...) are placed near to the package\n - common.fs package now contains all the filesystem level classes including wrapper filesystem\n - bloom.filter package renamed to just bloom\n - config package contains classes that help store properties\n - common.fs.inline package contains all the inline filesystem classes/impl\n - common.table.timeline now consolidates all timeline related classes\n - common.table.view consolidates all the classes related to filesystem view metadata\n - common.table.timeline.versioning contains all classes related to versioning of timeline\n - Fix few unit tests as a result\n - Moved the test packages around to match the source file move\n - Rename AvroUtils to TimelineMetadataUtils & minor fixes/typos","date":"2020-03-30 01:58:49","modifiedFileCount":"206","status":"M","submitter":"vinoth chandar"},{"authorTime":"2020-03-30 01:58:49","codes":[{"authorDate":"2020-09-30 08:04:25","commitOrder":4,"curCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata =\n        TimelineMetadataUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n\n    if (metadata.getRestoreInstantInfo() != null) {\n      Set<String> rolledbackInstants = metadata.getRestoreInstantInfo().stream()\n          .filter(instantInfo -> HoodieTimeline.REPLACE_COMMIT_ACTION.equals(instantInfo.getAction()))\n          .map(instantInfo -> instantInfo.getCommitTime()).collect(Collectors.toSet());\n      removeReplacedFileIdsAtInstants(rolledbackInstants);\n    }\n    LOG.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","date":"2020-09-30 08:04:25","endLine":254,"groupId":"101007","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"addRestoreInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9f/9fd1f7ce601068e80147cfc6e33b39700c73d3.src","preCode":"  private void addRestoreInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing restore instant (\" + instant + \")\");\n    HoodieRestoreMetadata metadata =\n        TimelineMetadataUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRestoreMetadata.class);\n\n    Map<String, List<Pair<String, String>>> partitionFiles =\n        metadata.getHoodieRestoreMetadata().entrySet().stream().flatMap(entry -> {\n          return entry.getValue().stream().flatMap(e -> e.getPartitionMetadata().entrySet().stream().flatMap(e2 -> {\n            return e2.getValue().getSuccessDeleteFiles().stream().map(x -> Pair.of(e2.getKey(), x));\n          }));\n        }).collect(Collectors.groupingBy(Pair::getKey));\n    partitionFiles.entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(),\n          e.getValue().stream().map(x -> x.getValue()).collect(Collectors.toList()));\n    });\n    LOG.info(\"Done Syncing restore instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"},{"authorDate":"2020-03-30 01:58:49","commitOrder":4,"curCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata =\n        TimelineMetadataUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","date":"2020-03-30 01:58:49","endLine":253,"groupId":"101007","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addRollbackInstant","params":"(HoodieTimelinetimeline@HoodieInstantinstant)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/00/78174718f0bccefb06d2e8ec6cfb1bb6e6a658.src","preCode":"  private void addRollbackInstant(HoodieTimeline timeline, HoodieInstant instant) throws IOException {\n    LOG.info(\"Syncing rollback instant (\" + instant + \")\");\n    HoodieRollbackMetadata metadata =\n        TimelineMetadataUtils.deserializeAvroMetadata(timeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n\n    metadata.getPartitionMetadata().entrySet().stream().forEach(e -> {\n      removeFileSlicesForPartition(timeline, instant, e.getKey(), e.getValue().getSuccessDeleteFiles());\n    });\n    LOG.info(\"Done Syncing rollback instant (\" + instant + \")\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/IncrementalTimelineSyncFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"}],"commitId":"a99e93bed542c8ae30a641d1df616cc2cd5798e1","commitMessage":"@@@[HUDI-1072] Introduce REPLACE top level action. Implement insert_overwrite operation on top of replace action (#2048)\n\n","date":"2020-09-30 08:04:25","modifiedFileCount":"45","status":"M","submitter":"satishkotha"}]
