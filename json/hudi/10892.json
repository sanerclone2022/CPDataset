[{"authorTime":"2019-10-23 11:19:11","codes":[{"authorDate":"2019-10-23 11:19:11","commitOrder":1,"curCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = Sets.newHashSet();\n      fileGroup.getAllDataFiles().forEach(dataFile -> {\n        assertEquals(\"All same fileId should be grouped\", fileId, dataFile.getFileId());\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","date":"2019-10-23 11:19:11","endLine":781,"groupId":"3296","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamEveryVersionInPartition","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/eb/1a15e891e7e37036ad58132cc29091576c7cff.src","preCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = Sets.newHashSet();\n      fileGroup.getAllDataFiles().forEach(dataFile -> {\n        assertEquals(\"All same fileId should be grouped\", fileId, dataFile.getFileId());\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":719,"status":"B"},{"authorDate":"2019-10-23 11:19:11","commitOrder":1,"curCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieDataFile> dataFiles =\n        roView.getLatestDataFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = Sets.newHashSet();\n      for (HoodieDataFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","date":"2019-10-23 11:19:11","endLine":912,"groupId":"425","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamLatestVersionsBefore","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/eb/1a15e891e7e37036ad58132cc29091576c7cff.src","preCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieDataFile> dataFiles =\n        roView.getLatestDataFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = Sets.newHashSet();\n      for (HoodieDataFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":868,"status":"B"}],"commitId":"e4c91ed13f16e1d0d55d9d690395bb62ab2b4fa0","commitMessage":"@@@[HUDI-290] Normalize test class name of all test classes (#951)\n\n","date":"2019-10-23 11:19:11","modifiedFileCount":"1","status":"B","submitter":"vinoth chandar"},{"authorTime":"2020-01-17 15:58:47","codes":[{"authorDate":"2020-01-17 15:58:47","commitOrder":2,"curCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = Sets.newHashSet();\n      fileGroup.getAllBaseFiles().forEach(dataFile -> {\n        assertEquals(\"All same fileId should be grouped\", fileId, dataFile.getFileId());\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","date":"2020-01-17 15:58:47","endLine":769,"groupId":"3296","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamEveryVersionInPartition","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/fc/05e2f015907070d53589d8b457cafd6bdc33eb.src","preCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = Sets.newHashSet();\n      fileGroup.getAllDataFiles().forEach(dataFile -> {\n        assertEquals(\"All same fileId should be grouped\", fileId, dataFile.getFileId());\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"M"},{"authorDate":"2020-01-17 15:58:47","commitOrder":2,"curCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieBaseFile> dataFiles =\n        roView.getLatestBaseFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = Sets.newHashSet();\n      for (HoodieBaseFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","date":"2020-01-17 15:58:47","endLine":900,"groupId":"425","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamLatestVersionsBefore","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/fc/05e2f015907070d53589d8b457cafd6bdc33eb.src","preCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieDataFile> dataFiles =\n        roView.getLatestDataFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = Sets.newHashSet();\n      for (HoodieDataFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":856,"status":"M"}],"commitId":"c2c0f6b13d5b72b3098ed1b343b0a89679f854b3","commitMessage":"@@@[HUDI-509] Renaming code in sync with cWiki restructuring (#1212)\n\n - Storage Type replaced with Table Type (remaining instances)\n - View types replaced with query types;\n - ReadOptimized view referred as Snapshot Query\n - TableFileSystemView sub interfaces renamed to BaseFileOnly and Slice Views\n - HoodieDataFile renamed to HoodieBaseFile\n - Hive Sync tool will register RO tables for MOR with a `_ro` suffix\n - Datasource/Deltastreamer options renamed accordingly\n - Support fallback to old config values as well.  so migration is painless\n - Config for controlling _ro suffix addition\n - Renaming DataFile to BaseFile across DTOs.  HoodieFileSlice and AbstractTableFileSystemView\n","date":"2020-01-17 15:58:47","modifiedFileCount":"71","status":"M","submitter":"vinoth chandar"},{"authorTime":"2020-02-15 22:03:29","codes":[{"authorDate":"2020-02-15 22:03:29","commitOrder":3,"curCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = new HashSet<>();\n      fileGroup.getAllBaseFiles().forEach(dataFile -> {\n        assertEquals(\"All same fileId should be grouped\", fileId, dataFile.getFileId());\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","date":"2020-02-15 22:03:29","endLine":768,"groupId":"3296","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamEveryVersionInPartition","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/c6945070aceb8e253e77b107d9c4ee68088541.src","preCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = Sets.newHashSet();\n      fileGroup.getAllBaseFiles().forEach(dataFile -> {\n        assertEquals(\"All same fileId should be grouped\", fileId, dataFile.getFileId());\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"M"},{"authorDate":"2020-02-15 22:03:29","commitOrder":3,"curCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieBaseFile> dataFiles =\n        roView.getLatestBaseFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = new HashSet<>();\n      for (HoodieBaseFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","date":"2020-02-15 22:03:29","endLine":899,"groupId":"425","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamLatestVersionsBefore","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/c6945070aceb8e253e77b107d9c4ee68088541.src","preCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieBaseFile> dataFiles =\n        roView.getLatestBaseFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = Sets.newHashSet();\n      for (HoodieBaseFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":855,"status":"M"}],"commitId":"24e73816b2b50af518576907379bf9202d6b8dd2","commitMessage":"@@@[MINOR] Code Cleanup.  remove redundant code (#1337)\n\n","date":"2020-02-15 22:03:29","modifiedFileCount":"18","status":"M","submitter":"Suneel Marthi"},{"authorTime":"2020-02-15 22:03:29","codes":[{"authorDate":"2020-04-22 14:10:25","commitOrder":4,"curCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = new HashSet<>();\n      fileGroup.getAllBaseFiles().forEach(dataFile -> {\n        assertEquals(fileId, dataFile.getFileId(), \"All same fileId should be grouped\");\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","date":"2020-04-22 14:10:25","endLine":762,"groupId":"10892","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStreamEveryVersionInPartition","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/15/ce7ffd9518b5ea5f52e7d4896d59b041851317.src","preCode":"  protected void testStreamEveryVersionInPartition(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String fullPartitionPath = basePath + \"/2016/05/01/\";\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieFileGroup> fileGroups = fsView.getAllFileGroups(\"2016/05/01\").collect(Collectors.toList());\n    assertEquals(3, fileGroups.size());\n\n    for (HoodieFileGroup fileGroup : fileGroups) {\n      String fileId = fileGroup.getFileGroupId().getFileId();\n      Set<String> filenames = new HashSet<>();\n      fileGroup.getAllBaseFiles().forEach(dataFile -> {\n        assertEquals(\"All same fileId should be grouped\", fileId, dataFile.getFileId());\n        filenames.add(dataFile.getFileName());\n      });\n      Set<String> expFileNames = new HashSet<>();\n      if (fileId.equals(fileId1)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1));\n        assertEquals(expFileNames, filenames);\n      } else if (fileId.equals(fileId2)) {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2));\n          expFileNames.add(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2));\n        assertEquals(expFileNames, filenames);\n      } else {\n        if (!isLatestFileSliceOnly) {\n          expFileNames.add(FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3));\n        }\n        expFileNames.add(FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3));\n        assertEquals(expFileNames, filenames);\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":700,"status":"M"},{"authorDate":"2020-02-15 22:03:29","commitOrder":4,"curCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieBaseFile> dataFiles =\n        roView.getLatestBaseFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = new HashSet<>();\n      for (HoodieBaseFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","date":"2020-02-15 22:03:29","endLine":899,"groupId":"10892","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStreamLatestVersionsBefore","params":"(booleanisLatestFileSliceOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/c6945070aceb8e253e77b107d9c4ee68088541.src","preCode":"  protected void testStreamLatestVersionsBefore(boolean isLatestFileSliceOnly) throws IOException {\n    \r\n    String partitionPath = \"2016/05/01/\";\n    String fullPartitionPath = basePath + \"/\" + partitionPath;\n    new File(fullPartitionPath).mkdirs();\n    String commitTime1 = \"1\";\n    String commitTime2 = \"2\";\n    String commitTime3 = \"3\";\n    String commitTime4 = \"4\";\n    String fileId1 = UUID.randomUUID().toString();\n    String fileId2 = UUID.randomUUID().toString();\n    String fileId3 = UUID.randomUUID().toString();\n\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId1)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId2)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime3, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n    new File(fullPartitionPath + FSUtils.makeDataFileName(commitTime4, TEST_WRITE_TOKEN, fileId3)).createNewFile();\n\n    new File(basePath + \"/.hoodie/\" + commitTime1 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime2 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime3 + \".commit\").createNewFile();\n    new File(basePath + \"/.hoodie/\" + commitTime4 + \".commit\").createNewFile();\n\n    \r\n    FileStatus[] statuses = metaClient.getFs().listStatus(new Path(fullPartitionPath));\n    assertEquals(7, statuses.length);\n\n    refreshFsView();\n    List<HoodieBaseFile> dataFiles =\n        roView.getLatestBaseFilesBeforeOrOn(partitionPath, commitTime2).collect(Collectors.toList());\n    if (!isLatestFileSliceOnly) {\n      assertEquals(2, dataFiles.size());\n      Set<String> filenames = new HashSet<>();\n      for (HoodieBaseFile status : dataFiles) {\n        filenames.add(status.getFileName());\n      }\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime1, TEST_WRITE_TOKEN, fileId1)));\n      assertTrue(filenames.contains(FSUtils.makeDataFileName(commitTime2, TEST_WRITE_TOKEN, fileId2)));\n    } else {\n      assertEquals(0, dataFiles.size());\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":855,"status":"N"}],"commitId":"6e15eebd81da41b1076179a8ddcedcf07d1c9043","commitMessage":"@@@[HUDI-809] Migrate CommonTestHarness to JUnit 5 (#1530)\n\n","date":"2020-04-22 14:10:25","modifiedFileCount":"12","status":"M","submitter":"Raymond Xu"}]
