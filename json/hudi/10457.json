[{"authorTime":"2021-06-15 23:18:38","codes":[{"authorDate":"2021-06-17 19:10:34","commitOrder":2,"curCode":"  public static Option<HoodieCommitMetadata> getCommitMetadataSafely(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return Option.of(HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class));\n    } catch (IOException e) {\n      \r\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      return Option.empty();\n    }\n  }\n","date":"2021-06-17 19:10:34","endLine":156,"groupId":"5000","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommitMetadataSafely","params":"(StringtableName@PathbasePath@HoodieInstantinstant@HoodieTimelinetimeline)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/36/79c8a6602df7531d0cbd1a79e623b2de343bb1.src","preCode":"  public static Option<HoodieCommitMetadata> getCommitMetadataSafely(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return Option.of(HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class));\n    } catch (IOException e) {\n      \r\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      return Option.empty();\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/partitioner/profile/WriteProfiles.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2021-06-15 23:18:38","commitOrder":2,"curCode":"  public static HoodieCommitMetadata getCommitMetadata(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class);\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","date":"2021-06-15 23:18:38","endLine":154,"groupId":"2922","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCommitMetadata","params":"(StringtableName@PathbasePath@HoodieInstantinstant@HoodieTimelinetimeline)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9a/8b7d0024c5efa04767db7fdb0fc04251db6e22.src","preCode":"  public static HoodieCommitMetadata getCommitMetadata(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class);\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/partitioner/profile/WriteProfiles.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"NB"}],"commitId":"6763b45dd4be89a62f57623f60798d1f751abca4","commitMessage":"@@@[HUDI-2030] Add metadata cache to WriteProfile to reduce IO (#3090)\n\nKeeps same number of instant metadata cache and refresh the cache on new\ncommits.","date":"2021-06-17 19:10:34","modifiedFileCount":"3","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-06-15 23:18:38","codes":[{"authorDate":"2021-06-25 08:54:59","commitOrder":3,"curCode":"  public static Option<HoodieCommitMetadata> getCommitMetadataSafely(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    try {\n      byte[] data = timeline.getInstantDetails(instant).get();\n      return Option.of(HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class));\n    } catch (FileNotFoundException fe) {\n      \r\n      LOG.warn(\"Instant {} was deleted by the cleaner, ignore\", instant.getTimestamp());\n      return Option.empty();\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","date":"2021-06-25 08:54:59","endLine":165,"groupId":"4700","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommitMetadataSafely","params":"(StringtableName@PathbasePath@HoodieInstantinstant@HoodieTimelinetimeline)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d6/2b2086a4be7340f1a4e54a6fc0442760e108c0.src","preCode":"  public static Option<HoodieCommitMetadata> getCommitMetadataSafely(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return Option.of(HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class));\n    } catch (IOException e) {\n      \r\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      return Option.empty();\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/partitioner/profile/WriteProfiles.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2021-06-15 23:18:38","commitOrder":3,"curCode":"  public static HoodieCommitMetadata getCommitMetadata(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class);\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","date":"2021-06-15 23:18:38","endLine":154,"groupId":"2922","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCommitMetadata","params":"(StringtableName@PathbasePath@HoodieInstantinstant@HoodieTimelinetimeline)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9a/8b7d0024c5efa04767db7fdb0fc04251db6e22.src","preCode":"  public static HoodieCommitMetadata getCommitMetadata(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class);\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/partitioner/profile/WriteProfiles.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"}],"commitId":"218f2a6df8a41279d904a76b594d22f4d66d17c2","commitMessage":"@@@[HUDI-2062] Catch FileNotFoundException in WriteProfiles #getCommitMetadata Safely (#3138)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-06-25 08:54:59","modifiedFileCount":"1","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-06-15 23:18:38","codes":[{"authorDate":"2021-06-29 22:43:47","commitOrder":4,"curCode":"  public static Option<HoodieCommitMetadata> getCommitMetadataSafely(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    try {\n      byte[] data = timeline.getInstantDetails(instant).get();\n      return Option.of(HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class));\n    } catch (FileNotFoundException fe) {\n      \r\n      LOG.warn(\"Instant {} was deleted by the cleaner, ignore\", instant.getTimestamp());\n      return Option.empty();\n    } catch (Throwable throwable) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      return Option.empty();\n    }\n  }\n","date":"2021-06-29 22:43:47","endLine":165,"groupId":"10457","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommitMetadataSafely","params":"(StringtableName@PathbasePath@HoodieInstantinstant@HoodieTimelinetimeline)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/09/3cef5be2990d1578bf48b9be232bf4557f0f5b.src","preCode":"  public static Option<HoodieCommitMetadata> getCommitMetadataSafely(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    try {\n      byte[] data = timeline.getInstantDetails(instant).get();\n      return Option.of(HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class));\n    } catch (FileNotFoundException fe) {\n      \r\n      LOG.warn(\"Instant {} was deleted by the cleaner, ignore\", instant.getTimestamp());\n      return Option.empty();\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/partitioner/profile/WriteProfiles.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2021-06-15 23:18:38","commitOrder":4,"curCode":"  public static HoodieCommitMetadata getCommitMetadata(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class);\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","date":"2021-06-15 23:18:38","endLine":154,"groupId":"10457","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCommitMetadata","params":"(StringtableName@PathbasePath@HoodieInstantinstant@HoodieTimelinetimeline)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9a/8b7d0024c5efa04767db7fdb0fc04251db6e22.src","preCode":"  public static HoodieCommitMetadata getCommitMetadata(\n      String tableName,\n      Path basePath,\n      HoodieInstant instant,\n      HoodieTimeline timeline) {\n    byte[] data = timeline.getInstantDetails(instant).get();\n    try {\n      return HoodieCommitMetadata.fromBytes(data, HoodieCommitMetadata.class);\n    } catch (IOException e) {\n      LOG.error(\"Get write metadata for table {} with instant {} and path: {} error\",\n          tableName, instant.getTimestamp(), basePath);\n      throw new HoodieException(e);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/partitioner/profile/WriteProfiles.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"}],"commitId":"5a7d1b3d6cb42b1763654e307625e2ae7b799adc","commitMessage":"@@@[HUDI-2097] Fix Flink unable to read commit metadata error (#3180)\n\n","date":"2021-06-29 22:43:47","modifiedFileCount":"1","status":"M","submitter":"swuferhong"}]
