[{"authorTime":"2021-06-17 19:18:21","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":2,"curCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2020-08-06 12:34:55","endLine":134,"groupId":"3665","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"NB"},{"authorDate":"2021-06-17 19:18:21","commitOrder":2,"curCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.updateHiveSQL(\"create database if not exists \" + cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2021-06-17 19:18:21","endLine":172,"groupId":"3842","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat@booleanreadAsOptimized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0d/be97f9b86838b497eaa0e27910ed169c3e528d.src","preCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.updateHiveSQL(\"create database if not exists \" + cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"ad53cf450ef01806ff8b2cfe8ff76fa350a7b4c5","commitMessage":"@@@[HUDI-1879] Fix RO Tables Returning Snapshot Result (#2925)\n\n","date":"2021-06-17 19:18:21","modifiedFileCount":"4","status":"M","submitter":"pengzhiwei"},{"authorTime":"2021-06-25 11:26:26","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":3,"curCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2020-08-06 12:34:55","endLine":134,"groupId":"3665","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2021-06-25 11:26:26","commitOrder":3,"curCode":"  protected void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.updateHiveSQL(\"create database if not exists \" + cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2021-06-25 11:26:26","endLine":172,"groupId":"3842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat@booleanreadAsOptimized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/72/64c8dffea9d2bfb48e9525aa5e05c51a7d8c6a.src","preCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.updateHiveSQL(\"create database if not exists \" + cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"0fb8556b0d9274aef650a46bb82a8cf495d4450b","commitMessage":"@@@Add ability to provide multi-region (global) data consistency across HMS in different regions (#2542)\n\n[global-hive-sync-tool] Add a global hive sync tool to sync hudi table across clusters. Add a way to rollback the replicated time stamp if we fail to sync or if we partly sync\n\nCo-authored-by: Jagmeet Bali <jsbali@uber.com>","date":"2021-06-25 11:26:26","modifiedFileCount":"14","status":"M","submitter":"s-sanjay"},{"authorTime":"2021-07-13 22:37:20","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":4,"curCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2020-08-06 12:34:55","endLine":134,"groupId":"3665","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2021-07-13 22:37:20","commitOrder":4,"curCode":"  protected void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.updateHiveSQL(\"create database if not exists \" + cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n\n    \r\n    \r\n    \r\n    \r\n    if (hoodieHiveClient.isBootstrap()\n            && hoodieHiveClient.getTableType() == HoodieTableType.MERGE_ON_READ\n            && !readAsOptimized) {\n      cfg.syncAsSparkDataSourceTable = false;\n    }\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2021-07-13 22:37:20","endLine":191,"groupId":"3512","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat@booleanreadAsOptimized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/efabea8fe24666b4c11862b3aed665af4b6c1c.src","preCode":"  protected void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.updateHiveSQL(\"create database if not exists \" + cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"f0a2f378ea57b577ef2275dbaf42cd960df9cfd5","commitMessage":"@@@Merge pull request #3120 from pengzhiwei2018/dev_metasync\n\n[HUDI-2045] Support Read Hoodie As DataSource Table For Flink And DeltaStreamer","date":"2021-07-13 22:37:20","modifiedFileCount":"6","status":"M","submitter":"pengzhiwei"},{"authorTime":"2021-07-24 00:03:15","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":5,"curCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2020-08-06 12:34:55","endLine":134,"groupId":"3665","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2021-07-24 00:03:15","commitOrder":5,"curCode":"  protected void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.createDatabase(cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n\n    \r\n    \r\n    \r\n    \r\n    if (hoodieHiveClient.isBootstrap()\n            && hoodieHiveClient.getTableType() == HoodieTableType.MERGE_ON_READ\n            && !readAsOptimized) {\n      cfg.syncAsSparkDataSourceTable = false;\n    }\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2021-07-24 00:03:15","endLine":196,"groupId":"3512","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat@booleanreadAsOptimized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/71/f0b994e4ae9ab904b6fa7e90b1099a9fa4cd0b.src","preCode":"  protected void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.updateHiveSQL(\"create database if not exists \" + cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n\n    \r\n    \r\n    \r\n    \r\n    if (hoodieHiveClient.isBootstrap()\n            && hoodieHiveClient.getTableType() == HoodieTableType.MERGE_ON_READ\n            && !readAsOptimized) {\n      cfg.syncAsSparkDataSourceTable = false;\n    }\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"66207ed91a75ce8e91ccc0c417dc0d310dc36a5c","commitMessage":"@@@[HUDI-1848] Adding support for HMS for running DDL queries in hive-sy? (#2879)\n\n* [HUDI-1848] Adding support for HMS for running DDL queries in hive-sync-tool\n\n* [HUDI-1848] Fixing test cases\n\n* [HUDI-1848] CR changes\n\n* [HUDI-1848] Fix checkstyle violations\n\n* [HUDI-1848] Fixed a bug when metastore api fails for complex schemas with multiple levels.\n\n* [HUDI-1848] Adding the complex schema and resolving merge conflicts\n\n* [HUDI-1848] Adding some more javadocs\n\n* [HUDI-1848] Added javadocs for DDLExecutor impls\n\n* [HUDI-1848] Fixed style issue","date":"2021-07-24 00:03:15","modifiedFileCount":"9","status":"M","submitter":"jsbali"},{"authorTime":"2021-07-28 19:40:16","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":6,"curCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2020-08-06 12:34:55","endLine":134,"groupId":"12317","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieDLAClient.getBasePath()\n        + \" of type \" + hoodieDLAClient.getTableType());\n    \r\n    boolean tableExists = hoodieDLAClient.doesTableExist(tableName);\n    \r\n    MessageType schema = hoodieDLAClient.getDataSchema();\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    \r\n\r\n\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieDLAClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n\n    hoodieDLAClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2021-07-28 19:40:16","commitOrder":6,"curCode":"  protected void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n          hoodieHiveClient.createDatabase(cfg.databaseName);\n        }\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n\n    \r\n    \r\n    \r\n    \r\n    if (hoodieHiveClient.isBootstrap()\n            && hoodieHiveClient.getTableType() == HoodieTableType.MERGE_ON_READ\n            && !readAsOptimized) {\n      cfg.syncAsSparkDataSourceTable = false;\n    }\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","date":"2021-07-28 19:40:16","endLine":198,"groupId":"12317","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"syncHoodieTable","params":"(StringtableName@booleanuseRealtimeInputFormat@booleanreadAsOptimized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4f/fb52eaa211e86c798171a960179aabda6b12ef.src","preCode":"  protected void syncHoodieTable(String tableName, boolean useRealtimeInputFormat,\n                               boolean readAsOptimized) {\n    LOG.info(\"Trying to sync hoodie table \" + tableName + \" with base path \" + hoodieHiveClient.getBasePath()\n        + \" of type \" + hoodieHiveClient.getTableType());\n\n    \r\n    if (cfg.autoCreateDatabase) {\n      try {\n        hoodieHiveClient.createDatabase(cfg.databaseName);\n      } catch (Exception e) {\n        \r\n        LOG.warn(\"Unable to create database\", e);\n      }\n    } else {\n      if (!hoodieHiveClient.doesDataBaseExist(cfg.databaseName)) {\n        throw new HoodieHiveSyncException(\"hive database does not exist \" + cfg.databaseName);\n      }\n    }\n\n    \r\n    boolean tableExists = hoodieHiveClient.doesTableExist(tableName);\n\n    \r\n    MessageType schema = hoodieHiveClient.getDataSchema();\n\n    \r\n    \r\n    \r\n    \r\n    if (hoodieHiveClient.isBootstrap()\n            && hoodieHiveClient.getTableType() == HoodieTableType.MERGE_ON_READ\n            && !readAsOptimized) {\n      cfg.syncAsSparkDataSourceTable = false;\n    }\n    \r\n    syncSchema(tableName, tableExists, useRealtimeInputFormat, readAsOptimized, schema);\n\n    LOG.info(\"Schema sync complete. Syncing partitions for \" + tableName);\n    \r\n    Option<String> lastCommitTimeSynced = Option.empty();\n    if (tableExists) {\n      lastCommitTimeSynced = hoodieHiveClient.getLastCommitTimeSynced(tableName);\n    }\n    LOG.info(\"Last commit time synced was found to be \" + lastCommitTimeSynced.orElse(\"null\"));\n    List<String> writtenPartitionsSince = hoodieHiveClient.getPartitionsWrittenToSince(lastCommitTimeSynced);\n    LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n\n    \r\n    syncPartitions(tableName, writtenPartitionsSince);\n    hoodieHiveClient.updateLastCommitTimeSynced(tableName);\n    LOG.info(\"Sync complete for \" + tableName);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"eedfadeb46d5538bc7efb2c455469f1b42e9385e","commitMessage":"@@@[HUDI-2244] Fix database alreadyExists exception while hive sync (#3361)\n\n","date":"2021-07-28 19:40:16","modifiedFileCount":"4","status":"M","submitter":"swuferhong"}]
