[{"authorTime":"2020-11-06 00:49:58","codes":[{"authorDate":"2021-08-05 07:08:50","commitOrder":2,"curCode":"  protected HoodieInstant createRequestedReplaceInstant(HoodieTableMetaClient metaClient, String clusterTime, List<FileSlice>[] fileSlices) throws IOException {\n    HoodieClusteringPlan clusteringPlan =\n        ClusteringUtils.createClusteringPlan(CLUSTERING_EXECUTION_STRATEGY_CLASS.defaultValue(), STRATEGY_PARAMS, fileSlices, Collections.emptyMap());\n\n    HoodieInstant clusteringInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, clusterTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setClusteringPlan(clusteringPlan).setOperationType(WriteOperationType.CLUSTER.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(clusteringInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return clusteringInstant;\n  }\n","date":"2021-08-05 07:08:50","endLine":2330,"groupId":"1354","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createRequestedReplaceInstant","params":"(HoodieTableMetaClientmetaClient@StringclusterTime@List<FileSlice>[]fileSlices)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a5/3b83e43f86a709c7486a18b4302da4325e3663.src","preCode":"  protected HoodieInstant createRequestedReplaceInstant(HoodieTableMetaClient metaClient, String clusterTime, List<FileSlice>[] fileSlices) throws IOException {\n    HoodieClusteringPlan clusteringPlan =\n        ClusteringUtils.createClusteringPlan(CLUSTERING_EXECUTION_STRATEGY_CLASS.defaultValue(), STRATEGY_PARAMS, fileSlices, Collections.emptyMap());\n\n    HoodieInstant clusteringInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, clusterTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setClusteringPlan(clusteringPlan).setOperationType(WriteOperationType.CLUSTER.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(clusteringInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return clusteringInstant;\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/functional/TestHoodieClientOnCopyOnWriteStorage.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":2321,"status":"B"},{"authorDate":"2020-11-06 00:49:58","commitOrder":2,"curCode":"  private HoodieInstant createRequestedReplaceInstantNotClustering(String instantTime) throws IOException {\n    HoodieInstant newRequestedInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, instantTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setOperationType(WriteOperationType.UNKNOWN.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(newRequestedInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return newRequestedInstant;\n  }\n","date":"2020-11-06 00:49:58","endLine":114,"groupId":"2302","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createRequestedReplaceInstantNotClustering","params":"(StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5d/82bbce734caade41d060a4df6fd16983e11a76.src","preCode":"  private HoodieInstant createRequestedReplaceInstantNotClustering(String instantTime) throws IOException {\n    HoodieInstant newRequestedInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, instantTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setOperationType(WriteOperationType.UNKNOWN.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(newRequestedInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return newRequestedInstant;\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/util/TestClusteringUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"NB"}],"commitId":"1df5ded433eced3bbb66137bc741e616beab9a70","commitMessage":"@@@[HUDI-2273] Migrating some long running tests to functional test profile (#3398)\n\n","date":"2021-08-05 07:08:50","modifiedFileCount":"1","status":"M","submitter":"Sivabalan Narayanan"},{"authorTime":"2020-11-06 00:49:58","codes":[{"authorDate":"2021-08-20 04:36:40","commitOrder":3,"curCode":"  protected HoodieInstant createRequestedReplaceInstant(HoodieTableMetaClient metaClient, String clusterTime, List<FileSlice>[] fileSlices) throws IOException {\n    HoodieClusteringPlan clusteringPlan =\n        ClusteringUtils.createClusteringPlan(EXECUTION_STRATEGY_CLASS_NAME.defaultValue(), STRATEGY_PARAMS, fileSlices, Collections.emptyMap());\n\n    HoodieInstant clusteringInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, clusterTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setClusteringPlan(clusteringPlan).setOperationType(WriteOperationType.CLUSTER.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(clusteringInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return clusteringInstant;\n  }\n","date":"2021-08-20 04:36:40","endLine":2364,"groupId":"10887","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createRequestedReplaceInstant","params":"(HoodieTableMetaClientmetaClient@StringclusterTime@List<FileSlice>[]fileSlices)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/de/4f42177429af961e7643f0e90811049bca4f56.src","preCode":"  protected HoodieInstant createRequestedReplaceInstant(HoodieTableMetaClient metaClient, String clusterTime, List<FileSlice>[] fileSlices) throws IOException {\n    HoodieClusteringPlan clusteringPlan =\n        ClusteringUtils.createClusteringPlan(CLUSTERING_EXECUTION_STRATEGY_CLASS.defaultValue(), STRATEGY_PARAMS, fileSlices, Collections.emptyMap());\n\n    HoodieInstant clusteringInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, clusterTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setClusteringPlan(clusteringPlan).setOperationType(WriteOperationType.CLUSTER.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(clusteringInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return clusteringInstant;\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/client/functional/TestHoodieClientOnCopyOnWriteStorage.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":2355,"status":"M"},{"authorDate":"2020-11-06 00:49:58","commitOrder":3,"curCode":"  private HoodieInstant createRequestedReplaceInstantNotClustering(String instantTime) throws IOException {\n    HoodieInstant newRequestedInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, instantTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setOperationType(WriteOperationType.UNKNOWN.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(newRequestedInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return newRequestedInstant;\n  }\n","date":"2020-11-06 00:49:58","endLine":114,"groupId":"10887","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createRequestedReplaceInstantNotClustering","params":"(StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5d/82bbce734caade41d060a4df6fd16983e11a76.src","preCode":"  private HoodieInstant createRequestedReplaceInstantNotClustering(String instantTime) throws IOException {\n    HoodieInstant newRequestedInstant = new HoodieInstant(HoodieInstant.State.REQUESTED, HoodieTimeline.REPLACE_COMMIT_ACTION, instantTime);\n    HoodieRequestedReplaceMetadata requestedReplaceMetadata = HoodieRequestedReplaceMetadata.newBuilder()\n        .setOperationType(WriteOperationType.UNKNOWN.name()).build();\n    metaClient.getActiveTimeline().saveToPendingReplaceCommit(newRequestedInstant, TimelineMetadataUtils.serializeRequestedReplaceMetadata(requestedReplaceMetadata));\n    return newRequestedInstant;\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/util/TestClusteringUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"}],"commitId":"c350d05dd3301f14fa9d688746c9de2416db3f11","commitMessage":"@@@Restore 0.8.0 config keys with deprecated annotation (#3506)\n\nCo-authored-by: Sagar Sumit <sagarsumit09@gmail.com>\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2021-08-20 04:36:40","modifiedFileCount":"109","status":"M","submitter":"Udit Mehrotra"}]
