[{"authorTime":"2020-12-10 07:52:23","codes":[{"authorDate":"2020-12-10 07:52:23","commitOrder":1,"curCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","date":"2020-12-10 07:52:23","endLine":274,"groupId":"3262","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateHiveSyncConfig","params":"(DataFrameWriter<Row>writer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2e/e6cae6248b18a29f11451eaaad674d90c4a48a.src","preCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","realPath":"hudi-spark-datasource/hudi-spark/src/test/java/HoodieJavaApp.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"B"},{"authorDate":"2020-12-10 07:52:23","commitOrder":1,"curCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","date":"2020-12-10 07:52:23","endLine":147,"groupId":"3262","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateHiveSyncConfig","params":"(DataFrameWriter<Row>writer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/01/2134fdb7e6dd9fcaf9e307cdc75e53e94411a5.src","preCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","realPath":"hudi-spark-datasource/hudi-spark/src/test/java/HoodieJavaGenerateApp.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"fce1453fa608fcff5df4d5aca8c88107d4151b09","commitMessage":"@@@[HUDI-1040] Make Hudi support Spark 3 (#2208)\n\n* Fix flaky MOR unit test\n\n* Update Spark APIs to make it be compatible with both spark2 & spark3\n\n* Refactor bulk insert v2 part to make Hudi be able to compile with Spark3\n\n* Add spark3 profile to handle fasterxml & spark version\n\n* Create hudi-spark-common module & refactor hudi-spark related modules\n\nCo-authored-by: Wenning Ding <wenningd@amazon.com>","date":"2020-12-10 07:52:23","modifiedFileCount":"10","status":"B","submitter":"wenningd"},{"authorTime":"2021-07-01 05:26:30","codes":[{"authorDate":"2021-07-01 05:26:30","commitOrder":2,"curCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY().key(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY().key(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY().key(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY().key(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY().key(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY().key(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY().key(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","date":"2021-07-01 05:26:30","endLine":274,"groupId":"1594","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateHiveSyncConfig","params":"(DataFrameWriter<Row>writer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d0/86c2eb00c6bd89eac9fc1e72d3fcae81b894da.src","preCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","realPath":"hudi-spark-datasource/hudi-spark/src/test/java/HoodieJavaApp.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"},{"authorDate":"2021-07-01 05:26:30","commitOrder":2,"curCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY().key(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY().key(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY().key(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY().key(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY().key(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY().key(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY().key(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","date":"2021-07-01 05:26:30","endLine":147,"groupId":"1594","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateHiveSyncConfig","params":"(DataFrameWriter<Row>writer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e9/07cd7cc4e91a4762e27310818d24578028d511.src","preCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","realPath":"hudi-spark-datasource/hudi-spark/src/test/java/HoodieJavaGenerateApp.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"d412fb2fe642417460532044cac162bb68f4bec4","commitMessage":"@@@[HUDI-89] Add configOption & refactor all configs based on that (#2833)\n\nCo-authored-by: Wenning Ding <wenningd@amazon.com>","date":"2021-07-01 05:26:30","modifiedFileCount":"138","status":"M","submitter":"wenningd"},{"authorTime":"2021-08-04 08:50:30","codes":[{"authorDate":"2021-08-04 08:50:30","commitOrder":3,"curCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE().key(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE().key(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL().key(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER().key(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS().key(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED().key(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS().key(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD().key(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS().key(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS().key(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS().key(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","date":"2021-08-04 08:50:30","endLine":277,"groupId":"10136","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updateHiveSyncConfig","params":"(DataFrameWriter<Row>writer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/06/e745c89c6294cd46d72d5b1b6306826097f297.src","preCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY().key(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY().key(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY().key(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY().key(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY().key(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY().key(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY().key(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","realPath":"hudi-spark-datasource/hudi-spark/src/test/java/HoodieJavaApp.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2021-08-04 08:50:30","commitOrder":3,"curCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE().key(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE().key(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL().key(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER().key(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS().key(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED().key(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS().key(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD().key(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS().key(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS().key(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS().key(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","date":"2021-08-04 08:50:30","endLine":147,"groupId":"10136","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateHiveSyncConfig","params":"(DataFrameWriter<Row>writer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/43/e0b20d3505fdd84ba495b85f5fcf0bc0c539e6.src","preCode":"  private DataFrameWriter<Row> updateHiveSyncConfig(DataFrameWriter<Row> writer) {\n    if (enableHiveSync) {\n      LOG.info(\"Enabling Hive sync to \" + hiveJdbcUrl);\n      writer = writer.option(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY().key(), hiveTable)\n          .option(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY().key(), hiveDB)\n          .option(DataSourceWriteOptions.HIVE_URL_OPT_KEY().key(), hiveJdbcUrl)\n          .option(DataSourceWriteOptions.HIVE_USER_OPT_KEY().key(), hiveUser)\n          .option(DataSourceWriteOptions.HIVE_PASS_OPT_KEY().key(), hivePass)\n          .option(DataSourceWriteOptions.HIVE_SYNC_ENABLED_OPT_KEY().key(), \"true\");\n      if (nonPartitionedTable) {\n        writer = writer\n            .option(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n                NonPartitionedExtractor.class.getCanonicalName())\n            .option(DataSourceWriteOptions.PARTITIONPATH_FIELD_OPT_KEY().key(), \"\");\n      } else if (useMultiPartitionKeys) {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"year,month,day\").option(\n            DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n            MultiPartKeysValueExtractor.class.getCanonicalName());\n      } else {\n        writer = writer.option(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"dateStr\");\n      }\n    }\n    return writer;\n  }\n","realPath":"hudi-spark-datasource/hudi-spark/src/test/java/HoodieJavaGenerateApp.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"91bb0d13184c57ec08f02db3337e734bc20739c4","commitMessage":"@@@[HUDI-2255] Refactor Datasource options (#3373)\n\nCo-authored-by: Wenning Ding <wenningd@amazon.com>","date":"2021-08-04 08:50:30","modifiedFileCount":"50","status":"M","submitter":"wenningd"}]
