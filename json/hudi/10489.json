[{"authorTime":"2020-11-18 17:57:11","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":2,"curCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","date":"2020-12-20 11:25:27","endLine":217,"groupId":"1925","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"(Option<Map<String@String>>extraMetadata@HoodieWriteMetadata<List<WriteStatus>>result@List<HoodieWriteStat>writeStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/17/b02e8c15259b31f7b792f54a80aaf838ff7e92.src","preCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/commit/BaseJavaCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"},{"authorDate":"2020-11-18 17:57:11","commitOrder":2,"curCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","date":"2020-11-18 17:57:11","endLine":219,"groupId":"1925","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"commit","params":"(Option<Map<String@String>>extraMetadata@HoodieWriteMetadata<List<WriteStatus>>result@List<HoodieWriteStat>writeStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0b/98b11049a24b3056bf1f49981561179611d6fe.src","preCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/commit/BaseFlinkCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"NB"}],"commitId":"e4e2fbc3bb2c4796c6813114dd1c37ffa5a1e03a","commitMessage":"@@@[HUDI-1419] Add base implementation for hudi java client (#2286)\n\n","date":"2020-12-20 11:25:27","modifiedFileCount":"2","status":"M","submitter":"Shen Hong"},{"authorTime":"2021-03-17 07:43:53","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":3,"curCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","date":"2020-12-20 11:25:27","endLine":217,"groupId":"10489","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"(Option<Map<String@String>>extraMetadata@HoodieWriteMetadata<List<WriteStatus>>result@List<HoodieWriteStat>writeStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/17/b02e8c15259b31f7b792f54a80aaf838ff7e92.src","preCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/commit/BaseJavaCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"N"},{"authorDate":"2021-03-17 07:43:53","commitOrder":3,"curCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n    syncTableMetadata();\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","date":"2021-03-17 07:43:53","endLine":161,"groupId":"10489","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"commit","params":"(Option<Map<String@String>>extraMetadata@HoodieWriteMetadata<List<WriteStatus>>result@List<HoodieWriteStat>writeStats)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5d/f46a65bc5eeb12f6ae9c35bc31d22326921fe0.src","preCode":"  protected void commit(Option<Map<String, String>> extraMetadata, HoodieWriteMetadata<List<WriteStatus>> result, List<HoodieWriteStat> writeStats) {\n    String actionType = getCommitActionType();\n    LOG.info(\"Committing \" + instantTime + \", action Type \" + actionType);\n    result.setCommitted(true);\n    result.setWriteStats(writeStats);\n    \r\n    finalizeWrite(instantTime, writeStats, result);\n\n    try {\n      LOG.info(\"Committing \" + instantTime + \", action Type \" + getCommitActionType());\n      HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n      HoodieCommitMetadata metadata = CommitUtils.buildMetadata(writeStats, result.getPartitionToReplaceFileIds(),\n          extraMetadata, operationType, getSchemaToStoreInCommit(), getCommitActionType());\n\n      activeTimeline.saveAsComplete(new HoodieInstant(true, getCommitActionType(), instantTime),\n          Option.of(metadata.toJsonString().getBytes(StandardCharsets.UTF_8)));\n      LOG.info(\"Committed \" + instantTime);\n      result.setCommitMetadata(Option.of(metadata));\n    } catch (IOException e) {\n      throw new HoodieCommitException(\"Failed to complete commit \" + config.getBasePath() + \" at time \" + instantTime,\n          e);\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/commit/BaseFlinkCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"}],"commitId":"74241947c123c860a1b0344f25cef316440a70d6","commitMessage":"@@@[HUDI-845] Added locking capability to allow multiple writers (#2374)\n\n* [HUDI-845] Added locking capability to allow multiple writers\n1. Added LockProvider API for pluggable lock methodologies\n2. Added Resolution Strategy API to allow for pluggable conflict resolution\n3. Added TableService client API to schedule table services\n4. Added Transaction Manager for wrapping actions within transactions","date":"2021-03-17 07:43:53","modifiedFileCount":"48","status":"M","submitter":"n3nash"}]
