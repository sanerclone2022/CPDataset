[{"authorTime":"2020-11-03 05:12:51","codes":[{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  public void testTimestampBasedKeyGenerator() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 1578283932000L);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk1.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 04\", hk2.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 04\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk3 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk3.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk4 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk4.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk5 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 08\", hk5.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 08\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh:mm:ss\", \"GMT\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk6 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", hk6.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", keyGen.getPartitionPath(baseRow));\n  }\n","date":"2020-11-03 05:12:51","endLine":176,"groupId":"1293","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampBasedKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/98/a8f67d6119cc774eb6c631e5716cb83e56fe63.src","preCode":"  public void testTimestampBasedKeyGenerator() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 1578283932000L);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk1.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 04\", hk2.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 04\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk3 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk3.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk4 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk4.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk5 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 08\", hk5.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 08\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh:mm:ss\", \"GMT\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk6 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", hk6.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", keyGen.getPartitionPath(baseRow));\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"},{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  public void testScalar() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 20000L);\n\n    \r\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(hk1.getPartitionPath(), \"2024-10-04 12\");\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2024-10-04 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-02 12\", hk2.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-02 12\", keyGen.getPartitionPath(baseRow));\n\n  }\n","date":"2020-11-03 05:12:51","endLine":204,"groupId":"3567","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScalar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/98/a8f67d6119cc774eb6c631e5716cb83e56fe63.src","preCode":"  public void testScalar() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 20000L);\n\n    \r\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(hk1.getPartitionPath(), \"2024-10-04 12\");\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2024-10-04 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-02 12\", hk2.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-02 12\", keyGen.getPartitionPath(baseRow));\n\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"d160abb43740e0bcdf40458c345ecd2d74e6698c","commitMessage":"@@@[HUDI-912] Refactor and relocate KeyGenerator to support more engines (#2200)\n\n* [HUDI-912] Refactor and relocate KeyGenerator to support more engines\n\n* Rename KeyGenerators","date":"2020-11-03 05:12:51","modifiedFileCount":"1","status":"B","submitter":"wangxianghu"},{"authorTime":"2021-04-22 21:56:20","codes":[{"authorDate":"2021-04-22 21:56:20","commitOrder":2,"curCode":"  public void testTimestampBasedKeyGenerator() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 1578283932000L);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk1.getPartitionPath());\n\n    \r\n    baseRecord.put(\"createTime\", new BigDecimal(1578283932000.00001));\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey bigDecimalKey = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", bigDecimalKey.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 04\", hk2.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 04\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk3 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk3.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk4 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk4.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk5 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 08\", hk5.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 08\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh:mm:ss\", \"GMT\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk6 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", hk6.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", keyGen.getPartitionPath(baseRow));\n  }\n","date":"2021-04-22 21:56:20","endLine":184,"groupId":"1293","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampBasedKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a8/390386a5ee17b1345e15a3a2c032f263083413.src","preCode":"  public void testTimestampBasedKeyGenerator() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 1578283932000L);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk1.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 04\", hk2.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 04\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk3 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk3.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk4 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk4.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk5 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 08\", hk5.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 08\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh:mm:ss\", \"GMT\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk6 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", hk6.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", keyGen.getPartitionPath(baseRow));\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2021-04-22 21:56:20","commitOrder":2,"curCode":"  public void testScalar() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 20000L);\n\n    \r\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(hk1.getPartitionPath(), \"2024-10-04 12\");\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2024-10-04 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-02 12\", hk2.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-02 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", 18736);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd\", \"GMT\", \"DAYS\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey scalarSecondsKey = keyGen.getKey(baseRecord);\n    assertEquals(\"2021-04-19\", scalarSecondsKey.getPartitionPath());\n\n  }\n","date":"2021-04-22 21:56:20","endLine":219,"groupId":"3567","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScalar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a8/390386a5ee17b1345e15a3a2c032f263083413.src","preCode":"  public void testScalar() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 20000L);\n\n    \r\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(hk1.getPartitionPath(), \"2024-10-04 12\");\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2024-10-04 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-02 12\", hk2.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-02 12\", keyGen.getPartitionPath(baseRow));\n\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"a1e636dc6b4cd39606f7e47cbb1363f4fa9b79e4","commitMessage":"@@@[HUDI-1551] Add support for BigDecimal and Integer when partitioning based on time. (#2851)\n\nCo-authored-by: trungchanh.le <trungchanh.le@bybit.com>","date":"2021-04-22 21:56:20","modifiedFileCount":"2","status":"M","submitter":"Chanh Le"},{"authorTime":"2021-07-20 08:43:48","codes":[{"authorDate":"2021-07-20 08:43:48","commitOrder":3,"curCode":"  public void testTimestampBasedKeyGenerator() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 1578283932000L);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk1.getPartitionPath());\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n    internalRow = KeyGeneratorTestUtilities.getInternalRow(baseRow);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(internalRow, baseRow.schema()));\n\n    \r\n    baseRecord.put(\"createTime\", new BigDecimal(1578283932000.00001));\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey bigDecimalKey = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", bigDecimalKey.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 04\", hk2.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 04\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk3 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk3.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk4 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk4.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk5 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 08\", hk5.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 08\", keyGen.getPartitionPath(baseRow));\n    internalRow = KeyGeneratorTestUtilities.getInternalRow(baseRow);\n    assertEquals(\"1970-01-01 08\", keyGen.getPartitionPath(internalRow, baseRow.schema()));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh:mm:ss\", \"GMT\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk6 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", hk6.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", keyGen.getPartitionPath(baseRow));\n    internalRow = KeyGeneratorTestUtilities.getInternalRow(baseRow);\n    assertEquals(\"1970-01-01 12:00:00\", keyGen.getPartitionPath(internalRow, baseRow.schema()));\n  }\n","date":"2021-07-20 08:43:48","endLine":197,"groupId":"10705","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimestampBasedKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a3/54427662abbae8019d308e942b926c1f14b3e6.src","preCode":"  public void testTimestampBasedKeyGenerator() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 1578283932000L);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk1.getPartitionPath());\n\n    \r\n    baseRecord.put(\"createTime\", new BigDecimal(1578283932000.00001));\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey bigDecimalKey = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", bigDecimalKey.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 04\", hk2.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 04\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", \"2020-01-06 12:12:12\");\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk3 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk3.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh\", \"GMT\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk4 = keyGen.getKey(baseRecord);\n    assertEquals(\"2020-01-06 12\", hk4.getPartitionPath());\n\n    \r\n    assertEquals(\"2020-01-06 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"EPOCHMILLISECONDS\", \"yyyy-MM-dd hh\", \"GMT+8:00\", null);\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk5 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 08\", hk5.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 08\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"DATE_STRING\", \"yyyy-MM-dd hh:mm:ss\", \"GMT\", null);\n    properties.setProperty(\"hoodie.deltastreamer.keygen.timebased.input.dateformat\", \"yyyy-MM-dd hh:mm:ss\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk6 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", hk6.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-01 12:00:00\", keyGen.getPartitionPath(baseRow));\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-07-20 08:43:48","commitOrder":3,"curCode":"  public void testScalar() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 20000L);\n\n    \r\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(hk1.getPartitionPath(), \"2024-10-04 12\");\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2024-10-04 12\", keyGen.getPartitionPath(baseRow));\n    internalRow = KeyGeneratorTestUtilities.getInternalRow(baseRow);\n    assertEquals(\"2024-10-04 12\", keyGen.getPartitionPath(internalRow, baseRow.schema()));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-02 12\", hk2.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-02 12\", keyGen.getPartitionPath(baseRow));\n    internalRow = KeyGeneratorTestUtilities.getInternalRow(baseRow);\n    assertEquals(\"1970-01-02 12\", keyGen.getPartitionPath(internalRow, baseRow.schema()));\n\n    \r\n    baseRecord.put(\"createTime\", 18736);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd\", \"GMT\", \"DAYS\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey scalarSecondsKey = keyGen.getKey(baseRecord);\n    assertEquals(\"2021-04-19\", scalarSecondsKey.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2021-04-19\", keyGen.getPartitionPath(baseRow));\n  }\n","date":"2021-07-20 08:43:48","endLine":239,"groupId":"10705","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testScalar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a3/54427662abbae8019d308e942b926c1f14b3e6.src","preCode":"  public void testScalar() throws IOException {\n    \r\n    baseRecord.put(\"createTime\", 20000L);\n\n    \r\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    TimestampBasedKeyGenerator keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk1 = keyGen.getKey(baseRecord);\n    assertEquals(hk1.getPartitionPath(), \"2024-10-04 12\");\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"2024-10-04 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", null);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd hh\", \"GMT\", \"days\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey hk2 = keyGen.getKey(baseRecord);\n    assertEquals(\"1970-01-02 12\", hk2.getPartitionPath());\n\n    \r\n    baseRow = genericRecordToRow(baseRecord);\n    assertEquals(\"1970-01-02 12\", keyGen.getPartitionPath(baseRow));\n\n    \r\n    baseRecord.put(\"createTime\", 18736);\n    properties = getBaseKeyConfig(\"SCALAR\", \"yyyy-MM-dd\", \"GMT\", \"DAYS\");\n    keyGen = new TimestampBasedKeyGenerator(properties);\n    HoodieKey scalarSecondsKey = keyGen.getKey(baseRecord);\n    assertEquals(\"2021-04-19\", scalarSecondsKey.getPartitionPath());\n\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"d5026e9a24850bdcce9f6df3686bf2235d7d01c4","commitMessage":"@@@[HUDI-2161] Adding support to disable meta columns with bulk insert operation (#3247)\n\n","date":"2021-07-20 08:43:48","modifiedFileCount":"39","status":"M","submitter":"Sivabalan Narayanan"}]
