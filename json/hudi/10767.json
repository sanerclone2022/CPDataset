[{"authorTime":"2021-07-27 10:58:23","codes":[{"authorDate":"2021-07-20 08:43:48","commitOrder":2,"curCode":"  public HoodieRowCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n      String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n      StructType structType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, structType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","date":"2021-07-20 08:43:48","endLine":103,"groupId":"5689","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"HoodieRowCreateHandle","params":"(HoodieTabletable@HoodieWriteConfigwriteConfig@StringpartitionPath@StringfileId@StringinstantTime@inttaskPartitionId@longtaskId@longtaskEpochId@StructTypestructType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/aa89a9e279820af66aed8c9e025cbd91167999.src","preCode":"  public HoodieRowCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n      String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n      StructType structType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, structType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"NB"},{"authorDate":"2021-07-27 10:58:23","commitOrder":2,"curCode":"  public HoodieRowDataCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n                                   String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n                                   RowType rowType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, rowType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","date":"2021-07-27 10:58:23","endLine":103,"groupId":"5689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"HoodieRowDataCreateHandle","params":"(HoodieTabletable@HoodieWriteConfigwriteConfig@StringpartitionPath@StringfileId@StringinstantTime@inttaskPartitionId@longtaskId@longtaskEpochId@RowTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/3c/eee8ba0472be4d4dcd832fe635deb9d6925eef.src","preCode":"  public HoodieRowDataCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n                                   String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n                                   RowType rowType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, rowType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowDataCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"9d2a65a6a6ff9add81411147f1cddd03f7c08e6c","commitMessage":"@@@[HUDI-2209] Bulk insert for flink writer (#3334)\n\n","date":"2021-07-27 10:58:23","modifiedFileCount":"8","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-07-30 17:36:57","codes":[{"authorDate":"2021-07-30 17:36:57","commitOrder":3,"curCode":"  public HoodieRowCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n      String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n      StructType structType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    writeStatus.setStat(new HoodieWriteStat());\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, structType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","date":"2021-07-30 17:36:57","endLine":104,"groupId":"10767","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"HoodieRowCreateHandle","params":"(HoodieTabletable@HoodieWriteConfigwriteConfig@StringpartitionPath@StringfileId@StringinstantTime@inttaskPartitionId@longtaskId@longtaskEpochId@StructTypestructType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/85/c2f840891b67b8271d18f24108b698f9931cc3.src","preCode":"  public HoodieRowCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n      String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n      StructType structType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, structType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-07-30 17:36:57","commitOrder":3,"curCode":"  public HoodieRowDataCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n                                   String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n                                   RowType rowType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    writeStatus.setStat(new HoodieWriteStat());\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, rowType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","date":"2021-07-30 17:36:57","endLine":104,"groupId":"10767","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"HoodieRowDataCreateHandle","params":"(HoodieTabletable@HoodieWriteConfigwriteConfig@StringpartitionPath@StringfileId@StringinstantTime@inttaskPartitionId@longtaskId@longtaskEpochId@RowTyperowType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/76/fad8b1eddd1d8b36bd6a6ea817542a9b0dc52d.src","preCode":"  public HoodieRowDataCreateHandle(HoodieTable table, HoodieWriteConfig writeConfig, String partitionPath, String fileId,\n                                   String instantTime, int taskPartitionId, long taskId, long taskEpochId,\n                                   RowType rowType) {\n    this.partitionPath = partitionPath;\n    this.table = table;\n    this.writeConfig = writeConfig;\n    this.instantTime = instantTime;\n    this.taskPartitionId = taskPartitionId;\n    this.taskId = taskId;\n    this.taskEpochId = taskEpochId;\n    this.fileId = fileId;\n    this.currTimer = new HoodieTimer();\n    this.currTimer.startTimer();\n    this.fs = table.getMetaClient().getFs();\n    this.path = makeNewPath(partitionPath);\n    this.writeStatus = new HoodieInternalWriteStatus(!table.getIndex().isImplicitWithStorage(),\n        writeConfig.getWriteStatusFailureFraction());\n    writeStatus.setPartitionPath(partitionPath);\n    writeStatus.setFileId(fileId);\n    try {\n      HoodiePartitionMetadata partitionMetadata =\n          new HoodiePartitionMetadata(\n              fs,\n              instantTime,\n              new Path(writeConfig.getBasePath()),\n              FSUtils.getPartitionPath(writeConfig.getBasePath(), partitionPath));\n      partitionMetadata.trySave(taskPartitionId);\n      createMarkerFile(partitionPath, FSUtils.makeDataFileName(this.instantTime, getWriteToken(), this.fileId, table.getBaseFileExtension()));\n      this.fileWriter = createNewFileWriter(path, table, writeConfig, rowType);\n    } catch (IOException e) {\n      throw new HoodieInsertException(\"Failed to initialize file writer for path \" + path, e);\n    }\n    LOG.info(\"New handle created for partition :\" + partitionPath + \" with fileId \" + fileId);\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowDataCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"6353fc865f43854e0e185af33e8ad091c8870d78","commitMessage":"@@@[HUDI-2218] Fix missing HoodieWriteStat in HoodieCreateHandle (#3341)\n\n","date":"2021-07-30 17:36:57","modifiedFileCount":"3","status":"M","submitter":"Gary Li"}]
