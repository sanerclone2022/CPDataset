[{"authorTime":"2020-05-14 06:37:03","codes":[{"authorDate":"2020-05-14 06:37:03","commitOrder":1,"curCode":"  public void testInvalidPropsFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid props file is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid common config file path!\"));\n  }\n","date":"2020-05-14 06:37:03","endLine":82,"groupId":"1871","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidPropsFilePath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/37/db4cda6294c6106ea1850e270d1ca06f09b5ec.src","preCode":"  public void testInvalidPropsFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid props file is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid common config file path!\"));\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieMultiTableDeltaStreamer.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2020-05-14 06:37:03","commitOrder":1,"curCode":"  public void testInvalidTableConfigFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_TABLE_CONFIG_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid table config props file path is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid table config file path!\"));\n  }\n","date":"2020-05-14 06:37:03","endLine":92,"groupId":"1871","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidTableConfigFilePath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/37/db4cda6294c6106ea1850e270d1ca06f09b5ec.src","preCode":"  public void testInvalidTableConfigFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_TABLE_CONFIG_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid table config props file path is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid table config file path!\"));\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieMultiTableDeltaStreamer.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"0d4848b68b625a17d05b38864a84a6cc71189bfa","commitMessage":"@@@[HUDI-811] Restructure test packages (#1607)\n\n* restructure hudi-spark tests\n* restructure hudi-timeline-service tests\n* restructure hudi-hadoop-mr hudi-utilities tests\n* restructure hudi-hive-sync tests","date":"2020-05-14 06:37:03","modifiedFileCount":"11","status":"B","submitter":"Raymond Xu"},{"authorTime":"2021-09-13 14:34:49","codes":[{"authorDate":"2021-09-13 14:34:49","commitOrder":2,"curCode":"  public void testInvalidPropsFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true, true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid props file is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid common config file path!\"));\n  }\n","date":"2021-09-13 14:34:49","endLine":93,"groupId":"10283","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidPropsFilePath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/71/62fb7689f0340f0796e37a5b5bb1a48217f322.src","preCode":"  public void testInvalidPropsFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid props file is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid common config file path!\"));\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieMultiTableDeltaStreamer.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2021-09-13 14:34:49","commitOrder":2,"curCode":"  public void testInvalidTableConfigFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_TABLE_CONFIG_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true, true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid table config props file path is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid table config file path!\"));\n  }\n","date":"2021-09-13 14:34:49","endLine":103,"groupId":"10283","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidTableConfigFilePath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/71/62fb7689f0340f0796e37a5b5bb1a48217f322.src","preCode":"  public void testInvalidTableConfigFilePath() throws IOException {\n    HoodieMultiTableDeltaStreamer.Config cfg = TestHelpers.getConfig(PROPS_INVALID_TABLE_CONFIG_FILE, dfsBasePath + \"/config\", TestDataSource.class.getName(), true);\n    Exception e = assertThrows(IllegalArgumentException.class, () -> {\n      new HoodieMultiTableDeltaStreamer(cfg, jsc);\n    }, \"Should fail when invalid table config props file path is provided\");\n    log.debug(\"Expected error when creating table execution objects\", e);\n    assertTrue(e.getMessage().contains(\"Please provide valid table config file path!\"));\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieMultiTableDeltaStreamer.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"c79017cb74229993e8201602fb1f04d47aedd092","commitMessage":"@@@[HUDI-2397] Add  `--enable-sync` parameter (#3608)\n\n* add meta-sync config\n\n* update test\n\n* keep enableMetaSync same with enableHiveSync\n\n* Switch check logic to use `enableMetaSync`","date":"2021-09-13 14:34:49","modifiedFileCount":"2","status":"M","submitter":"K.I. (Dennis) Jung"}]
