[{"authorTime":"2019-11-02 03:40:09","codes":[{"authorDate":"2019-11-02 03:40:09","commitOrder":1,"curCode":"  public void testSimplePayload() throws Exception {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    GenericRecord record = payloadGenerator.getNewPayload();\n    \r\n    payloadGenerator.validate(record);\n  }\n","date":"2020-07-31 12:21:15","endLine":49,"groupId":"3504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/6fb160cd17f4fdef0cb4338bb80f8557ddb479.src","preCode":"  public void testSimplePayload() throws Exception {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    GenericRecord record = payloadGenerator.getNewPayload();\n    \r\n    payloadGenerator.validate(record);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2019-11-02 03:40:09","commitOrder":1,"curCode":"  public void testUpdatePayloadGenerator() throws IOException {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    List<String> insertRowKeys = new ArrayList<>();\n    List<String> updateRowKeys = new ArrayList<>();\n    List<Long> insertTimeStamps = new ArrayList<>();\n    List<Long> updateTimeStamps = new ArrayList<>();\n    List<GenericRecord> records = new ArrayList<>();\n    \r\n    IntStream.range(0, 10).forEach(a -> {\n      GenericRecord record = payloadGenerator.getNewPayload();\n      records.add(record);\n      insertRowKeys.add(record.get(\"_row_key\").toString());\n      insertTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    List<String> blacklistFields = Arrays.asList(\"_row_key\");\n    records.stream().forEach(a -> {\n      \r\n      GenericRecord record = payloadGenerator.getUpdatePayload(a, blacklistFields);\n      updateRowKeys.add(record.get(\"_row_key\").toString());\n      updateTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    \r\n    assertFalse(insertTimeStamps.containsAll(updateTimeStamps));\n  }\n","date":"2020-07-31 12:21:15","endLine":103,"groupId":"3504","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdatePayloadGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/6fb160cd17f4fdef0cb4338bb80f8557ddb479.src","preCode":"  public void testUpdatePayloadGenerator() throws IOException {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    List<String> insertRowKeys = new ArrayList<>();\n    List<String> updateRowKeys = new ArrayList<>();\n    List<Long> insertTimeStamps = new ArrayList<>();\n    List<Long> updateTimeStamps = new ArrayList<>();\n    List<GenericRecord> records = new ArrayList<>();\n    \r\n    IntStream.range(0, 10).forEach(a -> {\n      GenericRecord record = payloadGenerator.getNewPayload();\n      records.add(record);\n      insertRowKeys.add(record.get(\"_row_key\").toString());\n      insertTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    List<String> blacklistFields = Arrays.asList(\"_row_key\");\n    records.stream().forEach(a -> {\n      \r\n      GenericRecord record = payloadGenerator.getUpdatePayload(a, blacklistFields);\n      updateRowKeys.add(record.get(\"_row_key\").toString());\n      updateTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    \r\n    assertFalse(insertTimeStamps.containsAll(updateTimeStamps));\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"2fc2b01d8647aafe2862db14fc169aa40d4ae3d5","commitMessage":"@@@[HUDI-394] Provide a basic implementation of test suite\n","date":"2020-07-31 12:21:15","modifiedFileCount":"19","status":"B","submitter":"Nishith Agarwal"},{"authorTime":"2020-10-29 21:50:37","codes":[{"authorDate":"2019-11-02 03:40:09","commitOrder":2,"curCode":"  public void testSimplePayload() throws Exception {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    GenericRecord record = payloadGenerator.getNewPayload();\n    \r\n    payloadGenerator.validate(record);\n  }\n","date":"2020-07-31 12:21:15","endLine":49,"groupId":"10175","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimplePayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/6fb160cd17f4fdef0cb4338bb80f8557ddb479.src","preCode":"  public void testSimplePayload() throws Exception {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    GenericRecord record = payloadGenerator.getNewPayload();\n    \r\n    payloadGenerator.validate(record);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2020-10-29 21:50:37","commitOrder":2,"curCode":"  public void testUpdatePayloadGenerator() throws IOException {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    List<String> insertRowKeys = new ArrayList<>();\n    List<String> updateRowKeys = new ArrayList<>();\n    List<Long> insertTimeStamps = new ArrayList<>();\n    List<Long> updateTimeStamps = new ArrayList<>();\n    List<GenericRecord> records = new ArrayList<>();\n    \r\n    IntStream.range(0, 10).forEach(a -> {\n      GenericRecord record = payloadGenerator.getNewPayload();\n      records.add(record);\n      insertRowKeys.add(record.get(\"_row_key\").toString());\n      insertTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    Set<String> blacklistFields = new HashSet<>();\n    blacklistFields.add(\"_row_key\");\n    records.stream().forEach(a -> {\n      \r\n      GenericRecord record = payloadGenerator.getUpdatePayload(a, blacklistFields);\n      updateRowKeys.add(record.get(\"_row_key\").toString());\n      updateTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    \r\n    assertFalse(insertTimeStamps.containsAll(updateTimeStamps));\n  }\n","date":"2020-10-29 21:50:37","endLine":109,"groupId":"10175","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpdatePayloadGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/94/515959d01cda83fbca4851c292fb6bbc809d7b.src","preCode":"  public void testUpdatePayloadGenerator() throws IOException {\n    Schema schema = new Schema.Parser().parse(UtilitiesTestBase.Helpers\n        .readFileFromAbsolutePath(System.getProperty(\"user.dir\") + \"/..\" + SOURCE_SCHEMA_DOCKER_DEMO_RELATIVE_PATH));\n    GenericRecordFullPayloadGenerator payloadGenerator = new GenericRecordFullPayloadGenerator(schema);\n    List<String> insertRowKeys = new ArrayList<>();\n    List<String> updateRowKeys = new ArrayList<>();\n    List<Long> insertTimeStamps = new ArrayList<>();\n    List<Long> updateTimeStamps = new ArrayList<>();\n    List<GenericRecord> records = new ArrayList<>();\n    \r\n    IntStream.range(0, 10).forEach(a -> {\n      GenericRecord record = payloadGenerator.getNewPayload();\n      records.add(record);\n      insertRowKeys.add(record.get(\"_row_key\").toString());\n      insertTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    List<String> blacklistFields = Arrays.asList(\"_row_key\");\n    records.stream().forEach(a -> {\n      \r\n      GenericRecord record = payloadGenerator.getUpdatePayload(a, blacklistFields);\n      updateRowKeys.add(record.get(\"_row_key\").toString());\n      updateTimeStamps.add((Long) record.get(\"timestamp\"));\n    });\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    \r\n    assertFalse(insertTimeStamps.containsAll(updateTimeStamps));\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/generator/TestGenericRecordPayloadGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"6310a2307abba94c7ff8a770f45462deae2c312e","commitMessage":"@@@[HUDI-1351] Improvements to the hudi test suite for scalability and repeated testing. (#2197)\n\n1. Added the --clean-input and --clean-output parameters to clean the input and output directories before starting the job\n2. Added the --delete-old-input parameter to deleted older batches for data already ingested. This helps keep number of redundant files low.\n3. Added the --input-parallelism parameter to restrict the parallelism when generating input data. This helps keeping the number of generated input files low.\n4. Added an option start_offset to Dag Nodes. Without ability to specify start offsets.  data is generated into existing partitions. With start offset.  DAG can control on which partition.  the data is to be written.\n5. Fixed generation of records for correct number of partitions\n  - In the existing implementation.  the partition is chosen as a random long. This does not guarantee exact number of requested partitions to be created.\n6. Changed variable blacklistedFields to be a Set as that is faster than List for membership checks.\n7. Fixed integer division for Math.ceil. If two integers are divided.  the result is not double unless one of the integer is casted to double.","date":"2020-10-29 21:50:37","modifiedFileCount":"11","status":"M","submitter":"Prashant Wason"}]
