[{"authorTime":"2020-11-06 00:49:58","codes":[{"authorDate":"2020-12-22 11:18:18","commitOrder":2,"curCode":"  public static void addFileSliceCommonMetrics(List<FileSlice> fileSlices, Map<String, Double> metrics, long defaultBaseFileSize) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n    long totalIOWrite = 0;\n    long totalIO = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles +=  slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n\n      long baseFileSize = slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L;\n      \r\n      totalIORead = FSUtils.getSizeInMB(baseFileSize + totalLogFileSize);\n      \r\n      totalIOWrite = FSUtils.getSizeInMB(baseFileSize > 0 ? baseFileSize : defaultBaseFileSize);\n      \r\n      totalIO = totalIORead + totalIOWrite;\n    }\n\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_IO_WRITE_MB, (double) totalIOWrite);\n    metrics.put(TOTAL_IO_MB, (double) totalIO);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n  }\n","date":"2020-12-22 11:18:18","endLine":66,"groupId":"4303","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addFileSliceCommonMetrics","params":"(List<FileSlice>fileSlices@Map<String@Double>metrics@longdefaultBaseFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/34/7f86cfba3495bdd26a393e4796708c160dfe6c.src","preCode":"  public static void addFileSliceCommonMetrics(List<FileSlice> fileSlices, Map<String, Double> metrics, long defaultBaseFileSize) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n    long totalIOWrite = 0;\n    long totalIO = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles +=  slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n\n      long baseFileSize = slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L;\n      \r\n      totalIORead = FSUtils.getSizeInMB(baseFileSize + totalLogFileSize);\n      \r\n      totalIOWrite = FSUtils.getSizeInMB(baseFileSize > 0 ? baseFileSize : defaultBaseFileSize);\n      \r\n      totalIO = totalIORead + totalIOWrite;\n    }\n\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_IO_WRITE_MB, (double) totalIOWrite);\n    metrics.put(TOTAL_IO_MB, (double) totalIO);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/utils/FileSliceMetricUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2020-11-06 00:49:58","commitOrder":2,"curCode":"  private static Map<String, Double> buildMetrics(List<FileSlice> fileSlices) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles +=  slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n      \r\n      totalIORead =\n          FSUtils.getSizeInMB((slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L) + totalLogFileSize);\n    }\n\n    Map<String, Double> metrics = new HashMap<>();\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n    return metrics;\n  }\n","date":"2020-11-06 00:49:58","endLine":177,"groupId":"5591","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMetrics","params":"(List<FileSlice>fileSlices)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c0/c88c04ac1510b692b371444e4a4671cf2ebf01.src","preCode":"  private static Map<String, Double> buildMetrics(List<FileSlice> fileSlices) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles +=  slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n      \r\n      totalIORead =\n          FSUtils.getSizeInMB((slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L) + totalLogFileSize);\n    }\n\n    Map<String, Double> metrics = new HashMap<>();\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n    return metrics;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/util/ClusteringUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"NB"}],"commitId":"959afb8ba4cadf0fe09ddd6d67f9bf38bea13050","commitMessage":"@@@Merge pull request #2263 from satishkotha/sk/clustering\n\n[HUDI-1075] Implement simple clustering strategies to create and run ClusteringPlan","date":"2020-12-22 11:18:18","modifiedFileCount":"28","status":"M","submitter":"satishkotha"},{"authorTime":"2020-11-06 00:49:58","codes":[{"authorDate":"2021-08-18 02:09:53","commitOrder":3,"curCode":"  public static void addFileSliceCommonMetrics(List<FileSlice> fileSlices, Map<String, Double> metrics, long defaultBaseFileSize) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n    long totalIOWrite = 0;\n    long totalIO = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles += slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n\n      long baseFileSize = slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L;\n      totalIORead += baseFileSize;\n      \r\n      totalIOWrite += baseFileSize > 0 ? baseFileSize : defaultBaseFileSize;\n    }\n    \r\n    totalIORead = FSUtils.getSizeInMB(totalIORead + totalLogFileSize);\n    totalIOWrite = FSUtils.getSizeInMB(totalIOWrite);\n\n    \r\n    totalIO = totalIORead + totalIOWrite;\n\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_IO_WRITE_MB, (double) totalIOWrite);\n    metrics.put(TOTAL_IO_MB, (double) totalIO);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n  }\n","date":"2021-08-18 02:09:53","endLine":69,"groupId":"10841","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"addFileSliceCommonMetrics","params":"(List<FileSlice>fileSlices@Map<String@Double>metrics@longdefaultBaseFileSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/09/f022bbd76f480231991ba6bbb9c57f0ed8c7c3.src","preCode":"  public static void addFileSliceCommonMetrics(List<FileSlice> fileSlices, Map<String, Double> metrics, long defaultBaseFileSize) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n    long totalIOWrite = 0;\n    long totalIO = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles +=  slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n\n      long baseFileSize = slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L;\n      \r\n      totalIORead = FSUtils.getSizeInMB(baseFileSize + totalLogFileSize);\n      \r\n      totalIOWrite = FSUtils.getSizeInMB(baseFileSize > 0 ? baseFileSize : defaultBaseFileSize);\n      \r\n      totalIO = totalIORead + totalIOWrite;\n    }\n\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_IO_WRITE_MB, (double) totalIOWrite);\n    metrics.put(TOTAL_IO_MB, (double) totalIO);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/utils/FileSliceMetricUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2020-11-06 00:49:58","commitOrder":3,"curCode":"  private static Map<String, Double> buildMetrics(List<FileSlice> fileSlices) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles +=  slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n      \r\n      totalIORead =\n          FSUtils.getSizeInMB((slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L) + totalLogFileSize);\n    }\n\n    Map<String, Double> metrics = new HashMap<>();\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n    return metrics;\n  }\n","date":"2020-11-06 00:49:58","endLine":177,"groupId":"10841","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildMetrics","params":"(List<FileSlice>fileSlices)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c0/c88c04ac1510b692b371444e4a4671cf2ebf01.src","preCode":"  private static Map<String, Double> buildMetrics(List<FileSlice> fileSlices) {\n    int numLogFiles = 0;\n    long totalLogFileSize = 0;\n    long totalIORead = 0;\n\n    for (FileSlice slice : fileSlices) {\n      numLogFiles +=  slice.getLogFiles().count();\n      \r\n      totalLogFileSize += slice.getLogFiles().map(HoodieLogFile::getFileSize).filter(size -> size >= 0)\n          .reduce(Long::sum).orElse(0L);\n      \r\n      totalIORead =\n          FSUtils.getSizeInMB((slice.getBaseFile().isPresent() ? slice.getBaseFile().get().getFileSize() : 0L) + totalLogFileSize);\n    }\n\n    Map<String, Double> metrics = new HashMap<>();\n    metrics.put(TOTAL_IO_READ_MB, (double) totalIORead);\n    metrics.put(TOTAL_LOG_FILE_SIZE, (double) totalLogFileSize);\n    metrics.put(TOTAL_LOG_FILES, (double) numLogFiles);\n    return metrics;\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/util/ClusteringUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"99663d370b5de14cc85f28bb36f1022c2c0bf478","commitMessage":"@@@[HUDI-2301] fix FileSliceMetrics utils bug (#3487)\n\n","date":"2021-08-18 02:09:53","modifiedFileCount":"1","status":"M","submitter":"ayachi_nene"}]
