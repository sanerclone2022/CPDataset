[{"authorTime":"2020-11-18 17:57:11","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":2,"curCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieJavaTable<T> table = HoodieJavaTable.create(config, (HoodieJavaEngineContext) context);\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","date":"2020-12-20 11:25:27","endLine":71,"groupId":"2121","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"filterExists","params":"(List<HoodieRecord<T>>hoodieRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/67/a60715996655af00614d7763445cf4126af90b.src","preCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieJavaTable<T> table = HoodieJavaTable.create(config, (HoodieJavaEngineContext) context);\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2020-11-18 17:57:11","commitOrder":2,"curCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieFlinkTable<T> table = HoodieFlinkTable.create(config, (HoodieFlinkEngineContext) context);\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","date":"2020-11-18 17:57:11","endLine":97,"groupId":"2121","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"filterExists","params":"(List<HoodieRecord<T>>hoodieRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4e/08003404022e4f85be45fb1e639f30d9b9af43.src","preCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieFlinkTable<T> table = HoodieFlinkTable.create(config, (HoodieFlinkEngineContext) context);\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/client/HoodieFlinkWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"NB"}],"commitId":"e4e2fbc3bb2c4796c6813114dd1c37ffa5a1e03a","commitMessage":"@@@[HUDI-1419] Add base implementation for hudi java client (#2286)\n\n","date":"2020-12-20 11:25:27","modifiedFileCount":"2","status":"M","submitter":"Shen Hong"},{"authorTime":"2021-03-29 10:47:29","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":3,"curCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieJavaTable<T> table = HoodieJavaTable.create(config, (HoodieJavaEngineContext) context);\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","date":"2020-12-20 11:25:27","endLine":71,"groupId":"10513","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"filterExists","params":"(List<HoodieRecord<T>>hoodieRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/67/a60715996655af00614d7763445cf4126af90b.src","preCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieJavaTable<T> table = HoodieJavaTable.create(config, (HoodieJavaEngineContext) context);\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2021-03-29 10:47:29","commitOrder":3,"curCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieFlinkTable<T> table = getHoodieTable();\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","date":"2021-03-29 10:47:29","endLine":129,"groupId":"10513","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"filterExists","params":"(List<HoodieRecord<T>>hoodieRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/de/4d8ca65483b9ea390a4d32c01b91e3979f5b96.src","preCode":"  public List<HoodieRecord<T>> filterExists(List<HoodieRecord<T>> hoodieRecords) {\n    \r\n    HoodieFlinkTable<T> table = HoodieFlinkTable.create(config, (HoodieFlinkEngineContext) context);\n    Timer.Context indexTimer = metrics.getIndexCtx();\n    List<HoodieRecord<T>> recordsWithLocation = getIndex().tagLocation(hoodieRecords, context, table);\n    metrics.updateIndexMetrics(LOOKUP_STR, metrics.getDurationInMs(indexTimer == null ? 0L : indexTimer.stop()));\n    return recordsWithLocation.stream().filter(v1 -> !v1.isCurrentLocationKnown()).collect(Collectors.toList());\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/client/HoodieFlinkWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"d415d45416707ca4d5b1dbad65dc80e6fccfa378","commitMessage":"@@@[HUDI-1729] Asynchronous Hive sync and commits cleaning for Flink writer (#2732)\n\n","date":"2021-03-29 10:47:29","modifiedFileCount":"16","status":"M","submitter":"Danny Chan"}]
