[{"authorTime":"2020-12-20 11:25:27","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":1,"curCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.UPSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this, instantTime);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2020-12-20 11:25:27","endLine":107,"groupId":"128","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"upsert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/67/a60715996655af00614d7763445cf4126af90b.src","preCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.UPSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this, instantTime);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2020-12-20 11:25:27","commitOrder":1,"curCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.INSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this, instantTime);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2020-12-20 11:25:27","endLine":133,"groupId":"128","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/67/a60715996655af00614d7763445cf4126af90b.src","preCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.INSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this, instantTime);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"e4e2fbc3bb2c4796c6813114dd1c37ffa5a1e03a","commitMessage":"@@@[HUDI-1419] Add base implementation for hudi java client (#2286)\n\n","date":"2020-12-20 11:25:27","modifiedFileCount":"2","status":"B","submitter":"Shen Hong"},{"authorTime":"2020-12-31 10:29:55","codes":[{"authorDate":"2020-12-31 10:29:55","commitOrder":2,"curCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.UPSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2021-01-04 23:59:47","endLine":107,"groupId":"2829","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"upsert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7b/10843b0b0d7e973180142e037504899c8bd27a.src","preCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.UPSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this, instantTime);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-12-31 10:29:55","commitOrder":2,"curCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.INSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2021-01-04 23:59:47","endLine":133,"groupId":"2829","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7b/10843b0b0d7e973180142e037504899c8bd27a.src","preCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.INSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this, instantTime);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"298808baaf771a3707cf55db8d89ed4421e1f8c3","commitMessage":"@@@[HUDI-842] Implementation of HUDI RFC-15.\n\n - Introduced an internal metadata table.  that stores file listings.\n - metadata table is kept upto date with\n - Fixed handling of CleanerPlan.\n - [HUDI-842] Reduce parallelism to speed up the test.\n - [HUDI-842] Implementation of CLI commands for metadata operations and lookups.\n - [HUDI-842] Extend rollback metadata to include the files which have been appended to.\n - [HUDI-842] Support for rollbacks in MOR Table.\n - MarkerBasedRollbackStrategy needs to correctly provide the list of files for which rollback blocks were appended.\n - [HUDI-842] Added unit test for rollback of partial commits (inflight but not completed yet).\n - [HUDI-842] Handled the error case where metadata update succeeds but dataset commit fails.\n - [HUDI-842] Schema evolution strategy for Metadata Table. Each type of metadata saved (FilesystemMetadata.  ColumnIndexMetadata.  etc.) will be a separate field with default null. The type of the record will identify the valid field. This way.  we can grow the schema when new type of information is saved within in which still keeping it backward compatible.\n - [HUDI-842] Fix non-partitioned case and speedup initial creation of metadata table.Choose only 1 partition for jsc as the number of records is low (hundreds to thousands). There is more overhead of creating large number of partitions for JavaRDD and it slows down operations like WorkloadProfile.\nFor the non-partitioned case.  use \".\" as the name of the partition to prevent empty keys in HFile.\n - [HUDI-842] Reworked metrics pusblishing.\n - Code has been split into reader and writer side. HoodieMetadata code to be accessed by using HoodieTable.metadata() to get instance of metdata for the table.\nCode is serializable to allow executors to use the functionality.\n - [RFC-15] Add metrics to track the time for each file system call.\n - [RFC-15] Added a distributed metrics registry for spark which can be used to collect metrics from executors. This helps create a stats dashboard which shows the metadata table improvements in real-time for production tables.\n - [HUDI-1321] Created HoodieMetadataConfig to specify configuration for the metadata table. This is safer than full-fledged properties for the metadata table (like HoodieWriteConfig) as it makes burdensome to tune the metadata. With limited configuration.  we can control the performance of the metadata table closely.\n\n[HUDI-1319][RFC-15] Adding interfaces for HoodieMetadata.  HoodieMetadataWriter (apache#2266)\n - moved MetadataReader to HoodieBackedTableMetadata.  under the HoodieTableMetadata interface\n - moved MetadataWriter to HoodieBackedTableMetadataWriter.  under the HoodieTableMetadataWriter\n - Pulled all the metrics into HoodieMetadataMetrics\n - Writer now wraps the metadata.  instead of extending it\n - New enum for MetadataPartitionType\n - Streamlined code flow inside HoodieBackedTableMetadataWriter w.r.t initializing metadata state\n - [HUDI-1319] Make async operations work with metadata table (apache#2332)\n - Changes the syncing model to only move over completed instants on data timeline\n - Syncing happens postCommit and on writeClient initialization\n - Latest delta commit on the metadata table is sufficient as the watermark for data timeline archival\n - Cleaning/Compaction use a suffix to the last instant written to metadata table.  such that we keep the 1-1\n - .. mapping between data and metadata timelines.\n - Got rid of a lot of the complexity around checking for valid commits during open of base/log files\n - Tests now use local FS.  to simulate more failure scenarios\n - Some failure scenarios exposed HUDI-1434.  which is needed for MOR to work correctly\n\nco-authored by: Vinoth Chandar <vinoth@apache.org>\n","date":"2021-01-04 23:59:47","modifiedFileCount":"25","status":"M","submitter":"Prashant Wason"},{"authorTime":"2021-01-07 15:08:30","codes":[{"authorDate":"2021-01-07 15:08:30","commitOrder":3,"curCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    preWrite(instantTime, WriteOperationType.UPSERT);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2021-01-07 15:08:30","endLine":106,"groupId":"1520","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"upsert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/40/bbd079b515e5955c4765d8ab9dd89358a200c1.src","preCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.UPSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-01-07 15:08:30","commitOrder":3,"curCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    preWrite(instantTime, WriteOperationType.INSERT);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2021-01-07 15:08:30","endLine":130,"groupId":"1520","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/40/bbd079b515e5955c4765d8ab9dd89358a200c1.src","preCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    setOperationType(WriteOperationType.INSERT);\n    this.asyncCleanerService = AsyncCleanerService.startAsyncCleaningIfEnabled(this);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"5ff8e88d58c2a6efa1046716e11dca0d61cdf872","commitMessage":"@@@[HUDI-1513] Introduce WriteClient#preWrite() and relocate metadata table syncing (#2413)\n\n- Syncing to metadata table.  setting operation type.  starting async cleaner done in preWrite()\n - Fixes an issues where delete() was not starting async cleaner correctly\n - Fixed tests and enabled metadata table for TestAsyncCompaction","date":"2021-01-07 15:08:30","modifiedFileCount":"8","status":"M","submitter":"vinoth chandar"},{"authorTime":"2021-03-17 07:43:53","codes":[{"authorDate":"2021-03-17 07:43:53","commitOrder":4,"curCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    preWrite(instantTime, WriteOperationType.UPSERT, table.getMetaClient());\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2021-03-17 07:43:53","endLine":106,"groupId":"10514","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"upsert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8b/7cb198bc9ec8838745e41bcc27fa6c796f248b.src","preCode":"  public List<WriteStatus> upsert(List<HoodieRecord<T>> records,\n                                  String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.UPSERT, instantTime);\n    table.validateUpsertSchema();\n    preWrite(instantTime, WriteOperationType.UPSERT);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.upsert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-03-17 07:43:53","commitOrder":4,"curCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    preWrite(instantTime, WriteOperationType.INSERT, table.getMetaClient());\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","date":"2021-03-17 07:43:53","endLine":130,"groupId":"10514","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(List<HoodieRecord<T>>records@StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8b/7cb198bc9ec8838745e41bcc27fa6c796f248b.src","preCode":"  public List<WriteStatus> insert(List<HoodieRecord<T>> records, String instantTime) {\n    HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table =\n        getTableAndInitCtx(WriteOperationType.INSERT, instantTime);\n    table.validateUpsertSchema();\n    preWrite(instantTime, WriteOperationType.INSERT);\n    HoodieWriteMetadata<List<WriteStatus>> result = table.insert(context, instantTime, records);\n    if (result.getIndexLookupDuration().isPresent()) {\n      metrics.updateIndexMetrics(LOOKUP_STR, result.getIndexLookupDuration().get().toMillis());\n    }\n    return postWrite(result, instantTime, table);\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/client/HoodieJavaWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"74241947c123c860a1b0344f25cef316440a70d6","commitMessage":"@@@[HUDI-845] Added locking capability to allow multiple writers (#2374)\n\n* [HUDI-845] Added locking capability to allow multiple writers\n1. Added LockProvider API for pluggable lock methodologies\n2. Added Resolution Strategy API to allow for pluggable conflict resolution\n3. Added TableService client API to schedule table services\n4. Added Transaction Manager for wrapping actions within transactions","date":"2021-03-17 07:43:53","modifiedFileCount":"48","status":"M","submitter":"n3nash"}]
