[{"authorTime":"2021-07-30 13:22:26","codes":[{"authorDate":"2021-07-30 13:22:26","commitOrder":1,"curCode":"  public static void initClass() throws Exception {\n    UtilitiesTestBase.initClass(true);\n    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n    JSON_KAFKA_SOURCE_ROOT = dfsBasePath + \"/jsonKafkaFiles\";\n    testUtils = new KafkaTestUtils();\n    testUtils.setup();\n    topicName = \"topic\" + testNum;\n\n    \r\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/config/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n        dfsBasePath + \"/sql-transformer.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target-flattened.avsc\", dfs, dfsBasePath + \"/target-flattened.avsc\");\n\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_short_trip_uber.avsc\", dfs, dfsBasePath + \"/source_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_uber.avsc\", dfs, dfsBasePath + \"/source_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_short_trip_uber.avsc\", dfs, dfsBasePath + \"/target_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_uber.avsc\", dfs, dfsBasePath + \"/target_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/invalid_hive_sync_uber_config.properties\", dfs, dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/uber_config.properties\", dfs, dfsBasePath + \"/config/uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/short_trip_uber_config.properties\", dfs, dfsBasePath + \"/config/short_trip_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/clusteringjob.properties\", dfs, dfsBasePath + \"/clusteringjob.properties\");\n\n    TypedProperties props = new TypedProperties();\n    props.setProperty(\"include\", \"sql-transformer.properties\");\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n\n    \r\n    props.setProperty(DataSourceWriteOptions.HIVE_URL_OPT_KEY().key(), \"jdbc:hive2://127.0.0.1:9999/\");\n    props.setProperty(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY().key(), \"testdb1\");\n    props.setProperty(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY().key(), \"hive_trips\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"datestr\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n        MultiPartKeysValueExtractor.class.getName());\n    UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE);\n\n    \r\n    \r\n    TypedProperties downstreamProps = new TypedProperties();\n    downstreamProps.setProperty(\"include\", \"base.properties\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n    \r\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(downstreamProps, dfs, dfsBasePath + \"/test-downstream-source.properties\");\n\n    \r\n    TypedProperties invalidProps = new TypedProperties();\n    invalidProps.setProperty(\"include\", \"sql-transformer.properties\");\n    invalidProps.setProperty(\"hoodie.datasource.write.keygenerator.class\", \"invalid\");\n    invalidProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    invalidProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_INVALID);\n\n    TypedProperties props1 = new TypedProperties();\n    populateAllCommonProps(props1);\n    UtilitiesTestBase.Helpers.savePropsToDFS(props1, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE1);\n\n    TypedProperties properties = new TypedProperties();\n    populateInvalidTableConfigFilePathProps(properties);\n    UtilitiesTestBase.Helpers.savePropsToDFS(properties, dfs, dfsBasePath + \"/\" + PROPS_INVALID_TABLE_CONFIG_FILE);\n\n    TypedProperties invalidHiveSyncProps = new TypedProperties();\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"uber_db.dummy_table_uber\");\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidHiveSyncProps, dfs, dfsBasePath + \"/\" + PROPS_INVALID_HIVE_SYNC_TEST_SOURCE1);\n\n    prepareParquetDFSFiles(PARQUET_NUM_RECORDS, PARQUET_SOURCE_ROOT);\n  }\n","date":"2021-07-30 13:22:26","endLine":163,"groupId":"5611","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/477dc9aea824a0a1d1994f5fe83037cfc6f20a.src","preCode":"  public static void initClass() throws Exception {\n    UtilitiesTestBase.initClass(true);\n    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n    JSON_KAFKA_SOURCE_ROOT = dfsBasePath + \"/jsonKafkaFiles\";\n    testUtils = new KafkaTestUtils();\n    testUtils.setup();\n    topicName = \"topic\" + testNum;\n\n    \r\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/config/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n        dfsBasePath + \"/sql-transformer.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target-flattened.avsc\", dfs, dfsBasePath + \"/target-flattened.avsc\");\n\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_short_trip_uber.avsc\", dfs, dfsBasePath + \"/source_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_uber.avsc\", dfs, dfsBasePath + \"/source_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_short_trip_uber.avsc\", dfs, dfsBasePath + \"/target_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_uber.avsc\", dfs, dfsBasePath + \"/target_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/invalid_hive_sync_uber_config.properties\", dfs, dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/uber_config.properties\", dfs, dfsBasePath + \"/config/uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/short_trip_uber_config.properties\", dfs, dfsBasePath + \"/config/short_trip_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/clusteringjob.properties\", dfs, dfsBasePath + \"/clusteringjob.properties\");\n\n    TypedProperties props = new TypedProperties();\n    props.setProperty(\"include\", \"sql-transformer.properties\");\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n\n    \r\n    props.setProperty(DataSourceWriteOptions.HIVE_URL_OPT_KEY().key(), \"jdbc:hive2://127.0.0.1:9999/\");\n    props.setProperty(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY().key(), \"testdb1\");\n    props.setProperty(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY().key(), \"hive_trips\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"datestr\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n        MultiPartKeysValueExtractor.class.getName());\n    UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE);\n\n    \r\n    \r\n    TypedProperties downstreamProps = new TypedProperties();\n    downstreamProps.setProperty(\"include\", \"base.properties\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n    \r\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(downstreamProps, dfs, dfsBasePath + \"/test-downstream-source.properties\");\n\n    \r\n    TypedProperties invalidProps = new TypedProperties();\n    invalidProps.setProperty(\"include\", \"sql-transformer.properties\");\n    invalidProps.setProperty(\"hoodie.datasource.write.keygenerator.class\", \"invalid\");\n    invalidProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    invalidProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_INVALID);\n\n    TypedProperties props1 = new TypedProperties();\n    populateAllCommonProps(props1);\n    UtilitiesTestBase.Helpers.savePropsToDFS(props1, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE1);\n\n    TypedProperties properties = new TypedProperties();\n    populateInvalidTableConfigFilePathProps(properties);\n    UtilitiesTestBase.Helpers.savePropsToDFS(properties, dfs, dfsBasePath + \"/\" + PROPS_INVALID_TABLE_CONFIG_FILE);\n\n    TypedProperties invalidHiveSyncProps = new TypedProperties();\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"uber_db.dummy_table_uber\");\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidHiveSyncProps, dfs, dfsBasePath + \"/\" + PROPS_INVALID_HIVE_SYNC_TEST_SOURCE1);\n\n    prepareParquetDFSFiles(PARQUET_NUM_RECORDS, PARQUET_SOURCE_ROOT);\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamerBase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"},{"authorDate":"2021-07-30 13:22:26","commitOrder":1,"curCode":"  protected static void populateCommonProps(TypedProperties props) {\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyyMMdd\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"short_trip_db.dummy_table_short_trip,uber_db.dummy_table_uber\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/uber_config.properties\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.short_trip_db.dummy_table_short_trip.configFile\", dfsBasePath + \"/config/short_trip_uber_config.properties\");\n  }\n","date":"2021-07-30 13:22:26","endLine":202,"groupId":"3994","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCommonProps","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/477dc9aea824a0a1d1994f5fe83037cfc6f20a.src","preCode":"  protected static void populateCommonProps(TypedProperties props) {\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyyMMdd\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"short_trip_db.dummy_table_short_trip,uber_db.dummy_table_uber\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/uber_config.properties\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.short_trip_db.dummy_table_short_trip.configFile\", dfsBasePath + \"/config/short_trip_uber_config.properties\");\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamerBase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"}],"commitId":"7bdae69053afc5ef604a15806d78317cb976f2ce","commitMessage":"@@@[HUDI-2253] Refactoring few tests to reduce runningtime. DeltaStreamer and MultiDeltaStreamer tests. Bulk insert row writer tests (#3371)\n\nCo-authored-by: Sivabalan Narayanan <nsb@Sivabalans-MBP.attlocal.net>","date":"2021-07-30 13:22:26","modifiedFileCount":"6","status":"B","submitter":"Sivabalan Narayanan"},{"authorTime":"2021-07-30 13:22:26","codes":[{"authorDate":"2021-08-04 08:50:30","commitOrder":2,"curCode":"  public static void initClass() throws Exception {\n    UtilitiesTestBase.initClass(true);\n    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n    JSON_KAFKA_SOURCE_ROOT = dfsBasePath + \"/jsonKafkaFiles\";\n    testUtils = new KafkaTestUtils();\n    testUtils.setup();\n    topicName = \"topic\" + testNum;\n\n    \r\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/config/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n        dfsBasePath + \"/sql-transformer.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target-flattened.avsc\", dfs, dfsBasePath + \"/target-flattened.avsc\");\n\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_short_trip_uber.avsc\", dfs, dfsBasePath + \"/source_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_uber.avsc\", dfs, dfsBasePath + \"/source_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_short_trip_uber.avsc\", dfs, dfsBasePath + \"/target_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_uber.avsc\", dfs, dfsBasePath + \"/target_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/invalid_hive_sync_uber_config.properties\", dfs, dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/uber_config.properties\", dfs, dfsBasePath + \"/config/uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/short_trip_uber_config.properties\", dfs, dfsBasePath + \"/config/short_trip_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/clusteringjob.properties\", dfs, dfsBasePath + \"/clusteringjob.properties\");\n\n    TypedProperties props = new TypedProperties();\n    props.setProperty(\"include\", \"sql-transformer.properties\");\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n\n    \r\n    props.setProperty(DataSourceWriteOptions.HIVE_URL().key(), \"jdbc:hive2://127.0.0.1:9999/\");\n    props.setProperty(DataSourceWriteOptions.HIVE_DATABASE().key(), \"testdb1\");\n    props.setProperty(DataSourceWriteOptions.HIVE_TABLE().key(), \"hive_trips\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_FIELDS().key(), \"datestr\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS().key(),\n        MultiPartKeysValueExtractor.class.getName());\n    UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE);\n\n    \r\n    \r\n    TypedProperties downstreamProps = new TypedProperties();\n    downstreamProps.setProperty(\"include\", \"base.properties\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n    \r\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(downstreamProps, dfs, dfsBasePath + \"/test-downstream-source.properties\");\n\n    \r\n    TypedProperties invalidProps = new TypedProperties();\n    invalidProps.setProperty(\"include\", \"sql-transformer.properties\");\n    invalidProps.setProperty(\"hoodie.datasource.write.keygenerator.class\", \"invalid\");\n    invalidProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    invalidProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_INVALID);\n\n    TypedProperties props1 = new TypedProperties();\n    populateAllCommonProps(props1);\n    UtilitiesTestBase.Helpers.savePropsToDFS(props1, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE1);\n\n    TypedProperties properties = new TypedProperties();\n    populateInvalidTableConfigFilePathProps(properties);\n    UtilitiesTestBase.Helpers.savePropsToDFS(properties, dfs, dfsBasePath + \"/\" + PROPS_INVALID_TABLE_CONFIG_FILE);\n\n    TypedProperties invalidHiveSyncProps = new TypedProperties();\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"uber_db.dummy_table_uber\");\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidHiveSyncProps, dfs, dfsBasePath + \"/\" + PROPS_INVALID_HIVE_SYNC_TEST_SOURCE1);\n\n    prepareParquetDFSFiles(PARQUET_NUM_RECORDS, PARQUET_SOURCE_ROOT);\n  }\n","date":"2021-08-04 08:50:30","endLine":163,"groupId":"5611","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/95/f729120233580d22f0dfa0fb2000060b709a5e.src","preCode":"  public static void initClass() throws Exception {\n    UtilitiesTestBase.initClass(true);\n    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n    JSON_KAFKA_SOURCE_ROOT = dfsBasePath + \"/jsonKafkaFiles\";\n    testUtils = new KafkaTestUtils();\n    testUtils.setup();\n    topicName = \"topic\" + testNum;\n\n    \r\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/config/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n        dfsBasePath + \"/sql-transformer.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target-flattened.avsc\", dfs, dfsBasePath + \"/target-flattened.avsc\");\n\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_short_trip_uber.avsc\", dfs, dfsBasePath + \"/source_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_uber.avsc\", dfs, dfsBasePath + \"/source_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_short_trip_uber.avsc\", dfs, dfsBasePath + \"/target_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_uber.avsc\", dfs, dfsBasePath + \"/target_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/invalid_hive_sync_uber_config.properties\", dfs, dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/uber_config.properties\", dfs, dfsBasePath + \"/config/uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/short_trip_uber_config.properties\", dfs, dfsBasePath + \"/config/short_trip_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/clusteringjob.properties\", dfs, dfsBasePath + \"/clusteringjob.properties\");\n\n    TypedProperties props = new TypedProperties();\n    props.setProperty(\"include\", \"sql-transformer.properties\");\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n\n    \r\n    props.setProperty(DataSourceWriteOptions.HIVE_URL_OPT_KEY().key(), \"jdbc:hive2://127.0.0.1:9999/\");\n    props.setProperty(DataSourceWriteOptions.HIVE_DATABASE_OPT_KEY().key(), \"testdb1\");\n    props.setProperty(DataSourceWriteOptions.HIVE_TABLE_OPT_KEY().key(), \"hive_trips\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY().key(), \"datestr\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS_OPT_KEY().key(),\n        MultiPartKeysValueExtractor.class.getName());\n    UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE);\n\n    \r\n    \r\n    TypedProperties downstreamProps = new TypedProperties();\n    downstreamProps.setProperty(\"include\", \"base.properties\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n    \r\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(downstreamProps, dfs, dfsBasePath + \"/test-downstream-source.properties\");\n\n    \r\n    TypedProperties invalidProps = new TypedProperties();\n    invalidProps.setProperty(\"include\", \"sql-transformer.properties\");\n    invalidProps.setProperty(\"hoodie.datasource.write.keygenerator.class\", \"invalid\");\n    invalidProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    invalidProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_INVALID);\n\n    TypedProperties props1 = new TypedProperties();\n    populateAllCommonProps(props1);\n    UtilitiesTestBase.Helpers.savePropsToDFS(props1, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE1);\n\n    TypedProperties properties = new TypedProperties();\n    populateInvalidTableConfigFilePathProps(properties);\n    UtilitiesTestBase.Helpers.savePropsToDFS(properties, dfs, dfsBasePath + \"/\" + PROPS_INVALID_TABLE_CONFIG_FILE);\n\n    TypedProperties invalidHiveSyncProps = new TypedProperties();\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"uber_db.dummy_table_uber\");\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidHiveSyncProps, dfs, dfsBasePath + \"/\" + PROPS_INVALID_HIVE_SYNC_TEST_SOURCE1);\n\n    prepareParquetDFSFiles(PARQUET_NUM_RECORDS, PARQUET_SOURCE_ROOT);\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamerBase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2021-07-30 13:22:26","commitOrder":2,"curCode":"  protected static void populateCommonProps(TypedProperties props) {\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyyMMdd\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"short_trip_db.dummy_table_short_trip,uber_db.dummy_table_uber\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/uber_config.properties\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.short_trip_db.dummy_table_short_trip.configFile\", dfsBasePath + \"/config/short_trip_uber_config.properties\");\n  }\n","date":"2021-07-30 13:22:26","endLine":202,"groupId":"3994","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCommonProps","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/477dc9aea824a0a1d1994f5fe83037cfc6f20a.src","preCode":"  protected static void populateCommonProps(TypedProperties props) {\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyyMMdd\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"short_trip_db.dummy_table_short_trip,uber_db.dummy_table_uber\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/uber_config.properties\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.short_trip_db.dummy_table_short_trip.configFile\", dfsBasePath + \"/config/short_trip_uber_config.properties\");\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamerBase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"91bb0d13184c57ec08f02db3337e734bc20739c4","commitMessage":"@@@[HUDI-2255] Refactor Datasource options (#3373)\n\nCo-authored-by: Wenning Ding <wenningd@amazon.com>","date":"2021-08-04 08:50:30","modifiedFileCount":"50","status":"M","submitter":"wenningd"},{"authorTime":"2021-07-30 13:22:26","codes":[{"authorDate":"2021-08-11 00:15:37","commitOrder":3,"curCode":"  public static void initClass() throws Exception {\n    UtilitiesTestBase.initClass(true);\n    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n    JSON_KAFKA_SOURCE_ROOT = dfsBasePath + \"/jsonKafkaFiles\";\n    testUtils = new KafkaTestUtils();\n    testUtils.setup();\n    topicName = \"topic\" + testNum;\n\n    \r\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/config/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n        dfsBasePath + \"/sql-transformer.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_evolved.avsc\", dfs, dfsBasePath + \"/source_evolved.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target-flattened.avsc\", dfs, dfsBasePath + \"/target-flattened.avsc\");\n\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_short_trip_uber.avsc\", dfs, dfsBasePath + \"/source_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_uber.avsc\", dfs, dfsBasePath + \"/source_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_short_trip_uber.avsc\", dfs, dfsBasePath + \"/target_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_uber.avsc\", dfs, dfsBasePath + \"/target_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/invalid_hive_sync_uber_config.properties\", dfs, dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/uber_config.properties\", dfs, dfsBasePath + \"/config/uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/short_trip_uber_config.properties\", dfs, dfsBasePath + \"/config/short_trip_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/clusteringjob.properties\", dfs, dfsBasePath + \"/clusteringjob.properties\");\n\n    writeCommonPropsToFile();\n\n    \r\n    \r\n    TypedProperties downstreamProps = new TypedProperties();\n    downstreamProps.setProperty(\"include\", \"base.properties\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n    \r\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(downstreamProps, dfs, dfsBasePath + \"/test-downstream-source.properties\");\n\n    \r\n    TypedProperties invalidProps = new TypedProperties();\n    invalidProps.setProperty(\"include\", \"sql-transformer.properties\");\n    invalidProps.setProperty(\"hoodie.datasource.write.keygenerator.class\", \"invalid\");\n    invalidProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    invalidProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_INVALID);\n\n    TypedProperties props1 = new TypedProperties();\n    populateAllCommonProps(props1);\n    UtilitiesTestBase.Helpers.savePropsToDFS(props1, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE1);\n\n    TypedProperties properties = new TypedProperties();\n    populateInvalidTableConfigFilePathProps(properties);\n    UtilitiesTestBase.Helpers.savePropsToDFS(properties, dfs, dfsBasePath + \"/\" + PROPS_INVALID_TABLE_CONFIG_FILE);\n\n    TypedProperties invalidHiveSyncProps = new TypedProperties();\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"uber_db.dummy_table_uber\");\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidHiveSyncProps, dfs, dfsBasePath + \"/\" + PROPS_INVALID_HIVE_SYNC_TEST_SOURCE1);\n\n    prepareParquetDFSFiles(PARQUET_NUM_RECORDS, PARQUET_SOURCE_ROOT);\n  }\n","date":"2021-08-11 00:15:37","endLine":150,"groupId":"10280","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"initClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5a/1cfc3327e82d9bc3c65f35f725b27af7eb8dd8.src","preCode":"  public static void initClass() throws Exception {\n    UtilitiesTestBase.initClass(true);\n    PARQUET_SOURCE_ROOT = dfsBasePath + \"/parquetFiles\";\n    JSON_KAFKA_SOURCE_ROOT = dfsBasePath + \"/jsonKafkaFiles\";\n    testUtils = new KafkaTestUtils();\n    testUtils.setup();\n    topicName = \"topic\" + testNum;\n\n    \r\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/base.properties\", dfs, dfsBasePath + \"/config/base.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/sql-transformer.properties\", dfs,\n        dfsBasePath + \"/sql-transformer.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source.avsc\", dfs, dfsBasePath + \"/source.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source-flattened.avsc\", dfs, dfsBasePath + \"/source-flattened.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target.avsc\", dfs, dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target-flattened.avsc\", dfs, dfsBasePath + \"/target-flattened.avsc\");\n\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_short_trip_uber.avsc\", dfs, dfsBasePath + \"/source_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/source_uber.avsc\", dfs, dfsBasePath + \"/source_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_short_trip_uber.avsc\", dfs, dfsBasePath + \"/target_short_trip_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/target_uber.avsc\", dfs, dfsBasePath + \"/target_uber.avsc\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/invalid_hive_sync_uber_config.properties\", dfs, dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/uber_config.properties\", dfs, dfsBasePath + \"/config/uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/short_trip_uber_config.properties\", dfs, dfsBasePath + \"/config/short_trip_uber_config.properties\");\n    UtilitiesTestBase.Helpers.copyToDFS(\"delta-streamer-config/clusteringjob.properties\", dfs, dfsBasePath + \"/clusteringjob.properties\");\n\n    TypedProperties props = new TypedProperties();\n    props.setProperty(\"include\", \"sql-transformer.properties\");\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    props.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n\n    \r\n    props.setProperty(DataSourceWriteOptions.HIVE_URL().key(), \"jdbc:hive2://127.0.0.1:9999/\");\n    props.setProperty(DataSourceWriteOptions.HIVE_DATABASE().key(), \"testdb1\");\n    props.setProperty(DataSourceWriteOptions.HIVE_TABLE().key(), \"hive_trips\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_FIELDS().key(), \"datestr\");\n    props.setProperty(DataSourceWriteOptions.HIVE_PARTITION_EXTRACTOR_CLASS().key(),\n        MultiPartKeysValueExtractor.class.getName());\n    UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE);\n\n    \r\n    \r\n    TypedProperties downstreamProps = new TypedProperties();\n    downstreamProps.setProperty(\"include\", \"base.properties\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    downstreamProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n    \r\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/target.avsc\");\n    downstreamProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(downstreamProps, dfs, dfsBasePath + \"/test-downstream-source.properties\");\n\n    \r\n    TypedProperties invalidProps = new TypedProperties();\n    invalidProps.setProperty(\"include\", \"sql-transformer.properties\");\n    invalidProps.setProperty(\"hoodie.datasource.write.keygenerator.class\", \"invalid\");\n    invalidProps.setProperty(\"hoodie.datasource.write.recordkey.field\", \"_row_key\");\n    invalidProps.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.source.schema.file\", dfsBasePath + \"/source.avsc\");\n    invalidProps.setProperty(\"hoodie.deltastreamer.schemaprovider.target.schema.file\", dfsBasePath + \"/target.avsc\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidProps, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_INVALID);\n\n    TypedProperties props1 = new TypedProperties();\n    populateAllCommonProps(props1);\n    UtilitiesTestBase.Helpers.savePropsToDFS(props1, dfs, dfsBasePath + \"/\" + PROPS_FILENAME_TEST_SOURCE1);\n\n    TypedProperties properties = new TypedProperties();\n    populateInvalidTableConfigFilePathProps(properties);\n    UtilitiesTestBase.Helpers.savePropsToDFS(properties, dfs, dfsBasePath + \"/\" + PROPS_INVALID_TABLE_CONFIG_FILE);\n\n    TypedProperties invalidHiveSyncProps = new TypedProperties();\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"uber_db.dummy_table_uber\");\n    invalidHiveSyncProps.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/invalid_hive_sync_uber_config.properties\");\n    UtilitiesTestBase.Helpers.savePropsToDFS(invalidHiveSyncProps, dfs, dfsBasePath + \"/\" + PROPS_INVALID_HIVE_SYNC_TEST_SOURCE1);\n\n    prepareParquetDFSFiles(PARQUET_NUM_RECORDS, PARQUET_SOURCE_ROOT);\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamerBase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-07-30 13:22:26","commitOrder":3,"curCode":"  protected static void populateCommonProps(TypedProperties props) {\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyyMMdd\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"short_trip_db.dummy_table_short_trip,uber_db.dummy_table_uber\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/uber_config.properties\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.short_trip_db.dummy_table_short_trip.configFile\", dfsBasePath + \"/config/short_trip_uber_config.properties\");\n  }\n","date":"2021-07-30 13:22:26","endLine":202,"groupId":"10280","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"populateCommonProps","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/477dc9aea824a0a1d1994f5fe83037cfc6f20a.src","preCode":"  protected static void populateCommonProps(TypedProperties props) {\n    props.setProperty(\"hoodie.datasource.write.keygenerator.class\", TestHoodieDeltaStreamer.TestGenerator.class.getName());\n    props.setProperty(\"hoodie.deltastreamer.keygen.timebased.output.dateformat\", \"yyyyMMdd\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.tablesToBeIngested\", \"short_trip_db.dummy_table_short_trip,uber_db.dummy_table_uber\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.uber_db.dummy_table_uber.configFile\", dfsBasePath + \"/config/uber_config.properties\");\n    props.setProperty(\"hoodie.deltastreamer.ingestion.short_trip_db.dummy_table_short_trip.configFile\", dfsBasePath + \"/config/short_trip_uber_config.properties\");\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamerBase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"1196736185272afaeda37328f1c52ccd5c6dc017","commitMessage":"@@@[HUDI-1129] Improving schema evolution support in hudi (#2927)\n\n* Adding support to ingest records with old schema after table's schema is evolved\n\n* Rebasing against latest master\n\n- Trimming test file to be < 800 lines\n- Renaming config names\n\n* Addressing feedback\n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2021-08-11 00:15:37","modifiedFileCount":"13","status":"M","submitter":"Sivabalan Narayanan"}]
