[{"authorTime":"2020-08-06 12:34:55","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":1,"curCode":"  public DLASyncTool(Properties properties, FileSystem fs) {\n    super(properties, fs);\n    this.hoodieDLAClient = new HoodieDLAClient(Utils.propertiesToConfig(properties), fs);\n    this.cfg = Utils.propertiesToConfig(properties);\n    switch (hoodieDLAClient.getTableType()) {\n      case COPY_ON_WRITE:\n        this.snapshotTableName = cfg.tableName;\n        this.roTableTableName = Option.empty();\n        break;\n      case MERGE_ON_READ:\n        this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n        this.roTableTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n            Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n        break;\n      default:\n        LOG.error(\"Unknown table type \" + hoodieDLAClient.getTableType());\n        throw new InvalidTableException(hoodieDLAClient.getBasePath());\n    }\n  }\n","date":"2020-08-06 12:34:55","endLine":83,"groupId":"2074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"DLASyncTool","params":"(Propertiesproperties@FileSystemfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  public DLASyncTool(Properties properties, FileSystem fs) {\n    super(properties, fs);\n    this.hoodieDLAClient = new HoodieDLAClient(Utils.propertiesToConfig(properties), fs);\n    this.cfg = Utils.propertiesToConfig(properties);\n    switch (hoodieDLAClient.getTableType()) {\n      case COPY_ON_WRITE:\n        this.snapshotTableName = cfg.tableName;\n        this.roTableTableName = Option.empty();\n        break;\n      case MERGE_ON_READ:\n        this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n        this.roTableTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n            Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n        break;\n      default:\n        LOG.error(\"Unknown table type \" + hoodieDLAClient.getTableType());\n        throw new InvalidTableException(hoodieDLAClient.getBasePath());\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2020-08-06 12:34:55","commitOrder":1,"curCode":"  public HiveSyncTool(HiveSyncConfig cfg, HiveConf configuration, FileSystem fs) {\n    super(configuration.getAllProperties(), fs);\n    this.hoodieHiveClient = new HoodieHiveClient(cfg, configuration, fs);\n    this.cfg = cfg;\n    \r\n    if (NonPartitionedExtractor.class.getName().equals(cfg.partitionValueExtractorClass)) {\n      LOG.warn(\"Set partitionFields to empty, since the NonPartitionedExtractor is used\");\n      cfg.partitionFields = new ArrayList<>();\n    }\n    switch (hoodieHiveClient.getTableType()) {\n      case COPY_ON_WRITE:\n        this.snapshotTableName = cfg.tableName;\n        this.roTableTableName = Option.empty();\n        break;\n      case MERGE_ON_READ:\n        this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n        this.roTableTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n            Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n        break;\n      default:\n        LOG.error(\"Unknown table type \" + hoodieHiveClient.getTableType());\n        throw new InvalidTableException(hoodieHiveClient.getBasePath());\n    }\n  }\n","date":"2020-08-06 12:34:55","endLine":87,"groupId":"2074","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"HiveSyncTool","params":"(HiveSyncConfigcfg@HiveConfconfiguration@FileSystemfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e3/059407de4e4b3bc6a5b294f0ad2f7869b8cf3e.src","preCode":"  public HiveSyncTool(HiveSyncConfig cfg, HiveConf configuration, FileSystem fs) {\n    super(configuration.getAllProperties(), fs);\n    this.hoodieHiveClient = new HoodieHiveClient(cfg, configuration, fs);\n    this.cfg = cfg;\n    \r\n    if (NonPartitionedExtractor.class.getName().equals(cfg.partitionValueExtractorClass)) {\n      LOG.warn(\"Set partitionFields to empty, since the NonPartitionedExtractor is used\");\n      cfg.partitionFields = new ArrayList<>();\n    }\n    switch (hoodieHiveClient.getTableType()) {\n      case COPY_ON_WRITE:\n        this.snapshotTableName = cfg.tableName;\n        this.roTableTableName = Option.empty();\n        break;\n      case MERGE_ON_READ:\n        this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n        this.roTableTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n            Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n        break;\n      default:\n        LOG.error(\"Unknown table type \" + hoodieHiveClient.getTableType());\n        throw new InvalidTableException(hoodieHiveClient.getBasePath());\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"51ea27d665d8053895dd047ca85e3338b357a81d","commitMessage":"@@@[HUDI-875] Abstract hudi-sync-common.  and support hudi-hive-sync.  hudi-dla-sync (#1810)\n\n- Generalize the hive-sync module for syncing to multiple metastores\n- Added new options for datasource\n- Added new command line for delta streamer \n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2020-08-06 12:34:55","modifiedFileCount":"3","status":"B","submitter":"lw0090"},{"authorTime":"2021-02-25 23:09:32","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":2,"curCode":"  public DLASyncTool(Properties properties, FileSystem fs) {\n    super(properties, fs);\n    this.hoodieDLAClient = new HoodieDLAClient(Utils.propertiesToConfig(properties), fs);\n    this.cfg = Utils.propertiesToConfig(properties);\n    switch (hoodieDLAClient.getTableType()) {\n      case COPY_ON_WRITE:\n        this.snapshotTableName = cfg.tableName;\n        this.roTableTableName = Option.empty();\n        break;\n      case MERGE_ON_READ:\n        this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n        this.roTableTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n            Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n        break;\n      default:\n        LOG.error(\"Unknown table type \" + hoodieDLAClient.getTableType());\n        throw new InvalidTableException(hoodieDLAClient.getBasePath());\n    }\n  }\n","date":"2020-08-06 12:34:55","endLine":83,"groupId":"10316","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"DLASyncTool","params":"(Propertiesproperties@FileSystemfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  public DLASyncTool(Properties properties, FileSystem fs) {\n    super(properties, fs);\n    this.hoodieDLAClient = new HoodieDLAClient(Utils.propertiesToConfig(properties), fs);\n    this.cfg = Utils.propertiesToConfig(properties);\n    switch (hoodieDLAClient.getTableType()) {\n      case COPY_ON_WRITE:\n        this.snapshotTableName = cfg.tableName;\n        this.roTableTableName = Option.empty();\n        break;\n      case MERGE_ON_READ:\n        this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n        this.roTableTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n            Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n        break;\n      default:\n        LOG.error(\"Unknown table type \" + hoodieDLAClient.getTableType());\n        throw new InvalidTableException(hoodieDLAClient.getBasePath());\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2021-02-25 23:09:32","commitOrder":2,"curCode":"  public HiveSyncTool(HiveSyncConfig cfg, HiveConf configuration, FileSystem fs) {\n    super(configuration.getAllProperties(), fs);\n\n    try {\n      this.hoodieHiveClient = new HoodieHiveClient(cfg, configuration, fs);\n    } catch (RuntimeException e) {\n      if (cfg.ignoreExceptions) {\n        LOG.error(\"Got runtime exception when hive syncing, but continuing as ignoreExceptions config is set \", e);\n      } else {\n        throw new HoodieHiveSyncException(\"Got runtime exception when hive syncing\", e);\n      }\n    }\n\n    this.cfg = cfg;\n    \r\n    if (NonPartitionedExtractor.class.getName().equals(cfg.partitionValueExtractorClass)) {\n      LOG.warn(\"Set partitionFields to empty, since the NonPartitionedExtractor is used\");\n      cfg.partitionFields = new ArrayList<>();\n    }\n    if (hoodieHiveClient != null) {\n      switch (hoodieHiveClient.getTableType()) {\n        case COPY_ON_WRITE:\n          this.snapshotTableName = cfg.tableName;\n          this.roTableName = Option.empty();\n          break;\n        case MERGE_ON_READ:\n          this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n          this.roTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n              Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n          break;\n        default:\n          LOG.error(\"Unknown table type \" + hoodieHiveClient.getTableType());\n          throw new InvalidTableException(hoodieHiveClient.getBasePath());\n      }\n    }\n  }\n","date":"2021-02-25 23:09:32","endLine":100,"groupId":"10316","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"HiveSyncTool","params":"(HiveSyncConfigcfg@HiveConfconfiguration@FileSystemfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/bb/da97efd10aa0d0ab15a901935b46528d0a394e.src","preCode":"  public HiveSyncTool(HiveSyncConfig cfg, HiveConf configuration, FileSystem fs) {\n    super(configuration.getAllProperties(), fs);\n    this.hoodieHiveClient = new HoodieHiveClient(cfg, configuration, fs);\n    this.cfg = cfg;\n    \r\n    if (NonPartitionedExtractor.class.getName().equals(cfg.partitionValueExtractorClass)) {\n      LOG.warn(\"Set partitionFields to empty, since the NonPartitionedExtractor is used\");\n      cfg.partitionFields = new ArrayList<>();\n    }\n    switch (hoodieHiveClient.getTableType()) {\n      case COPY_ON_WRITE:\n        this.snapshotTableName = cfg.tableName;\n        this.roTableTableName = Option.empty();\n        break;\n      case MERGE_ON_READ:\n        this.snapshotTableName = cfg.tableName + SUFFIX_SNAPSHOT_TABLE;\n        this.roTableTableName = cfg.skipROSuffix ? Option.of(cfg.tableName) :\n            Option.of(cfg.tableName + SUFFIX_READ_OPTIMIZED_TABLE);\n        break;\n      default:\n        LOG.error(\"Unknown table type \" + hoodieHiveClient.getTableType());\n        throw new InvalidTableException(hoodieHiveClient.getBasePath());\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"8c2197ae5e9c139e488a33f5a507b79bfa2f6f27","commitMessage":"@@@[HUDI-1269] Make whether the failure of connect hive affects hudi ingest process configurable (#2443)\n\nCo-authored-by: Sivabalan Narayanan <sivabala@uber.com>","date":"2021-02-25 23:09:32","modifiedFileCount":"4","status":"M","submitter":"liujinhui"}]
