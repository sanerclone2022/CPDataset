[{"authorTime":"2020-05-18 14:04:06","codes":[{"authorDate":"2020-05-18 14:04:06","commitOrder":4,"curCode":"  public void testShowRollbacks() {\n    CommandResult cr = getShell().executeCommand(\"show rollbacks\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    HoodieActiveTimeline activeTimeline = new RollbacksCommand.RollbackTimeline(HoodieCLI.getTableMetaClient());\n    Stream<HoodieInstant> rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants().getInstants();\n\n    List<Comparable[]> rows = new ArrayList<>();\n    rollback.sorted().forEach(instant -> {\n      try {\n        \r\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          \r\n          row[2] = 3;\n          row[3] = 0;\n          row[4] = 3;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n  }\n","date":"2020-05-18 14:04:06","endLine":139,"groupId":"2012","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowRollbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5a/82d778f86e80da5a4a89143b2d8dbded250411.src","preCode":"  public void testShowRollbacks() {\n    CommandResult cr = getShell().executeCommand(\"show rollbacks\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    HoodieActiveTimeline activeTimeline = new RollbacksCommand.RollbackTimeline(HoodieCLI.getTableMetaClient());\n    Stream<HoodieInstant> rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants().getInstants();\n\n    List<Comparable[]> rows = new ArrayList<>();\n    rollback.sorted().forEach(instant -> {\n      try {\n        \r\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          \r\n          row[2] = 3;\n          row[3] = 0;\n          row[4] = 3;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRollbacksCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2020-05-18 14:04:06","commitOrder":4,"curCode":"  public String showRollbacks(\n      @CliOption(key = {\"limit\"}, help = \"Limit #rows to be displayed\", unspecifiedDefaultValue = \"10\") Integer limit,\n      @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\") final String sortByField,\n      @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\") final boolean descending,\n      @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\",\n          unspecifiedDefaultValue = \"false\") final boolean headerOnly) {\n    HoodieActiveTimeline activeTimeline = new RollbackTimeline(HoodieCLI.getTableMetaClient());\n    HoodieTimeline rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants();\n\n    final List<Comparable[]> rows = new ArrayList<>();\n    rollback.getInstants().forEach(instant -> {\n      try {\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          row[2] = metadata.getTotalFilesDeleted();\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = metadata.getPartitionMetadata() != null ? metadata.getPartitionMetadata().size() : 0;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, rows);\n  }\n","date":"2020-05-18 14:04:06","endLine":88,"groupId":"1856","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"showRollbacks","params":"(@CliOption(key={\"limit\"}@help=\"Limit#rowstobedisplayed\"@unspecifiedDefaultValue=\"10\")Integerlimit@@CliOption(key={\"sortBy\"}@help=\"SortingField\"@unspecifiedDefaultValue=\"\")finalStringsortByField@@CliOption(key={\"desc\"}@help=\"Ordering\"@unspecifiedDefaultValue=\"false\")finalbooleandescending@@CliOption(key={\"headeronly\"}@help=\"PrintHeaderOnly\"@unspecifiedDefaultValue=\"false\")finalbooleanheaderOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4f/eb4c19556ce74821f83b5f6908c1d360e7cd8a.src","preCode":"  public String showRollbacks(\n      @CliOption(key = {\"limit\"}, help = \"Limit #rows to be displayed\", unspecifiedDefaultValue = \"10\") Integer limit,\n      @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\") final String sortByField,\n      @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\") final boolean descending,\n      @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\",\n          unspecifiedDefaultValue = \"false\") final boolean headerOnly) {\n    HoodieActiveTimeline activeTimeline = new RollbackTimeline(HoodieCLI.getTableMetaClient());\n    HoodieTimeline rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants();\n\n    final List<Comparable[]> rows = new ArrayList<>();\n    rollback.getInstants().forEach(instant -> {\n      try {\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          row[2] = metadata.getTotalFilesDeleted();\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = metadata.getPartitionMetadata() != null ? metadata.getPartitionMetadata().size() : 0;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, rows);\n  }\n","realPath":"hudi-cli/src/main/java/org/apache/hudi/cli/commands/RollbacksCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"MB"}],"commitId":"57132f79bb2dad6cfb215480b435a778714a442d","commitMessage":"@@@[HUDI-705] Add unit test for RollbacksCommand (#1611)\n\n","date":"2020-05-18 14:04:06","modifiedFileCount":"2","status":"M","submitter":"hongdd"},{"authorTime":"2020-05-18 14:04:06","codes":[{"authorDate":"2020-06-02 16:49:37","commitOrder":5,"curCode":"  public void testShowRollbacks() {\n    CommandResult cr = getShell().executeCommand(\"show rollbacks\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    HoodieActiveTimeline activeTimeline = new RollbacksCommand.RollbackTimeline(HoodieCLI.getTableMetaClient());\n    Stream<HoodieInstant> rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants().getInstants();\n\n    List<Comparable[]> rows = new ArrayList<>();\n    rollback.sorted().forEach(instant -> {\n      try {\n        \r\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          \r\n          row[2] = 3;\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = 3;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-04 17:52:21","endLine":140,"groupId":"5333","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowRollbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/24/5b76b81ce6cf5cdaf1b8d18845865cf7e5bc43.src","preCode":"  public void testShowRollbacks() {\n    CommandResult cr = getShell().executeCommand(\"show rollbacks\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    HoodieActiveTimeline activeTimeline = new RollbacksCommand.RollbackTimeline(HoodieCLI.getTableMetaClient());\n    Stream<HoodieInstant> rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants().getInstants();\n\n    List<Comparable[]> rows = new ArrayList<>();\n    rollback.sorted().forEach(instant -> {\n      try {\n        \r\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          \r\n          row[2] = 3;\n          row[3] = 0;\n          row[4] = 3;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRollbacksCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-05-18 14:04:06","commitOrder":5,"curCode":"  public String showRollbacks(\n      @CliOption(key = {\"limit\"}, help = \"Limit #rows to be displayed\", unspecifiedDefaultValue = \"10\") Integer limit,\n      @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\") final String sortByField,\n      @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\") final boolean descending,\n      @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\",\n          unspecifiedDefaultValue = \"false\") final boolean headerOnly) {\n    HoodieActiveTimeline activeTimeline = new RollbackTimeline(HoodieCLI.getTableMetaClient());\n    HoodieTimeline rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants();\n\n    final List<Comparable[]> rows = new ArrayList<>();\n    rollback.getInstants().forEach(instant -> {\n      try {\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          row[2] = metadata.getTotalFilesDeleted();\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = metadata.getPartitionMetadata() != null ? metadata.getPartitionMetadata().size() : 0;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, rows);\n  }\n","date":"2020-05-18 14:04:06","endLine":88,"groupId":"1856","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"showRollbacks","params":"(@CliOption(key={\"limit\"}@help=\"Limit#rowstobedisplayed\"@unspecifiedDefaultValue=\"10\")Integerlimit@@CliOption(key={\"sortBy\"}@help=\"SortingField\"@unspecifiedDefaultValue=\"\")finalStringsortByField@@CliOption(key={\"desc\"}@help=\"Ordering\"@unspecifiedDefaultValue=\"false\")finalbooleandescending@@CliOption(key={\"headeronly\"}@help=\"PrintHeaderOnly\"@unspecifiedDefaultValue=\"false\")finalbooleanheaderOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4f/eb4c19556ce74821f83b5f6908c1d360e7cd8a.src","preCode":"  public String showRollbacks(\n      @CliOption(key = {\"limit\"}, help = \"Limit #rows to be displayed\", unspecifiedDefaultValue = \"10\") Integer limit,\n      @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\") final String sortByField,\n      @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\") final boolean descending,\n      @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\",\n          unspecifiedDefaultValue = \"false\") final boolean headerOnly) {\n    HoodieActiveTimeline activeTimeline = new RollbackTimeline(HoodieCLI.getTableMetaClient());\n    HoodieTimeline rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants();\n\n    final List<Comparable[]> rows = new ArrayList<>();\n    rollback.getInstants().forEach(instant -> {\n      try {\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          row[2] = metadata.getTotalFilesDeleted();\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = metadata.getPartitionMetadata() != null ? metadata.getPartitionMetadata().size() : 0;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, rows);\n  }\n","realPath":"hudi-cli/src/main/java/org/apache/hudi/cli/commands/RollbacksCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"}],"commitId":"a68180b179ae57f16ff0a8d74b72b43b501d36c6","commitMessage":"@@@[HUDI-988] Fix Unit Test Flakiness : Ensure all instantiations of HoodieWriteClient is closed properly. Fix bug in TestRollbacks. Make CLI unit tests for Hudi CLI check skip redering strings\n","date":"2020-06-04 17:52:21","modifiedFileCount":"25","status":"M","submitter":"Balaji Varadarajan"},{"authorTime":"2020-05-18 14:04:06","codes":[{"authorDate":"2021-09-07 06:53:53","commitOrder":6,"curCode":"  public void testShowRollbacks() {\n    CommandResult cr = shell().executeCommand(\"show rollbacks\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    HoodieActiveTimeline activeTimeline = new RollbacksCommand.RollbackTimeline(HoodieCLI.getTableMetaClient());\n    Stream<HoodieInstant> rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants().getInstants();\n\n    List<Comparable[]> rows = new ArrayList<>();\n    rollback.sorted().forEach(instant -> {\n      try {\n        \r\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          \r\n          row[2] = 3;\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = 3;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2021-09-07 06:53:53","endLine":144,"groupId":"1096","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testShowRollbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ce/aabddec7d2e70d855ad9e833d01f6911e1b939.src","preCode":"  public void testShowRollbacks() {\n    CommandResult cr = getShell().executeCommand(\"show rollbacks\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    HoodieActiveTimeline activeTimeline = new RollbacksCommand.RollbackTimeline(HoodieCLI.getTableMetaClient());\n    Stream<HoodieInstant> rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants().getInstants();\n\n    List<Comparable[]> rows = new ArrayList<>();\n    rollback.sorted().forEach(instant -> {\n      try {\n        \r\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          \r\n          row[2] = 3;\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = 3;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRollbacksCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-05-18 14:04:06","commitOrder":6,"curCode":"  public String showRollbacks(\n      @CliOption(key = {\"limit\"}, help = \"Limit #rows to be displayed\", unspecifiedDefaultValue = \"10\") Integer limit,\n      @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\") final String sortByField,\n      @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\") final boolean descending,\n      @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\",\n          unspecifiedDefaultValue = \"false\") final boolean headerOnly) {\n    HoodieActiveTimeline activeTimeline = new RollbackTimeline(HoodieCLI.getTableMetaClient());\n    HoodieTimeline rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants();\n\n    final List<Comparable[]> rows = new ArrayList<>();\n    rollback.getInstants().forEach(instant -> {\n      try {\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          row[2] = metadata.getTotalFilesDeleted();\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = metadata.getPartitionMetadata() != null ? metadata.getPartitionMetadata().size() : 0;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, rows);\n  }\n","date":"2020-05-18 14:04:06","endLine":88,"groupId":"1096","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"showRollbacks","params":"(@CliOption(key={\"limit\"}@help=\"Limit#rowstobedisplayed\"@unspecifiedDefaultValue=\"10\")Integerlimit@@CliOption(key={\"sortBy\"}@help=\"SortingField\"@unspecifiedDefaultValue=\"\")finalStringsortByField@@CliOption(key={\"desc\"}@help=\"Ordering\"@unspecifiedDefaultValue=\"false\")finalbooleandescending@@CliOption(key={\"headeronly\"}@help=\"PrintHeaderOnly\"@unspecifiedDefaultValue=\"false\")finalbooleanheaderOnly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4f/eb4c19556ce74821f83b5f6908c1d360e7cd8a.src","preCode":"  public String showRollbacks(\n      @CliOption(key = {\"limit\"}, help = \"Limit #rows to be displayed\", unspecifiedDefaultValue = \"10\") Integer limit,\n      @CliOption(key = {\"sortBy\"}, help = \"Sorting Field\", unspecifiedDefaultValue = \"\") final String sortByField,\n      @CliOption(key = {\"desc\"}, help = \"Ordering\", unspecifiedDefaultValue = \"false\") final boolean descending,\n      @CliOption(key = {\"headeronly\"}, help = \"Print Header Only\",\n          unspecifiedDefaultValue = \"false\") final boolean headerOnly) {\n    HoodieActiveTimeline activeTimeline = new RollbackTimeline(HoodieCLI.getTableMetaClient());\n    HoodieTimeline rollback = activeTimeline.getRollbackTimeline().filterCompletedInstants();\n\n    final List<Comparable[]> rows = new ArrayList<>();\n    rollback.getInstants().forEach(instant -> {\n      try {\n        HoodieRollbackMetadata metadata = TimelineMetadataUtils\n            .deserializeAvroMetadata(activeTimeline.getInstantDetails(instant).get(), HoodieRollbackMetadata.class);\n        metadata.getCommitsRollback().forEach(c -> {\n          Comparable[] row = new Comparable[5];\n          row[0] = metadata.getStartRollbackTime();\n          row[1] = c;\n          row[2] = metadata.getTotalFilesDeleted();\n          row[3] = metadata.getTimeTakenInMillis();\n          row[4] = metadata.getPartitionMetadata() != null ? metadata.getPartitionMetadata().size() : 0;\n          rows.add(row);\n        });\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    });\n    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_ROLLBACK_INSTANT)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TIME_TOKEN_MILLIS)\n        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_PARTITIONS);\n    return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending, limit, headerOnly, rows);\n  }\n","realPath":"hudi-cli/src/main/java/org/apache/hudi/cli/commands/RollbacksCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"}],"commitId":"cf002b6918ffcdb7528857861372dd73ddb7e31d","commitMessage":"@@@[HUDI-2079] Make CLI command tests functional (#3601)\n\nMake all tests in org.apache.hudi.cli.commands extend org.apache.hudi.cli.functional.CLIFunctionalTestHarness and tag as \"functional\".\n\nThis also resolves a blocker where DFS init consistently failed when moving to ubuntu 18.04","date":"2021-09-07 06:53:53","modifiedFileCount":"17","status":"M","submitter":"Raymond Xu"}]
