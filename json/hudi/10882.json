[{"authorTime":"2020-08-14 08:14:25","codes":[{"authorDate":"2020-08-14 08:14:25","commitOrder":1,"curCode":"  public void testGetPartitions() throws IOException {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    String olderPartition = \"0\"; \r\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getCommitMetadata(basePath, ts, ts, 2)));\n\n      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n      activeTimeline.createNewInstant(cleanInstant);\n      activeTimeline.saveAsComplete(cleanInstant, getCleanMetadata(olderPartition, ts));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(5, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\"}));\n\n    \r\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(3, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","date":"2020-08-26 03:40:10","endLine":97,"groupId":"3310","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1a/1ac5461df04a4c8b7d3fbb7b4e30995b6b18c9.src","preCode":"  public void testGetPartitions() throws IOException {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    String olderPartition = \"0\"; \r\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getCommitMetadata(basePath, ts, ts, 2)));\n\n      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n      activeTimeline.createNewInstant(cleanInstant);\n      activeTimeline.saveAsComplete(cleanInstant, getCleanMetadata(olderPartition, ts));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(5, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\"}));\n\n    \r\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(3, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2020-08-14 08:14:25","commitOrder":1,"curCode":"  public void testRestoreInstants() throws Exception {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getRestoreMetadata(basePath, ts, ts, 2)));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","date":"2020-08-26 03:40:10","endLine":148,"groupId":"3312","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreInstants","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1a/1ac5461df04a4c8b7d3fbb7b4e30995b6b18c9.src","preCode":"  public void testRestoreInstants() throws Exception {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getRestoreMetadata(basePath, ts, ts, 2)));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"492ddcbb06e107618ae71fa369ba07af47a036fb","commitMessage":"@@@[HUDI-1191] Add incremental meta client API to query partitions modified in a time window\n","date":"2020-08-26 03:40:10","modifiedFileCount":"1","status":"B","submitter":"Satish Kotha"},{"authorTime":"2020-08-14 08:14:25","codes":[{"authorDate":"2020-08-26 12:48:28","commitOrder":2,"curCode":"  public void testGetPartitions() throws IOException {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    String olderPartition = \"0\"; \r\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getCommitMetadata(basePath, ts, ts, 2, Collections.emptyMap())));\n\n      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n      activeTimeline.createNewInstant(cleanInstant);\n      activeTimeline.saveAsComplete(cleanInstant, getCleanMetadata(olderPartition, ts));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(5, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\"}));\n\n    \r\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(3, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","date":"2020-08-29 03:23:47","endLine":98,"groupId":"3310","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2e/a418c480b87b9b28df91f714b6f807659352eb.src","preCode":"  public void testGetPartitions() throws IOException {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    String olderPartition = \"0\"; \r\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getCommitMetadata(basePath, ts, ts, 2)));\n\n      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n      activeTimeline.createNewInstant(cleanInstant);\n      activeTimeline.saveAsComplete(cleanInstant, getCleanMetadata(olderPartition, ts));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(5, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\"}));\n\n    \r\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(3, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-08-14 08:14:25","commitOrder":2,"curCode":"  public void testRestoreInstants() throws Exception {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getRestoreMetadata(basePath, ts, ts, 2)));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","date":"2020-08-26 03:40:10","endLine":148,"groupId":"3312","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreInstants","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1a/1ac5461df04a4c8b7d3fbb7b4e30995b6b18c9.src","preCode":"  public void testRestoreInstants() throws Exception {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getRestoreMetadata(basePath, ts, ts, 2)));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"}],"commitId":"4dbeabffa3b2b9f30c48f2deae3ea4f91570afdd","commitMessage":"@@@[HUDI-1228] Add utility method to query extra metadata\n","date":"2020-08-29 03:23:47","modifiedFileCount":"2","status":"M","submitter":"Satish Kotha"},{"authorTime":"2020-09-30 08:04:25","codes":[{"authorDate":"2020-08-26 12:48:28","commitOrder":3,"curCode":"  public void testGetPartitions() throws IOException {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    String olderPartition = \"0\"; \r\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getCommitMetadata(basePath, ts, ts, 2, Collections.emptyMap())));\n\n      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n      activeTimeline.createNewInstant(cleanInstant);\n      activeTimeline.saveAsComplete(cleanInstant, getCleanMetadata(olderPartition, ts));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(5, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\"}));\n\n    \r\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(3, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","date":"2020-08-29 03:23:47","endLine":98,"groupId":"10882","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2e/a418c480b87b9b28df91f714b6f807659352eb.src","preCode":"  public void testGetPartitions() throws IOException {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    String olderPartition = \"0\"; \r\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.COMMIT_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getCommitMetadata(basePath, ts, ts, 2, Collections.emptyMap())));\n\n      HoodieInstant cleanInstant = new HoodieInstant(true, HoodieTimeline.CLEAN_ACTION, ts);\n      activeTimeline.createNewInstant(cleanInstant);\n      activeTimeline.saveAsComplete(cleanInstant, getCleanMetadata(olderPartition, ts));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(5, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"0\", \"2\", \"3\", \"4\"}));\n\n    \r\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(4, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getPartitionsWritten(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(3, partitions.size());\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-09-30 08:04:25","commitOrder":3,"curCode":"  public void testRestoreInstants() throws Exception {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getRestoreMetadata(basePath, ts, ts, 2, HoodieTimeline.COMMIT_ACTION)));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","date":"2020-09-30 08:04:25","endLine":149,"groupId":"10882","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestoreInstants","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e6/77f491f14d58c7d573ed100e55421d7c1a7d2b.src","preCode":"  public void testRestoreInstants() throws Exception {\n    HoodieActiveTimeline activeTimeline = metaClient.getActiveTimeline();\n    HoodieTimeline activeCommitTimeline = activeTimeline.getCommitTimeline();\n    assertTrue(activeCommitTimeline.empty());\n\n    for (int i = 1; i <= 5; i++) {\n      String ts = i + \"\";\n      HoodieInstant instant = new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, ts);\n      activeTimeline.createNewInstant(instant);\n      activeTimeline.saveAsComplete(instant, Option.of(getRestoreMetadata(basePath, ts, ts, 2)));\n    }\n\n    metaClient.reloadActiveTimeline();\n\n    \r\n    List<String> partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsAfter(\"1\", 10));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\", \"5\"}));\n\n    partitions = TimelineUtils.getAffectedPartitions(metaClient.getActiveTimeline().findInstantsInRange(\"1\", \"4\"));\n    assertEquals(partitions, Arrays.asList(new String[]{\"2\", \"3\", \"4\"}));\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"a99e93bed542c8ae30a641d1df616cc2cd5798e1","commitMessage":"@@@[HUDI-1072] Introduce REPLACE top level action. Implement insert_overwrite operation on top of replace action (#2048)\n\n","date":"2020-09-30 08:04:25","modifiedFileCount":"45","status":"M","submitter":"satishkotha"}]
