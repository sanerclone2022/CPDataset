[{"authorTime":"2020-11-03 05:12:51","codes":[{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  public static Row getRow(GenericRecord record, Schema schema, StructType structType) {\n    Function1<Object, Object> converterFn = AvroConversionHelper.createConverterToRow(schema, structType);\n    Row row = (Row) converterFn.apply(record);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","date":"2020-11-03 05:12:51","endLine":67,"groupId":"2961","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getRow","params":"(GenericRecordrecord@Schemaschema@StructTypestructType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/53/b2abfd9b6ea2c5864e1b9136f6d7546683dff2.src","preCode":"  public static Row getRow(GenericRecord record, Schema schema, StructType structType) {\n    Function1<Object, Object> converterFn = AvroConversionHelper.createConverterToRow(schema, structType);\n    Row row = (Row) converterFn.apply(record);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/KeyGeneratorTestUtilities.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  private Row genericRecordToRow(GenericRecord baseRecord) {\n    Function1<Object, Object> convertor = AvroConversionHelper.createConverterToRow(schema, structType);\n    Row row = (Row) convertor.apply(baseRecord);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","date":"2020-11-03 05:12:51","endLine":87,"groupId":"2961","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"genericRecordToRow","params":"(GenericRecordbaseRecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/98/a8f67d6119cc774eb6c631e5716cb83e56fe63.src","preCode":"  private Row genericRecordToRow(GenericRecord baseRecord) {\n    Function1<Object, Object> convertor = AvroConversionHelper.createConverterToRow(schema, structType);\n    Row row = (Row) convertor.apply(baseRecord);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"d160abb43740e0bcdf40458c345ecd2d74e6698c","commitMessage":"@@@[HUDI-912] Refactor and relocate KeyGenerator to support more engines (#2200)\n\n* [HUDI-912] Refactor and relocate KeyGenerator to support more engines\n\n* Rename KeyGenerators","date":"2020-11-03 05:12:51","modifiedFileCount":"1","status":"B","submitter":"wangxianghu"},{"authorTime":"2021-07-20 08:43:48","codes":[{"authorDate":"2020-11-03 05:12:51","commitOrder":2,"curCode":"  public static Row getRow(GenericRecord record, Schema schema, StructType structType) {\n    Function1<Object, Object> converterFn = AvroConversionHelper.createConverterToRow(schema, structType);\n    Row row = (Row) converterFn.apply(record);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","date":"2020-11-03 05:12:51","endLine":67,"groupId":"10631","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getRow","params":"(GenericRecordrecord@Schemaschema@StructTypestructType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/53/b2abfd9b6ea2c5864e1b9136f6d7546683dff2.src","preCode":"  public static Row getRow(GenericRecord record, Schema schema, StructType structType) {\n    Function1<Object, Object> converterFn = AvroConversionHelper.createConverterToRow(schema, structType);\n    Row row = (Row) converterFn.apply(record);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/testutils/KeyGeneratorTestUtilities.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2021-07-20 08:43:48","commitOrder":2,"curCode":"  private Row genericRecordToRow(GenericRecord baseRecord) {\n    Function1<Object, Object> convertor = AvroConversionHelper.createConverterToRow(baseRecord.getSchema(), structType);\n    Row row = (Row) convertor.apply(baseRecord);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","date":"2021-07-20 08:43:48","endLine":93,"groupId":"10631","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"genericRecordToRow","params":"(GenericRecordbaseRecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a3/54427662abbae8019d308e942b926c1f14b3e6.src","preCode":"  private Row genericRecordToRow(GenericRecord baseRecord) {\n    Function1<Object, Object> convertor = AvroConversionHelper.createConverterToRow(schema, structType);\n    Row row = (Row) convertor.apply(baseRecord);\n    int fieldCount = structType.fieldNames().length;\n    Object[] values = new Object[fieldCount];\n    for (int i = 0; i < fieldCount; i++) {\n      values[i] = row.get(i);\n    }\n    return new GenericRowWithSchema(values, structType);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestTimestampBasedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"d5026e9a24850bdcce9f6df3686bf2235d7d01c4","commitMessage":"@@@[HUDI-2161] Adding support to disable meta columns with bulk insert operation (#3247)\n\n","date":"2021-07-20 08:43:48","modifiedFileCount":"39","status":"M","submitter":"Sivabalan Narayanan"}]
