[{"authorTime":"2021-04-20 21:27:09","codes":[{"authorDate":"2021-04-29 20:44:45","commitOrder":3,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","date":"2021-04-29 20:44:45","endLine":438,"groupId":"5755","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/59/5bf5a0ffb059e094ee68eb2864cb76e7536ad0.src","preCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"B"},{"authorDate":"2021-04-20 21:27:09","commitOrder":3,"curCode":"    public boolean reachedEnd() throws IOException {\n      if (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (logRecords.containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            return reachedEnd();\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      } else {\n        readLogs = true;\n        while (logKeysIterator.hasNext()) {\n          final String curKey = logKeysIterator.next();\n          if (!keyToSkip.contains(curKey)) {\n            Option<IndexedRecord> insertAvroRecord =\n                logRecords.get(curKey).getData().getInsertValue(tableSchema);\n            if (insertAvroRecord.isPresent()) {\n              \r\n              GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                  insertAvroRecord.get(),\n                  requiredSchema,\n                  requiredPos,\n                  recordBuilder);\n              this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n    }\n","date":"2021-04-20 21:27:09","endLine":566,"groupId":"5755","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/86cff8ae31f8c4484098182103fe23ab1be460.src","preCode":"    public boolean reachedEnd() throws IOException {\n      if (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (logRecords.containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            return reachedEnd();\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      } else {\n        readLogs = true;\n        while (logKeysIterator.hasNext()) {\n          final String curKey = logKeysIterator.next();\n          if (!keyToSkip.contains(curKey)) {\n            Option<IndexedRecord> insertAvroRecord =\n                logRecords.get(curKey).getData().getInsertValue(tableSchema);\n            if (insertAvroRecord.isPresent()) {\n              \r\n              GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                  insertAvroRecord.get(),\n                  requiredSchema,\n                  requiredPos,\n                  recordBuilder);\n              this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"NB"}],"commitId":"6848a683bd89a6f5f30559f7daff918a498f0808","commitMessage":"@@@[HUDI-1867] Streaming read for Flink COW table (#2895)\n\nSupports streaming read for Copy On Write table.","date":"2021-04-29 20:44:45","modifiedFileCount":"4","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-05-07 20:04:35","codes":[{"authorDate":"2021-04-29 20:44:45","commitOrder":4,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","date":"2021-04-29 20:44:45","endLine":438,"groupId":"5755","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/59/5bf5a0ffb059e094ee68eb2864cb76e7536ad0.src","preCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"N"},{"authorDate":"2021-05-07 20:04:35","commitOrder":4,"curCode":"    public boolean reachedEnd() throws IOException {\n      if (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (!isInRange) {\n            \r\n            return reachedEnd();\n          }\n        }\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (logRecords.containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            return reachedEnd();\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      } else {\n        readLogs = true;\n        while (logKeysIterator.hasNext()) {\n          final String curKey = logKeysIterator.next();\n          if (!keyToSkip.contains(curKey)) {\n            Option<IndexedRecord> insertAvroRecord =\n                logRecords.get(curKey).getData().getInsertValue(tableSchema);\n            if (insertAvroRecord.isPresent()) {\n              \r\n              GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                  insertAvroRecord.get(),\n                  requiredSchema,\n                  requiredPos,\n                  recordBuilder);\n              this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n    }\n","date":"2021-05-07 20:04:35","endLine":625,"groupId":"5755","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f0/f4f41b0f7ce6349e568f2e2cbe513a38a5c80d.src","preCode":"    public boolean reachedEnd() throws IOException {\n      if (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (logRecords.containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            return reachedEnd();\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      } else {\n        readLogs = true;\n        while (logKeysIterator.hasNext()) {\n          final String curKey = logKeysIterator.next();\n          if (!keyToSkip.contains(curKey)) {\n            Option<IndexedRecord> insertAvroRecord =\n                logRecords.get(curKey).getData().getInsertValue(tableSchema);\n            if (insertAvroRecord.isPresent()) {\n              \r\n              GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                  insertAvroRecord.get(),\n                  requiredSchema,\n                  requiredPos,\n                  recordBuilder);\n              this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"528f4ca988209cbc9e519bd42b87b896aea992b6","commitMessage":"@@@[HUDI-1880] Support streaming read with compaction and cleaning (#2921)\n\n","date":"2021-05-07 20:04:35","modifiedFileCount":"5","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-06-28 16:03:10","codes":[{"authorDate":"2021-04-29 20:44:45","commitOrder":5,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","date":"2021-04-29 20:44:45","endLine":438,"groupId":"5755","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/59/5bf5a0ffb059e094ee68eb2864cb76e7536ad0.src","preCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"N"},{"authorDate":"2021-06-28 16:03:10","commitOrder":5,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (!isInRange) {\n            \r\n            continue;\n          }\n        }\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (logRecords.containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            continue;\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      }\n      \r\n      readLogs = true;\n      while (logKeysIterator.hasNext()) {\n        final String curKey = logKeysIterator.next();\n        if (!keyToSkip.contains(curKey)) {\n          Option<IndexedRecord> insertAvroRecord =\n              logRecords.get(curKey).getData().getInsertValue(tableSchema);\n          if (insertAvroRecord.isPresent()) {\n            \r\n            GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                insertAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n","date":"2021-06-28 16:03:10","endLine":625,"groupId":"1589","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d0/0c7fadc091bf408de6e9eea083dd51a90276c4.src","preCode":"    public boolean reachedEnd() throws IOException {\n      if (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (!isInRange) {\n            \r\n            return reachedEnd();\n          }\n        }\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (logRecords.containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            return reachedEnd();\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      } else {\n        readLogs = true;\n        while (logKeysIterator.hasNext()) {\n          final String curKey = logKeysIterator.next();\n          if (!keyToSkip.contains(curKey)) {\n            Option<IndexedRecord> insertAvroRecord =\n                logRecords.get(curKey).getData().getInsertValue(tableSchema);\n            if (insertAvroRecord.isPresent()) {\n              \r\n              GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                  insertAvroRecord.get(),\n                  requiredSchema,\n                  requiredPos,\n                  recordBuilder);\n              this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"d24341d10ca49ed52fc0c1c86a164fbfb57327d4","commitMessage":"@@@[HUDI-2074] Use while loop instead of recursive call in MergeOnReadInputFormat#MergeIterator to avoid StackOverflow (#3159)\n\n","date":"2021-06-28 16:03:10","modifiedFileCount":"1","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-08-03 13:55:35","codes":[{"authorDate":"2021-04-29 20:44:45","commitOrder":6,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","date":"2021-04-29 20:44:45","endLine":438,"groupId":"5755","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/59/5bf5a0ffb059e094ee68eb2864cb76e7536ad0.src","preCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"N"},{"authorDate":"2021-08-03 13:55:35","commitOrder":6,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (!isInRange) {\n            \r\n            continue;\n          }\n        }\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (scanner.getRecords().containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            continue;\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      }\n      \r\n      readLogs = true;\n      while (logKeysIterator.hasNext()) {\n        final String curKey = logKeysIterator.next();\n        if (!keyToSkip.contains(curKey)) {\n          Option<IndexedRecord> insertAvroRecord =\n              scanner.getRecords().get(curKey).getData().getInsertValue(tableSchema);\n          if (insertAvroRecord.isPresent()) {\n            \r\n            GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                insertAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n","date":"2021-08-03 13:55:35","endLine":638,"groupId":"1589","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4d/68242d678eca740770820de9d9f8cfd9067525.src","preCode":"    public boolean reachedEnd() throws IOException {\n      while (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (!isInRange) {\n            \r\n            continue;\n          }\n        }\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (logRecords.containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            continue;\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      }\n      \r\n      readLogs = true;\n      while (logKeysIterator.hasNext()) {\n        final String curKey = logKeysIterator.next();\n        if (!keyToSkip.contains(curKey)) {\n          Option<IndexedRecord> insertAvroRecord =\n              logRecords.get(curKey).getData().getInsertValue(tableSchema);\n          if (insertAvroRecord.isPresent()) {\n            \r\n            GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                insertAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":587,"status":"M"}],"commitId":"bec23bda50b5252013af54dcf39c3a645eea6c7e","commitMessage":"@@@[HUDI-2269] Release the disk map resource for flink streaming reader (#3384)\n\n","date":"2021-08-03 13:55:35","modifiedFileCount":"5","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-08-10 20:23:23","codes":[{"authorDate":"2021-04-29 20:44:45","commitOrder":7,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","date":"2021-04-29 20:44:45","endLine":438,"groupId":"11445","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/59/5bf5a0ffb059e094ee68eb2864cb76e7536ad0.src","preCode":"    public boolean reachedEnd() throws IOException {\n      while (!this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (isInRange) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"N"},{"authorDate":"2021-08-10 20:23:23","commitOrder":7,"curCode":"    public boolean reachedEnd() throws IOException {\n      while (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (!isInRange) {\n            \r\n            continue;\n          }\n        }\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (scanner.getRecords().containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            continue;\n          } else {\n            GenericRecord avroRecord = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(avroRecord);\n            FormatUtils.setRowKind(this.currentRecord, mergedAvroRecord.get(), this.operationPos);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      }\n      \r\n      readLogs = true;\n      while (logKeysIterator.hasNext()) {\n        final String curKey = logKeysIterator.next();\n        if (!keyToSkip.contains(curKey)) {\n          Option<IndexedRecord> insertAvroRecord = getInsertValue(curKey);\n          if (insertAvroRecord.isPresent()) {\n            \r\n            GenericRecord avroRecord = buildAvroRecordBySchema(\n                insertAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(avroRecord);\n            FormatUtils.setRowKind(this.currentRecord, insertAvroRecord.get(), this.operationPos);\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n","date":"2021-08-10 20:23:23","endLine":705,"groupId":"11445","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"reachedEnd","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d0/e1c33d1311af345425ecf6918baf20d04e2840.src","preCode":"    public boolean reachedEnd() throws IOException {\n      while (!readLogs && !this.reader.reachedEnd()) {\n        currentRecord = this.reader.nextRecord();\n        if (instantRange != null) {\n          boolean isInRange = instantRange.isInRange(currentRecord.getString(HOODIE_COMMIT_TIME_COL_POS).toString());\n          if (!isInRange) {\n            \r\n            continue;\n          }\n        }\n        final String curKey = currentRecord.getString(HOODIE_RECORD_KEY_COL_POS).toString();\n        if (scanner.getRecords().containsKey(curKey)) {\n          keyToSkip.add(curKey);\n          Option<IndexedRecord> mergedAvroRecord = mergeRowWithLog(currentRecord, curKey);\n          if (!mergedAvroRecord.isPresent()) {\n            \r\n            continue;\n          } else {\n            GenericRecord record = buildAvroRecordBySchema(\n                mergedAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(record);\n            return false;\n          }\n        }\n        \r\n        currentRecord = projection.project(currentRecord);\n        return false;\n      }\n      \r\n      readLogs = true;\n      while (logKeysIterator.hasNext()) {\n        final String curKey = logKeysIterator.next();\n        if (!keyToSkip.contains(curKey)) {\n          Option<IndexedRecord> insertAvroRecord =\n              scanner.getRecords().get(curKey).getData().getInsertValue(tableSchema);\n          if (insertAvroRecord.isPresent()) {\n            \r\n            GenericRecord requiredAvroRecord = buildAvroRecordBySchema(\n                insertAvroRecord.get(),\n                requiredSchema,\n                requiredPos,\n                recordBuilder);\n            this.currentRecord = (RowData) avroToRowDataConverter.convert(requiredAvroRecord);\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/table/format/mor/MergeOnReadInputFormat.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"}],"commitId":"21db6d7a84d4a83ec98c110e92ff9c92d05dd530","commitMessage":"@@@[HUDI-1771] Propagate CDC format for hoodie (#3285)\n\n","date":"2021-08-10 20:23:23","modifiedFileCount":"47","status":"M","submitter":"swuferhong"}]
