[{"authorTime":"2020-11-18 17:57:11","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":2,"curCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Iterator<ImmutablePair<String, CleanFileInfo>> iter, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    while (iter.hasNext()) {\n      Pair<String, CleanFileInfo> partitionDelFileTuple = iter.next();\n      String partitionPath = partitionDelFileTuple.getLeft();\n      Path deletePath = new Path(partitionDelFileTuple.getRight().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      if (!partitionCleanStatMap.containsKey(partitionPath)) {\n        partitionCleanStatMap.put(partitionPath, new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple.getRight().isBootstrapBaseFile();\n      PartitionCleanStat partitionCleanStat = partitionCleanStatMap.get(partitionPath);\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    }\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","date":"2020-12-20 11:25:27","endLine":129,"groupId":"2509","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteFilesFunc","params":"(Iterator<ImmutablePair<String@CleanFileInfo>>iter@HoodieTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d1/626c81db1def048f98ca03b1ed99b15dcea616.src","preCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Iterator<ImmutablePair<String, CleanFileInfo>> iter, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    while (iter.hasNext()) {\n      Pair<String, CleanFileInfo> partitionDelFileTuple = iter.next();\n      String partitionPath = partitionDelFileTuple.getLeft();\n      Path deletePath = new Path(partitionDelFileTuple.getRight().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      if (!partitionCleanStatMap.containsKey(partitionPath)) {\n        partitionCleanStatMap.put(partitionPath, new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple.getRight().isBootstrapBaseFile();\n      PartitionCleanStat partitionCleanStat = partitionCleanStatMap.get(partitionPath);\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    }\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/clean/JavaCleanActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2020-11-18 17:57:11","commitOrder":2,"curCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Iterator<Tuple2<String, CleanFileInfo>> iter, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    while (iter.hasNext()) {\n      Tuple2<String, CleanFileInfo> partitionDelFileTuple = iter.next();\n      String partitionPath = partitionDelFileTuple._1();\n      Path deletePath = new Path(partitionDelFileTuple._2().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      if (!partitionCleanStatMap.containsKey(partitionPath)) {\n        partitionCleanStatMap.put(partitionPath, new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple._2().isBootstrapBaseFile();\n      PartitionCleanStat partitionCleanStat = partitionCleanStatMap.get(partitionPath);\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    }\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","date":"2020-11-18 17:57:11","endLine":130,"groupId":"2509","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteFilesFunc","params":"(Iterator<Tuple2<String@CleanFileInfo>>iter@HoodieTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/01/0e2a16af4a7cb736fbf30ea19ffe90f274d95a.src","preCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Iterator<Tuple2<String, CleanFileInfo>> iter, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    while (iter.hasNext()) {\n      Tuple2<String, CleanFileInfo> partitionDelFileTuple = iter.next();\n      String partitionPath = partitionDelFileTuple._1();\n      Path deletePath = new Path(partitionDelFileTuple._2().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      if (!partitionCleanStatMap.containsKey(partitionPath)) {\n        partitionCleanStatMap.put(partitionPath, new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple._2().isBootstrapBaseFile();\n      PartitionCleanStat partitionCleanStat = partitionCleanStatMap.get(partitionPath);\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    }\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/clean/FlinkCleanActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"NB"}],"commitId":"e4e2fbc3bb2c4796c6813114dd1c37ffa5a1e03a","commitMessage":"@@@[HUDI-1419] Add base implementation for hudi java client (#2286)\n\n","date":"2020-12-20 11:25:27","modifiedFileCount":"2","status":"M","submitter":"Shen Hong"},{"authorTime":"2021-07-22 13:34:15","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":3,"curCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Iterator<ImmutablePair<String, CleanFileInfo>> iter, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    while (iter.hasNext()) {\n      Pair<String, CleanFileInfo> partitionDelFileTuple = iter.next();\n      String partitionPath = partitionDelFileTuple.getLeft();\n      Path deletePath = new Path(partitionDelFileTuple.getRight().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      if (!partitionCleanStatMap.containsKey(partitionPath)) {\n        partitionCleanStatMap.put(partitionPath, new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple.getRight().isBootstrapBaseFile();\n      PartitionCleanStat partitionCleanStat = partitionCleanStatMap.get(partitionPath);\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    }\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","date":"2020-12-20 11:25:27","endLine":129,"groupId":"10482","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteFilesFunc","params":"(Iterator<ImmutablePair<String@CleanFileInfo>>iter@HoodieTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d1/626c81db1def048f98ca03b1ed99b15dcea616.src","preCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Iterator<ImmutablePair<String, CleanFileInfo>> iter, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    while (iter.hasNext()) {\n      Pair<String, CleanFileInfo> partitionDelFileTuple = iter.next();\n      String partitionPath = partitionDelFileTuple.getLeft();\n      Path deletePath = new Path(partitionDelFileTuple.getRight().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      if (!partitionCleanStatMap.containsKey(partitionPath)) {\n        partitionCleanStatMap.put(partitionPath, new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple.getRight().isBootstrapBaseFile();\n      PartitionCleanStat partitionCleanStat = partitionCleanStatMap.get(partitionPath);\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    }\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/clean/JavaCleanActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"},{"authorDate":"2021-07-22 13:34:15","commitOrder":3,"curCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Stream<Tuple2<String, CleanFileInfo>> cleanFileInfo, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    cleanFileInfo.parallel().forEach(partitionDelFileTuple -> {\n      String partitionPath = partitionDelFileTuple._1();\n      Path deletePath = new Path(partitionDelFileTuple._2().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      final PartitionCleanStat partitionCleanStat;\n      synchronized (partitionCleanStatMap) {\n        partitionCleanStat = partitionCleanStatMap.computeIfAbsent(partitionPath, k -> new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple._2().isBootstrapBaseFile();\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    });\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","date":"2021-07-22 13:34:15","endLine":127,"groupId":"10482","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"deleteFilesFunc","params":"(Stream<Tuple2<String@CleanFileInfo>>cleanFileInfo@HoodieTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/93/78cb2304b7908addef5d2c363ece313d28348c.src","preCode":"  private static Stream<Pair<String, PartitionCleanStat>> deleteFilesFunc(Iterator<Tuple2<String, CleanFileInfo>> iter, HoodieTable table) {\n    Map<String, PartitionCleanStat> partitionCleanStatMap = new HashMap<>();\n    FileSystem fs = table.getMetaClient().getFs();\n\n    while (iter.hasNext()) {\n      Tuple2<String, CleanFileInfo> partitionDelFileTuple = iter.next();\n      String partitionPath = partitionDelFileTuple._1();\n      Path deletePath = new Path(partitionDelFileTuple._2().getFilePath());\n      String deletePathStr = deletePath.toString();\n      Boolean deletedFileResult = null;\n      try {\n        deletedFileResult = deleteFileAndGetResult(fs, deletePathStr);\n      } catch (IOException e) {\n        LOG.error(\"Delete file failed\");\n      }\n      if (!partitionCleanStatMap.containsKey(partitionPath)) {\n        partitionCleanStatMap.put(partitionPath, new PartitionCleanStat(partitionPath));\n      }\n      boolean isBootstrapBasePathFile = partitionDelFileTuple._2().isBootstrapBaseFile();\n      PartitionCleanStat partitionCleanStat = partitionCleanStatMap.get(partitionPath);\n      if (isBootstrapBasePathFile) {\n        \r\n        partitionCleanStat.addDeleteFilePatterns(deletePath.toString(), true);\n        partitionCleanStat.addDeletedFileResult(deletePath.toString(), deletedFileResult, true);\n      } else {\n        partitionCleanStat.addDeleteFilePatterns(deletePath.getName(), false);\n        partitionCleanStat.addDeletedFileResult(deletePath.getName(), deletedFileResult, false);\n      }\n    }\n    return partitionCleanStatMap.entrySet().stream().map(e -> Pair.of(e.getKey(), e.getValue()));\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/clean/FlinkCleanActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"2370a9facbe4418f994f29c426e9b2a255e3abb0","commitMessage":"@@@[HUDI-2204] Add marker files for flink writer (#3316)\n\n","date":"2021-07-22 13:34:15","modifiedFileCount":"6","status":"M","submitter":"Danny Chan"}]
