[{"authorTime":"2021-03-15 16:02:05","codes":[{"authorDate":"2021-03-15 16:02:05","commitOrder":1,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-03-15 16:02:05","endLine":379,"groupId":"616","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/67779ffaf605e15416e1689b5b5b7fe691fb2e.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"B"},{"authorDate":"2021-03-15 16:02:05","commitOrder":1,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(\"COPY_ON_WRITE\");\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    assertFalse(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n    assertTrue(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n  }\n","date":"2021-03-15 16:02:05","endLine":513,"groupId":"2691","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/67779ffaf605e15416e1689b5b5b7fe691fb2e.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(\"COPY_ON_WRITE\");\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    assertFalse(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n    assertTrue(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"B"}],"commitId":"fc6c5f4285098d18cd7f6e81785f59e68a3b6862","commitMessage":"@@@[HUDI-1684] Tweak hudi-flink-bundle module pom and reorganize the pacakges for hudi-flink module (#2669)\n\n* Add required dependencies for hudi-flink-bundle module\n* Some packages reorganization of hudi-flink module","date":"2021-03-15 16:02:05","modifiedFileCount":"12","status":"B","submitter":"Danny Chan"},{"authorTime":"2021-03-29 10:47:29","codes":[{"authorDate":"2021-03-15 16:02:05","commitOrder":2,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-03-15 16:02:05","endLine":379,"groupId":"616","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/67779ffaf605e15416e1689b5b5b7fe691fb2e.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"},{"authorDate":"2021-03-29 10:47:29","commitOrder":2,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    assertFalse(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n    \r\n    funcWrapper.invoke(TestData.DATA_SET_INSERT.get(0));\n    assertTrue(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n  }\n","date":"2021-03-29 10:47:29","endLine":514,"groupId":"5370","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0e/53cfaca1e628f26d0685f6d2c6d75e718edf39.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(\"COPY_ON_WRITE\");\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    assertFalse(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n    assertTrue(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"d415d45416707ca4d5b1dbad65dc80e6fccfa378","commitMessage":"@@@[HUDI-1729] Asynchronous Hive sync and commits cleaning for Flink writer (#2732)\n\n","date":"2021-03-29 10:47:29","modifiedFileCount":"16","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-04-06 19:06:41","codes":[{"authorDate":"2021-03-15 16:02:05","commitOrder":3,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-03-15 16:02:05","endLine":379,"groupId":"616","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/67779ffaf605e15416e1689b5b5b7fe691fb2e.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"},{"authorDate":"2021-04-06 19:06:41","commitOrder":3,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-04-06 19:06:41","endLine":507,"groupId":"5370","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/23/84f7ef9d87364e7a9c0d70a33534a87cd2f4e8.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    assertFalse(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n    \r\n    funcWrapper.invoke(TestData.DATA_SET_INSERT.get(0));\n    assertTrue(funcWrapper.isAllPartitionsLoaded(),\n        \"All partitions assume to be loaded into the index state\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"9c369c607df2816ea2cd1221fb6d879e3fb8f74c","commitMessage":"@@@[HUDI-1757] Assigns the buckets by record key for Flink writer (#2757)\n\nCurrently we assign the buckets by record partition path which could\ncause hotspot if the partition field is datetime type. Changes to assign\nbuckets by grouping the record whth their key first.  the assignment is\nvalid if only there is no conflict(two task write to the same bucket).\n\nThis patch also changes the coordinator execution to be asynchronous.","date":"2021-04-06 19:06:41","modifiedFileCount":"23","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-04-09 13:46:19","codes":[{"authorDate":"2021-03-15 16:02:05","commitOrder":4,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-03-15 16:02:05","endLine":379,"groupId":"616","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/67779ffaf605e15416e1689b5b5b7fe691fb2e.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"},{"authorDate":"2021-04-09 13:46:19","commitOrder":4,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-04-09 13:46:19","endLine":511,"groupId":"5370","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f3/73ab86de48feed6eb43f754695a341da83f66b.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"6786581c4842e47e1a8a8e942f54003dc151c7c6","commitMessage":"@@@[HUDI-1775] Add option for compaction parallelism (#2785)\n\n","date":"2021-04-09 13:46:19","modifiedFileCount":"6","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-04-14 10:23:37","codes":[{"authorDate":"2021-04-14 10:23:37","commitOrder":5,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-04-14 10:23:37","endLine":376,"groupId":"616","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9e/417e33f820ed6ff3f42e868d292c9be50fa365.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"},{"authorDate":"2021-04-14 10:23:37","commitOrder":5,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-04-14 10:23:37","endLine":510,"groupId":"5370","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9e/417e33f820ed6ff3f42e868d292c9be50fa365.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"}],"commitId":"ab4a7b0b4afc66d2123c7f63fdab77b925a8a7f1","commitMessage":"@@@[HUDI-1788] Insert overwrite (table) for Flink writer (#2808)\n\nSupports `INSERT OVERWRITE` and `INSERT OVERWRITE TABLE` for Flink\nwriter.","date":"2021-04-14 10:23:37","modifiedFileCount":"19","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-06-08 13:55:25","codes":[{"authorDate":"2021-04-14 10:23:37","commitOrder":6,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-04-14 10:23:37","endLine":376,"groupId":"616","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9e/417e33f820ed6ff3f42e868d292c9be50fa365.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"N"},{"authorDate":"2021-06-08 13:55:25","commitOrder":6,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-06-08 13:55:25","endLine":644,"groupId":"871","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5e/68b7656831e11414441f225f00f0e1b34b444f.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    funcWrapper.clearIndexState();\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"));\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"}],"commitId":"cf83f10f5b369e1f16e63b4b68750d3ad2dc0240","commitMessage":"@@@add BootstrapFunction to support index bootstrap (#3024)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-06-08 13:55:25","modifiedFileCount":"7","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-06-29 08:53:52","codes":[{"authorDate":"2021-06-29 08:53:52","commitOrder":7,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-06-29 08:53:52","endLine":385,"groupId":"616","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/a3b344be4e2446e0536b8308f40fc957a25d1f.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2021-06-29 08:53:52","commitOrder":7,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-06-29 08:53:52","endLine":651,"groupId":"871","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/a3b344be4e2446e0536b8308f40fc957a25d1f.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":585,"status":"M"}],"commitId":"37b7c65d8a3ede00ae16909a06e31c24f179998c","commitMessage":"@@@[HUDI-2084] Resend the uncommitted write metadata when start up (#3168)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-06-29 08:53:52","modifiedFileCount":"12","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-06-30 20:37:00","codes":[{"authorDate":"2021-06-29 08:53:52","commitOrder":8,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-06-29 08:53:52","endLine":385,"groupId":"616","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/a3b344be4e2446e0536b8308f40fc957a25d1f.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"N"},{"authorDate":"2021-06-30 20:37:00","commitOrder":8,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    Map<String, String> expected = getExpectedBeforeCheckpointComplete();\n    checkWrittenData(tempFile, expected);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-06-30 20:37:00","endLine":657,"groupId":"871","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/b3/338a9083cb94647f0b6ca4197332d7dbd57ef2.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n    checkWrittenData(tempFile, EXPECTED2);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"M"}],"commitId":"07e93de8b49560eee23237817fc24fbe763f2891","commitMessage":"@@@[HUDI-2052] Support load logFile in BootstrapFunction (#3134)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-06-30 20:37:00","modifiedFileCount":"4","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-06-30 20:37:00","codes":[{"authorDate":"2021-08-10 20:23:23","commitOrder":9,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = getUpsertWithDeleteExpected();\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-08-10 20:23:23","endLine":404,"groupId":"616","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8e/7f8099b17c79704451332f4e35f985452e1cb6.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"},{"authorDate":"2021-06-30 20:37:00","commitOrder":9,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    Map<String, String> expected = getExpectedBeforeCheckpointComplete();\n    checkWrittenData(tempFile, expected);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-06-30 20:37:00","endLine":657,"groupId":"871","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/b3/338a9083cb94647f0b6ca4197332d7dbd57ef2.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    Map<String, String> expected = getExpectedBeforeCheckpointComplete();\n    checkWrittenData(tempFile, expected);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"N"}],"commitId":"21db6d7a84d4a83ec98c110e92ff9c92d05dd530","commitMessage":"@@@[HUDI-1771] Propagate CDC format for hoodie (#3285)\n\n","date":"2021-08-10 20:23:23","modifiedFileCount":"47","status":"M","submitter":"swuferhong"},{"authorTime":"2021-08-21 20:03:03","codes":[{"authorDate":"2021-08-10 20:23:23","commitOrder":10,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = getUpsertWithDeleteExpected();\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-08-10 20:23:23","endLine":404,"groupId":"10422","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8e/7f8099b17c79704451332f4e35f985452e1cb6.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = getUpsertWithDeleteExpected();\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"N"},{"authorDate":"2021-08-21 20:03:03","commitOrder":10,"curCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    Map<String, String> expected = getExpectedBeforeCheckpointComplete();\n    checkWrittenData(tempFile, expected);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-08-21 20:03:03","endLine":764,"groupId":"10422","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexStateBootstrap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0c/52241595623234bcd7ffc7b330d9d42d433995.src","preCode":"  public void testIndexStateBootstrap() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n\n    \r\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, true);\n    funcWrapper = new StreamWriteFunctionWrapper<>(tempFile.getAbsolutePath(), conf);\n\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertTrue(funcWrapper.isAlreadyBootstrap());\n\n    checkIndexLoaded(\n        new HoodieKey(\"id1\", \"par1\"),\n        new HoodieKey(\"id2\", \"par1\"),\n        new HoodieKey(\"id3\", \"par2\"),\n        new HoodieKey(\"id4\", \"par2\"),\n        new HoodieKey(\"id5\", \"par3\"),\n        new HoodieKey(\"id6\", \"par3\"),\n        new HoodieKey(\"id7\", \"par4\"),\n        new HoodieKey(\"id8\", \"par4\"),\n        new HoodieKey(\"id9\", \"par3\"),\n        new HoodieKey(\"id10\", \"par4\"),\n        new HoodieKey(\"id11\", \"par4\"));\n\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    Map<String, String> expected = getExpectedBeforeCheckpointComplete();\n    checkWrittenData(tempFile, expected);\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n\n    funcWrapper.checkpointComplete(1);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"}],"commitId":"ab3fbb88950ca351723f2f46da9f40ba325a03b5","commitMessage":"@@@[HUDI-2342] Optimize Bootstrap operator (#3516)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-08-21 20:03:03","modifiedFileCount":"6","status":"M","submitter":"yuzhaojing"}]
