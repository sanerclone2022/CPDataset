[{"authorTime":"2019-11-02 03:40:09","codes":[{"authorDate":"2019-11-02 03:40:09","commitOrder":1,"curCode":"  public void testDagWithInsertUpsertAndValidate(boolean useDeltaStreamer, String tableType) throws Exception {\n    dfs.delete(new Path(dfsBasePath + \"/input\"), true);\n    dfs.delete(new Path(dfsBasePath + \"/result\"), true);\n    String inputBasePath = dfsBasePath + \"/input/\" + UUID.randomUUID().toString();\n    String outputBasePath = dfsBasePath + \"/result/\" + UUID.randomUUID().toString();\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    cfg.workloadDagGenerator = ComplexDagGenerator.class.getName();\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 2);\n  }\n","date":"2020-07-31 12:21:15","endLine":154,"groupId":"2826","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDagWithInsertUpsertAndValidate","params":"(booleanuseDeltaStreamer@StringtableType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9d/0d104b99bfb8560512d164d3773a88cac5dfaa.src","preCode":"  public void testDagWithInsertUpsertAndValidate(boolean useDeltaStreamer, String tableType) throws Exception {\n    dfs.delete(new Path(dfsBasePath + \"/input\"), true);\n    dfs.delete(new Path(dfsBasePath + \"/result\"), true);\n    String inputBasePath = dfsBasePath + \"/input/\" + UUID.randomUUID().toString();\n    String outputBasePath = dfsBasePath + \"/result/\" + UUID.randomUUID().toString();\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    cfg.workloadDagGenerator = ComplexDagGenerator.class.getName();\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 2);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"},{"authorDate":"2019-11-02 03:40:09","commitOrder":1,"curCode":"  public void testHiveSync(boolean useDeltaStreamer, String tableType) throws Exception {\n    dfs.delete(new Path(dfsBasePath + \"/input\"), true);\n    dfs.delete(new Path(dfsBasePath + \"/result\"), true);\n    String inputBasePath = dfsBasePath + \"/input\";\n    String outputBasePath = dfsBasePath + \"/result\";\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    if (tableType == HoodieTableType.COPY_ON_WRITE.name()) {\n      cfg.workloadDagGenerator = HiveSyncDagGenerator.class.getName();\n    } else {\n      cfg.workloadDagGenerator = HiveSyncDagGeneratorMOR.class.getName();\n    }\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 1);\n  }\n","date":"2020-07-31 12:21:15","endLine":172,"groupId":"2827","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiveSync","params":"(booleanuseDeltaStreamer@StringtableType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9d/0d104b99bfb8560512d164d3773a88cac5dfaa.src","preCode":"  public void testHiveSync(boolean useDeltaStreamer, String tableType) throws Exception {\n    dfs.delete(new Path(dfsBasePath + \"/input\"), true);\n    dfs.delete(new Path(dfsBasePath + \"/result\"), true);\n    String inputBasePath = dfsBasePath + \"/input\";\n    String outputBasePath = dfsBasePath + \"/result\";\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    if (tableType == HoodieTableType.COPY_ON_WRITE.name()) {\n      cfg.workloadDagGenerator = HiveSyncDagGenerator.class.getName();\n    } else {\n      cfg.workloadDagGenerator = HiveSyncDagGeneratorMOR.class.getName();\n    }\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 1);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"2fc2b01d8647aafe2862db14fc169aa40d4ae3d5","commitMessage":"@@@[HUDI-394] Provide a basic implementation of test suite\n","date":"2020-07-31 12:21:15","modifiedFileCount":"19","status":"B","submitter":"Nishith Agarwal"},{"authorTime":"2020-09-02 11:12:22","codes":[{"authorDate":"2020-09-02 11:12:22","commitOrder":2,"curCode":"  public void testDagWithInsertUpsertAndValidate(boolean useDeltaStreamer, String tableType) throws Exception {\n    this.cleanDFSDirs();\n    String inputBasePath = dfsBasePath + \"/input/\" + UUID.randomUUID().toString();\n    String outputBasePath = dfsBasePath + \"/result/\" + UUID.randomUUID().toString();\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    cfg.workloadDagGenerator = ComplexDagGenerator.class.getName();\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 2);\n  }\n","date":"2020-09-09 13:41:14","endLine":167,"groupId":"2826","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDagWithInsertUpsertAndValidate","params":"(booleanuseDeltaStreamer@StringtableType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/55/68a19a8651e96c6dad8e362a4b0eb6a1e9ce82.src","preCode":"  public void testDagWithInsertUpsertAndValidate(boolean useDeltaStreamer, String tableType) throws Exception {\n    dfs.delete(new Path(dfsBasePath + \"/input\"), true);\n    dfs.delete(new Path(dfsBasePath + \"/result\"), true);\n    String inputBasePath = dfsBasePath + \"/input/\" + UUID.randomUUID().toString();\n    String outputBasePath = dfsBasePath + \"/result/\" + UUID.randomUUID().toString();\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    cfg.workloadDagGenerator = ComplexDagGenerator.class.getName();\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 2);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-09-02 11:12:22","commitOrder":2,"curCode":"  public void testHiveSync() throws Exception {\n    boolean useDeltaStreamer = false;\n    String tableType = \"COPY_ON_WRITE\";\n    this.cleanDFSDirs();\n    String inputBasePath = dfsBasePath + \"/input\";\n    String outputBasePath = dfsBasePath + \"/result\";\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    if (tableType == HoodieTableType.COPY_ON_WRITE.name()) {\n      cfg.workloadDagGenerator = HiveSyncDagGenerator.class.getName();\n    } else {\n      cfg.workloadDagGenerator = HiveSyncDagGeneratorMOR.class.getName();\n    }\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 1);\n  }\n","date":"2020-09-09 13:41:14","endLine":186,"groupId":"2827","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiveSync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/55/68a19a8651e96c6dad8e362a4b0eb6a1e9ce82.src","preCode":"  public void testHiveSync(boolean useDeltaStreamer, String tableType) throws Exception {\n    dfs.delete(new Path(dfsBasePath + \"/input\"), true);\n    dfs.delete(new Path(dfsBasePath + \"/result\"), true);\n    String inputBasePath = dfsBasePath + \"/input\";\n    String outputBasePath = dfsBasePath + \"/result\";\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    if (tableType == HoodieTableType.COPY_ON_WRITE.name()) {\n      cfg.workloadDagGenerator = HiveSyncDagGenerator.class.getName();\n    } else {\n      cfg.workloadDagGenerator = HiveSyncDagGeneratorMOR.class.getName();\n    }\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 1);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"53d1e551108c6fcde3b39f0080b64996892256de","commitMessage":"@@@Test Suite should work with Docker + Unit Tests\n","date":"2020-09-09 13:41:14","modifiedFileCount":"14","status":"M","submitter":"Abhishek Modi"},{"authorTime":"2021-02-20 09:54:26","codes":[{"authorDate":"2021-02-20 09:54:26","commitOrder":3,"curCode":"  public void testDagWithInsertUpsertAndValidate(boolean useDeltaStreamer, String tableType) throws Exception {\n    this.cleanDFSDirs();\n    String inputBasePath = dfsBasePath + \"/input/\" + UUID.randomUUID().toString();\n    String outputBasePath = dfsBasePath + \"/result/\" + UUID.randomUUID().toString();\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    cfg.workloadDagGenerator = ComplexDagGenerator.class.getName();\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = HoodieTableMetaClient.builder().setConf(new Configuration()).setBasePath(cfg.targetBasePath).build();\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 2);\n  }\n","date":"2021-02-20 09:54:26","endLine":178,"groupId":"10166","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDagWithInsertUpsertAndValidate","params":"(booleanuseDeltaStreamer@StringtableType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/62/32b1dfc2f89ce90325af6a7efb532dffd9e17a.src","preCode":"  public void testDagWithInsertUpsertAndValidate(boolean useDeltaStreamer, String tableType) throws Exception {\n    this.cleanDFSDirs();\n    String inputBasePath = dfsBasePath + \"/input/\" + UUID.randomUUID().toString();\n    String outputBasePath = dfsBasePath + \"/result/\" + UUID.randomUUID().toString();\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    cfg.workloadDagGenerator = ComplexDagGenerator.class.getName();\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 2);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2021-02-20 09:54:26","commitOrder":3,"curCode":"  public void testHiveSync() throws Exception {\n    boolean useDeltaStreamer = false;\n    String tableType = \"COPY_ON_WRITE\";\n    this.cleanDFSDirs();\n    String inputBasePath = dfsBasePath + \"/input\";\n    String outputBasePath = dfsBasePath + \"/result\";\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    if (tableType == HoodieTableType.COPY_ON_WRITE.name()) {\n      cfg.workloadDagGenerator = HiveSyncDagGenerator.class.getName();\n    } else {\n      cfg.workloadDagGenerator = HiveSyncDagGeneratorMOR.class.getName();\n    }\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = HoodieTableMetaClient.builder().setConf(new Configuration()).setBasePath(cfg.targetBasePath).build();\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 1);\n  }\n","date":"2021-02-20 09:54:26","endLine":197,"groupId":"10166","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiveSync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/62/32b1dfc2f89ce90325af6a7efb532dffd9e17a.src","preCode":"  public void testHiveSync() throws Exception {\n    boolean useDeltaStreamer = false;\n    String tableType = \"COPY_ON_WRITE\";\n    this.cleanDFSDirs();\n    String inputBasePath = dfsBasePath + \"/input\";\n    String outputBasePath = dfsBasePath + \"/result\";\n    HoodieTestSuiteConfig cfg = makeConfig(inputBasePath, outputBasePath, useDeltaStreamer, tableType);\n    if (tableType == HoodieTableType.COPY_ON_WRITE.name()) {\n      cfg.workloadDagGenerator = HiveSyncDagGenerator.class.getName();\n    } else {\n      cfg.workloadDagGenerator = HiveSyncDagGeneratorMOR.class.getName();\n    }\n    HoodieTestSuiteJob hoodieTestSuiteJob = new HoodieTestSuiteJob(cfg, jsc);\n    hoodieTestSuiteJob.runTestSuite();\n    HoodieTableMetaClient metaClient = new HoodieTableMetaClient(new Configuration(), cfg.targetBasePath);\n    assertEquals(metaClient.getActiveTimeline().getCommitsTimeline().getInstants().count(), 1);\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/job/TestHoodieTestSuiteJob.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"c9fcf964b2bae56a54cb72951c8d8999eb323ed6","commitMessage":"@@@[HUDI-1315] Adding builder for HoodieTableMetaClient initialization (#2534)\n\n","date":"2021-02-20 09:54:26","modifiedFileCount":"57","status":"M","submitter":"Sivabalan Narayanan"}]
