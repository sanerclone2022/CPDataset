[{"authorTime":"2020-08-06 12:34:55","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":1,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2020-08-06 12:34:55","endLine":170,"groupId":"2240","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"},{"authorDate":"2020-08-06 12:34:55","commitOrder":1,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat,\n          new Configuration());\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName, outputFormatClassName, serDeFormatClassName);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2020-08-06 12:34:55","endLine":188,"groupId":"2076","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e3/059407de4e4b3bc6a5b294f0ad2f7869b8cf3e.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat,\n          new Configuration());\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName, outputFormatClassName, serDeFormatClassName);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"}],"commitId":"51ea27d665d8053895dd047ca85e3338b357a81d","commitMessage":"@@@[HUDI-875] Abstract hudi-sync-common.  and support hudi-hive-sync.  hudi-dla-sync (#1810)\n\n- Generalize the hive-sync module for syncing to multiple metastores\n- Added new options for datasource\n- Added new command line for delta streamer \n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2020-08-06 12:34:55","modifiedFileCount":"3","status":"B","submitter":"lw0090"},{"authorTime":"2020-09-01 07:26:10","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":2,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2020-08-06 12:34:55","endLine":170,"groupId":"2240","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/ce9548785f70bb891fd39515bf1ed3c189c0d3.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"},{"authorDate":"2020-09-01 07:26:10","commitOrder":2,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName, outputFormatClassName, serDeFormatClassName);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2020-09-01 07:26:10","endLine":187,"groupId":"2076","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a3/b524feac9221635bbbc98221e479d90d48fee3.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat,\n          new Configuration());\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName, outputFormatClassName, serDeFormatClassName);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"48a58c98a11ec9d5d3f40c07f23e64a1d5ccd6e6","commitMessage":"@@@[MINOR] fix get classname for hive sync (#2008)\n\n","date":"2020-09-01 07:26:10","modifiedFileCount":"2","status":"M","submitter":"Gary Li"},{"authorTime":"2020-10-14 13:58:00","codes":[{"authorDate":"2020-10-14 13:58:00","commitOrder":3,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2020-10-14 13:58:00","endLine":170,"groupId":"2240","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/34/7bb62135e9f924f64387a2abc196ec5773fcab.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2020-10-14 13:58:00","commitOrder":3,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName, outputFormatClassName, serDeFormatClassName);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2020-10-14 13:58:00","endLine":193,"groupId":"2076","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d0/541e0889188a68e847cf214e907e650e2abcf8.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName, outputFormatClassName, serDeFormatClassName);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"7fa641ea9ad2318b185f8492964b30ebc90759b0","commitMessage":"@@@[HUDI-1302] Add support for timestamp field in HiveSync (#2129)\n\n","date":"2020-10-14 13:58:00","modifiedFileCount":"9","status":"M","submitter":"satishkotha"},{"authorTime":"2021-04-21 05:21:38","codes":[{"authorDate":"2021-04-21 05:21:38","commitOrder":4,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-04-21 05:21:38","endLine":173,"groupId":"5959","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/78/6c7208513baa90dcd2880e6a6cf22f6e2d03fe.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2021-04-21 05:21:38","commitOrder":4,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName,\n          outputFormatClassName, serDeFormatClassName, ConfigUtils.toMap(cfg.serdeProperties), ConfigUtils.toMap(cfg.tableProperties));\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n        \r\n        if (cfg.tableProperties != null) {\n          Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n          hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n          LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \" + cfg.tableProperties);\n        }\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-04-21 05:21:38","endLine":219,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/18/d133b6a339a64c798e01a4ab74e94f90998b3d.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName, outputFormatClassName, serDeFormatClassName);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"aacb8be5213a64a3cc9ddd791e2321526517d044","commitMessage":"@@@[HUDI-1415] Read Hoodie Table As Spark DataSource Table (#2283)\n\n","date":"2021-04-21 05:21:38","modifiedFileCount":"9","status":"M","submitter":"pengzhiwei"},{"authorTime":"2021-06-17 19:18:21","codes":[{"authorDate":"2021-04-21 05:21:38","commitOrder":5,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-04-21 05:21:38","endLine":173,"groupId":"5959","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/78/6c7208513baa90dcd2880e6a6cf22f6e2d03fe.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2021-06-17 19:18:21","commitOrder":5,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat,\n                          boolean readAsOptimized, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      Map<String, String> serdeProperties = ConfigUtils.toMap(cfg.serdeProperties);\n\n      \r\n      if (!serdeProperties.isEmpty()) {\n        String queryTypeKey = serdeProperties.remove(ConfigUtils.SPARK_QUERY_TYPE_KEY);\n        String queryAsROKey = serdeProperties.remove(ConfigUtils.SPARK_QUERY_AS_RO_KEY);\n        String queryAsRTKey = serdeProperties.remove(ConfigUtils.SPARK_QUERY_AS_RT_KEY);\n\n        if (queryTypeKey != null && queryAsROKey != null && queryAsRTKey != null) {\n          if (readAsOptimized) { \r\n            serdeProperties.put(queryTypeKey, queryAsROKey);\n          } else { \r\n            serdeProperties.put(queryTypeKey, queryAsRTKey);\n          }\n        }\n      }\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName,\n          outputFormatClassName, serDeFormatClassName, serdeProperties, ConfigUtils.toMap(cfg.tableProperties));\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n        \r\n        if (cfg.tableProperties != null) {\n          Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n          hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n          LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \" + cfg.tableProperties);\n        }\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-06-17 19:18:21","endLine":237,"groupId":"1744","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@booleanreadAsOptimized@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0d/be97f9b86838b497eaa0e27910ed169c3e528d.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName,\n          outputFormatClassName, serDeFormatClassName, ConfigUtils.toMap(cfg.serdeProperties), ConfigUtils.toMap(cfg.tableProperties));\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n        \r\n        if (cfg.tableProperties != null) {\n          Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n          hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n          LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \" + cfg.tableProperties);\n        }\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"ad53cf450ef01806ff8b2cfe8ff76fa350a7b4c5","commitMessage":"@@@[HUDI-1879] Fix RO Tables Returning Snapshot Result (#2925)\n\n","date":"2021-06-17 19:18:21","modifiedFileCount":"4","status":"M","submitter":"pengzhiwei"},{"authorTime":"2021-07-13 22:37:20","codes":[{"authorDate":"2021-04-21 05:21:38","commitOrder":6,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-04-21 05:21:38","endLine":173,"groupId":"5959","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/78/6c7208513baa90dcd2880e6a6cf22f6e2d03fe.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2021-07-13 22:37:20","commitOrder":6,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat,\n                          boolean readAsOptimized, MessageType schema) {\n    \r\n    Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n    Map<String, String> serdeProperties = ConfigUtils.toMap(cfg.serdeProperties);\n    if (cfg.syncAsSparkDataSourceTable) {\n      Map<String, String> sparkTableProperties = getSparkTableProperties(cfg.sparkSchemaLengthThreshold, schema);\n      Map<String, String> sparkSerdeProperties = getSparkSerdeProperties(readAsOptimized);\n      tableProperties.putAll(sparkTableProperties);\n      serdeProperties.putAll(sparkSerdeProperties);\n    }\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName,\n          outputFormatClassName, serDeFormatClassName, serdeProperties, tableProperties);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n        \r\n        if (cfg.tableProperties != null) {\n          hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n          LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \" + cfg.tableProperties);\n        }\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-07-13 22:37:20","endLine":248,"groupId":"4028","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@booleanreadAsOptimized@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/efabea8fe24666b4c11862b3aed665af4b6c1c.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat,\n                          boolean readAsOptimized, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      Map<String, String> serdeProperties = ConfigUtils.toMap(cfg.serdeProperties);\n\n      \r\n      if (!serdeProperties.isEmpty()) {\n        String queryTypeKey = serdeProperties.remove(ConfigUtils.SPARK_QUERY_TYPE_KEY);\n        String queryAsROKey = serdeProperties.remove(ConfigUtils.SPARK_QUERY_AS_RO_KEY);\n        String queryAsRTKey = serdeProperties.remove(ConfigUtils.SPARK_QUERY_AS_RT_KEY);\n\n        if (queryTypeKey != null && queryAsROKey != null && queryAsRTKey != null) {\n          if (readAsOptimized) { \r\n            serdeProperties.put(queryTypeKey, queryAsROKey);\n          } else { \r\n            serdeProperties.put(queryTypeKey, queryAsRTKey);\n          }\n        }\n      }\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName,\n          outputFormatClassName, serDeFormatClassName, serdeProperties, ConfigUtils.toMap(cfg.tableProperties));\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n        \r\n        if (cfg.tableProperties != null) {\n          Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n          hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n          LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \" + cfg.tableProperties);\n        }\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"f0a2f378ea57b577ef2275dbaf42cd960df9cfd5","commitMessage":"@@@Merge pull request #3120 from pengzhiwei2018/dev_metasync\n\n[HUDI-2045] Support Read Hoodie As DataSource Table For Flink And DeltaStreamer","date":"2021-07-13 22:37:20","modifiedFileCount":"6","status":"M","submitter":"pengzhiwei"},{"authorTime":"2021-07-13 22:37:20","codes":[{"authorDate":"2021-09-17 19:45:22","commitOrder":7,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(HoodieFileFormat.PARQUET, useRealTimeInputFormat);\n\n      \r\n      \r\n      \r\n      hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n          ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-09-17 19:45:22","endLine":169,"groupId":"10318","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/bf/0369ae2ee580df06e7465fda819b064a01162b.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat, MessageType schema) {\n    \r\n    if (!tableExists) {\n      LOG.info(\"DLA table \" + tableName + \" is not found. Creating it\");\n      if (!useRealTimeInputFormat) {\n        String inputFormatClassName = HoodieParquetInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      } else {\n        \r\n        \r\n        \r\n        String inputFormatClassName = HoodieParquetRealtimeInputFormat.class.getName();\n        hoodieDLAClient.createTable(tableName, schema, inputFormatClassName, MapredParquetOutputFormat.class.getName(),\n            ParquetHiveSerDe.class.getName(), new HashMap<>(), new HashMap<>());\n      }\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieDLAClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieDLAClient.updateTableDefinition(tableName, schemaDiff);\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-dla-sync/src/main/java/org/apache/hudi/dla/DLASyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2021-07-13 22:37:20","commitOrder":7,"curCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat,\n                          boolean readAsOptimized, MessageType schema) {\n    \r\n    Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n    Map<String, String> serdeProperties = ConfigUtils.toMap(cfg.serdeProperties);\n    if (cfg.syncAsSparkDataSourceTable) {\n      Map<String, String> sparkTableProperties = getSparkTableProperties(cfg.sparkSchemaLengthThreshold, schema);\n      Map<String, String> sparkSerdeProperties = getSparkSerdeProperties(readAsOptimized);\n      tableProperties.putAll(sparkTableProperties);\n      serdeProperties.putAll(sparkSerdeProperties);\n    }\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName,\n          outputFormatClassName, serDeFormatClassName, serdeProperties, tableProperties);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n        \r\n        if (cfg.tableProperties != null) {\n          hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n          LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \" + cfg.tableProperties);\n        }\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","date":"2021-07-13 22:37:20","endLine":248,"groupId":"10318","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"syncSchema","params":"(StringtableName@booleantableExists@booleanuseRealTimeInputFormat@booleanreadAsOptimized@MessageTypeschema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/efabea8fe24666b4c11862b3aed665af4b6c1c.src","preCode":"  private void syncSchema(String tableName, boolean tableExists, boolean useRealTimeInputFormat,\n                          boolean readAsOptimized, MessageType schema) {\n    \r\n    Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n    Map<String, String> serdeProperties = ConfigUtils.toMap(cfg.serdeProperties);\n    if (cfg.syncAsSparkDataSourceTable) {\n      Map<String, String> sparkTableProperties = getSparkTableProperties(cfg.sparkSchemaLengthThreshold, schema);\n      Map<String, String> sparkSerdeProperties = getSparkSerdeProperties(readAsOptimized);\n      tableProperties.putAll(sparkTableProperties);\n      serdeProperties.putAll(sparkSerdeProperties);\n    }\n    \r\n    if (!tableExists) {\n      LOG.info(\"Hive table \" + tableName + \" is not found. Creating it\");\n      HoodieFileFormat baseFileFormat = HoodieFileFormat.valueOf(cfg.baseFileFormat.toUpperCase());\n      String inputFormatClassName = HoodieInputFormatUtils.getInputFormatClassName(baseFileFormat, useRealTimeInputFormat);\n\n      if (baseFileFormat.equals(HoodieFileFormat.PARQUET) && cfg.usePreApacheInputFormat) {\n        \r\n        inputFormatClassName = useRealTimeInputFormat\n            ? com.uber.hoodie.hadoop.realtime.HoodieRealtimeInputFormat.class.getName()\n            : com.uber.hoodie.hadoop.HoodieInputFormat.class.getName();\n      }\n\n      String outputFormatClassName = HoodieInputFormatUtils.getOutputFormatClassName(baseFileFormat);\n      String serDeFormatClassName = HoodieInputFormatUtils.getSerDeClassName(baseFileFormat);\n\n      \r\n      \r\n      \r\n      hoodieHiveClient.createTable(tableName, schema, inputFormatClassName,\n          outputFormatClassName, serDeFormatClassName, serdeProperties, tableProperties);\n    } else {\n      \r\n      Map<String, String> tableSchema = hoodieHiveClient.getTableSchema(tableName);\n      SchemaDifference schemaDiff = HiveSchemaUtil.getSchemaDifference(schema, tableSchema, cfg.partitionFields, cfg.supportTimestamp);\n      if (!schemaDiff.isEmpty()) {\n        LOG.info(\"Schema difference found for \" + tableName);\n        hoodieHiveClient.updateTableDefinition(tableName, schema);\n        \r\n        if (cfg.tableProperties != null) {\n          hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n          LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \" + cfg.tableProperties);\n        }\n      } else {\n        LOG.info(\"No Schema difference for \" + tableName);\n      }\n    }\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"}],"commitId":"3a150ee1812993553f36cdc8d321766c267d3f4f","commitMessage":"@@@[HUDI-2447] Extract common business logic & Fix typo (#3683)\n\n","date":"2021-09-17 19:45:22","modifiedFileCount":"1","status":"M","submitter":"???"}]
