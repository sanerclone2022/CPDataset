[{"authorTime":"2020-11-01 12:15:41","codes":[{"authorDate":"2019-11-02 03:40:09","commitOrder":2,"curCode":"  public void testGenerateUpdateRecordsFromInputRecords() throws Exception {\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n    \r\n    UpdateConverter updateConverter = new UpdateConverter(schemaStr, minPayloadSize,\n        Arrays.asList(\"timestamp\"), Arrays.asList(\"_row_key\"));\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = updateConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> updateRecords = outputRDD.collect();\n    updateRecords.stream().forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue(areRecordsDifferent(inputRecord, updateRecord));\n    });\n\n  }\n","date":"2020-07-31 12:21:15","endLine":75,"groupId":"3482","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGenerateUpdateRecordsFromInputRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/98/e09915ca5a68e44ae2f6ec2cecc4872b8ca358.src","preCode":"  public void testGenerateUpdateRecordsFromInputRecords() throws Exception {\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n    \r\n    UpdateConverter updateConverter = new UpdateConverter(schemaStr, minPayloadSize,\n        Arrays.asList(\"timestamp\"), Arrays.asList(\"_row_key\"));\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = updateConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> updateRecords = outputRDD.collect();\n    updateRecords.stream().forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue(areRecordsDifferent(inputRecord, updateRecord));\n    });\n\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestUpdateConverter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"NB"},{"authorDate":"2020-11-01 12:15:41","commitOrder":2,"curCode":"  public void testGenerateDeleteRecordsFromInputRecords() throws Exception {\n    \r\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n\n    \r\n    DeleteConverter deleteConverter = new DeleteConverter(schemaStr, minPayloadSize);\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = deleteConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> deleteRecords = outputRDD.collect();\n    deleteRecords.stream().forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue((boolean)inputRecord.get(DEFAULT_HOODIE_IS_DELETED_COL));\n    });\n  }\n","date":"2020-11-01 12:15:41","endLine":83,"groupId":"3482","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGenerateDeleteRecordsFromInputRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8e/d98b4fb69fcd00d6feebfac8713515fce0e534.src","preCode":"  public void testGenerateDeleteRecordsFromInputRecords() throws Exception {\n    \r\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n\n    \r\n    DeleteConverter deleteConverter = new DeleteConverter(schemaStr, minPayloadSize);\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = deleteConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> deleteRecords = outputRDD.collect();\n    deleteRecords.stream().forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue((boolean)inputRecord.get(DEFAULT_HOODIE_IS_DELETED_COL));\n    });\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestDeleteConverter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"a205dd10faba0a83dcb39a12abb6f744b5224992","commitMessage":"@@@[HUDI-1338] Adding Delete support to test suite framework (#2172)\n\n- Adding Delete support to test suite. \n         Added DeleteNode \n         Added support to generate delete records \n","date":"2020-11-01 12:15:41","modifiedFileCount":"7","status":"M","submitter":"Sivabalan Narayanan"},{"authorTime":"2020-11-01 12:15:41","codes":[{"authorDate":"2021-04-08 13:35:03","commitOrder":3,"curCode":"  public void testGenerateUpdateRecordsFromInputRecords() throws Exception {\n    \r\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n\n    \r\n    UpdateConverter updateConverter = new UpdateConverter(schemaStr, minPayloadSize,\n            Collections.singletonList(\"timestamp\"), Collections.singletonList(\"_row_key\"));\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = updateConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> updateRecords = outputRDD.collect();\n    updateRecords.forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue(areRecordsDifferent(inputRecord, updateRecord));\n    });\n\n  }\n","date":"2021-04-08 13:35:03","endLine":84,"groupId":"10164","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGenerateUpdateRecordsFromInputRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e1/62448bc71ada6c57caa799d94a40b9b5df151e.src","preCode":"  public void testGenerateUpdateRecordsFromInputRecords() throws Exception {\n    \r\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n\n    \r\n    UpdateConverter updateConverter = new UpdateConverter(schemaStr, minPayloadSize,\n        Arrays.asList(\"timestamp\"), Arrays.asList(\"_row_key\"));\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = updateConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> updateRecords = outputRDD.collect();\n    updateRecords.stream().forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue(areRecordsDifferent(inputRecord, updateRecord));\n    });\n\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestUpdateConverter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-11-01 12:15:41","commitOrder":3,"curCode":"  public void testGenerateDeleteRecordsFromInputRecords() throws Exception {\n    \r\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n\n    \r\n    DeleteConverter deleteConverter = new DeleteConverter(schemaStr, minPayloadSize);\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = deleteConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> deleteRecords = outputRDD.collect();\n    deleteRecords.stream().forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue((boolean)inputRecord.get(DEFAULT_HOODIE_IS_DELETED_COL));\n    });\n  }\n","date":"2020-11-01 12:15:41","endLine":83,"groupId":"10164","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGenerateDeleteRecordsFromInputRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8e/d98b4fb69fcd00d6feebfac8713515fce0e534.src","preCode":"  public void testGenerateDeleteRecordsFromInputRecords() throws Exception {\n    \r\n    JavaRDD<GenericRecord> inputRDD = TestUtils.makeRDD(jsc, 10);\n    String schemaStr = inputRDD.take(1).get(0).getSchema().toString();\n    int minPayloadSize = 1000;\n\n    \r\n    DeleteConverter deleteConverter = new DeleteConverter(schemaStr, minPayloadSize);\n    List<String> insertRowKeys = inputRDD.map(r -> r.get(\"_row_key\").toString()).collect();\n    assertTrue(inputRDD.count() == 10);\n    JavaRDD<GenericRecord> outputRDD = deleteConverter.convert(inputRDD);\n    List<String> updateRowKeys = outputRDD.map(row -> row.get(\"_row_key\").toString()).collect();\n    \r\n    assertTrue(insertRowKeys.containsAll(updateRowKeys));\n    Map<String, GenericRecord> inputRecords = inputRDD.mapToPair(r -> new Tuple2<>(r.get(\"_row_key\").toString(), r))\n        .collectAsMap();\n    List<GenericRecord> deleteRecords = outputRDD.collect();\n    deleteRecords.stream().forEach(updateRecord -> {\n      GenericRecord inputRecord = inputRecords.get(updateRecord.get(\"_row_key\").toString());\n      assertTrue((boolean)inputRecord.get(DEFAULT_HOODIE_IS_DELETED_COL));\n    });\n  }\n","realPath":"hudi-integ-test/src/test/java/org/apache/hudi/integ/testsuite/converter/TestDeleteConverter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"18459d4045ec4a85081c227893b226a4d759f84b","commitMessage":"@@@[MINOR] Some unit test code optimize (#2782)\n\n* Optimized code\n\n* Optimized code","date":"2021-04-08 13:35:03","modifiedFileCount":"2","status":"M","submitter":"Simon"}]
