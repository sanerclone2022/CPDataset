[{"authorTime":"2020-11-03 05:12:51","codes":[{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  public void testHappyFlow() {\n    ComplexKeyGenerator keyGenerator = new ComplexKeyGenerator(getProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=2020-03-21\");\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=2020-03-21\");\n  }\n","date":"2020-11-03 05:12:51","endLine":98,"groupId":"3004","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHappyFlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/54/f4ffaef9dd230ddc2f6a50f656ac5c449d3843.src","preCode":"  public void testHappyFlow() {\n    ComplexKeyGenerator keyGenerator = new ComplexKeyGenerator(getProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=2020-03-21\");\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=2020-03-21\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  public void testComplexRecordKeysWithComplexPartitionPath() {\n    BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getComplexRecordKeyAndPartitionPathProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=20200321\");\n\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=20200321\");\n  }\n","date":"2020-11-03 05:12:51","endLine":223,"groupId":"3004","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexRecordKeysWithComplexPartitionPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dc/30b932e9d2ba1b3b99f1667349fd4a199517a1.src","preCode":"  public void testComplexRecordKeysWithComplexPartitionPath() {\n    BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getComplexRecordKeyAndPartitionPathProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=20200321\");\n\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=20200321\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestCustomKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"B"}],"commitId":"d160abb43740e0bcdf40458c345ecd2d74e6698c","commitMessage":"@@@[HUDI-912] Refactor and relocate KeyGenerator to support more engines (#2200)\n\n* [HUDI-912] Refactor and relocate KeyGenerator to support more engines\n\n* Rename KeyGenerators","date":"2020-11-03 05:12:51","modifiedFileCount":"1","status":"B","submitter":"wangxianghu"},{"authorTime":"2021-06-08 21:26:10","codes":[{"authorDate":"2020-11-03 05:12:51","commitOrder":2,"curCode":"  public void testHappyFlow() {\n    ComplexKeyGenerator keyGenerator = new ComplexKeyGenerator(getProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=2020-03-21\");\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=2020-03-21\");\n  }\n","date":"2020-11-03 05:12:51","endLine":98,"groupId":"3004","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHappyFlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/54/f4ffaef9dd230ddc2f6a50f656ac5c449d3843.src","preCode":"  public void testHappyFlow() {\n    ComplexKeyGenerator keyGenerator = new ComplexKeyGenerator(getProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=2020-03-21\");\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=2020-03-21\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2021-06-08 21:26:10","commitOrder":2,"curCode":"  public void testComplexRecordKeysWithComplexPartitionPath(TypedProperties props) throws IOException {\n    BuiltinKeyGenerator keyGenerator =\n        (BuiltinKeyGenerator) HoodieSparkKeyGeneratorFactory.createKeyGenerator(props);\n\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=20200321\");\n\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=20200321\");\n  }\n","date":"2021-06-08 21:26:10","endLine":362,"groupId":"3004","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexRecordKeysWithComplexPartitionPath","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/19a8a2f6e50a8878b2a8467a428cc53faf54b5.src","preCode":"  public void testComplexRecordKeysWithComplexPartitionPath() {\n    BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getComplexRecordKeyAndPartitionPathProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=20200321\");\n\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=20200321\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestCustomKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"7261f0850727aea611cd34e1bb07d684b44534f6","commitMessage":"@@@[HUDI-1929] Support configure KeyGenerator by type (#2993)\n\n","date":"2021-06-08 21:26:10","modifiedFileCount":"11","status":"M","submitter":"wangxianghu"},{"authorTime":"2021-07-20 08:43:48","codes":[{"authorDate":"2021-07-20 08:43:48","commitOrder":3,"curCode":"  public void testHappyFlow() {\n    ComplexKeyGenerator keyGenerator = new ComplexKeyGenerator(getProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=2020-03-21\");\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=2020-03-21\");\n\n    InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row);\n    Assertions.assertEquals(keyGenerator.getPartitionPath(internalRow, row.schema()), \"timestamp=4357686/ts_ms=2020-03-21\");\n  }\n","date":"2021-07-20 08:43:48","endLine":103,"groupId":"10688","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHappyFlow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1b/fd40344932ce11264d5e8addc415ad684f93ab.src","preCode":"  public void testHappyFlow() {\n    ComplexKeyGenerator keyGenerator = new ComplexKeyGenerator(getProps());\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=2020-03-21\");\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=2020-03-21\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2021-07-20 08:43:48","commitOrder":3,"curCode":"  public void testComplexRecordKeysWithComplexPartitionPath(TypedProperties props) throws IOException {\n    BuiltinKeyGenerator keyGenerator =\n        (BuiltinKeyGenerator) HoodieSparkKeyGeneratorFactory.createKeyGenerator(props);\n\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=20200321\");\n\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=20200321\");\n\n    InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row);\n    Assertions.assertEquals(keyGenerator.getPartitionPath(internalRow, row.schema()), \"timestamp=4357686/ts_ms=20200321\");\n  }\n","date":"2021-07-20 08:43:48","endLine":376,"groupId":"10688","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexRecordKeysWithComplexPartitionPath","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/3e/55304cafe95478d27bfe39be04bc908e4e1c35.src","preCode":"  public void testComplexRecordKeysWithComplexPartitionPath(TypedProperties props) throws IOException {\n    BuiltinKeyGenerator keyGenerator =\n        (BuiltinKeyGenerator) HoodieSparkKeyGeneratorFactory.createKeyGenerator(props);\n\n    GenericRecord record = getRecord();\n    HoodieKey key = keyGenerator.getKey(record);\n    Assertions.assertEquals(key.getRecordKey(), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(key.getPartitionPath(), \"timestamp=4357686/ts_ms=20200321\");\n\n    Row row = KeyGeneratorTestUtilities.getRow(record);\n    Assertions.assertEquals(keyGenerator.getRecordKey(row), \"_row_key:key1,pii_col:pi\");\n    Assertions.assertEquals(keyGenerator.getPartitionPath(row), \"timestamp=4357686/ts_ms=20200321\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestCustomKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"d5026e9a24850bdcce9f6df3686bf2235d7d01c4","commitMessage":"@@@[HUDI-2161] Adding support to disable meta columns with bulk insert operation (#3247)\n\n","date":"2021-07-20 08:43:48","modifiedFileCount":"39","status":"M","submitter":"Sivabalan Narayanan"}]
