[{"authorTime":"2020-10-02 05:25:29","codes":[{"authorDate":"2020-10-02 05:25:29","commitOrder":1,"curCode":"  public List<ValidationOpResult> validateCompactionPlan(HoodieTableMetaClient metaClient, String compactionInstant,\n      int parallelism) throws IOException {\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    HoodieTableFileSystemView fsView =\n        new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n\n    if (plan.getOperations() != null) {\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Validate compaction operations\");\n      return context.map(ops, op -> {\n        try {\n          return validateCompactionOperation(metaClient, compactionInstant, op, Option.of(fsView));\n        } catch (IOException e) {\n          throw new HoodieIOException(e.getMessage(), e);\n        }\n      }, parallelism);\n    }\n    return new ArrayList<>();\n  }\n","date":"2020-10-02 05:25:29","endLine":98,"groupId":"1282","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateCompactionPlan","params":"(HoodieTableMetaClientmetaClient@StringcompactionInstant@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a2/ecb67277afe1ed7667efc7505eff820ec5f2a7.src","preCode":"  public List<ValidationOpResult> validateCompactionPlan(HoodieTableMetaClient metaClient, String compactionInstant,\n      int parallelism) throws IOException {\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    HoodieTableFileSystemView fsView =\n        new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n\n    if (plan.getOperations() != null) {\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Validate compaction operations\");\n      return context.map(ops, op -> {\n        try {\n          return validateCompactionOperation(metaClient, compactionInstant, op, Option.of(fsView));\n        } catch (IOException e) {\n          throw new HoodieIOException(e.getMessage(), e);\n        }\n      }, parallelism);\n    }\n    return new ArrayList<>();\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/CompactionAdminClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2020-10-02 05:25:29","commitOrder":1,"curCode":"  protected List<Pair<HoodieLogFile, HoodieLogFile>> getRenamingActionsForUnschedulingCompactionPlan(\n      HoodieTableMetaClient metaClient, String compactionInstant, int parallelism,\n      Option<HoodieTableFileSystemView> fsViewOpt, boolean skipValidation) throws IOException {\n    HoodieTableFileSystemView fsView = fsViewOpt.isPresent() ? fsViewOpt.get()\n        : new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    if (plan.getOperations() != null) {\n      LOG.info(\n          \"Number of Compaction Operations :\" + plan.getOperations().size() + \" for instant :\" + compactionInstant);\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Generate compaction unscheduling operations\");\n      return context.flatMap(ops, op -> {\n        try {\n          return getRenamingActionsForUnschedulingCompactionOperation(metaClient, compactionInstant, op,\n              Option.of(fsView), skipValidation).stream();\n        } catch (IOException ioe) {\n          throw new HoodieIOException(ioe.getMessage(), ioe);\n        } catch (CompactionValidationException ve) {\n          throw new HoodieException(ve);\n        }\n      }, parallelism);\n    }\n    LOG.warn(\"No operations for compaction instant : \" + compactionInstant);\n    return new ArrayList<>();\n  }\n","date":"2020-10-02 05:25:29","endLine":411,"groupId":"4754","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRenamingActionsForUnschedulingCompactionPlan","params":"(HoodieTableMetaClientmetaClient@StringcompactionInstant@intparallelism@Option<HoodieTableFileSystemView>fsViewOpt@booleanskipValidation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a2/ecb67277afe1ed7667efc7505eff820ec5f2a7.src","preCode":"  protected List<Pair<HoodieLogFile, HoodieLogFile>> getRenamingActionsForUnschedulingCompactionPlan(\n      HoodieTableMetaClient metaClient, String compactionInstant, int parallelism,\n      Option<HoodieTableFileSystemView> fsViewOpt, boolean skipValidation) throws IOException {\n    HoodieTableFileSystemView fsView = fsViewOpt.isPresent() ? fsViewOpt.get()\n        : new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    if (plan.getOperations() != null) {\n      LOG.info(\n          \"Number of Compaction Operations :\" + plan.getOperations().size() + \" for instant :\" + compactionInstant);\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Generate compaction unscheduling operations\");\n      return context.flatMap(ops, op -> {\n        try {\n          return getRenamingActionsForUnschedulingCompactionOperation(metaClient, compactionInstant, op,\n              Option.of(fsView), skipValidation).stream();\n        } catch (IOException ioe) {\n          throw new HoodieIOException(ioe.getMessage(), ioe);\n        } catch (CompactionValidationException ve) {\n          throw new HoodieException(ve);\n        }\n      }, parallelism);\n    }\n    LOG.warn(\"No operations for compaction instant : \" + compactionInstant);\n    return new ArrayList<>();\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/CompactionAdminClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"B"}],"commitId":"1f7add92916c37b05be270d9c75a9042134ec506","commitMessage":"@@@[HUDI-1089] Refactor hudi-client to support multi-engine (#1827)\n\n- This change breaks `hudi-client` into `hudi-client-common` and `hudi-spark-client` modules \n- Simple usages of Spark using jsc.parallelize() has been redone using EngineContext#map.  EngineContext#flatMap etc\n- Code changes in the PR.  break classes into `BaseXYZ` parent classes with no spark dependencies living in `hudi-client-common`\n- Classes on `hudi-spark-client` are named `SparkXYZ` extending the parent classes with all the Spark dependencies\n- To simplify/cleanup.  HoodieIndex#fetchRecordLocation has been removed and its usages in tests replaced with alternatives\n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2020-10-02 05:25:29","modifiedFileCount":"31","status":"B","submitter":"Mathieu"},{"authorTime":"2021-04-08 15:35:33","codes":[{"authorDate":"2020-10-02 05:25:29","commitOrder":2,"curCode":"  public List<ValidationOpResult> validateCompactionPlan(HoodieTableMetaClient metaClient, String compactionInstant,\n      int parallelism) throws IOException {\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    HoodieTableFileSystemView fsView =\n        new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n\n    if (plan.getOperations() != null) {\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Validate compaction operations\");\n      return context.map(ops, op -> {\n        try {\n          return validateCompactionOperation(metaClient, compactionInstant, op, Option.of(fsView));\n        } catch (IOException e) {\n          throw new HoodieIOException(e.getMessage(), e);\n        }\n      }, parallelism);\n    }\n    return new ArrayList<>();\n  }\n","date":"2020-10-02 05:25:29","endLine":98,"groupId":"10843","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateCompactionPlan","params":"(HoodieTableMetaClientmetaClient@StringcompactionInstant@intparallelism)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a2/ecb67277afe1ed7667efc7505eff820ec5f2a7.src","preCode":"  public List<ValidationOpResult> validateCompactionPlan(HoodieTableMetaClient metaClient, String compactionInstant,\n      int parallelism) throws IOException {\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    HoodieTableFileSystemView fsView =\n        new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n\n    if (plan.getOperations() != null) {\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Validate compaction operations\");\n      return context.map(ops, op -> {\n        try {\n          return validateCompactionOperation(metaClient, compactionInstant, op, Option.of(fsView));\n        } catch (IOException e) {\n          throw new HoodieIOException(e.getMessage(), e);\n        }\n      }, parallelism);\n    }\n    return new ArrayList<>();\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/CompactionAdminClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2021-04-08 15:35:33","commitOrder":2,"curCode":"  public List<Pair<HoodieLogFile, HoodieLogFile>> getRenamingActionsForUnschedulingCompactionPlan(\n      HoodieTableMetaClient metaClient, String compactionInstant, int parallelism,\n      Option<HoodieTableFileSystemView> fsViewOpt, boolean skipValidation) throws IOException {\n    HoodieTableFileSystemView fsView = fsViewOpt.isPresent() ? fsViewOpt.get()\n        : new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    if (plan.getOperations() != null) {\n      LOG.info(\n          \"Number of Compaction Operations :\" + plan.getOperations().size() + \" for instant :\" + compactionInstant);\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Generate compaction unscheduling operations\");\n      return context.flatMap(ops, op -> {\n        try {\n          return getRenamingActionsForUnschedulingCompactionOperation(metaClient, compactionInstant, op,\n              Option.of(fsView), skipValidation).stream();\n        } catch (IOException ioe) {\n          throw new HoodieIOException(ioe.getMessage(), ioe);\n        } catch (CompactionValidationException ve) {\n          throw new HoodieException(ve);\n        }\n      }, parallelism);\n    }\n    LOG.warn(\"No operations for compaction instant : \" + compactionInstant);\n    return new ArrayList<>();\n  }\n","date":"2021-04-08 15:35:33","endLine":411,"groupId":"10843","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getRenamingActionsForUnschedulingCompactionPlan","params":"(HoodieTableMetaClientmetaClient@StringcompactionInstant@intparallelism@Option<HoodieTableFileSystemView>fsViewOpt@booleanskipValidation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1c/869e46f1cbfde10f5489b03010c760d8d9432b.src","preCode":"  protected List<Pair<HoodieLogFile, HoodieLogFile>> getRenamingActionsForUnschedulingCompactionPlan(\n      HoodieTableMetaClient metaClient, String compactionInstant, int parallelism,\n      Option<HoodieTableFileSystemView> fsViewOpt, boolean skipValidation) throws IOException {\n    HoodieTableFileSystemView fsView = fsViewOpt.isPresent() ? fsViewOpt.get()\n        : new HoodieTableFileSystemView(metaClient, metaClient.getCommitsAndCompactionTimeline());\n    HoodieCompactionPlan plan = getCompactionPlan(metaClient, compactionInstant);\n    if (plan.getOperations() != null) {\n      LOG.info(\n          \"Number of Compaction Operations :\" + plan.getOperations().size() + \" for instant :\" + compactionInstant);\n      List<CompactionOperation> ops = plan.getOperations().stream()\n          .map(CompactionOperation::convertFromAvroRecordInstance).collect(Collectors.toList());\n      context.setJobStatus(this.getClass().getSimpleName(), \"Generate compaction unscheduling operations\");\n      return context.flatMap(ops, op -> {\n        try {\n          return getRenamingActionsForUnschedulingCompactionOperation(metaClient, compactionInstant, op,\n              Option.of(fsView), skipValidation).stream();\n        } catch (IOException ioe) {\n          throw new HoodieIOException(ioe.getMessage(), ioe);\n        } catch (CompactionValidationException ve) {\n          throw new HoodieException(ve);\n        }\n      }, parallelism);\n    }\n    LOG.warn(\"No operations for compaction instant : \" + compactionInstant);\n    return new ArrayList<>();\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/CompactionAdminClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"ecdbd2517fd8157d9e96f3d9abf195a589e191ae","commitMessage":"@@@[HUDI-699] Fix CompactionCommand and add unit test for CompactionCommand (#2325)\n\n","date":"2021-04-08 15:35:33","modifiedFileCount":"9","status":"M","submitter":"hongdd"}]
