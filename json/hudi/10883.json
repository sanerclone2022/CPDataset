[{"authorTime":"2021-01-06 20:55:14","codes":[{"authorDate":"2020-08-26 12:48:28","commitOrder":3,"curCode":"  private byte[] getCommitMetadata(String basePath, String partition, String commitTs, int count, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieCommitMetadata commit = new HoodieCommitMetadata();\n    for (int i = 1; i <= count; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, partition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(partition, stat);\n    }\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","date":"2020-08-29 03:23:47","endLine":227,"groupId":"4547","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommitMetadata","params":"(StringbasePath@Stringpartition@StringcommitTs@intcount@Map<String@String>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2e/a418c480b87b9b28df91f714b6f807659352eb.src","preCode":"  private byte[] getCommitMetadata(String basePath, String partition, String commitTs, int count, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieCommitMetadata commit = new HoodieCommitMetadata();\n    for (int i = 1; i <= count; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, partition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(partition, stat);\n    }\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"NB"},{"authorDate":"2021-01-06 20:55:14","commitOrder":3,"curCode":"  private byte[] getReplaceCommitMetadata(String basePath, String commitTs, String replacePartition, int replaceCount,\n                                          String newFilePartition, int newFileCount, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieReplaceCommitMetadata commit = new HoodieReplaceCommitMetadata();\n    for (int i = 1; i <= newFileCount; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, newFilePartition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(newFilePartition, stat);\n    }\n    Map<String, List<String>> partitionToReplaceFileIds = new HashMap<>();\n    if (replaceCount > 0) {\n      partitionToReplaceFileIds.put(replacePartition, new ArrayList<>());\n    }\n    for (int i = 1; i <= replaceCount; i++) {\n      partitionToReplaceFileIds.get(replacePartition).add(FSUtils.createNewFileIdPfx());\n    }\n    commit.setPartitionToReplaceFileIds(partitionToReplaceFileIds);\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","date":"2021-01-06 20:55:14","endLine":289,"groupId":"4547","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplaceCommitMetadata","params":"(StringbasePath@StringcommitTs@StringreplacePartition@intreplaceCount@StringnewFilePartition@intnewFileCount@Map<String@String>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/b7/9ffbbb529d9e45cc2cc5bb235e821b1317f2cb.src","preCode":"  private byte[] getReplaceCommitMetadata(String basePath, String commitTs, String replacePartition, int replaceCount,\n                                          String newFilePartition, int newFileCount, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieReplaceCommitMetadata commit = new HoodieReplaceCommitMetadata();\n    for (int i = 1; i <= newFileCount; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, newFilePartition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(newFilePartition, stat);\n    }\n    Map<String, List<String>> partitionToReplaceFileIds = new HashMap<>();\n    if (replaceCount > 0) {\n      partitionToReplaceFileIds.put(replacePartition, new ArrayList<>());\n    }\n    for (int i = 1; i <= replaceCount; i++) {\n      partitionToReplaceFileIds.get(replacePartition).add(FSUtils.createNewFileIdPfx());\n    }\n    commit.setPartitionToReplaceFileIds(partitionToReplaceFileIds);\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"}],"commitId":"2c4868e7707bcdb2b2e1f1530c7b2b4d81584a1f","commitMessage":"@@@[HUDI-1507] Change timeline utils to support reading replacecommit metadata (#2407)\n\n","date":"2021-01-06 20:55:14","modifiedFileCount":"2","status":"M","submitter":"satishkotha"},{"authorTime":"2021-03-06 05:42:19","codes":[{"authorDate":"2020-08-26 12:48:28","commitOrder":4,"curCode":"  private byte[] getCommitMetadata(String basePath, String partition, String commitTs, int count, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieCommitMetadata commit = new HoodieCommitMetadata();\n    for (int i = 1; i <= count; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, partition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(partition, stat);\n    }\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","date":"2020-08-29 03:23:47","endLine":227,"groupId":"4547","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommitMetadata","params":"(StringbasePath@Stringpartition@StringcommitTs@intcount@Map<String@String>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2e/a418c480b87b9b28df91f714b6f807659352eb.src","preCode":"  private byte[] getCommitMetadata(String basePath, String partition, String commitTs, int count, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieCommitMetadata commit = new HoodieCommitMetadata();\n    for (int i = 1; i <= count; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, partition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(partition, stat);\n    }\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"N"},{"authorDate":"2021-03-06 05:42:19","commitOrder":4,"curCode":"  private byte[] getReplaceCommitMetadata(String basePath, String commitTs, String replacePartition, int replaceCount,\n                                          String newFilePartition, int newFileCount, Map<String, String> extraMetadata,\n                                          WriteOperationType operationType)\n      throws IOException {\n    HoodieReplaceCommitMetadata commit = new HoodieReplaceCommitMetadata();\n    commit.setOperationType(operationType);\n    for (int i = 1; i <= newFileCount; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, newFilePartition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(newFilePartition, stat);\n    }\n    Map<String, List<String>> partitionToReplaceFileIds = new HashMap<>();\n    if (replaceCount > 0) {\n      partitionToReplaceFileIds.put(replacePartition, new ArrayList<>());\n    }\n    for (int i = 1; i <= replaceCount; i++) {\n      partitionToReplaceFileIds.get(replacePartition).add(FSUtils.createNewFileIdPfx());\n    }\n    commit.setPartitionToReplaceFileIds(partitionToReplaceFileIds);\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","date":"2021-03-06 05:42:19","endLine":321,"groupId":"4547","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getReplaceCommitMetadata","params":"(StringbasePath@StringcommitTs@StringreplacePartition@intreplaceCount@StringnewFilePartition@intnewFileCount@Map<String@String>extraMetadata@WriteOperationTypeoperationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/cf/7f6d849b7d4cd698edcd97e6596a59d80cd9fe.src","preCode":"  private byte[] getReplaceCommitMetadata(String basePath, String commitTs, String replacePartition, int replaceCount,\n      String newFilePartition, int newFileCount, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieReplaceCommitMetadata commit = new HoodieReplaceCommitMetadata();\n    for (int i = 1; i <= newFileCount; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, newFilePartition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(newFilePartition, stat);\n    }\n    Map<String, List<String>> partitionToReplaceFileIds = new HashMap<>();\n    if (replaceCount > 0) {\n      partitionToReplaceFileIds.put(replacePartition, new ArrayList<>());\n    }\n    for (int i = 1; i <= replaceCount; i++) {\n      partitionToReplaceFileIds.get(replacePartition).add(FSUtils.createNewFileIdPfx());\n    }\n    commit.setPartitionToReplaceFileIds(partitionToReplaceFileIds);\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"}],"commitId":"11ad4ed26b6046201945f0e14449e1cbc5b6f1f2","commitMessage":"@@@[HUDI-1661] Exclude clustering commits from getExtraMetadataFromLatest API (#2632)\n\n","date":"2021-03-06 05:42:19","modifiedFileCount":"2","status":"M","submitter":"satishkotha"},{"authorTime":"2021-05-12 01:01:45","codes":[{"authorDate":"2021-05-12 01:01:45","commitOrder":5,"curCode":"  private byte[] getCommitMetadata(String basePath, String partition, String commitTs, int count, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieCommitMetadata commit = new HoodieCommitMetadata();\n    for (int i = 1; i <= count; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, partition).toString());\n      stat.setPath(commitTs + \".\" + i + metaClient.getTableConfig().getBaseFileFormat().getFileExtension());\n      commit.addWriteStat(partition, stat);\n    }\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","date":"2021-05-12 01:01:45","endLine":294,"groupId":"10883","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getCommitMetadata","params":"(StringbasePath@Stringpartition@StringcommitTs@intcount@Map<String@String>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/93/97295013ea1c2c116ec98a701048be876e352e.src","preCode":"  private byte[] getCommitMetadata(String basePath, String partition, String commitTs, int count, Map<String, String> extraMetadata)\n      throws IOException {\n    HoodieCommitMetadata commit = new HoodieCommitMetadata();\n    for (int i = 1; i <= count; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, partition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(partition, stat);\n    }\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2021-05-12 01:01:45","commitOrder":5,"curCode":"  private byte[] getReplaceCommitMetadata(String basePath, String commitTs, String replacePartition, int replaceCount,\n                                          String newFilePartition, int newFileCount, Map<String, String> extraMetadata,\n                                          WriteOperationType operationType)\n      throws IOException {\n    HoodieReplaceCommitMetadata commit = new HoodieReplaceCommitMetadata();\n    commit.setOperationType(operationType);\n    for (int i = 1; i <= newFileCount; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, newFilePartition).toString());\n      stat.setPath(commitTs + \".\" + i + metaClient.getTableConfig().getBaseFileFormat().getFileExtension());\n      commit.addWriteStat(newFilePartition, stat);\n    }\n    Map<String, List<String>> partitionToReplaceFileIds = new HashMap<>();\n    if (replaceCount > 0) {\n      partitionToReplaceFileIds.put(replacePartition, new ArrayList<>());\n    }\n    for (int i = 1; i <= replaceCount; i++) {\n      partitionToReplaceFileIds.get(replacePartition).add(FSUtils.createNewFileIdPfx());\n    }\n    commit.setPartitionToReplaceFileIds(partitionToReplaceFileIds);\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","date":"2021-05-12 01:01:45","endLine":321,"groupId":"10883","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getReplaceCommitMetadata","params":"(StringbasePath@StringcommitTs@StringreplacePartition@intreplaceCount@StringnewFilePartition@intnewFileCount@Map<String@String>extraMetadata@WriteOperationTypeoperationType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/93/97295013ea1c2c116ec98a701048be876e352e.src","preCode":"  private byte[] getReplaceCommitMetadata(String basePath, String commitTs, String replacePartition, int replaceCount,\n                                          String newFilePartition, int newFileCount, Map<String, String> extraMetadata,\n                                          WriteOperationType operationType)\n      throws IOException {\n    HoodieReplaceCommitMetadata commit = new HoodieReplaceCommitMetadata();\n    commit.setOperationType(operationType);\n    for (int i = 1; i <= newFileCount; i++) {\n      HoodieWriteStat stat = new HoodieWriteStat();\n      stat.setFileId(i + \"\");\n      stat.setPartitionPath(Paths.get(basePath, newFilePartition).toString());\n      stat.setPath(commitTs + \".\" + i + \".parquet\");\n      commit.addWriteStat(newFilePartition, stat);\n    }\n    Map<String, List<String>> partitionToReplaceFileIds = new HashMap<>();\n    if (replaceCount > 0) {\n      partitionToReplaceFileIds.put(replacePartition, new ArrayList<>());\n    }\n    for (int i = 1; i <= replaceCount; i++) {\n      partitionToReplaceFileIds.get(replacePartition).add(FSUtils.createNewFileIdPfx());\n    }\n    commit.setPartitionToReplaceFileIds(partitionToReplaceFileIds);\n    for (Map.Entry<String, String> extraEntries : extraMetadata.entrySet()) {\n      commit.addMetadata(extraEntries.getKey(), extraEntries.getValue());\n    }\n    return commit.toJsonString().getBytes(StandardCharsets.UTF_8);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/table/TestTimelineUtils.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"}],"commitId":"be9db2c4f5a570fcaa555618b34ad11109ed6b00","commitMessage":"@@@[HUDI-1055] Remove hardcoded parquet in tests (#2740)\n\n* Remove hardcoded parquet in tests\n* Use DataFileUtils.getInstance\n* Renaming DataFileUtils to BaseFileUtils\n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2021-05-12 01:01:45","modifiedFileCount":"40","status":"M","submitter":"TeRS-K"}]
