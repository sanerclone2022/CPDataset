[{"authorTime":"2021-03-15 16:02:05","codes":[{"authorDate":"2021-03-15 16:02:05","commitOrder":1,"curCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-03-15 16:02:05","endLine":327,"groupId":"2527","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/67779ffaf605e15416e1689b5b5b7fe691fb2e.src","preCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"B"},{"authorDate":"2021-03-15 16:02:05","commitOrder":1,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-03-15 16:02:05","endLine":379,"groupId":"616","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/11/67779ffaf605e15416e1689b5b5b7fe691fb2e.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"B"}],"commitId":"fc6c5f4285098d18cd7f6e81785f59e68a3b6862","commitMessage":"@@@[HUDI-1684] Tweak hudi-flink-bundle module pom and reorganize the pacakges for hudi-flink module (#2669)\n\n* Add required dependencies for hudi-flink-bundle module\n* Some packages reorganization of hudi-flink module","date":"2021-03-15 16:02:05","modifiedFileCount":"12","status":"B","submitter":"Danny Chan"},{"authorTime":"2021-04-14 10:23:37","codes":[{"authorDate":"2021-04-14 10:23:37","commitOrder":2,"curCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-04-14 10:23:37","endLine":324,"groupId":"2527","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9e/417e33f820ed6ff3f42e868d292c9be50fa365.src","preCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2021-04-14 10:23:37","commitOrder":2,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-04-14 10:23:37","endLine":376,"groupId":"616","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9e/417e33f820ed6ff3f42e868d292c9be50fa365.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getInflightAndRequestedInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"ab4a7b0b4afc66d2123c7f63fdab77b925a8a7f1","commitMessage":"@@@[HUDI-1788] Insert overwrite (table) for Flink writer (#2808)\n\nSupports `INSERT OVERWRITE` and `INSERT OVERWRITE TABLE` for Flink\nwriter.","date":"2021-04-14 10:23:37","modifiedFileCount":"19","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-06-29 08:53:52","codes":[{"authorDate":"2021-06-29 08:53:52","commitOrder":3,"curCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-06-29 08:53:52","endLine":333,"groupId":"2527","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/a3b344be4e2446e0536b8308f40fc957a25d1f.src","preCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2021-06-29 08:53:52","commitOrder":3,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-06-29 08:53:52","endLine":385,"groupId":"616","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/a3b344be4e2446e0536b8308f40fc957a25d1f.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(BatchWriteSuccessEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"37b7c65d8a3ede00ae16909a06e31c24f179998c","commitMessage":"@@@[HUDI-2084] Resend the uncommitted write metadata when start up (#3168)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-06-29 08:53:52","modifiedFileCount":"12","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-08-10 20:23:23","codes":[{"authorDate":"2021-06-29 08:53:52","commitOrder":4,"curCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","date":"2021-06-29 08:53:52","endLine":333,"groupId":"10420","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpsert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/a3b344be4e2446e0536b8308f40fc957a25d1f.src","preCode":"  public void testUpsert() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n    checkWrittenData(tempFile, EXPECTED2);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"},{"authorDate":"2021-08-10 20:23:23","commitOrder":4,"curCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = getUpsertWithDeleteExpected();\n    checkWrittenData(tempFile, expected);\n  }\n","date":"2021-08-10 20:23:23","endLine":404,"groupId":"10420","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpsertWithDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8e/7f8099b17c79704451332f4e35f985452e1cb6.src","preCode":"  public void testUpsertWithDelete() throws Exception {\n    \r\n    funcWrapper.openFunction();\n    for (RowData rowData : TestData.DATA_SET_INSERT) {\n      funcWrapper.invoke(rowData);\n    }\n\n    assertEmptyDataFiles();\n    \r\n    funcWrapper.checkpointFunction(1);\n\n    OperatorEvent nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    funcWrapper.checkpointComplete(1);\n\n    \r\n    for (RowData rowData : TestData.DATA_SET_UPDATE_DELETE) {\n      funcWrapper.invoke(rowData);\n    }\n    \r\n    checkWrittenData(tempFile, EXPECTED1);\n    \r\n    funcWrapper.checkpointFunction(2);\n\n    String instant = funcWrapper.getWriteClient()\n        .getLastPendingInstant(getTableType());\n\n    nextEvent = funcWrapper.getNextEvent();\n    assertThat(\"The operator expect to send an event\", nextEvent, instanceOf(WriteMetadataEvent.class));\n\n    funcWrapper.getCoordinator().handleEventFromOperator(0, nextEvent);\n    assertNotNull(funcWrapper.getEventBuffer()[0], \"The coordinator missed the event\");\n\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.REQUESTED, instant);\n    funcWrapper.checkpointComplete(2);\n    \r\n    checkInstantState(funcWrapper.getWriteClient(), HoodieInstant.State.COMPLETED, instant);\n\n    Map<String, String> expected = new HashMap<>();\n    \r\n    expected.put(\"par1\", \"[id1,par1,id1,Danny,24,1,par1, id2,par1,id2,Stephen,34,2,par1]\");\n    expected.put(\"par2\", \"[id4,par2,id4,Fabian,31,4,par2]\");\n    expected.put(\"par3\", \"[id6,par3,id6,Emma,20,6,par3]\");\n    expected.put(\"par4\", \"[id7,par4,id7,Bob,44,7,par4, id8,par4,id8,Han,56,8,par4]\");\n    checkWrittenData(tempFile, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/sink/TestWriteCopyOnWrite.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"21db6d7a84d4a83ec98c110e92ff9c92d05dd530","commitMessage":"@@@[HUDI-1771] Propagate CDC format for hoodie (#3285)\n\n","date":"2021-08-10 20:23:23","modifiedFileCount":"47","status":"M","submitter":"swuferhong"}]
