[{"authorTime":"2020-08-04 11:19:21","codes":[{"authorDate":"2020-08-04 11:19:21","commitOrder":2,"curCode":"  public final Stream<HoodieBaseFile> getLatestBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchLatestBaseFiles(partitionPath)\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","date":"2020-08-04 11:19:21","endLine":392,"groupId":"1605","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getLatestBaseFiles","params":"(StringpartitionStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/77/fcd1614612f4b680ed4f38fb0c10f8bb7f47fd.src","preCode":"  public final Stream<HoodieBaseFile> getLatestBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchLatestBaseFiles(partitionPath)\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"B"},{"authorDate":"2020-08-04 11:19:21","commitOrder":2,"curCode":"  public final Stream<HoodieBaseFile> getAllBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchAllBaseFiles(partitionPath)\n          .filter(df -> visibleCommitsAndCompactionTimeline.containsOrBeforeTimelineStarts(df.getCommitTime()))\n          .filter(df -> !isBaseFileDueToPendingCompaction(df))\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","date":"2020-08-04 11:19:21","endLine":479,"groupId":"5467","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getAllBaseFiles","params":"(StringpartitionStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/77/fcd1614612f4b680ed4f38fb0c10f8bb7f47fd.src","preCode":"  public final Stream<HoodieBaseFile> getAllBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchAllBaseFiles(partitionPath)\n          .filter(df -> visibleCommitsAndCompactionTimeline.containsOrBeforeTimelineStarts(df.getCommitTime()))\n          .filter(df -> !isBaseFileDueToPendingCompaction(df))\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"MB"}],"commitId":"539621bd33893d99a07b8f739a1e965ca72acdc9","commitMessage":"@@@[HUDI-242] Support for RFC-12/Bootstrapping of external datasets to hudi (#1876)\n\n- [HUDI-418] Bootstrap Index Implementation using HFile with unit-test\n - [HUDI-421] FileSystem View Changes to support Bootstrap with unit-tests\n - [HUDI-424] Implement Query Side Integration for querying tables containing bootstrap file slices\n - [HUDI-423] Implement upsert functionality for handling updates to these bootstrap file slices\n - [HUDI-421] Bootstrap Write Client with tests\n - [HUDI-425] Added HoodieDeltaStreamer support\n - [HUDI-899] Add a knob to change partition-path style while performing metadata bootstrap\n - [HUDI-900] Metadata Bootstrap Key Generator needs to handle complex keys correctly\n - [HUDI-424] Simplify Record reader implementation\n - [HUDI-423] Implement upsert functionality for handling updates to these bootstrap file slices\n - [HUDI-420] Hoodie Demo working with hive and sparkSQL. Also.  Hoodie CLI working with bootstrap tables\n\nCo-authored-by: Mehrotra <uditme@amazon.com>\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>\nCo-authored-by: Balaji Varadarajan <varadarb@uber.com>\n","date":"2020-08-04 11:19:21","modifiedFileCount":"89","status":"M","submitter":"vinoth chandar"},{"authorTime":"2020-09-30 08:04:25","codes":[{"authorDate":"2020-09-30 08:04:25","commitOrder":3,"curCode":"  public final Stream<HoodieBaseFile> getLatestBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchLatestBaseFiles(partitionPath)\n          .filter(df -> !isFileGroupReplaced(partitionPath, df.getFileId()))\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","date":"2020-09-30 08:04:25","endLine":425,"groupId":"101002","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getLatestBaseFiles","params":"(StringpartitionStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0c/6d9adbd235c2db52fa6c38b595ebfa4265d285.src","preCode":"  public final Stream<HoodieBaseFile> getLatestBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchLatestBaseFiles(partitionPath)\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"},{"authorDate":"2020-09-30 08:04:25","commitOrder":3,"curCode":"  public final Stream<HoodieBaseFile> getAllBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchAllBaseFiles(partitionPath)\n          .filter(df -> !isFileGroupReplaced(partitionPath, df.getFileId()))\n          .filter(df -> visibleCommitsAndCompactionTimeline.containsOrBeforeTimelineStarts(df.getCommitTime()))\n          .filter(df -> !isBaseFileDueToPendingCompaction(df))\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","date":"2020-09-30 08:04:25","endLine":524,"groupId":"101002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getAllBaseFiles","params":"(StringpartitionStr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0c/6d9adbd235c2db52fa6c38b595ebfa4265d285.src","preCode":"  public final Stream<HoodieBaseFile> getAllBaseFiles(String partitionStr) {\n    try {\n      readLock.lock();\n      String partitionPath = formatPartitionKey(partitionStr);\n      ensurePartitionLoadedCorrectly(partitionPath);\n      return fetchAllBaseFiles(partitionPath)\n          .filter(df -> visibleCommitsAndCompactionTimeline.containsOrBeforeTimelineStarts(df.getCommitTime()))\n          .filter(df -> !isBaseFileDueToPendingCompaction(df))\n          .map(df -> addBootstrapBaseFileIfPresent(new HoodieFileGroupId(partitionPath, df.getFileId()), df));\n    } finally {\n      readLock.unlock();\n    }\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/table/view/AbstractTableFileSystemView.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"M"}],"commitId":"a99e93bed542c8ae30a641d1df616cc2cd5798e1","commitMessage":"@@@[HUDI-1072] Introduce REPLACE top level action. Implement insert_overwrite operation on top of replace action (#2048)\n\n","date":"2020-09-30 08:04:25","modifiedFileCount":"45","status":"M","submitter":"satishkotha"}]
