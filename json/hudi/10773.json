[{"authorTime":"2021-06-08 21:26:10","codes":[{"authorDate":"2021-06-08 21:26:10","commitOrder":1,"curCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP, KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-06-08 21:26:10","endLine":81,"groupId":"1329","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/40/1218419e8aea1a1d976a1ab15c2068f0f3a2d6.src","preCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP, KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/factory/HoodieSparkKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2021-06-08 21:26:10","commitOrder":1,"curCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP, KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-06-08 21:26:10","endLine":78,"groupId":"1329","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createAvroKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/bd/bf8b6fe13c92f8e8cbc7324c8c304db31b6b25.src","preCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP, KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/factory/HoodieAvroKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"7261f0850727aea611cd34e1bb07d684b44534f6","commitMessage":"@@@[HUDI-1929] Support configure KeyGenerator by type (#2993)\n\n","date":"2021-06-08 21:26:10","modifiedFileCount":"11","status":"B","submitter":"wangxianghu"},{"authorTime":"2021-07-01 05:26:30","codes":[{"authorDate":"2021-07-01 05:26:30","commitOrder":2,"curCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-07-01 05:26:30","endLine":81,"groupId":"1329","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/2bdfb8ff34ef2c298ff2ee9665a17b9e8c898d.src","preCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP, KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/factory/HoodieSparkKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-07-01 05:26:30","commitOrder":2,"curCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-07-01 05:26:30","endLine":78,"groupId":"1329","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createAvroKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a9/e9dbbe2c630062c4c6f5847737d7636c398d2d.src","preCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP, KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/factory/HoodieAvroKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"d412fb2fe642417460532044cac162bb68f4bec4","commitMessage":"@@@[HUDI-89] Add configOption & refactor all configs based on that (#2833)\n\nCo-authored-by: Wenning Ding <wenningd@amazon.com>","date":"2021-07-01 05:26:30","modifiedFileCount":"138","status":"M","submitter":"wenningd"},{"authorTime":"2021-07-03 20:27:37","codes":[{"authorDate":"2021-07-03 20:27:37","commitOrder":3,"curCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, use SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-07-03 20:27:37","endLine":92,"groupId":"1329","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a3/1ee9b4f7ada87ea64ffe2bbff6cf0ab6396e69.src","preCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/factory/HoodieSparkKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-07-03 20:27:37","commitOrder":3,"curCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, use SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-07-03 20:27:37","endLine":90,"groupId":"1329","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createAvroKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/47/718990dda44b409abcc359837d7bca0ad9902e.src","preCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), KeyGeneratorType.SIMPLE.name());\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/factory/HoodieAvroKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"62a1ad8b3a2a3c1dabba0a4622117636920b6c13","commitMessage":"@@@[HUDI-1930] Bootstrap support configure KeyGenerator by type (#3170)\n\n* [HUDI-1930] Bootstrap support configure KeyGenerator by type","date":"2021-07-03 20:27:37","modifiedFileCount":"7","status":"M","submitter":"wangxianghu"},{"authorTime":"2021-07-15 01:56:08","codes":[{"authorDate":"2021-07-03 20:27:37","commitOrder":4,"curCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, use SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-07-03 20:27:37","endLine":92,"groupId":"1329","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a3/1ee9b4f7ada87ea64ffe2bbff6cf0ab6396e69.src","preCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, use SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/factory/HoodieSparkKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-07-15 01:56:08","commitOrder":4,"curCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, using SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-07-15 01:56:08","endLine":90,"groupId":"1329","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createAvroKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/39/3d26e8fe893159b266a390f5b2346e3ca48df1.src","preCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, use SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/factory/HoodieAvroKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"75040ee9e5caa0783009b6ef529d6605e82d4135","commitMessage":"@@@[HUDI-2149] Ensure and Audit docs for every configuration class in the codebase (#3272)\n\n- Added docs when missing\n - Rewrote.  reworded as needed\n - Made couple more classes extend HoodieConfig","date":"2021-07-15 01:56:08","modifiedFileCount":"26","status":"M","submitter":"vinoth chandar"},{"authorTime":"2021-08-13 11:31:04","codes":[{"authorDate":"2021-08-13 11:31:04","commitOrder":5,"curCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, use SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-08-13 11:31:04","endLine":92,"groupId":"10773","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0f/d6011100018028c0dac4085fcfb99bec6ebb5c.src","preCode":"  private static BuiltinKeyGenerator createKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, use SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedKeyGenerator(props);\n      case CUSTOM:\n        return new CustomKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/keygen/factory/HoodieSparkKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-08-13 11:31:04","commitOrder":5,"curCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, using SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","date":"2021-08-13 11:31:04","endLine":90,"groupId":"10773","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createAvroKeyGeneratorByType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/60/10ab9d5d17b2621671b2ecd1756255f6ae9160.src","preCode":"  private static KeyGenerator createAvroKeyGeneratorByType(TypedProperties props) throws IOException {\n    \r\n    String keyGeneratorType =\n        props.getString(HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key(), null);\n\n    if (StringUtils.isNullOrEmpty(keyGeneratorType)) {\n      LOG.info(\"The value of {} is empty, using SIMPLE\", HoodieWriteConfig.KEYGENERATOR_TYPE_PROP.key());\n      keyGeneratorType = KeyGeneratorType.SIMPLE.name();\n    }\n\n    KeyGeneratorType keyGeneratorTypeEnum;\n    try {\n      keyGeneratorTypeEnum = KeyGeneratorType.valueOf(keyGeneratorType.toUpperCase(Locale.ROOT));\n    } catch (IllegalArgumentException e) {\n      throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n\n    switch (keyGeneratorTypeEnum) {\n      case SIMPLE:\n        return new SimpleAvroKeyGenerator(props);\n      case COMPLEX:\n        return new ComplexAvroKeyGenerator(props);\n      case TIMESTAMP:\n        return new TimestampBasedAvroKeyGenerator(props);\n      case CUSTOM:\n        return new CustomAvroKeyGenerator(props);\n      case NON_PARTITION:\n        return new NonpartitionedAvroKeyGenerator(props);\n      case GLOBAL_DELETE:\n        return new GlobalAvroDeleteKeyGenerator(props);\n      default:\n        throw new HoodieKeyGeneratorException(\"Unsupported keyGenerator Type \" + keyGeneratorType);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/keygen/factory/HoodieAvroKeyGeneratorFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"0544d70d8f4204f4e5edfe9144c17f1ed221eb7c","commitMessage":"@@@[MINOR] Deprecate older configs (#3464)\n\nRename and deprecate props in HoodieWriteConfig\n\nRename and deprecate older props","date":"2021-08-13 11:31:04","modifiedFileCount":"38","status":"M","submitter":"Sagar Sumit"}]
