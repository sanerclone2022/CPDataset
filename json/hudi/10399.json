[{"authorTime":"2021-03-15 16:02:05","codes":[{"authorDate":"2021-03-15 16:02:05","commitOrder":1,"curCode":"  void testInferAvroSchemaForSource() {\n    \r\n    final HoodieTableSource tableSource1 =\n        (HoodieTableSource) new HoodieTableFactory().createTableSource(MockSourceContext.getInstance(this.conf));\n    final Configuration conf1 = tableSource1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSource tableSource2 =\n        (HoodieTableSource) new HoodieTableFactory().createTableSource(MockSourceContext.getInstance(this.conf));\n    Configuration conf2 = tableSource2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","date":"2021-03-15 16:02:05","endLine":87,"groupId":"4682","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInferAvroSchemaForSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f6/4808e95fbcb15a3545f580314286c740597fe1.src","preCode":"  void testInferAvroSchemaForSource() {\n    \r\n    final HoodieTableSource tableSource1 =\n        (HoodieTableSource) new HoodieTableFactory().createTableSource(MockSourceContext.getInstance(this.conf));\n    final Configuration conf1 = tableSource1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSource tableSource2 =\n        (HoodieTableSource) new HoodieTableFactory().createTableSource(MockSourceContext.getInstance(this.conf));\n    Configuration conf2 = tableSource2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/TestHoodieTableFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2021-03-15 16:02:05","commitOrder":1,"curCode":"  void testInferAvroSchemaForSink() {\n    \r\n    final HoodieTableSink tableSink1 =\n        (HoodieTableSink) new HoodieTableFactory().createTableSink(MockSinkContext.getInstance(this.conf));\n    final Configuration conf1 = tableSink1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSink tableSink2 =\n        (HoodieTableSink) new HoodieTableFactory().createTableSink(MockSinkContext.getInstance(this.conf));\n    Configuration conf2 = tableSink2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","date":"2021-03-15 16:02:05","endLine":103,"groupId":"3849","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInferAvroSchemaForSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f6/4808e95fbcb15a3545f580314286c740597fe1.src","preCode":"  void testInferAvroSchemaForSink() {\n    \r\n    final HoodieTableSink tableSink1 =\n        (HoodieTableSink) new HoodieTableFactory().createTableSink(MockSinkContext.getInstance(this.conf));\n    final Configuration conf1 = tableSink1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSink tableSink2 =\n        (HoodieTableSink) new HoodieTableFactory().createTableSink(MockSinkContext.getInstance(this.conf));\n    Configuration conf2 = tableSink2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/TestHoodieTableFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"fc6c5f4285098d18cd7f6e81785f59e68a3b6862","commitMessage":"@@@[HUDI-1684] Tweak hudi-flink-bundle module pom and reorganize the pacakges for hudi-flink module (#2669)\n\n* Add required dependencies for hudi-flink-bundle module\n* Some packages reorganization of hudi-flink module","date":"2021-03-15 16:02:05","modifiedFileCount":"12","status":"B","submitter":"Danny Chan"},{"authorTime":"2021-03-26 14:25:57","codes":[{"authorDate":"2021-03-26 14:25:57","commitOrder":2,"curCode":"  void testInferAvroSchemaForSource() {\n    \r\n    final HoodieTableSource tableSource1 =\n        (HoodieTableSource) new HoodieTableFactory().createDynamicTableSource(MockContext.getInstance(this.conf));\n    final Configuration conf1 = tableSource1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSource tableSource2 =\n        (HoodieTableSource) new HoodieTableFactory().createDynamicTableSource(MockContext.getInstance(this.conf));\n    Configuration conf2 = tableSource2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","date":"2021-03-26 14:25:57","endLine":90,"groupId":"4682","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInferAvroSchemaForSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/bb/b59640f468a5c561959443b6d72c74ec3150e7.src","preCode":"  void testInferAvroSchemaForSource() {\n    \r\n    final HoodieTableSource tableSource1 =\n        (HoodieTableSource) new HoodieTableFactory().createTableSource(MockSourceContext.getInstance(this.conf));\n    final Configuration conf1 = tableSource1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSource tableSource2 =\n        (HoodieTableSource) new HoodieTableFactory().createTableSource(MockSourceContext.getInstance(this.conf));\n    Configuration conf2 = tableSource2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/TestHoodieTableFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-03-26 14:25:57","commitOrder":2,"curCode":"  void testInferAvroSchemaForSink() {\n    \r\n    final HoodieTableSink tableSink1 =\n        (HoodieTableSink) new HoodieTableFactory().createDynamicTableSink(MockContext.getInstance(this.conf));\n    final Configuration conf1 = tableSink1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSink tableSink2 =\n        (HoodieTableSink) new HoodieTableFactory().createDynamicTableSink(MockContext.getInstance(this.conf));\n    Configuration conf2 = tableSink2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","date":"2021-03-26 14:25:57","endLine":138,"groupId":"3849","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInferAvroSchemaForSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/bb/b59640f468a5c561959443b6d72c74ec3150e7.src","preCode":"  void testInferAvroSchemaForSink() {\n    \r\n    final HoodieTableSink tableSink1 =\n        (HoodieTableSink) new HoodieTableFactory().createTableSink(MockSinkContext.getInstance(this.conf));\n    final Configuration conf1 = tableSink1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSink tableSink2 =\n        (HoodieTableSink) new HoodieTableFactory().createTableSink(MockSinkContext.getInstance(this.conf));\n    Configuration conf2 = tableSink2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/TestHoodieTableFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"8b774fe3313757a8b94ca408079327c62b4a664c","commitMessage":"@@@[HUDI-1495] Bump Flink version to 1.12.2 (#2718)\n\n","date":"2021-03-26 14:25:57","modifiedFileCount":"20","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-07-06 15:14:30","codes":[{"authorDate":"2021-07-06 15:14:30","commitOrder":3,"curCode":"  void testInferAvroSchemaForSource() {\n    \r\n    final HoodieTableSource tableSource1 =\n        (HoodieTableSource) new HoodieTableFactory().createDynamicTableSource(MockContext.getInstance(this.conf));\n    final Configuration conf1 = tableSource1.getConf();\n    assertThat(conf1.get(FlinkOptions.SOURCE_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSource tableSource2 =\n        (HoodieTableSource) new HoodieTableFactory().createDynamicTableSource(MockContext.getInstance(this.conf));\n    Configuration conf2 = tableSource2.getConf();\n    assertNull(conf2.get(FlinkOptions.SOURCE_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","date":"2021-07-06 15:14:30","endLine":131,"groupId":"10399","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInferAvroSchemaForSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e4/0741ce1c947a016fa05fb6d9acc1a1c1c71f64.src","preCode":"  void testInferAvroSchemaForSource() {\n    \r\n    final HoodieTableSource tableSource1 =\n        (HoodieTableSource) new HoodieTableFactory().createDynamicTableSource(MockContext.getInstance(this.conf));\n    final Configuration conf1 = tableSource1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSource tableSource2 =\n        (HoodieTableSource) new HoodieTableFactory().createDynamicTableSource(MockContext.getInstance(this.conf));\n    Configuration conf2 = tableSource2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/TestHoodieTableFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-07-06 15:14:30","commitOrder":3,"curCode":"  void testInferAvroSchemaForSink() {\n    \r\n    final HoodieTableSink tableSink1 =\n        (HoodieTableSink) new HoodieTableFactory().createDynamicTableSink(MockContext.getInstance(this.conf));\n    final Configuration conf1 = tableSink1.getConf();\n    assertThat(conf1.get(FlinkOptions.SOURCE_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSink tableSink2 =\n        (HoodieTableSink) new HoodieTableFactory().createDynamicTableSink(MockContext.getInstance(this.conf));\n    Configuration conf2 = tableSink2.getConf();\n    assertNull(conf2.get(FlinkOptions.SOURCE_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","date":"2021-07-06 15:14:30","endLine":218,"groupId":"10399","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInferAvroSchemaForSink","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e4/0741ce1c947a016fa05fb6d9acc1a1c1c71f64.src","preCode":"  void testInferAvroSchemaForSink() {\n    \r\n    final HoodieTableSink tableSink1 =\n        (HoodieTableSink) new HoodieTableFactory().createDynamicTableSink(MockContext.getInstance(this.conf));\n    final Configuration conf1 = tableSink1.getConf();\n    assertThat(conf1.get(FlinkOptions.READ_AVRO_SCHEMA), is(INFERRED_SCHEMA));\n\n    \r\n    this.conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, AVRO_SCHEMA_FILE_PATH);\n    HoodieTableSink tableSink2 =\n        (HoodieTableSink) new HoodieTableFactory().createDynamicTableSink(MockContext.getInstance(this.conf));\n    Configuration conf2 = tableSink2.getConf();\n    assertNull(conf2.get(FlinkOptions.READ_AVRO_SCHEMA), \"expect schema string as null\");\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/TestHoodieTableFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"f2621da32f33bf16fb53f8a71eaf7bca24e6d166","commitMessage":"@@@[HUDI-2093] Fix empty avro schema path caused by duplicate parameters (#3177)\n\n* [HUDI-2093] Fix empty avro schema path caused by duplicate parameters\n\n* rename shcmea option key\n\n* fix doc\n\n* rename var name","date":"2021-07-06 15:14:30","modifiedFileCount":"8","status":"M","submitter":"wangxianghu"}]
