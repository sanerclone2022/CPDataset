[{"authorTime":"2021-06-19 22:12:11","codes":[{"authorDate":"2021-06-19 22:12:11","commitOrder":1,"curCode":"  public void setup() throws Exception {\n    super.setup();\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n    connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\");\n  }\n","date":"2021-06-19 22:12:11","endLine":76,"groupId":"4365","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/62/aebe3d3ee20f2269b10eafafab14d949fa7b8e.src","preCode":"  public void setup() throws Exception {\n    super.setup();\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n    connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\");\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestJdbcSource.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2021-06-19 22:12:11","commitOrder":1,"curCode":"  public void testJdbcSourceIncrementalFetchInContinuousMode() {\n    try (Connection connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\")) {\n      TypedProperties props = new TypedProperties();\n      props.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.incr.pull\", \"true\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.incr.column.name\", \"id\");\n\n      props.setProperty(\"hoodie.datasource.write.keygenerator.class\", SimpleKeyGenerator.class.getName());\n      props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"ID\");\n      props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n      UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/test-jdbc-source.properties\");\n\n      int numRecords = 1000;\n      int sourceLimit = 100;\n      String tableBasePath = dfsBasePath + \"/triprec\";\n      HoodieDeltaStreamer.Config cfg = TestHelpers.makeConfig(tableBasePath, WriteOperationType.INSERT, JdbcSource.class.getName(),\n          null, \"test-jdbc-source.properties\", false,\n          false, sourceLimit, false, null, null, \"timestamp\");\n      cfg.continuousMode = true;\n      \r\n      JdbcTestUtils.clearAndInsert(\"000\", numRecords, connection, new HoodieTestDataGenerator(), props);\n\n      HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(cfg, jsc);\n      deltaStreamerTestRunner(deltaStreamer, cfg, (r) -> {\n        TestHelpers.assertAtleastNCompactionCommits(numRecords / sourceLimit + ((numRecords % sourceLimit == 0) ? 0 : 1), tableBasePath, dfs);\n        TestHelpers.assertRecordCount(numRecords, tableBasePath + \"/*/*.parquet\", sqlContext);\n        return true;\n      });\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n  }\n","date":"2021-06-19 22:12:11","endLine":1639,"groupId":"4365","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJdbcSourceIncrementalFetchInContinuousMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/64/fc5313a17fa6addfaa7476c926ab27fb229c0d.src","preCode":"  public void testJdbcSourceIncrementalFetchInContinuousMode() {\n    try (Connection connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\")) {\n      TypedProperties props = new TypedProperties();\n      props.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.incr.pull\", \"true\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.incr.column.name\", \"id\");\n\n      props.setProperty(\"hoodie.datasource.write.keygenerator.class\", SimpleKeyGenerator.class.getName());\n      props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"ID\");\n      props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n      UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/test-jdbc-source.properties\");\n\n      int numRecords = 1000;\n      int sourceLimit = 100;\n      String tableBasePath = dfsBasePath + \"/triprec\";\n      HoodieDeltaStreamer.Config cfg = TestHelpers.makeConfig(tableBasePath, WriteOperationType.INSERT, JdbcSource.class.getName(),\n          null, \"test-jdbc-source.properties\", false,\n          false, sourceLimit, false, null, null, \"timestamp\");\n      cfg.continuousMode = true;\n      \r\n      JdbcTestUtils.clearAndInsert(\"000\", numRecords, connection, new HoodieTestDataGenerator(), props);\n\n      HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(cfg, jsc);\n      deltaStreamerTestRunner(deltaStreamer, cfg, (r) -> {\n        TestHelpers.assertAtleastNCompactionCommits(numRecords / sourceLimit + ((numRecords % sourceLimit == 0) ? 0 : 1), tableBasePath, dfs);\n        TestHelpers.assertRecordCount(numRecords, tableBasePath + \"/*/*.parquet\", sqlContext);\n        return true;\n      });\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamer.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":1603,"status":"B"}],"commitId":"1cbdb49816ac779f803d0b7397f911a2f81ecca5","commitMessage":"@@@[HUDI-251] Adds JDBC source support for DeltaStreamer (#2915)\n\nAs discussed in RFC-14.  this change implements the first phase of JDBC incremental puller.\nIt consists following changes:\n\n- JdbcSource: This class extends RowSource and implements\n  fetchNextBatch(Option<String> lastCkptStr.  long sourceLimit)\n\n- SqlQueryBuilder: A simple utility class to build sql queries fluently.\n\n- Implements two modes of fetching: full and incremental.\n  Full is a complete scan of RDBMS table.\n  Incremental is delta since last checkpoint.\n  Incremental mode falls back to full fetch in case of any exception.","date":"2021-06-19 22:12:11","modifiedFileCount":"1","status":"B","submitter":"Sagar Sumit"},{"authorTime":"2021-07-17 12:31:06","codes":[{"authorDate":"2021-06-19 22:12:11","commitOrder":2,"curCode":"  public void setup() throws Exception {\n    super.setup();\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n    connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\");\n  }\n","date":"2021-06-19 22:12:11","endLine":76,"groupId":"10209","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/62/aebe3d3ee20f2269b10eafafab14d949fa7b8e.src","preCode":"  public void setup() throws Exception {\n    super.setup();\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n    PROPS.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n    connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\");\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/TestJdbcSource.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2021-07-17 12:31:06","commitOrder":2,"curCode":"  public void testJdbcSourceIncrementalFetchInContinuousMode() {\n    try (Connection connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\")) {\n      TypedProperties props = new TypedProperties();\n      props.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.incr.pull\", \"true\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.incr.column.name\", \"id\");\n\n      props.setProperty(\"hoodie.datasource.write.keygenerator.class\", SimpleKeyGenerator.class.getName());\n      props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"ID\");\n      props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n      UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/test-jdbc-source.properties\");\n\n      int numRecords = 1000;\n      int sourceLimit = 100;\n      String tableBasePath = dfsBasePath + \"/triprec\";\n      HoodieDeltaStreamer.Config cfg = TestHelpers.makeConfig(tableBasePath, WriteOperationType.INSERT, JdbcSource.class.getName(),\n          null, \"test-jdbc-source.properties\", false,\n          false, sourceLimit, false, null, null, \"timestamp\", null);\n      cfg.continuousMode = true;\n      \r\n      JdbcTestUtils.clearAndInsert(\"000\", numRecords, connection, new HoodieTestDataGenerator(), props);\n\n      HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(cfg, jsc);\n      deltaStreamerTestRunner(deltaStreamer, cfg, (r) -> {\n        TestHelpers.assertAtleastNCompactionCommits(numRecords / sourceLimit + ((numRecords % sourceLimit == 0) ? 0 : 1), tableBasePath, dfs);\n        TestHelpers.assertRecordCount(numRecords, tableBasePath + \"/*/*.parquet\", sqlContext);\n        return true;\n      });\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n  }\n","date":"2021-07-17 12:31:06","endLine":1724,"groupId":"10209","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJdbcSourceIncrementalFetchInContinuousMode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/db/0ab197f881f4749c9ce849c9cf3eae88bf77ab.src","preCode":"  public void testJdbcSourceIncrementalFetchInContinuousMode() {\n    try (Connection connection = DriverManager.getConnection(\"jdbc:h2:mem:test_mem\", \"test\", \"jdbc\")) {\n      TypedProperties props = new TypedProperties();\n      props.setProperty(\"hoodie.deltastreamer.jdbc.url\", \"jdbc:h2:mem:test_mem\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.driver.class\", \"org.h2.Driver\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.user\", \"test\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.password\", \"jdbc\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.name\", \"triprec\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.incr.pull\", \"true\");\n      props.setProperty(\"hoodie.deltastreamer.jdbc.table.incr.column.name\", \"id\");\n\n      props.setProperty(\"hoodie.datasource.write.keygenerator.class\", SimpleKeyGenerator.class.getName());\n      props.setProperty(\"hoodie.datasource.write.recordkey.field\", \"ID\");\n      props.setProperty(\"hoodie.datasource.write.partitionpath.field\", \"not_there\");\n\n      UtilitiesTestBase.Helpers.savePropsToDFS(props, dfs, dfsBasePath + \"/test-jdbc-source.properties\");\n\n      int numRecords = 1000;\n      int sourceLimit = 100;\n      String tableBasePath = dfsBasePath + \"/triprec\";\n      HoodieDeltaStreamer.Config cfg = TestHelpers.makeConfig(tableBasePath, WriteOperationType.INSERT, JdbcSource.class.getName(),\n          null, \"test-jdbc-source.properties\", false,\n          false, sourceLimit, false, null, null, \"timestamp\");\n      cfg.continuousMode = true;\n      \r\n      JdbcTestUtils.clearAndInsert(\"000\", numRecords, connection, new HoodieTestDataGenerator(), props);\n\n      HoodieDeltaStreamer deltaStreamer = new HoodieDeltaStreamer(cfg, jsc);\n      deltaStreamerTestRunner(deltaStreamer, cfg, (r) -> {\n        TestHelpers.assertAtleastNCompactionCommits(numRecords / sourceLimit + ((numRecords % sourceLimit == 0) ? 0 : 1), tableBasePath, dfs);\n        TestHelpers.assertRecordCount(numRecords, tableBasePath + \"/*/*.parquet\", sqlContext);\n        return true;\n      });\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n  }\n","realPath":"hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieDeltaStreamer.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":1688,"status":"M"}],"commitId":"af837d2f1825d14ae8403b2290cf5eab39780343","commitMessage":"@@@[HUDI-1447] DeltaStreamer kafka source supports consuming from specified timestamp (#2438)\n\n","date":"2021-07-17 12:31:06","modifiedFileCount":"7","status":"M","submitter":"liujinhui"}]
