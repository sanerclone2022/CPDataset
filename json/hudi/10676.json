[{"authorTime":"2020-10-02 05:25:29","codes":[{"authorDate":"2020-10-02 05:25:29","commitOrder":1,"curCode":"  public void testArchiveTableWithArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2)\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 4).build())\n        .forTable(\"test-trip-table\").build();\n    HoodieTestUtils.init(hadoopConf, basePath);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"104\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"105\", wrapperFs.getConf());\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n\n    assertEquals(6, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"100\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"101\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"102\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"103\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"104\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"105\", wrapperFs.getConf());\n    HoodieTestUtils.createPendingCleanFiles(metaClient, \"106\", \"107\");\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    List<HoodieInstant> originalCommits = timeline.getInstants().collect(Collectors.toList());\n\n    assertEquals(12, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    assertTrue(archiveLog.archiveIfRequired(context));\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    originalCommits.removeAll(timeline.getInstants().collect(Collectors.toList()));\n\n    \r\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(4, instants.size(), \"Should delete all compaction instants < 104\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be absent for 103\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be absent for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Requested Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Inflight Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Requested Compaction must be present for 105\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Inflight Compaction must be present for 105\");\n\n    \r\n    HoodieArchivedTimeline archivedTimeline = new HoodieArchivedTimeline(metaClient);\n    assertEquals(24, archivedTimeline.countInstants(),\n        \"Total archived records and total read records are the same count\");\n\n    \r\n    Set<String> readCommits =\n        archivedTimeline.getInstants().map(HoodieInstant::getTimestamp).collect(Collectors.toSet());\n    assertEquals(originalCommits.stream().map(HoodieInstant::getTimestamp).collect(Collectors.toSet()), readCommits,\n        \"Read commits map should match the originalCommits - commitsLoadedFromArchival\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n  }\n","date":"2020-10-02 05:25:29","endLine":217,"groupId":"5030","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testArchiveTableWithArchival","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/f755a44d0a2011d10e9e14d7afaa5eeef3ef8b.src","preCode":"  public void testArchiveTableWithArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2)\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 4).build())\n        .forTable(\"test-trip-table\").build();\n    HoodieTestUtils.init(hadoopConf, basePath);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"104\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"105\", wrapperFs.getConf());\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n\n    assertEquals(6, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"100\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"101\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"102\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"103\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"104\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"105\", wrapperFs.getConf());\n    HoodieTestUtils.createPendingCleanFiles(metaClient, \"106\", \"107\");\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    List<HoodieInstant> originalCommits = timeline.getInstants().collect(Collectors.toList());\n\n    assertEquals(12, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    assertTrue(archiveLog.archiveIfRequired(context));\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    originalCommits.removeAll(timeline.getInstants().collect(Collectors.toList()));\n\n    \r\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(4, instants.size(), \"Should delete all compaction instants < 104\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be absent for 103\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be absent for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Requested Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Inflight Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Requested Compaction must be present for 105\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Inflight Compaction must be present for 105\");\n\n    \r\n    HoodieArchivedTimeline archivedTimeline = new HoodieArchivedTimeline(metaClient);\n    assertEquals(24, archivedTimeline.countInstants(),\n        \"Total archived records and total read records are the same count\");\n\n    \r\n    Set<String> readCommits =\n        archivedTimeline.getInstants().map(HoodieInstant::getTimestamp).collect(Collectors.toSet());\n    assertEquals(originalCommits.stream().map(HoodieInstant::getTimestamp).collect(Collectors.toSet()), readCommits,\n        \"Read commits map should match the originalCommits - commitsLoadedFromArchival\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/io/TestHoodieTimelineArchiveLog.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2020-10-02 05:25:29","commitOrder":1,"curCode":"  public void testArchiveTableWithNoArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2).forTable(\"test-trip-table\")\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 5).build())\n        .build();\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Loaded 4 commits and the count should match\");\n    boolean result = archiveLog.archiveIfRequired(context);\n    assertTrue(result);\n    timeline = metaClient.getActiveTimeline().reload().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Should not archive commits when maxCommitsToKeep is 5\");\n\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(8, instants.size(), \"Should not delete any aux compaction files when maxCommitsToKeep is 5\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be present for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be present for 103\");\n  }\n","date":"2020-10-02 05:25:29","endLine":318,"groupId":"5032","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testArchiveTableWithNoArchival","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/f755a44d0a2011d10e9e14d7afaa5eeef3ef8b.src","preCode":"  public void testArchiveTableWithNoArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2).forTable(\"test-trip-table\")\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 5).build())\n        .build();\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Loaded 4 commits and the count should match\");\n    boolean result = archiveLog.archiveIfRequired(context);\n    assertTrue(result);\n    timeline = metaClient.getActiveTimeline().reload().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Should not archive commits when maxCommitsToKeep is 5\");\n\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(8, instants.size(), \"Should not delete any aux compaction files when maxCommitsToKeep is 5\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be present for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be present for 103\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/io/TestHoodieTimelineArchiveLog.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"B"}],"commitId":"1f7add92916c37b05be270d9c75a9042134ec506","commitMessage":"@@@[HUDI-1089] Refactor hudi-client to support multi-engine (#1827)\n\n- This change breaks `hudi-client` into `hudi-client-common` and `hudi-spark-client` modules \n- Simple usages of Spark using jsc.parallelize() has been redone using EngineContext#map.  EngineContext#flatMap etc\n- Code changes in the PR.  break classes into `BaseXYZ` parent classes with no spark dependencies living in `hudi-client-common`\n- Classes on `hudi-spark-client` are named `SparkXYZ` extending the parent classes with all the Spark dependencies\n- To simplify/cleanup.  HoodieIndex#fetchRecordLocation has been removed and its usages in tests replaced with alternatives\n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2020-10-02 05:25:29","modifiedFileCount":"31","status":"B","submitter":"Mathieu"},{"authorTime":"2020-10-02 05:25:29","codes":[{"authorDate":"2020-10-09 10:21:27","commitOrder":2,"curCode":"  public void testArchiveTableWithArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2)\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 4).build())\n        .forTable(\"test-trip-table\").build();\n    HoodieTestUtils.init(hadoopConf, basePath);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"104\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"105\", wrapperFs.getConf());\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n\n    assertEquals(6, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    createCleanMetadata(\"100\", false);\n    createCleanMetadata(\"101\", false);\n    createCleanMetadata(\"102\", false);\n    createCleanMetadata(\"103\", false);\n    createCleanMetadata(\"104\", false);\n    createCleanMetadata(\"105\", false);\n    createCleanMetadata(\"106\", true);\n    createCleanMetadata(\"107\", true);\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    List<HoodieInstant> originalCommits = timeline.getInstants().collect(Collectors.toList());\n\n    assertEquals(12, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    assertTrue(archiveLog.archiveIfRequired(context));\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    originalCommits.removeAll(timeline.getInstants().collect(Collectors.toList()));\n\n    \r\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(4, instants.size(), \"Should delete all compaction instants < 104\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be absent for 103\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be absent for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Requested Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Inflight Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Requested Compaction must be present for 105\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Inflight Compaction must be present for 105\");\n\n    \r\n    HoodieArchivedTimeline archivedTimeline = new HoodieArchivedTimeline(metaClient);\n    assertEquals(24, archivedTimeline.countInstants(),\n        \"Total archived records and total read records are the same count\");\n\n    \r\n    Set<String> readCommits =\n        archivedTimeline.getInstants().map(HoodieInstant::getTimestamp).collect(Collectors.toSet());\n    assertEquals(originalCommits.stream().map(HoodieInstant::getTimestamp).collect(Collectors.toSet()), readCommits,\n        \"Read commits map should match the originalCommits - commitsLoadedFromArchival\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n  }\n","date":"2020-10-09 10:21:27","endLine":229,"groupId":"10676","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testArchiveTableWithArchival","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f2/427cd9a23480ef51a3890c7ea53bac20f0101a.src","preCode":"  public void testArchiveTableWithArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2)\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 4).build())\n        .forTable(\"test-trip-table\").build();\n    HoodieTestUtils.init(hadoopConf, basePath);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"104\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"105\", wrapperFs.getConf());\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n\n    assertEquals(6, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"100\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"101\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"102\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"103\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"104\", wrapperFs.getConf());\n    HoodieTestUtils.createCleanFiles(metaClient, basePath, \"105\", wrapperFs.getConf());\n    HoodieTestUtils.createPendingCleanFiles(metaClient, \"106\", \"107\");\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    List<HoodieInstant> originalCommits = timeline.getInstants().collect(Collectors.toList());\n\n    assertEquals(12, timeline.countInstants(), \"Loaded 6 commits and the count should match\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    assertTrue(archiveLog.archiveIfRequired(context));\n\n    \r\n    timeline = metaClient.getActiveTimeline().reload().getAllCommitsTimeline().filterCompletedInstants();\n    originalCommits.removeAll(timeline.getInstants().collect(Collectors.toList()));\n\n    \r\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(4, instants.size(), \"Should delete all compaction instants < 104\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be absent for 100\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be absent for 101\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be absent for 102\");\n    assertFalse(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be absent for 103\");\n    assertFalse(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be absent for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Requested Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"104\")),\n        \"Inflight Compaction must be present for 104\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Requested Compaction must be present for 105\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"105\")),\n        \"Inflight Compaction must be present for 105\");\n\n    \r\n    HoodieArchivedTimeline archivedTimeline = new HoodieArchivedTimeline(metaClient);\n    assertEquals(24, archivedTimeline.countInstants(),\n        \"Total archived records and total read records are the same count\");\n\n    \r\n    Set<String> readCommits =\n        archivedTimeline.getInstants().map(HoodieInstant::getTimestamp).collect(Collectors.toSet());\n    assertEquals(originalCommits.stream().map(HoodieInstant::getTimestamp).collect(Collectors.toSet()), readCommits,\n        \"Read commits map should match the originalCommits - commitsLoadedFromArchival\");\n\n    \r\n    verifyInflightInstants(metaClient, 2);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/io/TestHoodieTimelineArchiveLog.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-10-02 05:25:29","commitOrder":2,"curCode":"  public void testArchiveTableWithNoArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2).forTable(\"test-trip-table\")\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 5).build())\n        .build();\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Loaded 4 commits and the count should match\");\n    boolean result = archiveLog.archiveIfRequired(context);\n    assertTrue(result);\n    timeline = metaClient.getActiveTimeline().reload().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Should not archive commits when maxCommitsToKeep is 5\");\n\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(8, instants.size(), \"Should not delete any aux compaction files when maxCommitsToKeep is 5\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be present for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be present for 103\");\n  }\n","date":"2020-10-02 05:25:29","endLine":318,"groupId":"10676","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testArchiveTableWithNoArchival","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/88/f755a44d0a2011d10e9e14d7afaa5eeef3ef8b.src","preCode":"  public void testArchiveTableWithNoArchival() throws IOException {\n    HoodieWriteConfig cfg = HoodieWriteConfig.newBuilder().withPath(basePath)\n        .withSchema(HoodieTestDataGenerator.TRIP_EXAMPLE_SCHEMA).withParallelism(2, 2).forTable(\"test-trip-table\")\n        .withCompactionConfig(HoodieCompactionConfig.newBuilder().retainCommits(1).archiveCommitsWith(2, 5).build())\n        .build();\n    metaClient = HoodieTableMetaClient.reload(metaClient);\n    HoodieTable table = HoodieSparkTable.create(cfg, context, metaClient);\n    HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(cfg, table);\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"100\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"101\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"102\", wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    \r\n    HoodieTestDataGenerator.createCompactionAuxiliaryMetadata(basePath,\n        new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\"), wrapperFs.getConf());\n    HoodieTestDataGenerator.createCommitFile(basePath, \"103\", wrapperFs.getConf());\n\n    HoodieTimeline timeline = metaClient.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Loaded 4 commits and the count should match\");\n    boolean result = archiveLog.archiveIfRequired(context);\n    assertTrue(result);\n    timeline = metaClient.getActiveTimeline().reload().getCommitsTimeline().filterCompletedInstants();\n    assertEquals(4, timeline.countInstants(), \"Should not archive commits when maxCommitsToKeep is 5\");\n\n    List<HoodieInstant> instants = metaClient.scanHoodieInstantsFromFileSystem(\n        new Path(metaClient.getMetaAuxiliaryPath()), HoodieActiveTimeline.VALID_EXTENSIONS_IN_ACTIVE_TIMELINE, false);\n    assertEquals(8, instants.size(), \"Should not delete any aux compaction files when maxCommitsToKeep is 5\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Requested Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"100\")),\n        \"Inflight Compaction must be present for 100\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Requested Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"101\")),\n        \"Inflight Compaction must be present for 101\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Requested Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"102\")),\n        \"Inflight Compaction must be present for 102\");\n    assertTrue(instants.contains(new HoodieInstant(State.REQUESTED, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Requested Compaction must be present for 103\");\n    assertTrue(instants.contains(new HoodieInstant(State.INFLIGHT, HoodieTimeline.COMPACTION_ACTION, \"103\")),\n        \"Inflight Compaction must be present for 103\");\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/io/TestHoodieTimelineArchiveLog.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"N"}],"commitId":"1d1d91d444b6af2b24b17d94068512a930877a98","commitMessage":"@@@[HUDI-995] Migrate HoodieTestUtils APIs to HoodieTestTable (#2143)\n\n* [HUDI-995] Migrate HoodieTestUtils APIs to HoodieTestTable\n\nRemove APIs in `HoodieTestUtils`\n- listAllDataFilesAndLogFilesInPath\n- listAllLogFilesInPath\n- listAllDataFilesInPath\n- writeRecordsToLogFiles\n- createCleanFiles\n- createPendingCleanFiles\n\nMigrate the callers to use `HoodieTestTable` and `HoodieWriteableTestTable` with new APIs added\n- listAllBaseAndLogFiles\n- listAllLogFiles\n- listAllBaseFiles\n- withLogAppends\n- addClean\n- addInflightClean\n\nAlso added related APIs in `FileCreateUtils`\n- createCleanFile\n- createRequestedCleanFile\n- createInflightCleanFile\n","date":"2020-10-09 10:21:27","modifiedFileCount":"15","status":"M","submitter":"Raymond Xu"}]
