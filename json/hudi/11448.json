[{"authorTime":"2021-01-28 08:53:13","codes":[{"authorDate":"2021-01-28 08:53:13","commitOrder":2,"curCode":"  public FilebasedSchemaProvider(TypedProperties props) {\n    StreamerUtil.checkRequiredProperties(props, Collections.singletonList(Config.SOURCE_SCHEMA_FILE_PROP));\n    FileSystem fs = FSUtils.getFs(props.getString(Config.SOURCE_SCHEMA_FILE_PROP), StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(props.getString(Config.SOURCE_SCHEMA_FILE_PROP))));\n      if (props.containsKey(Config.TARGET_SCHEMA_FILE_PROP)) {\n        this.targetSchema =\n            new Schema.Parser().parse(fs.open(new Path(props.getString(Config.TARGET_SCHEMA_FILE_PROP))));\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","date":"2021-01-28 08:53:13","endLine":64,"groupId":"1381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"FilebasedSchemaProvider","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/d6e17ded7fabcdf408b7c664af8986add8ae5e.src","preCode":"  public FilebasedSchemaProvider(TypedProperties props) {\n    StreamerUtil.checkRequiredProperties(props, Collections.singletonList(Config.SOURCE_SCHEMA_FILE_PROP));\n    FileSystem fs = FSUtils.getFs(props.getString(Config.SOURCE_SCHEMA_FILE_PROP), StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(props.getString(Config.SOURCE_SCHEMA_FILE_PROP))));\n      if (props.containsKey(Config.TARGET_SCHEMA_FILE_PROP)) {\n        this.targetSchema =\n            new Schema.Parser().parse(fs.open(new Path(props.getString(Config.TARGET_SCHEMA_FILE_PROP))));\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/schema/FilebasedSchemaProvider.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"MB"},{"authorDate":"2021-01-28 08:53:13","commitOrder":2,"curCode":"  public FilebasedSchemaProvider(Configuration conf) {\n    final String readSchemaPath = conf.getString(FlinkOptions.READ_SCHEMA_FILE_PATH);\n    final FileSystem fs = FSUtils.getFs(readSchemaPath, StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(readSchemaPath)));\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","date":"2021-01-28 08:53:13","endLine":74,"groupId":"2138","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"FilebasedSchemaProvider","params":"(Configurationconf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/d6e17ded7fabcdf408b7c664af8986add8ae5e.src","preCode":"  public FilebasedSchemaProvider(Configuration conf) {\n    final String readSchemaPath = conf.getString(FlinkOptions.READ_SCHEMA_FILE_PATH);\n    final FileSystem fs = FSUtils.getFs(readSchemaPath, StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(readSchemaPath)));\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/schema/FilebasedSchemaProvider.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"bc0325f6ea0a734f106f21a2fcd4ead413a6cf7b","commitMessage":"@@@[HUDI-1522] Add a new pipeline for Flink writer (#2430)\n\n* [HUDI-1522] Add a new pipeline for Flink writer","date":"2021-01-28 08:53:13","modifiedFileCount":"13","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-03-11 19:45:48","codes":[{"authorDate":"2021-01-28 08:53:13","commitOrder":3,"curCode":"  public FilebasedSchemaProvider(TypedProperties props) {\n    StreamerUtil.checkRequiredProperties(props, Collections.singletonList(Config.SOURCE_SCHEMA_FILE_PROP));\n    FileSystem fs = FSUtils.getFs(props.getString(Config.SOURCE_SCHEMA_FILE_PROP), StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(props.getString(Config.SOURCE_SCHEMA_FILE_PROP))));\n      if (props.containsKey(Config.TARGET_SCHEMA_FILE_PROP)) {\n        this.targetSchema =\n            new Schema.Parser().parse(fs.open(new Path(props.getString(Config.TARGET_SCHEMA_FILE_PROP))));\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","date":"2021-01-28 08:53:13","endLine":64,"groupId":"1381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"FilebasedSchemaProvider","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/d6e17ded7fabcdf408b7c664af8986add8ae5e.src","preCode":"  public FilebasedSchemaProvider(TypedProperties props) {\n    StreamerUtil.checkRequiredProperties(props, Collections.singletonList(Config.SOURCE_SCHEMA_FILE_PROP));\n    FileSystem fs = FSUtils.getFs(props.getString(Config.SOURCE_SCHEMA_FILE_PROP), StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(props.getString(Config.SOURCE_SCHEMA_FILE_PROP))));\n      if (props.containsKey(Config.TARGET_SCHEMA_FILE_PROP)) {\n        this.targetSchema =\n            new Schema.Parser().parse(fs.open(new Path(props.getString(Config.TARGET_SCHEMA_FILE_PROP))));\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/schema/FilebasedSchemaProvider.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2021-03-11 19:45:48","commitOrder":3,"curCode":"  public FilebasedSchemaProvider(Configuration conf) {\n    final String readSchemaPath = conf.getString(FlinkOptions.READ_AVRO_SCHEMA_PATH);\n    final FileSystem fs = FSUtils.getFs(readSchemaPath, StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(readSchemaPath)));\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","date":"2021-03-11 19:45:48","endLine":74,"groupId":"2138","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"FilebasedSchemaProvider","params":"(Configurationconf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9a/16c51bb856cca0fb3688189b189ca85cfd1552.src","preCode":"  public FilebasedSchemaProvider(Configuration conf) {\n    final String readSchemaPath = conf.getString(FlinkOptions.READ_SCHEMA_FILE_PATH);\n    final FileSystem fs = FSUtils.getFs(readSchemaPath, StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(readSchemaPath)));\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/schema/FilebasedSchemaProvider.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"e8e6708aea1ace4aecaba594d7fd84a0b5cac635","commitMessage":"@@@[HUDI-1664] Avro schema inference for Flink SQL table (#2658)\n\nA Flink SQL table has DDL that defines the table schema.  we can use that\nto infer the Avro schema and there is no need to declare a Avro schema\nexplicitly anymore.\n\nBut we still keep the config option for explicit Avro schema in case\nthere is corner cases that the inferred schema is not correct\n(especially for the nullability).","date":"2021-03-11 19:45:48","modifiedFileCount":"8","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-07-06 15:14:30","codes":[{"authorDate":"2021-01-28 08:53:13","commitOrder":4,"curCode":"  public FilebasedSchemaProvider(TypedProperties props) {\n    StreamerUtil.checkRequiredProperties(props, Collections.singletonList(Config.SOURCE_SCHEMA_FILE_PROP));\n    FileSystem fs = FSUtils.getFs(props.getString(Config.SOURCE_SCHEMA_FILE_PROP), StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(props.getString(Config.SOURCE_SCHEMA_FILE_PROP))));\n      if (props.containsKey(Config.TARGET_SCHEMA_FILE_PROP)) {\n        this.targetSchema =\n            new Schema.Parser().parse(fs.open(new Path(props.getString(Config.TARGET_SCHEMA_FILE_PROP))));\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","date":"2021-01-28 08:53:13","endLine":64,"groupId":"11448","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"FilebasedSchemaProvider","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ae/d6e17ded7fabcdf408b7c664af8986add8ae5e.src","preCode":"  public FilebasedSchemaProvider(TypedProperties props) {\n    StreamerUtil.checkRequiredProperties(props, Collections.singletonList(Config.SOURCE_SCHEMA_FILE_PROP));\n    FileSystem fs = FSUtils.getFs(props.getString(Config.SOURCE_SCHEMA_FILE_PROP), StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(props.getString(Config.SOURCE_SCHEMA_FILE_PROP))));\n      if (props.containsKey(Config.TARGET_SCHEMA_FILE_PROP)) {\n        this.targetSchema =\n            new Schema.Parser().parse(fs.open(new Path(props.getString(Config.TARGET_SCHEMA_FILE_PROP))));\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/schema/FilebasedSchemaProvider.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2021-07-06 15:14:30","commitOrder":4,"curCode":"  public FilebasedSchemaProvider(Configuration conf) {\n    final String sourceSchemaPath = conf.getString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH);\n    final FileSystem fs = FSUtils.getFs(sourceSchemaPath, StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(sourceSchemaPath)));\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","date":"2021-07-06 15:14:30","endLine":74,"groupId":"11448","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"FilebasedSchemaProvider","params":"(Configurationconf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/14/43a68cf0fc2ea15901fa45640ba031ce72baab.src","preCode":"  public FilebasedSchemaProvider(Configuration conf) {\n    final String readSchemaPath = conf.getString(FlinkOptions.READ_AVRO_SCHEMA_PATH);\n    final FileSystem fs = FSUtils.getFs(readSchemaPath, StreamerUtil.getHadoopConf());\n    try {\n      this.sourceSchema = new Schema.Parser().parse(fs.open(new Path(readSchemaPath)));\n    } catch (IOException ioe) {\n      throw new HoodieIOException(\"Error reading schema\", ioe);\n    }\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/schema/FilebasedSchemaProvider.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"f2621da32f33bf16fb53f8a71eaf7bca24e6d166","commitMessage":"@@@[HUDI-2093] Fix empty avro schema path caused by duplicate parameters (#3177)\n\n* [HUDI-2093] Fix empty avro schema path caused by duplicate parameters\n\n* rename shcmea option key\n\n* fix doc\n\n* rename var name","date":"2021-07-06 15:14:30","modifiedFileCount":"8","status":"M","submitter":"wangxianghu"}]
