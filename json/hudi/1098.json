[{"authorTime":"2020-05-07 23:02:28","codes":[{"authorDate":"2020-05-07 23:02:28","commitOrder":1,"curCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n  }\n","date":"2020-05-07 23:02:28","endLine":101,"groupId":"1428","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddPartitionMetaWithDryRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9f/d44b424c67eb36efc9bddfdfab67b3aa1685f4.src","preCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2020-05-07 23:02:28","commitOrder":1,"curCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n\n    cr = getShell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    assertEquals(expected, cr.getResult().toString());\n  }\n","date":"2020-05-07 23:02:28","endLine":141,"groupId":"3370","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPartitionMetaWithRealRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9f/d44b424c67eb36efc9bddfdfab67b3aa1685f4.src","preCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n\n    cr = getShell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    assertEquals(expected, cr.getResult().toString());\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"f921469afcd03baaf2a4f3266c8ba97e516d6935","commitMessage":"@@@[HUDI-704] Add test for RepairsCommand (#1554)\n\n","date":"2020-05-07 23:02:28","modifiedFileCount":"3","status":"B","submitter":"hongdd"},{"authorTime":"2020-06-02 16:49:37","codes":[{"authorDate":"2020-06-02 16:49:37","commitOrder":2,"curCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-04 17:52:21","endLine":102,"groupId":"1428","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddPartitionMetaWithDryRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1a/da2a2edba813a738f3170045f9071d3f5c6938.src","preCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-06-02 16:49:37","commitOrder":2,"curCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n\n    cr = getShell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-04 17:52:21","endLine":145,"groupId":"3370","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPartitionMetaWithRealRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1a/da2a2edba813a738f3170045f9071d3f5c6938.src","preCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n\n    assertEquals(expected, cr.getResult().toString());\n\n    cr = getShell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    assertEquals(expected, cr.getResult().toString());\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"a68180b179ae57f16ff0a8d74b72b43b501d36c6","commitMessage":"@@@[HUDI-988] Fix Unit Test Flakiness : Ensure all instantiations of HoodieWriteClient is closed properly. Fix bug in TestRollbacks. Make CLI unit tests for Hudi CLI check skip redering strings\n","date":"2020-06-04 17:52:21","modifiedFileCount":"25","status":"M","submitter":"Balaji Varadarajan"},{"authorTime":"2020-06-18 21:42:13","codes":[{"authorDate":"2020-06-18 21:42:13","commitOrder":3,"curCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-18 21:42:13","endLine":102,"groupId":"1428","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddPartitionMetaWithDryRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/97/64b9a1e46fa6b2057eecdc98add7a60d2f413d.src","preCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-06-18 21:42:13","commitOrder":3,"curCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n\n    cr = getShell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-18 21:42:13","endLine":145,"groupId":"3370","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddPartitionMetaWithRealRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/97/64b9a1e46fa6b2057eecdc98add7a60d2f413d.src","preCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n\n    cr = getShell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_REPAIR_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"f3a701757b9fb838acc4fb2975f378009d71f104","commitMessage":"@@@[HUDI-696] Add unit test for CommitsCommand (#1724)\n\n","date":"2020-06-18 21:42:13","modifiedFileCount":"7","status":"M","submitter":"hongdd"},{"authorTime":"2021-09-07 06:53:53","codes":[{"authorDate":"2021-09-07 06:53:53","commitOrder":4,"curCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath, \".hoodie\", \"100.commit\"));\n\n    \r\n    String partition1 = Paths.get(tablePath, HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH).toString();\n    String partition2 = Paths.get(tablePath, HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH).toString();\n    String partition3 = Paths.get(tablePath, HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH).toString();\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = shell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2021-09-07 06:53:53","endLine":114,"groupId":"1098","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddPartitionMetaWithDryRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/04/8b2a20e6b2c98a83dde9301646cd0298459add.src","preCode":"  public void testAddPartitionMetaWithDryRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    \r\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta\");\n    assertTrue(cr.isSuccess());\n\n    \r\n    String[][] rows = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath)\n        .stream()\n        .map(partition -> new String[]{partition, \"No\", \"None\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-09-07 06:53:53","commitOrder":4,"curCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath, \".hoodie\", \"100.commit\"));\n\n    \r\n    String partition1 = Paths.get(tablePath, HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH).toString();\n    String partition2 = Paths.get(tablePath, HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH).toString();\n    String partition3 = Paths.get(tablePath, HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH).toString();\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = shell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n\n    cr = shell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2021-09-07 06:53:53","endLine":157,"groupId":"1098","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testAddPartitionMetaWithRealRun","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/04/8b2a20e6b2c98a83dde9301646cd0298459add.src","preCode":"  public void testAddPartitionMetaWithRealRun() throws IOException {\n    \r\n    Files.createFile(Paths.get(tablePath + \"/.hoodie/100.commit\"));\n\n    \r\n    String partition1 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_FIRST_PARTITION_PATH;\n    String partition2 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_SECOND_PARTITION_PATH;\n    String partition3 = tablePath + File.separator + HoodieTestDataGenerator.DEFAULT_THIRD_PARTITION_PATH;\n    assertTrue(fs.mkdirs(new Path(partition1)));\n    assertTrue(fs.mkdirs(new Path(partition2)));\n    assertTrue(fs.mkdirs(new Path(partition3)));\n\n    CommandResult cr = getShell().executeCommand(\"repair addpartitionmeta --dryrun false\");\n    assertTrue(cr.isSuccess());\n\n    List<String> paths = FSUtils.getAllPartitionFoldersThreeLevelsDown(fs, tablePath);\n    \r\n    String[][] rows = paths.stream()\n        .map(partition -> new String[]{partition, \"No\", \"Repaired\"})\n        .toArray(String[][]::new);\n    String expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n\n    cr = getShell().executeCommand(\"repair addpartitionmeta\");\n\n    \r\n    rows = paths.stream()\n        .map(partition -> new String[]{partition, \"Yes\", \"None\"})\n        .toArray(String[][]::new);\n    expected = HoodiePrintHelper.print(new String[] {HoodieTableHeaderFields.HEADER_PARTITION_PATH,\n        HoodieTableHeaderFields.HEADER_METADATA_PRESENT, HoodieTableHeaderFields.HEADER_ACTION}, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRepairsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"cf002b6918ffcdb7528857861372dd73ddb7e31d","commitMessage":"@@@[HUDI-2079] Make CLI command tests functional (#3601)\n\nMake all tests in org.apache.hudi.cli.commands extend org.apache.hudi.cli.functional.CLIFunctionalTestHarness and tag as \"functional\".\n\nThis also resolves a blocker where DFS init consistently failed when moving to ubuntu 18.04","date":"2021-09-07 06:53:53","modifiedFileCount":"17","status":"M","submitter":"Raymond Xu"}]
