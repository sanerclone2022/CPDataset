[{"authorTime":"2020-06-02 16:49:37","codes":[{"authorDate":"2020-06-18 21:42:13","commitOrder":4,"curCode":"  public void testShowCommits() throws IOException {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = getShell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-18 21:42:13","endLine":151,"groupId":"3366","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8b/acf4fe0c8a5ed7ccb2951bb0a2b7006d34ced2.src","preCode":"  public void testShowCommits() throws IOException {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = getShell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"},{"authorDate":"2020-06-02 16:49:37","commitOrder":4,"curCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    Files.createFile(Paths.get(tablePath,\n        HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH,\n        HoodiePartitionMetadata.HOODIE_PARTITION_METAFILE));\n    SparkMain.clean(jsc, HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = getShell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"0\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-04 17:52:21","endLine":134,"groupId":"172","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowCleans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/69/aa5b37aa1191bbaefb45419813ec7450c98e90.src","preCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    Files.createFile(Paths.get(tablePath,\n        HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH,\n        HoodiePartitionMetadata.HOODIE_PARTITION_METAFILE));\n    SparkMain.clean(jsc, HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = getShell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"0\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCleansCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"NB"}],"commitId":"f3a701757b9fb838acc4fb2975f378009d71f104","commitMessage":"@@@[HUDI-696] Add unit test for CommitsCommand (#1724)\n\n","date":"2020-06-18 21:42:13","modifiedFileCount":"7","status":"M","submitter":"hongdd"},{"authorTime":"2020-06-28 17:04:50","codes":[{"authorDate":"2020-06-18 21:42:13","commitOrder":5,"curCode":"  public void testShowCommits() throws IOException {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = getShell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-18 21:42:13","endLine":151,"groupId":"3366","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8b/acf4fe0c8a5ed7ccb2951bb0a2b7006d34ced2.src","preCode":"  public void testShowCommits() throws IOException {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = getShell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"},{"authorDate":"2020-06-28 17:04:50","commitOrder":5,"curCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    SparkMain.clean(jsc, HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = getShell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"2\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-28 17:04:50","endLine":136,"groupId":"172","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowCleans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c1/4cf0b2a67874bf8bf25249163fa9abae26419f.src","preCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    Files.createFile(Paths.get(tablePath,\n        HoodieTestCommitMetadataGenerator.DEFAULT_FIRST_PARTITION_PATH,\n        HoodiePartitionMetadata.HOODIE_PARTITION_METAFILE));\n    SparkMain.clean(jsc, HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = getShell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"0\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCleansCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"8919be6a5d8038db7265bfd7459d72fbd545f133","commitMessage":"@@@[HUDI-855] Run Cleaner async with writing (#1577)\n\n- Cleaner can now run concurrently with write operation \n- Configs to turn on/off\n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2020-06-28 17:04:50","modifiedFileCount":"8","status":"M","submitter":"Balaji Varadarajan"},{"authorTime":"2020-06-28 17:04:50","codes":[{"authorDate":"2020-09-26 21:21:47","commitOrder":6,"curCode":"  public void testShowCommits() throws Exception {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = getShell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-09-26 21:21:47","endLine":153,"groupId":"3366","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testShowCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c2/509b12d4a0a4b0dd1752d2d8607970c6bfac17.src","preCode":"  public void testShowCommits() throws IOException {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = getShell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2020-06-28 17:04:50","commitOrder":6,"curCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    SparkMain.clean(jsc, HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = getShell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"2\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2020-06-28 17:04:50","endLine":136,"groupId":"172","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testShowCleans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c1/4cf0b2a67874bf8bf25249163fa9abae26419f.src","preCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    SparkMain.clean(jsc, HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = getShell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"2\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCleansCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"1be0b06ef8839c46318cfa900f18ac6e237d928b","commitMessage":"@@@[HUDI-995] Migrate HoodieTestUtils APIs to HoodieTestTable (#2112)\n\nRemove APIs in HoodieTestUtils\n\n- HoodieTestUtils#createInflightCommitFiles\n- HoodieTestUtils#getCommitFilePath\n- HoodieTestUtils#doesCommitExist\n\nand migrate usages to HoodieTestTable in\n\n- hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestRollbacksCommand.java\n- hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestUpgradeDowngradeCommand.java\n- hudi-cli/src/test/java/org/apache/hudi/cli/integ/ITTestCommitsCommand.java\n- hudi-cli/src/test/java/org/apache/hudi/cli/testutils/HoodieTestCommitMetadataGenerator.java\n- hudi-client/src/test/java/org/apache/hudi/client/TestHoodieClientOnCopyOnWriteStorage.java","date":"2020-09-26 21:21:47","modifiedFileCount":"10","status":"M","submitter":"Raymond Xu"},{"authorTime":"2021-09-07 06:53:53","codes":[{"authorDate":"2021-09-07 06:53:53","commitOrder":7,"curCode":"  public void testShowCommits() throws Exception {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = shell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2021-09-07 06:53:53","endLine":200,"groupId":"1094","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testShowCommits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/cd/f642799438d52e9df24e58a37dea1271213c4e.src","preCode":"  public void testShowCommits() throws Exception {\n    Map<String, Integer[]> data = generateData();\n\n    CommandResult cr = getShell().executeCommand(\"commits show\");\n    assertTrue(cr.isSuccess());\n\n    String expected = generateExpectData(1, data);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2021-09-07 06:53:53","commitOrder":7,"curCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    SparkMain.clean(jsc(), HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = shell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"2\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","date":"2021-09-07 06:53:53","endLine":140,"groupId":"1094","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testShowCleans","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/90/d15b6cabf522d867b6c3eacd8282e4d54569a1.src","preCode":"  public void testShowCleans() throws Exception {\n    \r\n    assertNotNull(propsFilePath, \"Not found properties file\");\n\n    \r\n    SparkMain.clean(jsc, HoodieCLI.basePath, propsFilePath.getPath(), new ArrayList<>());\n    assertEquals(1, metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().count(),\n        \"Loaded 1 clean and the count should match\");\n\n    CommandResult cr = getShell().executeCommand(\"cleans show\");\n    assertTrue(cr.isSuccess());\n\n    HoodieInstant clean = metaClient.getActiveTimeline().reload().getCleanerTimeline().getInstants().findFirst().orElse(null);\n    assertNotNull(clean);\n\n    TableHeader header =\n        new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_CLEAN_TIME)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_EARLIEST_COMMAND_RETAINED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_FILES_DELETED)\n            .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_TIME_TAKEN);\n    List<Comparable[]> rows = new ArrayList<>();\n\n    \r\n    \r\n    rows.add(new Comparable[] {clean.getTimestamp(), \"102\", \"2\", getLatestCleanTimeTakenInMillis().toString()});\n\n    String expected = HoodiePrintHelper.print(header, new HashMap<>(), \"\", false, -1, false, rows);\n    expected = removeNonWordAndStripSpace(expected);\n    String got = removeNonWordAndStripSpace(cr.getResult().toString());\n    assertEquals(expected, got);\n  }\n","realPath":"hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCleansCommand.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"cf002b6918ffcdb7528857861372dd73ddb7e31d","commitMessage":"@@@[HUDI-2079] Make CLI command tests functional (#3601)\n\nMake all tests in org.apache.hudi.cli.commands extend org.apache.hudi.cli.functional.CLIFunctionalTestHarness and tag as \"functional\".\n\nThis also resolves a blocker where DFS init consistently failed when moving to ubuntu 18.04","date":"2021-09-07 06:53:53","modifiedFileCount":"17","status":"M","submitter":"Raymond Xu"}]
