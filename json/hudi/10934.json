[{"authorTime":"2021-07-06 14:03:41","codes":[{"authorDate":"2021-07-06 14:03:41","commitOrder":1,"curCode":"  public void testPutAll() throws IOException, URISyntaxException {\n    RocksDbDiskMap<String, HoodieRecord> rocksDBBasedMap = new RocksDbDiskMap<>(basePath);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    rocksDBBasedMap.putAll(recordMap);\n    \r\n    assertTrue(rocksDBBasedMap.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : rocksDBBasedMap.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","date":"2021-07-06 14:03:41","endLine":181,"groupId":"3463","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"testPutAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/e521fc8c217167ddeaec121ec1423ae8ff4763.src","preCode":"  public void testPutAll() throws IOException, URISyntaxException {\n    RocksDbDiskMap<String, HoodieRecord> rocksDBBasedMap = new RocksDbDiskMap<>(basePath);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    rocksDBBasedMap.putAll(recordMap);\n    \r\n    assertTrue(rocksDBBasedMap.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : rocksDBBasedMap.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestRocksDbDiskMap.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"},{"authorDate":"2021-07-06 14:03:41","commitOrder":1,"curCode":"  public void testPutAll() throws IOException, URISyntaxException {\n    BitCaskDiskMap<String, HoodieRecord> records = new BitCaskDiskMap<>(basePath);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    records.putAll(recordMap);\n    \r\n    assertTrue(records.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : records.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","date":"2021-07-06 14:03:41","endLine":210,"groupId":"3463","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/45/aaff3770075104a6a130bd8d2be02cbda2ac31.src","preCode":"  public void testPutAll() throws IOException, URISyntaxException {\n    BitCaskDiskMap<String, HoodieRecord> records = new BitCaskDiskMap<>(basePath);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    records.putAll(recordMap);\n    \r\n    assertTrue(records.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : records.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestBitCaskDiskMap.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"a4dcbb5c5a2a94e4f69524194d8777d082af31ab","commitMessage":"@@@[HUDI-2028] Implement RockDbBasedMap as an alternate to DiskBasedMap in ExternalSpillableMap (#3194)\n\nCo-authored-by: Rajesh Mahindra <rmahindra@Rajeshs-MacBook-Pro.local>","date":"2021-07-06 14:03:41","modifiedFileCount":"9","status":"B","submitter":"rmahindra123"},{"authorTime":"2021-07-15 10:57:38","codes":[{"authorDate":"2021-07-06 14:03:41","commitOrder":2,"curCode":"  public void testPutAll() throws IOException, URISyntaxException {\n    RocksDbDiskMap<String, HoodieRecord> rocksDBBasedMap = new RocksDbDiskMap<>(basePath);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    rocksDBBasedMap.putAll(recordMap);\n    \r\n    assertTrue(rocksDBBasedMap.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : rocksDBBasedMap.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","date":"2021-07-06 14:03:41","endLine":181,"groupId":"10934","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPutAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/e521fc8c217167ddeaec121ec1423ae8ff4763.src","preCode":"  public void testPutAll() throws IOException, URISyntaxException {\n    RocksDbDiskMap<String, HoodieRecord> rocksDBBasedMap = new RocksDbDiskMap<>(basePath);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    rocksDBBasedMap.putAll(recordMap);\n    \r\n    assertTrue(rocksDBBasedMap.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : rocksDBBasedMap.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestRocksDbDiskMap.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2021-07-15 10:57:38","commitOrder":2,"curCode":"  public void testPutAll(boolean isCompressionEnabled) throws IOException, URISyntaxException {\n    BitCaskDiskMap<String, HoodieRecord> records = new BitCaskDiskMap<>(basePath, isCompressionEnabled);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    records.putAll(recordMap);\n    \r\n    assertTrue(records.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : records.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","date":"2021-07-15 10:57:38","endLine":220,"groupId":"10934","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutAll","params":"(booleanisCompressionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dd/3d3fcd760379361b81361c26a096e988bfe938.src","preCode":"  public void testPutAll() throws IOException, URISyntaxException {\n    BitCaskDiskMap<String, HoodieRecord> records = new BitCaskDiskMap<>(basePath);\n    List<IndexedRecord> iRecords = SchemaTestUtil.generateHoodieTestRecords(0, 100);\n    Map<String, HoodieRecord> recordMap = new HashMap<>();\n    iRecords.forEach(r -> {\n      String key = ((GenericRecord) r).get(HoodieRecord.RECORD_KEY_METADATA_FIELD).toString();\n      String partitionPath = ((GenericRecord) r).get(HoodieRecord.PARTITION_PATH_METADATA_FIELD).toString();\n      HoodieRecord value = new HoodieRecord<>(new HoodieKey(key, partitionPath), new HoodieAvroPayload(Option.of((GenericRecord) r)));\n      recordMap.put(key, value);\n    });\n\n    records.putAll(recordMap);\n    \r\n    assertTrue(records.sizeOfFileOnDiskInBytes() > 0);\n\n    \r\n    for (Map.Entry<String, HoodieRecord> entry : records.entrySet()) {\n      assertTrue(recordMap.containsKey(entry.getKey()));\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/util/collection/TestBitCaskDiskMap.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"d024439764ceeca6366cb33689b729a1c69a6272","commitMessage":"@@@[HUDI-2029] Implement compression for DiskBasedMap in Spillable Map (#3128)\n\n","date":"2021-07-15 10:57:38","modifiedFileCount":"7","status":"M","submitter":"rmahindra123"}]
