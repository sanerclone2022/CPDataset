[{"authorTime":"2020-03-30 01:58:49","codes":[{"authorDate":"2020-03-30 01:58:49","commitOrder":1,"curCode":"  public void testReadInlineFile() throws IOException {\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n\n    int totalSlices = 5; \r\n    List<Pair<Long, Integer>> startOffsetLengthPairs = new ArrayList<>();\n    List<byte[]> expectedByteArrays = new ArrayList<>();\n\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    for (int i = 0; i < totalSlices; i++) {\n      \r\n      byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(randomBytes);\n      wrappedOut.write(randomBytes);\n      long startOffset = wrappedOut.getPos();\n      \r\n      byte[] embeddedInlineBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(embeddedInlineBytes);\n      wrappedOut.write(embeddedInlineBytes);\n      expectedByteArrays.add(embeddedInlineBytes);\n      startOffsetLengthPairs.add(Pair.of(startOffset, embeddedInlineBytes.length));\n    }\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    FileStatus expectedFileStatus = outerPath.getFileSystem(conf).getFileStatus(outerPath);\n\n    for (int i = 0; i < totalSlices; i++) {\n      Pair<Long, Integer> startOffsetLengthPair = startOffsetLengthPairs.get(i);\n      byte[] expectedBytes = expectedByteArrays.get(i);\n      Path inlinePath = FileSystemTestUtils.getPhantomFile(outerPath, startOffsetLengthPair.getLeft(), startOffsetLengthPair.getRight());\n      InLineFileSystem inlineFileSystem = (InLineFileSystem) inlinePath.getFileSystem(conf);\n      FSDataInputStream fsDataInputStream = inlineFileSystem.open(inlinePath);\n      Assert.assertTrue(inlineFileSystem.exists(inlinePath));\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), inlineFileSystem.getFileStatus(inlinePath));\n      FileStatus[] actualFileStatuses = inlineFileSystem.listStatus(inlinePath);\n      Assert.assertEquals(1, actualFileStatuses.length);\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), actualFileStatuses[0]);\n      byte[] actualBytes = new byte[expectedBytes.length];\n      fsDataInputStream.readFully(0, actualBytes);\n      Assert.assertArrayEquals(expectedBytes, actualBytes);\n      fsDataInputStream.close();\n      Assert.assertEquals(InLineFileSystem.SCHEME, inlineFileSystem.getScheme());\n      Assert.assertEquals(URI.create(InLineFileSystem.SCHEME), inlineFileSystem.getUri());\n    }\n  }\n","date":"2020-03-30 01:58:49","endLine":116,"groupId":"3019","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadInlineFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/3e/10c4b1466df1da0c9ba370abe1a4a767e8f861.src","preCode":"  public void testReadInlineFile() throws IOException {\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n\n    int totalSlices = 5; \r\n    List<Pair<Long, Integer>> startOffsetLengthPairs = new ArrayList<>();\n    List<byte[]> expectedByteArrays = new ArrayList<>();\n\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    for (int i = 0; i < totalSlices; i++) {\n      \r\n      byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(randomBytes);\n      wrappedOut.write(randomBytes);\n      long startOffset = wrappedOut.getPos();\n      \r\n      byte[] embeddedInlineBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(embeddedInlineBytes);\n      wrappedOut.write(embeddedInlineBytes);\n      expectedByteArrays.add(embeddedInlineBytes);\n      startOffsetLengthPairs.add(Pair.of(startOffset, embeddedInlineBytes.length));\n    }\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    FileStatus expectedFileStatus = outerPath.getFileSystem(conf).getFileStatus(outerPath);\n\n    for (int i = 0; i < totalSlices; i++) {\n      Pair<Long, Integer> startOffsetLengthPair = startOffsetLengthPairs.get(i);\n      byte[] expectedBytes = expectedByteArrays.get(i);\n      Path inlinePath = FileSystemTestUtils.getPhantomFile(outerPath, startOffsetLengthPair.getLeft(), startOffsetLengthPair.getRight());\n      InLineFileSystem inlineFileSystem = (InLineFileSystem) inlinePath.getFileSystem(conf);\n      FSDataInputStream fsDataInputStream = inlineFileSystem.open(inlinePath);\n      Assert.assertTrue(inlineFileSystem.exists(inlinePath));\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), inlineFileSystem.getFileStatus(inlinePath));\n      FileStatus[] actualFileStatuses = inlineFileSystem.listStatus(inlinePath);\n      Assert.assertEquals(1, actualFileStatuses.length);\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), actualFileStatuses[0]);\n      byte[] actualBytes = new byte[expectedBytes.length];\n      fsDataInputStream.readFully(0, actualBytes);\n      Assert.assertArrayEquals(expectedBytes, actualBytes);\n      fsDataInputStream.close();\n      Assert.assertEquals(InLineFileSystem.SCHEME, inlineFileSystem.getScheme());\n      Assert.assertEquals(URI.create(InLineFileSystem.SCHEME), inlineFileSystem.getUri());\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/fs/inline/TestInLineFileSystem.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2020-03-30 01:58:49","commitOrder":1,"curCode":"  private OuterPathInfo generateOuterFileAndGetInfo(int inlineContentSize) throws IOException {\n    OuterPathInfo toReturn = new OuterPathInfo();\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n    toReturn.outerPath = outerPath;\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    toReturn.startOffset = wrappedOut.getPos();\n    \r\n    byte[] embeddedInlineBytes = new byte[inlineContentSize];\n    RANDOM.nextBytes(embeddedInlineBytes);\n    wrappedOut.write(embeddedInlineBytes);\n    toReturn.expectedBytes = embeddedInlineBytes;\n    toReturn.length = embeddedInlineBytes.length;\n    \r\n    randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    return toReturn;\n  }\n","date":"2020-03-30 01:58:49","endLine":246,"groupId":"3019","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateOuterFileAndGetInfo","params":"(intinlineContentSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/3e/10c4b1466df1da0c9ba370abe1a4a767e8f861.src","preCode":"  private OuterPathInfo generateOuterFileAndGetInfo(int inlineContentSize) throws IOException {\n    OuterPathInfo toReturn = new OuterPathInfo();\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n    toReturn.outerPath = outerPath;\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    toReturn.startOffset = wrappedOut.getPos();\n    \r\n    byte[] embeddedInlineBytes = new byte[inlineContentSize];\n    RANDOM.nextBytes(embeddedInlineBytes);\n    wrappedOut.write(embeddedInlineBytes);\n    toReturn.expectedBytes = embeddedInlineBytes;\n    toReturn.length = embeddedInlineBytes.length;\n    \r\n    randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    return toReturn;\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/fs/inline/TestInLineFileSystem.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"B"}],"commitId":"e057c27603301d8b49e9b50b78a3ffce247b1059","commitMessage":"@@@[HUDI-744] Restructure hudi-common and clean up files under util packages (#1462)\n\n - Brings more order and cohesion to the classes in hudi-common\n - Utils classes related to a particular concept (avro.  timeline. ...) are placed near to the package\n - common.fs package now contains all the filesystem level classes including wrapper filesystem\n - bloom.filter package renamed to just bloom\n - config package contains classes that help store properties\n - common.fs.inline package contains all the inline filesystem classes/impl\n - common.table.timeline now consolidates all timeline related classes\n - common.table.view consolidates all the classes related to filesystem view metadata\n - common.table.timeline.versioning contains all classes related to versioning of timeline\n - Fix few unit tests as a result\n - Moved the test packages around to match the source file move\n - Rename AvroUtils to TimelineMetadataUtils & minor fixes/typos","date":"2020-03-30 01:58:49","modifiedFileCount":"206","status":"B","submitter":"vinoth chandar"},{"authorTime":"2020-03-30 01:58:49","codes":[{"authorDate":"2020-05-06 19:15:20","commitOrder":2,"curCode":"  public void testReadInlineFile() throws IOException {\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n\n    int totalSlices = 5; \r\n    List<Pair<Long, Integer>> startOffsetLengthPairs = new ArrayList<>();\n    List<byte[]> expectedByteArrays = new ArrayList<>();\n\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    for (int i = 0; i < totalSlices; i++) {\n      \r\n      byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(randomBytes);\n      wrappedOut.write(randomBytes);\n      long startOffset = wrappedOut.getPos();\n      \r\n      byte[] embeddedInlineBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(embeddedInlineBytes);\n      wrappedOut.write(embeddedInlineBytes);\n      expectedByteArrays.add(embeddedInlineBytes);\n      startOffsetLengthPairs.add(Pair.of(startOffset, embeddedInlineBytes.length));\n    }\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    FileStatus expectedFileStatus = outerPath.getFileSystem(conf).getFileStatus(outerPath);\n\n    for (int i = 0; i < totalSlices; i++) {\n      Pair<Long, Integer> startOffsetLengthPair = startOffsetLengthPairs.get(i);\n      byte[] expectedBytes = expectedByteArrays.get(i);\n      Path inlinePath = FileSystemTestUtils.getPhantomFile(outerPath, startOffsetLengthPair.getLeft(), startOffsetLengthPair.getRight());\n      InLineFileSystem inlineFileSystem = (InLineFileSystem) inlinePath.getFileSystem(conf);\n      FSDataInputStream fsDataInputStream = inlineFileSystem.open(inlinePath);\n      assertTrue(inlineFileSystem.exists(inlinePath));\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), inlineFileSystem.getFileStatus(inlinePath));\n      FileStatus[] actualFileStatuses = inlineFileSystem.listStatus(inlinePath);\n      assertEquals(1, actualFileStatuses.length);\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), actualFileStatuses[0]);\n      byte[] actualBytes = new byte[expectedBytes.length];\n      fsDataInputStream.readFully(0, actualBytes);\n      assertArrayEquals(expectedBytes, actualBytes);\n      fsDataInputStream.close();\n      assertEquals(InLineFileSystem.SCHEME, inlineFileSystem.getScheme());\n      assertEquals(URI.create(InLineFileSystem.SCHEME), inlineFileSystem.getUri());\n    }\n  }\n","date":"2020-05-06 19:15:20","endLine":121,"groupId":"10951","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadInlineFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d2/adbb360d2b8a1ef0723eb853f6dff68eff524d.src","preCode":"  public void testReadInlineFile() throws IOException {\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n\n    int totalSlices = 5; \r\n    List<Pair<Long, Integer>> startOffsetLengthPairs = new ArrayList<>();\n    List<byte[]> expectedByteArrays = new ArrayList<>();\n\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    for (int i = 0; i < totalSlices; i++) {\n      \r\n      byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(randomBytes);\n      wrappedOut.write(randomBytes);\n      long startOffset = wrappedOut.getPos();\n      \r\n      byte[] embeddedInlineBytes = new byte[RANDOM.nextInt(1000)];\n      RANDOM.nextBytes(embeddedInlineBytes);\n      wrappedOut.write(embeddedInlineBytes);\n      expectedByteArrays.add(embeddedInlineBytes);\n      startOffsetLengthPairs.add(Pair.of(startOffset, embeddedInlineBytes.length));\n    }\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    FileStatus expectedFileStatus = outerPath.getFileSystem(conf).getFileStatus(outerPath);\n\n    for (int i = 0; i < totalSlices; i++) {\n      Pair<Long, Integer> startOffsetLengthPair = startOffsetLengthPairs.get(i);\n      byte[] expectedBytes = expectedByteArrays.get(i);\n      Path inlinePath = FileSystemTestUtils.getPhantomFile(outerPath, startOffsetLengthPair.getLeft(), startOffsetLengthPair.getRight());\n      InLineFileSystem inlineFileSystem = (InLineFileSystem) inlinePath.getFileSystem(conf);\n      FSDataInputStream fsDataInputStream = inlineFileSystem.open(inlinePath);\n      Assert.assertTrue(inlineFileSystem.exists(inlinePath));\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), inlineFileSystem.getFileStatus(inlinePath));\n      FileStatus[] actualFileStatuses = inlineFileSystem.listStatus(inlinePath);\n      Assert.assertEquals(1, actualFileStatuses.length);\n      verifyFileStatus(expectedFileStatus, inlinePath, startOffsetLengthPair.getRight(), actualFileStatuses[0]);\n      byte[] actualBytes = new byte[expectedBytes.length];\n      fsDataInputStream.readFully(0, actualBytes);\n      Assert.assertArrayEquals(expectedBytes, actualBytes);\n      fsDataInputStream.close();\n      Assert.assertEquals(InLineFileSystem.SCHEME, inlineFileSystem.getScheme());\n      Assert.assertEquals(URI.create(InLineFileSystem.SCHEME), inlineFileSystem.getUri());\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/fs/inline/TestInLineFileSystem.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-03-30 01:58:49","commitOrder":2,"curCode":"  private OuterPathInfo generateOuterFileAndGetInfo(int inlineContentSize) throws IOException {\n    OuterPathInfo toReturn = new OuterPathInfo();\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n    toReturn.outerPath = outerPath;\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    toReturn.startOffset = wrappedOut.getPos();\n    \r\n    byte[] embeddedInlineBytes = new byte[inlineContentSize];\n    RANDOM.nextBytes(embeddedInlineBytes);\n    wrappedOut.write(embeddedInlineBytes);\n    toReturn.expectedBytes = embeddedInlineBytes;\n    toReturn.length = embeddedInlineBytes.length;\n    \r\n    randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    return toReturn;\n  }\n","date":"2020-03-30 01:58:49","endLine":246,"groupId":"10951","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateOuterFileAndGetInfo","params":"(intinlineContentSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/3e/10c4b1466df1da0c9ba370abe1a4a767e8f861.src","preCode":"  private OuterPathInfo generateOuterFileAndGetInfo(int inlineContentSize) throws IOException {\n    OuterPathInfo toReturn = new OuterPathInfo();\n    Path outerPath = getRandomOuterFSPath();\n    listOfGeneratedPaths.add(outerPath);\n    toReturn.outerPath = outerPath;\n    FSDataOutputStream wrappedOut = outerPath.getFileSystem(conf).create(outerPath, true);\n    \r\n    byte[] randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    toReturn.startOffset = wrappedOut.getPos();\n    \r\n    byte[] embeddedInlineBytes = new byte[inlineContentSize];\n    RANDOM.nextBytes(embeddedInlineBytes);\n    wrappedOut.write(embeddedInlineBytes);\n    toReturn.expectedBytes = embeddedInlineBytes;\n    toReturn.length = embeddedInlineBytes.length;\n    \r\n    randomBytes = new byte[RANDOM.nextInt(1000)];\n    RANDOM.nextBytes(randomBytes);\n    wrappedOut.write(randomBytes);\n    wrappedOut.flush();\n    wrappedOut.close();\n    return toReturn;\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/fs/inline/TestInLineFileSystem.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"}],"commitId":"366bb10d8c4fe98424f09a6cf6f4aee7716451a4","commitMessage":"@@@[HUDI-812] Migrate hudi common tests to JUnit 5 (#1590)\n\n* [HUDI-812] Migrate hudi-common tests to JUnit 5","date":"2020-05-06 19:15:20","modifiedFileCount":"38","status":"M","submitter":"Raymond Xu"}]
