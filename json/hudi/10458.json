[{"authorTime":"2021-06-13 15:04:46","codes":[{"authorDate":"2021-06-13 15:04:46","commitOrder":1,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n\n    return conf;\n  }\n","date":"2021-06-13 15:04:46","endLine":106,"groupId":"4022","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8e/0c671f543da6aa2feebdfcae72246e34bd2501.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2021-06-13 15:04:46","commitOrder":1,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","date":"2021-06-13 15:04:46","endLine":161,"groupId":"4423","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/84/3e9bf8b0100d1e74c456a77b53a2f395d6afaa.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"0c4f2fdc15982870b59d3458303973af95984266","commitMessage":"@@@[HUDI-1984] Support independent flink hudi compaction function (#3046)\n\n","date":"2021-06-13 15:04:46","modifiedFileCount":"9","status":"B","submitter":"swuferhong"},{"authorTime":"2021-06-17 21:22:13","codes":[{"authorDate":"2021-06-13 15:04:46","commitOrder":2,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n\n    return conf;\n  }\n","date":"2021-06-13 15:04:46","endLine":106,"groupId":"4022","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/8e/0c671f543da6aa2feebdfcae72246e34bd2501.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2021-06-17 21:22:13","commitOrder":2,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","date":"2021-06-17 21:22:13","endLine":167,"groupId":"4423","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/59/534cf15a04a70097016385542a1f390f4921d3.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"67c31243522268002c8b1bf5285dfe3c07cf5783","commitMessage":"@@@[HUDI-2032] Make keygen class and keygen type optional for FlinkStreamerConfig (#3104)\n\n* [HUDI-2032] Make keygen class and keygen type optional for FlinkStreamerConfig\n\n* Address the review suggestion","date":"2021-06-17 21:22:13","modifiedFileCount":"1","status":"M","submitter":"vinoyang"},{"authorTime":"2021-06-17 21:22:13","codes":[{"authorDate":"2021-06-18 09:35:09","commitOrder":3,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","date":"2021-06-18 09:35:09","endLine":108,"groupId":"4022","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dd/c73a59474cd9a703e027d95cf8bb4d9efd50f3.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-06-17 21:22:13","commitOrder":3,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","date":"2021-06-17 21:22:13","endLine":167,"groupId":"4423","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/59/534cf15a04a70097016385542a1f390f4921d3.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"N"}],"commitId":"aa6342c3c9af53e7064546becf987e26534d0764","commitMessage":"@@@[HUDI-2036] Move the compaction plan scheduling out of flink writer coordinator (#3101)\n\nSince HUDI-1955 was fixed.  we can move the scheduling out if the\ncoordinator to make the coordinator more lightweight.","date":"2021-06-18 09:35:09","modifiedFileCount":"15","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-06-28 17:11:32","codes":[{"authorDate":"2021-06-18 09:35:09","commitOrder":4,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","date":"2021-06-18 09:35:09","endLine":108,"groupId":"4022","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dd/c73a59474cd9a703e027d95cf8bb4d9efd50f3.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2021-06-28 17:11:32","commitOrder":4,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","date":"2021-06-28 17:11:32","endLine":166,"groupId":"2377","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/65/ba339231b0e735fb59aa51200f67f37994b896.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"9e61dad59764abb5acb35adb3399439000b8c774","commitMessage":"@@@[MINOR] Drop duplicate keygenerator class configuration setting (#3167)\n\n","date":"2021-06-28 17:11:32","modifiedFileCount":"1","status":"M","submitter":"wangxianghu"},{"authorTime":"2021-06-28 19:26:08","codes":[{"authorDate":"2021-06-18 09:35:09","commitOrder":5,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","date":"2021-06-18 09:35:09","endLine":108,"groupId":"4022","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dd/c73a59474cd9a703e027d95cf8bb4d9efd50f3.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2021-06-28 19:26:08","commitOrder":5,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.PARTITION_PATH_URL_ENCODE, config.writePartitionUrlEncode);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-06-28 19:26:08","endLine":351,"groupId":"2377","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ab/450cca1955ae7ebf9bf859f03716ba9329b302.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"34fc8a8880b0da5adb82b6eb7678f141af54ca18","commitMessage":"@@@[HUDI-2067] Sync FlinkOptions config to FlinkStreamerConfig (#3151)\n\n","date":"2021-06-28 19:26:08","modifiedFileCount":"1","status":"M","submitter":"Vinay Patil"},{"authorTime":"2021-06-29 15:34:26","codes":[{"authorDate":"2021-06-18 09:35:09","commitOrder":6,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","date":"2021-06-18 09:35:09","endLine":108,"groupId":"4022","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dd/c73a59474cd9a703e027d95cf8bb4d9efd50f3.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2021-06-29 15:34:26","commitOrder":6,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-06-29 15:34:26","endLine":357,"groupId":"4423","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4c/8074558e1f157d8dda47ef8f3f513daa80bd9c.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.PARTITION_PATH_URL_ENCODE, config.writePartitionUrlEncode);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"b8a8f572d6a760c744b0a5228f2512d3d113d390","commitMessage":"@@@[HUDI-2094] Supports hive style partitioning for flink writer (#3178)\n\n","date":"2021-06-29 15:34:26","modifiedFileCount":"8","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-06-29 15:34:26","codes":[{"authorDate":"2021-06-29 22:53:01","commitOrder":7,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","date":"2021-06-29 22:53:01","endLine":116,"groupId":"4022","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/69/9f078a700d5aca340deff3c8549b68ee304a52.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2021-06-29 15:34:26","commitOrder":7,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-06-29 15:34:26","endLine":357,"groupId":"4423","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4c/8074558e1f157d8dda47ef8f3f513daa80bd9c.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"f665db071fac50ab1e74ed17bdda2eea9ed0ebb2","commitMessage":"@@@[HUDI-2085] Support specify compaction paralleism and compaction target io for flink batch compaction (#3169)\n\n","date":"2021-06-29 22:53:01","modifiedFileCount":"2","status":"M","submitter":"swuferhong"},{"authorTime":"2021-06-29 15:34:26","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":8,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2021-06-29 15:34:26","commitOrder":8,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-06-29 15:34:26","endLine":357,"groupId":"4423","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/4c/8074558e1f157d8dda47ef8f3f513daa80bd9c.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"1d6978cde4c98c82c184f6404f49ef0f4832fbd6","commitMessage":"@@@[HUDI-2135] Add compaction schedule option for flink (#3226)\n\n","date":"2021-07-06 14:11:20","modifiedFileCount":"6","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-07-06 15:14:30","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":9,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-06 15:14:30","commitOrder":9,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-06 15:14:30","endLine":351,"groupId":"4423","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0b/4533f7c606ed4c2732c0b23651e81b31a54e06.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.readSchemaFilePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA_PATH, config.avroSchemaPath);\n    conf.setString(FlinkOptions.READ_AVRO_SCHEMA, config.avroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"f2621da32f33bf16fb53f8a71eaf7bca24e6d166","commitMessage":"@@@[HUDI-2093] Fix empty avro schema path caused by duplicate parameters (#3177)\n\n* [HUDI-2093] Fix empty avro schema path caused by duplicate parameters\n\n* rename shcmea option key\n\n* fix doc\n\n* rename var name","date":"2021-07-06 15:14:30","modifiedFileCount":"8","status":"M","submitter":"wangxianghu"},{"authorTime":"2021-07-09 16:06:32","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":10,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-09 16:06:32","commitOrder":10,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-09 16:06:32","endLine":360,"groupId":"4423","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c0/24d7c5cc1781d7b8c9386e78c517c5c704730b.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"371526789d663dee85041eb31c27c52c81ef87ef","commitMessage":"@@@[HUDI-2087] Support Append only in Flink stream (#3174)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-07-09 16:06:32","modifiedFileCount":"14","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-07-10 02:20:09","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":11,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-10 02:20:09","commitOrder":11,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-10 02:20:09","endLine":351,"groupId":"4423","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0b/4533f7c606ed4c2732c0b23651e81b31a54e06.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"b4562e86e4b58d6151fdeea12e727b8c8881a213","commitMessage":"@@@Revert \"[HUDI-2087] Support Append only in Flink stream (#3174)\" (#3251)\n\nThis reverts commit 371526789d663dee85041eb31c27c52c81ef87ef.","date":"2021-07-10 02:20:09","modifiedFileCount":"14","status":"M","submitter":"vinoth chandar"},{"authorTime":"2021-07-10 14:49:35","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":12,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":23,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-10 14:49:35","commitOrder":12,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-10 14:49:35","endLine":360,"groupId":"4423","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c0/24d7c5cc1781d7b8c9386e78c517c5c704730b.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"783c9cb3693ff7d82cc3d43a4964c64a4da19436","commitMessage":"@@@[HUDI-2087] Support Append only in Flink stream (#3252)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-07-10 14:49:35","modifiedFileCount":"14","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-07-10 15:43:36","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":13,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-10 15:43:36","commitOrder":13,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-10 15:43:36","endLine":364,"groupId":"2107","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/83/454b1583ff0ee6e8000d47f5e65f0d5a51090f.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"}],"commitId":"9b01d2a04520db6230cd16ef2b29013c013b1944","commitMessage":"@@@[HUDI-2142] Support setting bucket assign parallelism for flink write task (#3239)\n\n","date":"2021-07-10 15:43:36","modifiedFileCount":"4","status":"M","submitter":"swuferhong"},{"authorTime":"2021-07-14 17:01:30","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":14,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":27,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-14 17:01:30","commitOrder":14,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-14 17:01:30","endLine":368,"groupId":"2107","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/1fd3d39a2fda40e0bacc424c4ee0a2a68fd039.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"}],"commitId":"632bfd1a65f55deff60bd56e514738b9c8730140","commitMessage":"@@@Merge pull request #3268 from yuzhaojing/HUDI-2171\n\n[HUDI-2171] Add parallelism conf for bootstrap operator","date":"2021-07-14 17:01:30","modifiedFileCount":"4","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-07-16 18:05:33","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":15,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":29,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-16 18:05:33","commitOrder":15,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-16 21:36:27","endLine":365,"groupId":"2107","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/92/d976fc33a553950e5fdec1f6ef1e3092ff24a0.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.APPEND_ONLY_ENABLE, config.appendOnly);\n    if (config.appendOnly) {\n      \r\n      conf.setString(FlinkOptions.OPERATION, WriteOperationType.INSERT.value());\n    } else {\n      conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    }\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"50c2b76d725a71608a38217370b1ac45cedae405","commitMessage":"@@@Revert \"[HUDI-2087] Support Append only in Flink stream (#3252)\"\n\nThis reverts commit 783c9cb3\n","date":"2021-07-16 21:36:27","modifiedFileCount":"14","status":"M","submitter":"yuzhao.cyz"},{"authorTime":"2021-07-28 19:45:50","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":16,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":31,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-07-28 19:45:50","commitOrder":16,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-07-28 19:45:50","endLine":369,"groupId":"2107","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/45/97d090242a16f562af6ab5dabaf111cb5d10a0.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"7739518879cf1c30576b938d705947192a2dd9ad","commitMessage":"@@@[HUDI-2228] Add option 'hive_sync.mode' for flink writer (#3352)\n\n","date":"2021-07-28 19:45:50","modifiedFileCount":"3","status":"M","submitter":"swuferhong"},{"authorTime":"2021-08-04 17:53:20","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":17,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":33,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-08-04 17:53:20","commitOrder":17,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.INSERT_ALLOW_DUP, config.insertAllowDup);\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-08-04 17:53:20","endLine":373,"groupId":"2107","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a7/ef14fa410cec610940467cd382237c7f2bd550.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"b8b9d6db83657cfdf35832eb26eb7e46ca318048","commitMessage":"@@@[HUDI-2087] Support Append only in Flink stream (#3390)\n\nCo-authored-by: ??? <yuzhaojing@bilibili.com>","date":"2021-08-04 17:53:20","modifiedFileCount":"13","status":"M","submitter":"yuzhaojing"},{"authorTime":"2021-08-06 10:30:52","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":18,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":35,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-08-06 10:30:52","commitOrder":18,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.INSERT_DEDUP, config.insertDedup);\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-08-06 10:30:52","endLine":373,"groupId":"2107","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a4/591c835347ee6146af1f86000e4666d0e464a3.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.INSERT_ALLOW_DUP, config.insertAllowDup);\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"b7586a563253082a00d62ac81e3b5acbb378472a","commitMessage":"@@@[HUDI-2274] Allows INSERT duplicates for Flink MOR table (#3403)\n\n","date":"2021-08-06 10:30:52","modifiedFileCount":"9","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-08-20 04:36:40","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":19,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"4022","id":37,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-08-20 04:36:40","commitOrder":19,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.INSERT_DEDUP, config.insertDedup);\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS_NAME, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS_NAME, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS_NAME, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-08-20 04:36:40","endLine":373,"groupId":"2107","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/75/272abf43adfc8fab6a9e2d9b81c5d7387b7a51.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.INSERT_DEDUP, config.insertDedup);\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"c350d05dd3301f14fa9d688746c9de2416db3f11","commitMessage":"@@@Restore 0.8.0 config keys with deprecated annotation (#3506)\n\nCo-authored-by: Sagar Sumit <sagarsumit09@gmail.com>\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2021-08-20 04:36:40","modifiedFileCount":"109","status":"M","submitter":"Udit Mehrotra"},{"authorTime":"2021-09-11 13:17:16","codes":[{"authorDate":"2021-07-06 14:11:20","commitOrder":20,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","date":"2021-07-06 14:11:20","endLine":130,"groupId":"10458","id":39,"instanceNumber":1,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkCompactionConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d8/f96dbe3cf25c98d5f92726f69d3d30adcf0290.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkCompactionConfig config) {\n    org.apache.flink.configuration.Configuration conf = new Configuration();\n\n    conf.setString(FlinkOptions.PATH, config.path);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnable);\n    \r\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, false);\n    conf.setBoolean(FlinkOptions.COMPACTION_SCHEDULE_ENABLED, config.schedule);\n\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/sink/compact/FlinkCompactionConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-09-11 13:17:16","commitOrder":20,"curCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.INSERT_DEDUP, config.insertDedup);\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS_NAME, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS_NAME, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setLong(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS_NAME, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","date":"2021-09-11 13:17:16","endLine":373,"groupId":"10458","id":40,"instanceNumber":2,"isCurCommit":1,"methodName":"toFlinkConfig","params":"(FlinkStreamerConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/89/8ba88fd021e75ce42e019a9fb3e8a314c64222.src","preCode":"  public static org.apache.flink.configuration.Configuration toFlinkConfig(FlinkStreamerConfig config) {\n    Map<String, String> propsMap = new HashMap<String, String>((Map) StreamerUtil.getProps(config));\n    org.apache.flink.configuration.Configuration conf = fromMap(propsMap);\n\n    conf.setString(FlinkOptions.PATH, config.targetBasePath);\n    conf.setString(FlinkOptions.TABLE_NAME, config.targetTableName);\n    \r\n    conf.setString(FlinkOptions.TABLE_TYPE, config.tableType.toUpperCase());\n    conf.setBoolean(FlinkOptions.INSERT_DEDUP, config.insertDedup);\n    conf.setString(FlinkOptions.OPERATION, config.operation.value());\n    conf.setString(FlinkOptions.PRECOMBINE_FIELD, config.sourceOrderingField);\n    conf.setString(FlinkOptions.PAYLOAD_CLASS_NAME, config.payloadClassName);\n    conf.setBoolean(FlinkOptions.INSERT_DROP_DUPS, config.filterDupes);\n    conf.setInteger(FlinkOptions.RETRY_TIMES, Integer.parseInt(config.instantRetryTimes));\n    conf.setLong(FlinkOptions.RETRY_INTERVAL_MS, Long.parseLong(config.instantRetryInterval));\n    conf.setBoolean(FlinkOptions.IGNORE_FAILED, config.commitOnErrors);\n    conf.setString(FlinkOptions.RECORD_KEY_FIELD, config.recordKeyField);\n    conf.setString(FlinkOptions.PARTITION_PATH_FIELD, config.partitionPathField);\n    if (!StringUtils.isNullOrEmpty(config.keygenClass)) {\n      conf.setString(FlinkOptions.KEYGEN_CLASS_NAME, config.keygenClass);\n    } else {\n      conf.setString(FlinkOptions.KEYGEN_TYPE, config.keygenType);\n    }\n    conf.setInteger(FlinkOptions.INDEX_BOOTSTRAP_TASKS, config.indexBootstrapNum);\n    conf.setInteger(FlinkOptions.BUCKET_ASSIGN_TASKS, config.bucketAssignNum);\n    conf.setInteger(FlinkOptions.WRITE_TASKS, config.writeTaskNum);\n    conf.setString(FlinkOptions.PARTITION_DEFAULT_NAME, config.partitionDefaultName);\n    conf.setBoolean(FlinkOptions.INDEX_BOOTSTRAP_ENABLED, config.indexBootstrapEnabled);\n    conf.setDouble(FlinkOptions.INDEX_STATE_TTL, config.indexStateTtl);\n    conf.setBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED, config.indexGlobalEnabled);\n    conf.setString(FlinkOptions.INDEX_PARTITION_REGEX, config.indexPartitionRegex);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA_PATH, config.sourceAvroSchemaPath);\n    conf.setString(FlinkOptions.SOURCE_AVRO_SCHEMA, config.sourceAvroSchema);\n    conf.setBoolean(FlinkOptions.UTC_TIMEZONE, config.utcTimezone);\n    conf.setBoolean(FlinkOptions.URL_ENCODE_PARTITIONING, config.writePartitionUrlEncode);\n    conf.setBoolean(FlinkOptions.HIVE_STYLE_PARTITIONING, config.hiveStylePartitioning);\n    conf.setDouble(FlinkOptions.WRITE_TASK_MAX_SIZE, config.writeTaskMaxSize);\n    conf.setDouble(FlinkOptions.WRITE_BATCH_SIZE, config.writeBatchSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_BLOCK_SIZE, config.writeLogBlockSize);\n    conf.setInteger(FlinkOptions.WRITE_LOG_MAX_SIZE, config.writeLogMaxSize);\n    conf.setInteger(FlinkOptions.WRITE_MERGE_MAX_MEMORY, config.writeMergeMaxMemory);\n    conf.setBoolean(FlinkOptions.COMPACTION_ASYNC_ENABLED, config.compactionAsyncEnabled);\n    conf.setInteger(FlinkOptions.COMPACTION_TASKS, config.compactionTasks);\n    conf.setString(FlinkOptions.COMPACTION_TRIGGER_STRATEGY, config.compactionTriggerStrategy);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_COMMITS, config.compactionDeltaCommits);\n    conf.setInteger(FlinkOptions.COMPACTION_DELTA_SECONDS, config.compactionDeltaSeconds);\n    conf.setInteger(FlinkOptions.COMPACTION_MAX_MEMORY, config.compactionMaxMemory);\n    conf.setLong(FlinkOptions.COMPACTION_TARGET_IO, config.compactionTargetIo);\n    conf.setBoolean(FlinkOptions.CLEAN_ASYNC_ENABLED, config.cleanAsyncEnabled);\n    conf.setInteger(FlinkOptions.CLEAN_RETAIN_COMMITS, config.cleanRetainCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MAX_COMMITS, config.archiveMaxCommits);\n    conf.setInteger(FlinkOptions.ARCHIVE_MIN_COMMITS, config.archiveMinCommits);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ENABLED, config.hiveSyncEnabled);\n    conf.setString(FlinkOptions.HIVE_SYNC_DB, config.hiveSyncDb);\n    conf.setString(FlinkOptions.HIVE_SYNC_TABLE, config.hiveSyncTable);\n    conf.setString(FlinkOptions.HIVE_SYNC_FILE_FORMAT, config.hiveSyncFileFormat);\n    conf.setString(FlinkOptions.HIVE_SYNC_MODE, config.hiveSyncMode);\n    conf.setString(FlinkOptions.HIVE_SYNC_USERNAME, config.hiveSyncUsername);\n    conf.setString(FlinkOptions.HIVE_SYNC_PASSWORD, config.hiveSyncPassword);\n    conf.setString(FlinkOptions.HIVE_SYNC_JDBC_URL, config.hiveSyncJdbcUrl);\n    conf.setString(FlinkOptions.HIVE_SYNC_METASTORE_URIS, config.hiveSyncMetastoreUri);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_FIELDS, config.hiveSyncPartitionFields);\n    conf.setString(FlinkOptions.HIVE_SYNC_PARTITION_EXTRACTOR_CLASS_NAME, config.hiveSyncPartitionExtractorClass);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_ASSUME_DATE_PARTITION, config.hiveSyncAssumeDatePartition);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_USE_JDBC, config.hiveSyncUseJdbc);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_AUTO_CREATE_DB, config.hiveSyncAutoCreateDb);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_IGNORE_EXCEPTIONS, config.hiveSyncIgnoreExceptions);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SKIP_RO_SUFFIX, config.hiveSyncSkipRoSuffix);\n    conf.setBoolean(FlinkOptions.HIVE_SYNC_SUPPORT_TIMESTAMP, config.hiveSyncSupportTimestamp);\n    return conf;\n  }\n","realPath":"hudi-flink/src/main/java/org/apache/hudi/streamer/FlinkStreamerConfig.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"b30c5bdaef77aee9f564ac24f80f5c364014bb17","commitMessage":"@@@[HUDI-2412] Add timestamp based partitioning for flink writer (#3638)\n\n","date":"2021-09-11 13:17:16","modifiedFileCount":"11","status":"M","submitter":"Danny Chan"}]
