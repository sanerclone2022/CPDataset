[{"authorTime":"2020-03-30 01:58:49","codes":[{"authorDate":"2020-03-30 01:58:49","commitOrder":1,"curCode":"  private void waitForFileVisibility(Path filePath, FileVisibility visibility) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      try {\n        if (checkFileVisibility(filePath, visibility)) {\n          return;\n        }\n      } catch (IOException ioe) {\n        LOG.warn(\"Got IOException waiting for file visibility. Retrying\", ioe);\n      }\n\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(\"Timed-out waiting for the file to \" + visibility.name());\n  }\n","date":"2020-03-30 01:58:49","endLine":167,"groupId":"55","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForFileVisibility","params":"(PathfilePath@FileVisibilityvisibility)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/83/aeb1a372f4ea9989c2277d60f095d22e3e43e0.src","preCode":"  private void waitForFileVisibility(Path filePath, FileVisibility visibility) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      try {\n        if (checkFileVisibility(filePath, visibility)) {\n          return;\n        }\n      } catch (IOException ioe) {\n        LOG.warn(\"Got IOException waiting for file visibility. Retrying\", ioe);\n      }\n\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(\"Timed-out waiting for the file to \" + visibility.name());\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/fs/FailSafeConsistencyGuard.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2020-03-30 01:58:49","commitOrder":1,"curCode":"  private void retryTillSuccess(Function<Integer, Boolean> predicate, String timedOutMessage) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    LOG.info(\"Max Attempts=\" + consistencyGuardConfig.getMaxConsistencyChecks());\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      boolean success = predicate.apply(attempt);\n      if (success) {\n        return;\n      }\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(timedOutMessage);\n\n  }\n","date":"2020-03-30 01:58:49","endLine":192,"groupId":"411","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"retryTillSuccess","params":"(Function<Integer@Boolean>predicate@StringtimedOutMessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/83/aeb1a372f4ea9989c2277d60f095d22e3e43e0.src","preCode":"  private void retryTillSuccess(Function<Integer, Boolean> predicate, String timedOutMessage) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    LOG.info(\"Max Attempts=\" + consistencyGuardConfig.getMaxConsistencyChecks());\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      boolean success = predicate.apply(attempt);\n      if (success) {\n        return;\n      }\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(timedOutMessage);\n\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/fs/FailSafeConsistencyGuard.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"}],"commitId":"e057c27603301d8b49e9b50b78a3ffce247b1059","commitMessage":"@@@[HUDI-744] Restructure hudi-common and clean up files under util packages (#1462)\n\n - Brings more order and cohesion to the classes in hudi-common\n - Utils classes related to a particular concept (avro.  timeline. ...) are placed near to the package\n - common.fs package now contains all the filesystem level classes including wrapper filesystem\n - bloom.filter package renamed to just bloom\n - config package contains classes that help store properties\n - common.fs.inline package contains all the inline filesystem classes/impl\n - common.table.timeline now consolidates all timeline related classes\n - common.table.view consolidates all the classes related to filesystem view metadata\n - common.table.timeline.versioning contains all classes related to versioning of timeline\n - Fix few unit tests as a result\n - Moved the test packages around to match the source file move\n - Rename AvroUtils to TimelineMetadataUtils & minor fixes/typos","date":"2020-03-30 01:58:49","modifiedFileCount":"206","status":"B","submitter":"vinoth chandar"},{"authorTime":"2020-08-10 08:51:37","codes":[{"authorDate":"2020-03-30 01:58:49","commitOrder":2,"curCode":"  private void waitForFileVisibility(Path filePath, FileVisibility visibility) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      try {\n        if (checkFileVisibility(filePath, visibility)) {\n          return;\n        }\n      } catch (IOException ioe) {\n        LOG.warn(\"Got IOException waiting for file visibility. Retrying\", ioe);\n      }\n\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(\"Timed-out waiting for the file to \" + visibility.name());\n  }\n","date":"2020-03-30 01:58:49","endLine":167,"groupId":"101095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForFileVisibility","params":"(PathfilePath@FileVisibilityvisibility)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/83/aeb1a372f4ea9989c2277d60f095d22e3e43e0.src","preCode":"  private void waitForFileVisibility(Path filePath, FileVisibility visibility) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      try {\n        if (checkFileVisibility(filePath, visibility)) {\n          return;\n        }\n      } catch (IOException ioe) {\n        LOG.warn(\"Got IOException waiting for file visibility. Retrying\", ioe);\n      }\n\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(\"Timed-out waiting for the file to \" + visibility.name());\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/fs/FailSafeConsistencyGuard.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"},{"authorDate":"2020-08-10 08:51:37","commitOrder":2,"curCode":"  private void retryTillSuccess(Path dir, List<String> files, FileVisibility event) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    LOG.info(\"Max Attempts=\" + consistencyGuardConfig.getMaxConsistencyChecks());\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      boolean success = checkFilesVisibility(attempt, dir, files, event);\n      if (success) {\n        return;\n      }\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(\"Timed out waiting for files to adhere to event \" + event.name());\n  }\n","date":"2020-08-10 08:51:37","endLine":164,"groupId":"101095","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"retryTillSuccess","params":"(Pathdir@List<String>files@FileVisibilityevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/22/47b92a4cee01677835a39f71a46f9abe1cfe64.src","preCode":"  private void retryTillSuccess(Function<Integer, Boolean> predicate, String timedOutMessage) throws TimeoutException {\n    long waitMs = consistencyGuardConfig.getInitialConsistencyCheckIntervalMs();\n    int attempt = 0;\n    LOG.info(\"Max Attempts=\" + consistencyGuardConfig.getMaxConsistencyChecks());\n    while (attempt < consistencyGuardConfig.getMaxConsistencyChecks()) {\n      boolean success = predicate.apply(attempt);\n      if (success) {\n        return;\n      }\n      sleepSafe(waitMs);\n      waitMs = waitMs * 2; \r\n      waitMs = Math.min(waitMs, consistencyGuardConfig.getMaxConsistencyCheckIntervalMs());\n      attempt++;\n    }\n    throw new TimeoutException(timedOutMessage);\n\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/common/fs/FailSafeConsistencyGuard.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"858eda85d7a5e4ee3be9aa28e7e7311bc8fb8983","commitMessage":"@@@[HUDI-1098] Adding OptimisticConsistencyGuard to be used during FinalizeWrite (#1912)\n\n","date":"2020-08-10 08:51:37","modifiedFileCount":"5","status":"M","submitter":"Sivabalan Narayanan"}]
