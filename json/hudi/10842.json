[{"authorTime":"2021-03-29 10:47:29","codes":[{"authorDate":"2021-03-17 07:43:53","commitOrder":6,"curCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      new MarkerFiles(table, instantTime).quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      syncTableMetadata();\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-03-17 07:43:53","endLine":439,"groupId":"2733","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@I@K@O>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9f/3b74b0c470879606abe5129ce48c1b915329da.src","preCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      new MarkerFiles(table, instantTime).quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      syncTableMetadata();\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"NB"},{"authorDate":"2021-03-29 10:47:29","commitOrder":6,"curCode":"  public void postCommit(String instantTime) {\n    try {\n      HoodieTable<?, ?, ?, ?> table = createTable(config, hadoopConf);\n      \r\n      new MarkerFiles(createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-03-29 10:47:29","endLine":279,"groupId":"595","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(StringinstantTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/de/4d8ca65483b9ea390a4d32c01b91e3979f5b96.src","preCode":"  public void postCommit(String instantTime) {\n    try {\n      HoodieTable<?, ?, ?, ?> table = createTable(config, hadoopConf);\n      \r\n      new MarkerFiles(createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/client/HoodieFlinkWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"B"}],"commitId":"d415d45416707ca4d5b1dbad65dc80e6fccfa378","commitMessage":"@@@[HUDI-1729] Asynchronous Hive sync and commits cleaning for Flink writer (#2732)\n\n","date":"2021-03-29 10:47:29","modifiedFileCount":"16","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-04-06 19:06:41","codes":[{"authorDate":"2021-03-17 07:43:53","commitOrder":7,"curCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      new MarkerFiles(table, instantTime).quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      syncTableMetadata();\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-03-17 07:43:53","endLine":439,"groupId":"2733","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@I@K@O>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9f/3b74b0c470879606abe5129ce48c1b915329da.src","preCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      new MarkerFiles(table, instantTime).quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      syncTableMetadata();\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"N"},{"authorDate":"2021-04-06 19:06:41","commitOrder":7,"curCode":"  protected void postCommit(HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table,\n                            HoodieCommitMetadata metadata,\n                            String instantTime,\n                            Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      new MarkerFiles(createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-04-06 19:06:41","endLine":285,"groupId":"595","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@List<HoodieRecord<T>>@List<HoodieKey>@List<WriteStatus>>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7e/eec4c70ddd4396fffaa78f827cab6feb67cb18.src","preCode":"  public void postCommit(String instantTime) {\n    try {\n      HoodieTable<?, ?, ?, ?> table = createTable(config, hadoopConf);\n      \r\n      new MarkerFiles(createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/client/HoodieFlinkWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"}],"commitId":"9c369c607df2816ea2cd1221fb6d879e3fb8f74c","commitMessage":"@@@[HUDI-1757] Assigns the buckets by record key for Flink writer (#2757)\n\nCurrently we assign the buckets by record partition path which could\ncause hotspot if the partition field is datetime type. Changes to assign\nbuckets by grouping the record whth their key first.  the assignment is\nvalid if only there is no conflict(two task write to the same bucket).\n\nThis patch also changes the coordinator execution to be asynchronous.","date":"2021-04-06 19:06:41","modifiedFileCount":"23","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-08-11 23:48:13","codes":[{"authorDate":"2021-08-11 23:48:13","commitOrder":8,"curCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), table, instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      syncTableMetadata();\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-08-11 23:48:13","endLine":445,"groupId":"2733","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@I@K@O>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/74/1b418e87e6e01dc3676cfa549cc8349db79f33.src","preCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      new MarkerFiles(table, instantTime).quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      syncTableMetadata();\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"},{"authorDate":"2021-08-11 23:48:13","commitOrder":8,"curCode":"  protected void postCommit(HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table,\n                            HoodieCommitMetadata metadata,\n                            String instantTime,\n                            Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-08-11 23:48:13","endLine":329,"groupId":"595","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@List<HoodieRecord<T>>@List<HoodieKey>@List<WriteStatus>>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7f/912c3dbb315be3ff4aa16484b8f9386df3a413.src","preCode":"  protected void postCommit(HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table,\n                            HoodieCommitMetadata metadata,\n                            String instantTime,\n                            Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      new MarkerFiles(createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/client/HoodieFlinkWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"}],"commitId":"4783176554e7d4ae7b7296cf633d750ae27e65d9","commitMessage":"@@@[HUDI-1138] Add timeline-server-based marker file strategy for improving marker-related latency (#3233)\n\n- Can be enabled for cloud stores like S3. Not supported for hdfs yet.  due to partial write failures. ","date":"2021-08-11 23:48:13","modifiedFileCount":"37","status":"M","submitter":"Y Ethan Guo"},{"authorTime":"2021-08-11 23:48:13","codes":[{"authorDate":"2021-08-13 06:45:57","commitOrder":9,"curCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), table, instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      if (operationType != null && operationType != WriteOperationType.CLUSTER && operationType != WriteOperationType.COMPACT) {\n        syncTableMetadata();\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-08-13 06:45:57","endLine":449,"groupId":"5733","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@I@K@O>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/36/80d5f569c1b4cf03c7a347ed53432c37c6ff4c.src","preCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), table, instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      syncTableMetadata();\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"},{"authorDate":"2021-08-11 23:48:13","commitOrder":9,"curCode":"  protected void postCommit(HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table,\n                            HoodieCommitMetadata metadata,\n                            String instantTime,\n                            Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-08-11 23:48:13","endLine":329,"groupId":"595","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@List<HoodieRecord<T>>@List<HoodieKey>@List<WriteStatus>>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7f/912c3dbb315be3ff4aa16484b8f9386df3a413.src","preCode":"  protected void postCommit(HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table,\n                            HoodieCommitMetadata metadata,\n                            String instantTime,\n                            Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/client/HoodieFlinkWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"}],"commitId":"76bc686a77a485544c9e75cfefa59fa021470a0c","commitMessage":"@@@[HUDI-1292] Created a config to enable/disable syncing of metadata table. (#3427)\n\n* [HUDI-1292] Created a config to enable/disable syncing of metadata table.\n\n- Metadata Table should only be synced from a single pipeline to prevent conflicts.\n- Skip syncing metadata table for clustering and compaction\n- Renamed useFileListingMetadata\n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2021-08-13 06:45:57","modifiedFileCount":"11","status":"M","submitter":"Prashant Wason"},{"authorTime":"2021-08-11 23:48:13","codes":[{"authorDate":"2021-09-16 07:00:04","commitOrder":10,"curCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), table, instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      autoCleanOnCommit();\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      if (operationType != null && operationType != WriteOperationType.CLUSTER && operationType != WriteOperationType.COMPACT) {\n        syncTableMetadata();\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-09-16 07:00:04","endLine":449,"groupId":"10842","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@I@K@O>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/96/50ddaebfd932ffeb0f4ca09a977c60d7df1b32.src","preCode":"  protected void postCommit(HoodieTable<T, I, K, O> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), table, instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n      autoCleanOnCommit();\n      if (operationType != null && operationType != WriteOperationType.CLUSTER && operationType != WriteOperationType.COMPACT) {\n        syncTableMetadata();\n      }\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"},{"authorDate":"2021-08-11 23:48:13","commitOrder":10,"curCode":"  protected void postCommit(HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table,\n                            HoodieCommitMetadata metadata,\n                            String instantTime,\n                            Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","date":"2021-08-11 23:48:13","endLine":329,"groupId":"10842","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"postCommit","params":"(HoodieTable<T@List<HoodieRecord<T>>@List<HoodieKey>@List<WriteStatus>>table@HoodieCommitMetadatametadata@StringinstantTime@Option<Map<String@String>>extraMetadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7f/912c3dbb315be3ff4aa16484b8f9386df3a413.src","preCode":"  protected void postCommit(HoodieTable<T, List<HoodieRecord<T>>, List<HoodieKey>, List<WriteStatus>> table,\n                            HoodieCommitMetadata metadata,\n                            String instantTime,\n                            Option<Map<String, String>> extraMetadata) {\n    try {\n      \r\n      WriteMarkersFactory.get(config.getMarkersType(), createTable(config, hadoopConf), instantTime)\n          .quietDeleteMarkerDir(context, config.getMarkersDeleteParallelism());\n      \r\n      HoodieTimelineArchiveLog archiveLog = new HoodieTimelineArchiveLog(config, table);\n      archiveLog.archiveIfRequired(context);\n    } catch (IOException ioe) {\n      throw new HoodieIOException(ioe.getMessage(), ioe);\n    } finally {\n      this.heartbeatClient.stop(instantTime);\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/client/HoodieFlinkWriteClient.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"}],"commitId":"2d5ac551955e8c7be7be60edc5aaf17d2ed7f650","commitMessage":"@@@[HUDI-2355][Bug]Archive service executed after cleaner finished. (#3545)\n\nCo-authored-by: yuezhang <yuezhang@freewheel.tv>","date":"2021-09-16 07:00:04","modifiedFileCount":"2","status":"M","submitter":"zhangyue19921010"}]
