[{"authorTime":"2020-11-03 05:12:51","codes":[{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  public void testInvalidPartitionKeyType() {\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps());\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps());\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n  }\n","date":"2020-11-03 05:12:51","endLine":155,"groupId":"4007","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidPartitionKeyType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dc/30b932e9d2ba1b3b99f1667349fd4a199517a1.src","preCode":"  public void testInvalidPartitionKeyType() {\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps());\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps());\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestCustomKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2020-11-03 05:12:51","commitOrder":1,"curCode":"  public void testPartitionFieldsInImproperFormat() {\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp());\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp());\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n  }\n","date":"2020-11-03 05:12:51","endLine":197,"groupId":"4007","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionFieldsInImproperFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/dc/30b932e9d2ba1b3b99f1667349fd4a199517a1.src","preCode":"  public void testPartitionFieldsInImproperFormat() {\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp());\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp());\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestCustomKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"d160abb43740e0bcdf40458c345ecd2d74e6698c","commitMessage":"@@@[HUDI-912] Refactor and relocate KeyGenerator to support more engines (#2200)\n\n* [HUDI-912] Refactor and relocate KeyGenerator to support more engines\n\n* Rename KeyGenerators","date":"2020-11-03 05:12:51","modifiedFileCount":"1","status":"B","submitter":"wangxianghu"},{"authorTime":"2021-06-08 21:26:10","codes":[{"authorDate":"2021-06-08 21:26:10","commitOrder":2,"curCode":"  public void testInvalidPartitionKeyType(TypedProperties props) {\n    try {\n      BuiltinKeyGenerator keyGenerator =\n          (BuiltinKeyGenerator) HoodieSparkKeyGeneratorFactory.createKeyGenerator(props);\n\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator =\n          (BuiltinKeyGenerator) HoodieSparkKeyGeneratorFactory.createKeyGenerator(props);\n\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n  }\n","date":"2021-06-08 21:26:10","endLine":224,"groupId":"10719","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidPartitionKeyType","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/19a8a2f6e50a8878b2a8467a428cc53faf54b5.src","preCode":"  public void testInvalidPartitionKeyType() {\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps());\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getInvalidPartitionKeyTypeProps());\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when invalid PartitionKeyType is provided!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"No enum constant org.apache.hudi.keygen.CustomAvroKeyGenerator.PartitionKeyType.DUMMY\"));\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestCustomKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2021-06-08 21:26:10","commitOrder":2,"curCode":"  public void testPartitionFieldsInImproperFormat(TypedProperties props) {\n    try {\n      BuiltinKeyGenerator keyGenerator =\n          (BuiltinKeyGenerator) HoodieSparkKeyGeneratorFactory.createKeyGenerator(props);\n\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator =\n          (BuiltinKeyGenerator) HoodieSparkKeyGeneratorFactory.createKeyGenerator(props);\n\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n  }\n","date":"2021-06-08 21:26:10","endLine":314,"groupId":"10719","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionFieldsInImproperFormat","params":"(TypedPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/19a8a2f6e50a8878b2a8467a428cc53faf54b5.src","preCode":"  public void testPartitionFieldsInImproperFormat() {\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp());\n      keyGenerator.getKey(getRecord());\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n\n    try {\n      BuiltinKeyGenerator keyGenerator = new CustomKeyGenerator(getImproperPartitionFieldFormatProp());\n      GenericRecord record = getRecord();\n      Row row = KeyGeneratorTestUtilities.getRow(record);\n      keyGenerator.getPartitionPath(row);\n      Assertions.fail(\"should fail when partition key field is provided in improper format!\");\n    } catch (Exception e) {\n      Assertions.assertTrue(e.getMessage().contains(\"Unable to find field names for partition path in proper format\"));\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestCustomKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"7261f0850727aea611cd34e1bb07d684b44534f6","commitMessage":"@@@[HUDI-1929] Support configure KeyGenerator by type (#2993)\n\n","date":"2021-06-08 21:26:10","modifiedFileCount":"11","status":"M","submitter":"wangxianghu"}]
