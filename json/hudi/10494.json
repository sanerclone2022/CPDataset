[{"authorTime":"2020-11-18 17:57:11","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":2,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","date":"2020-12-20 11:25:27","endLine":310,"groupId":"3976","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/17/b02e8c15259b31f7b792f54a80aaf838ff7e92.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/commit/BaseJavaCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"},{"authorDate":"2020-11-18 17:57:11","commitOrder":2,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","date":"2020-11-18 17:57:11","endLine":312,"groupId":"3976","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/0b/98b11049a24b3056bf1f49981561179611d6fe.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/commit/BaseFlinkCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"NB"}],"commitId":"e4e2fbc3bb2c4796c6813114dd1c37ffa5a1e03a","commitMessage":"@@@[HUDI-1419] Add base implementation for hudi java client (#2286)\n\n","date":"2020-12-20 11:25:27","modifiedFileCount":"2","status":"M","submitter":"Shen Hong"},{"authorTime":"2021-02-06 22:03:52","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":3,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","date":"2020-12-20 11:25:27","endLine":310,"groupId":"3976","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/17/b02e8c15259b31f7b792f54a80aaf838ff7e92.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/commit/BaseJavaCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"N"},{"authorDate":"2021-02-06 22:03:52","commitOrder":3,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new FlinkCreateHandleFactory<>());\n  }\n","date":"2021-02-06 22:03:52","endLine":246,"groupId":"3976","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/04/4f841d276156fb15db71acef307560286c9023.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/commit/BaseFlinkCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"4c5b6923ccfaaa6616a934a3f690b1a795a42d41","commitMessage":"@@@[HUDI-1557] Make Flink write pipeline write task scalable (#2506)\n\nThis is the #step 2 of RFC-24:\nhttps://cwiki.apache.org/confluence/display/HUDI/RFC+-+24%3A+Hoodie+Flink+Writer+Proposal\n\nThis PR introduce a BucketAssigner that assigns bucket ID (partition\npath & fileID) for each stream record.\n\nThere is no need to look up index and partition the records anymore in\nthe following pipeline for these records. \nwe actually decide the write target location before the write and each\nrecord computes its location when the BucketAssigner receives it.  thus. \nthe indexing is with streaming style.\n\nComputing locations for a batch of records all at a time is resource\nconsuming so a pressure to the engine. \nwe should avoid that in streaming system.","date":"2021-02-06 22:03:52","modifiedFileCount":"25","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-02-17 15:24:50","codes":[{"authorDate":"2020-12-20 11:25:27","commitOrder":4,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","date":"2020-12-20 11:25:27","endLine":310,"groupId":"3976","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/17/b02e8c15259b31f7b792f54a80aaf838ff7e92.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/commit/BaseJavaCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"N"},{"authorDate":"2021-02-17 15:24:50","commitOrder":4,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new ExplicitCreateHandleFactory<>(writeHandle));\n  }\n","date":"2021-02-17 15:24:50","endLine":269,"groupId":"3976","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9b/6dcd6335c7ce7627b9d56338b3931bf9abe79b.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new FlinkCreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/commit/BaseFlinkCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"5d2491d10c70e4e5fc9b7aeb62cc64bcaaf6043f","commitMessage":"@@@[HUDI-1598] Write as minor batches during one checkpoint interval for the new writer (#2553)\n\n","date":"2021-02-17 15:24:50","modifiedFileCount":"22","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-02-17 15:24:50","codes":[{"authorDate":"2021-02-23 20:50:55","commitOrder":5,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr) {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","date":"2021-02-23 20:50:55","endLine":309,"groupId":"3976","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a4/a6a4f92108caab340aede932c94cc52cf7699e.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/commit/BaseJavaCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"},{"authorDate":"2021-02-17 15:24:50","commitOrder":5,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new ExplicitCreateHandleFactory<>(writeHandle));\n  }\n","date":"2021-02-17 15:24:50","endLine":269,"groupId":"3976","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/9b/6dcd6335c7ce7627b9d56338b3931bf9abe79b.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new ExplicitCreateHandleFactory<>(writeHandle));\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/commit/BaseFlinkCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"N"}],"commitId":"2efd0760acb5de06adc0f0a4a045df792ff3b6ab","commitMessage":"@@@[HUDI-1477] Support copyOnWriteTable in java client (#2382)\n\n","date":"2021-02-23 20:50:55","modifiedFileCount":"4","status":"M","submitter":"Shen Hong"},{"authorTime":"2021-03-01 12:29:41","codes":[{"authorDate":"2021-02-23 20:50:55","commitOrder":6,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr) {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","date":"2021-02-23 20:50:55","endLine":309,"groupId":"10494","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a4/a6a4f92108caab340aede932c94cc52cf7699e.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr) {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new JavaLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new CreateHandleFactory<>());\n  }\n","realPath":"hudi-client/hudi-java-client/src/main/java/org/apache/hudi/table/action/commit/BaseJavaCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"N"},{"authorDate":"2021-03-01 12:29:41","commitOrder":6,"curCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new ExplicitWriteHandleFactory<>(writeHandle));\n  }\n","date":"2021-03-01 12:29:41","endLine":260,"groupId":"10494","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"handleInsert","params":"(StringidPfx@Iterator<HoodieRecord<T>>recordItr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e0/bbc25efd52e67a168395392fec0fad181fc46b.src","preCode":"  public Iterator<List<WriteStatus>> handleInsert(String idPfx, Iterator<HoodieRecord<T>> recordItr)\n      throws Exception {\n    \r\n    if (!recordItr.hasNext()) {\n      LOG.info(\"Empty partition\");\n      return Collections.singletonList((List<WriteStatus>) Collections.EMPTY_LIST).iterator();\n    }\n    return new FlinkLazyInsertIterable<>(recordItr, true, config, instantTime, table, idPfx,\n        taskContextSupplier, new ExplicitCreateHandleFactory<>(writeHandle));\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/table/action/commit/BaseFlinkCommitActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"7a11de12764d8f68f296c6e68a22822318bfbefa","commitMessage":"@@@[HUDI-1632] Supports merge on read write mode for Flink writer (#2593)\n\nAlso supports async compaction with pluggable strategies.","date":"2021-03-01 12:29:41","modifiedFileCount":"20","status":"M","submitter":"Danny Chan"}]
