[{"authorTime":"2021-03-29 10:47:29","codes":[{"authorDate":"2021-06-04 15:15:32","commitOrder":3,"curCode":"  void testWriteAndReadDebeziumJson(ExecMode execMode) throws Exception {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(\"debezium_json.data\")).toString();\n    String sourceDDL = \"\"\n        + \"CREATE TABLE debezium_source(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\\n\"\n        + \"  description STRING,\\n\"\n        + \"  weight DOUBLE\\n\"\n        + \") WITH (\\n\"\n        + \"  'connector' = 'filesystem',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'format' = 'debezium-json'\\n\"\n        + \")\";\n    streamTableEnv.executeSql(sourceDDL);\n    String hoodieTableDDL = \"\"\n        + \"CREATE TABLE hoodie_sink(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\"\n        + \"  weight DOUBLE,\"\n        + \"  PRIMARY KEY (id) NOT ENFORCED\"\n        + \") with (\\n\"\n        + \"  'connector' = 'hudi',\\n\"\n        + \"  'path' = '\" + tempFile.getAbsolutePath() + \"',\\n\"\n        + \"  'read.streaming.enabled' = '\" + (execMode == ExecMode.STREAM) + \"',\\n\"\n        + \"  'write.insert.drop.duplicates' = 'true'\"\n        + \")\";\n    streamTableEnv.executeSql(hoodieTableDDL);\n    String insertInto = \"insert into hoodie_sink select id, ts, name, weight from debezium_source\";\n    execInsertSql(streamTableEnv, insertInto);\n\n    final String expected = \"[\"\n        + \"101,1000,scooter,3.140000104904175, \"\n        + \"102,2000,car battery,8.100000381469727, \"\n        + \"103,3000,12-pack drill bits,0.800000011920929, \"\n        + \"104,4000,hammer,0.75, \"\n        + \"105,5000,hammer,0.875, \"\n        + \"106,10000,hammer,1.0, \"\n        + \"107,11000,rocks,5.099999904632568, \"\n        + \"108,8000,jacket,0.10000000149011612, \"\n        + \"109,9000,spare tire,22.200000762939453, \"\n        + \"110,14000,jacket,0.5]\";\n\n    List<Row> result = execSelectSql(streamTableEnv, \"select * from hoodie_sink\", execMode);\n\n    assertRowsEquals(result, expected);\n  }\n","date":"2021-06-04 15:15:32","endLine":570,"groupId":"4123","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteAndReadDebeziumJson","params":"(ExecModeexecMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c3/4fd59094b327feb95b9cfea17638fe70f92bc0.src","preCode":"  void testWriteAndReadDebeziumJson(ExecMode execMode) throws Exception {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(\"debezium_json.data\")).toString();\n    String sourceDDL = \"\"\n        + \"CREATE TABLE debezium_source(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\\n\"\n        + \"  description STRING,\\n\"\n        + \"  weight DOUBLE\\n\"\n        + \") WITH (\\n\"\n        + \"  'connector' = 'filesystem',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'format' = 'debezium-json'\\n\"\n        + \")\";\n    streamTableEnv.executeSql(sourceDDL);\n    String hoodieTableDDL = \"\"\n        + \"CREATE TABLE hoodie_sink(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\"\n        + \"  weight DOUBLE,\"\n        + \"  PRIMARY KEY (id) NOT ENFORCED\"\n        + \") with (\\n\"\n        + \"  'connector' = 'hudi',\\n\"\n        + \"  'path' = '\" + tempFile.getAbsolutePath() + \"',\\n\"\n        + \"  'read.streaming.enabled' = '\" + (execMode == ExecMode.STREAM) + \"',\\n\"\n        + \"  'write.insert.drop.duplicates' = 'true'\"\n        + \")\";\n    streamTableEnv.executeSql(hoodieTableDDL);\n    String insertInto = \"insert into hoodie_sink select id, ts, name, weight from debezium_source\";\n    execInsertSql(streamTableEnv, insertInto);\n\n    final String expected = \"[\"\n        + \"101,1000,scooter,3.140000104904175, \"\n        + \"102,2000,car battery,8.100000381469727, \"\n        + \"103,3000,12-pack drill bits,0.800000011920929, \"\n        + \"104,4000,hammer,0.75, \"\n        + \"105,5000,hammer,0.875, \"\n        + \"106,10000,hammer,1.0, \"\n        + \"107,11000,rocks,5.099999904632568, \"\n        + \"108,8000,jacket,0.10000000149011612, \"\n        + \"109,9000,spare tire,22.200000762939453, \"\n        + \"110,14000,jacket,0.5]\";\n\n    List<Row> result = execSelectSql(streamTableEnv, \"select * from hoodie_sink\", execMode);\n\n    assertRowsEquals(result, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/HoodieDataSourceITCase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"B"},{"authorDate":"2021-03-29 10:47:29","commitOrder":3,"curCode":"  public static String getFileSourceDDL(String tableName, String fileName, int checkpoints) {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(fileName)).toString();\n    return \"create table \" + tableName + \"(\\n\"\n        + \"  uuid varchar(20),\\n\"\n        + \"  name varchar(10),\\n\"\n        + \"  age int,\\n\"\n        + \"  ts timestamp(3),\\n\"\n        + \"  `partition` varchar(20)\\n\"\n        + \") with (\\n\"\n        + \"  'connector' = '\" + ContinuousFileSourceFactory.FACTORY_ID + \"',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'checkpoints' = '\" + checkpoints + \"'\\n\"\n        + \")\";\n  }\n","date":"2021-03-29 10:47:29","endLine":116,"groupId":"4123","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getFileSourceDDL","params":"(StringtableName@StringfileName@intcheckpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f5/b9fb4b38fbe1a70d7f39b61053319cb27df64f.src","preCode":"  public static String getFileSourceDDL(String tableName, String fileName, int checkpoints) {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(fileName)).toString();\n    return \"create table \" + tableName + \"(\\n\"\n        + \"  uuid varchar(20),\\n\"\n        + \"  name varchar(10),\\n\"\n        + \"  age int,\\n\"\n        + \"  ts timestamp(3),\\n\"\n        + \"  `partition` varchar(20)\\n\"\n        + \") with (\\n\"\n        + \"  'connector' = '\" + ContinuousFileSourceFactory.FACTORY_ID + \"',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'checkpoints' = '\" + checkpoints + \"'\\n\"\n        + \")\";\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/utils/TestConfigurations.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"NB"}],"commitId":"a658328001218273c3c9153b485340ac0e91db93","commitMessage":"@@@[HUDI-1961] Add a debezium json integration test case for flink (#3030)\n\n","date":"2021-06-04 15:15:32","modifiedFileCount":"3","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-03-29 10:47:29","codes":[{"authorDate":"2021-08-16 18:14:05","commitOrder":4,"curCode":"  void testWriteAndReadDebeziumJson(ExecMode execMode) throws Exception {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(\"debezium_json.data\")).toString();\n    String sourceDDL = \"\"\n        + \"CREATE TABLE debezium_source(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\\n\"\n        + \"  description STRING,\\n\"\n        + \"  weight DOUBLE\\n\"\n        + \") WITH (\\n\"\n        + \"  'connector' = 'filesystem',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'format' = 'debezium-json'\\n\"\n        + \")\";\n    streamTableEnv.executeSql(sourceDDL);\n    String hoodieTableDDL = \"\"\n        + \"CREATE TABLE hoodie_sink(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\"\n        + \"  weight DOUBLE,\"\n        + \"  PRIMARY KEY (id) NOT ENFORCED\"\n        + \") with (\\n\"\n        + \"  'connector' = 'hudi',\\n\"\n        + \"  'path' = '\" + tempFile.getAbsolutePath() + \"',\\n\"\n        + \"  'read.streaming.enabled' = '\" + (execMode == ExecMode.STREAM) + \"',\\n\"\n        + \"  'write.insert.drop.duplicates' = 'true'\"\n        + \")\";\n    streamTableEnv.executeSql(hoodieTableDDL);\n    String insertInto = \"insert into hoodie_sink select id, ts, name, weight from debezium_source\";\n    execInsertSql(streamTableEnv, insertInto);\n\n    final String expected = \"[\"\n        + \"+I[101, 1000, scooter, 3.140000104904175], \"\n        + \"+I[102, 2000, car battery, 8.100000381469727], \"\n        + \"+I[103, 3000, 12-pack drill bits, 0.800000011920929], \"\n        + \"+I[104, 4000, hammer, 0.75], \"\n        + \"+I[105, 5000, hammer, 0.875], \"\n        + \"+I[106, 10000, hammer, 1.0], \"\n        + \"+I[107, 11000, rocks, 5.099999904632568], \"\n        + \"+I[108, 8000, jacket, 0.10000000149011612], \"\n        + \"+I[109, 9000, spare tire, 22.200000762939453], \"\n        + \"+I[110, 14000, jacket, 0.5]]\";\n\n    List<Row> result = execSelectSql(streamTableEnv, \"select * from hoodie_sink\", execMode);\n\n    assertRowsEquals(result, expected);\n  }\n","date":"2021-08-16 18:14:05","endLine":592,"groupId":"10390","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteAndReadDebeziumJson","params":"(ExecModeexecMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/07/64f5586ea801d7feba77591330d849b66102fc.src","preCode":"  void testWriteAndReadDebeziumJson(ExecMode execMode) throws Exception {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(\"debezium_json.data\")).toString();\n    String sourceDDL = \"\"\n        + \"CREATE TABLE debezium_source(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\\n\"\n        + \"  description STRING,\\n\"\n        + \"  weight DOUBLE\\n\"\n        + \") WITH (\\n\"\n        + \"  'connector' = 'filesystem',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'format' = 'debezium-json'\\n\"\n        + \")\";\n    streamTableEnv.executeSql(sourceDDL);\n    String hoodieTableDDL = \"\"\n        + \"CREATE TABLE hoodie_sink(\\n\"\n        + \"  id INT NOT NULL,\\n\"\n        + \"  ts BIGINT,\\n\"\n        + \"  name STRING,\"\n        + \"  weight DOUBLE,\"\n        + \"  PRIMARY KEY (id) NOT ENFORCED\"\n        + \") with (\\n\"\n        + \"  'connector' = 'hudi',\\n\"\n        + \"  'path' = '\" + tempFile.getAbsolutePath() + \"',\\n\"\n        + \"  'read.streaming.enabled' = '\" + (execMode == ExecMode.STREAM) + \"',\\n\"\n        + \"  'write.insert.drop.duplicates' = 'true'\"\n        + \")\";\n    streamTableEnv.executeSql(hoodieTableDDL);\n    String insertInto = \"insert into hoodie_sink select id, ts, name, weight from debezium_source\";\n    execInsertSql(streamTableEnv, insertInto);\n\n    final String expected = \"[\"\n        + \"101,1000,scooter,3.140000104904175, \"\n        + \"102,2000,car battery,8.100000381469727, \"\n        + \"103,3000,12-pack drill bits,0.800000011920929, \"\n        + \"104,4000,hammer,0.75, \"\n        + \"105,5000,hammer,0.875, \"\n        + \"106,10000,hammer,1.0, \"\n        + \"107,11000,rocks,5.099999904632568, \"\n        + \"108,8000,jacket,0.10000000149011612, \"\n        + \"109,9000,spare tire,22.200000762939453, \"\n        + \"110,14000,jacket,0.5]\";\n\n    List<Row> result = execSelectSql(streamTableEnv, \"select * from hoodie_sink\", execMode);\n\n    assertRowsEquals(result, expected);\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/table/HoodieDataSourceITCase.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"M"},{"authorDate":"2021-03-29 10:47:29","commitOrder":4,"curCode":"  public static String getFileSourceDDL(String tableName, String fileName, int checkpoints) {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(fileName)).toString();\n    return \"create table \" + tableName + \"(\\n\"\n        + \"  uuid varchar(20),\\n\"\n        + \"  name varchar(10),\\n\"\n        + \"  age int,\\n\"\n        + \"  ts timestamp(3),\\n\"\n        + \"  `partition` varchar(20)\\n\"\n        + \") with (\\n\"\n        + \"  'connector' = '\" + ContinuousFileSourceFactory.FACTORY_ID + \"',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'checkpoints' = '\" + checkpoints + \"'\\n\"\n        + \")\";\n  }\n","date":"2021-03-29 10:47:29","endLine":116,"groupId":"10390","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getFileSourceDDL","params":"(StringtableName@StringfileName@intcheckpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f5/b9fb4b38fbe1a70d7f39b61053319cb27df64f.src","preCode":"  public static String getFileSourceDDL(String tableName, String fileName, int checkpoints) {\n    String sourcePath = Objects.requireNonNull(Thread.currentThread()\n        .getContextClassLoader().getResource(fileName)).toString();\n    return \"create table \" + tableName + \"(\\n\"\n        + \"  uuid varchar(20),\\n\"\n        + \"  name varchar(10),\\n\"\n        + \"  age int,\\n\"\n        + \"  ts timestamp(3),\\n\"\n        + \"  `partition` varchar(20)\\n\"\n        + \") with (\\n\"\n        + \"  'connector' = '\" + ContinuousFileSourceFactory.FACTORY_ID + \"',\\n\"\n        + \"  'path' = '\" + sourcePath + \"',\\n\"\n        + \"  'checkpoints' = '\" + checkpoints + \"'\\n\"\n        + \")\";\n  }\n","realPath":"hudi-flink/src/test/java/org/apache/hudi/utils/TestConfigurations.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"}],"commitId":"66f951322a3872073b86896fa5c10b51a0f6e4ab","commitMessage":"@@@[HUDI-2191] Bump flink version to 1.13.1 (#3291)\n\n","date":"2021-08-16 18:14:05","modifiedFileCount":"17","status":"M","submitter":"Danny Chan"}]
