[{"authorTime":"2020-07-23 10:39:57","codes":[{"authorDate":"2020-12-20 11:19:42","commitOrder":2,"curCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    DefaultHoodieRecordPayload payload1 = new DefaultHoodieRecordPayload(record1, 1);\n    DefaultHoodieRecordPayload payload2 = new DefaultHoodieRecordPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2, props), payload2);\n    assertEquals(payload2.preCombine(payload1, props), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema).get());\n    assertEquals(record2, payload2.getInsertValue(schema).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema, props).get(), record2);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema, props).get(), record2);\n  }\n","date":"2020-12-20 11:19:42","endLine":79,"groupId":"3948","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testActiveRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/79/1415428e47606927ae0d3e87b0f8b23d1f877c.src","preCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    DefaultHoodieRecordPayload payload1 = new DefaultHoodieRecordPayload(record1, 1);\n    DefaultHoodieRecordPayload payload2 = new DefaultHoodieRecordPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2, props), payload2);\n    assertEquals(payload2.preCombine(payload1, props), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema).get());\n    assertEquals(record2, payload2.getInsertValue(schema).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema, props).get(), record2);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema, props).get(), record2);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/model/TestDefaultHoodieRecordPayload.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2020-07-23 10:39:57","commitOrder":2,"curCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2), payload2);\n    assertEquals(payload2.preCombine(payload1), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema).get());\n    assertEquals(record2, payload2.getInsertValue(schema).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema).get(), record1);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema).get(), record2);\n  }\n","date":"2020-07-23 10:39:57","endLine":75,"groupId":"1176","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"testActiveRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7c/5951a7cac049a2a0f063d4ed764cee195a8593.src","preCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2), payload2);\n    assertEquals(payload2.preCombine(payload1), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema).get());\n    assertEquals(record2, payload2.getInsertValue(schema).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema).get(), record1);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema).get(), record2);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"NB"}],"commitId":"33d338f3923862fdff24443a02d8a33a56d92e63","commitMessage":"@@@[HUDI-115] Adding DefaultHoodieRecordPayload to honor ordering with combineAndGetUpdateValue (#2311)\n\n* Added ability to pass in `properties` to payload methods.  so they can perform table/record specific merges\n* Added default methods so existing payload classes are backwards compatible. \n* Adding DefaultHoodiePayload to honor ordering while merging two records\n* Fixing default payload based on feedback\n","date":"2020-12-20 11:19:42","modifiedFileCount":"8","status":"M","submitter":"Sivabalan Narayanan"},{"authorTime":"2020-07-23 10:39:57","codes":[{"authorDate":"2021-09-12 11:27:40","commitOrder":3,"curCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    DefaultHoodieRecordPayload payload1 = new DefaultHoodieRecordPayload(record1, 1);\n    DefaultHoodieRecordPayload payload2 = new DefaultHoodieRecordPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2, props), payload2);\n    assertEquals(payload2.preCombine(payload1, props), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema, props).get());\n    assertEquals(record2, payload2.getInsertValue(schema, props).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema, props).get(), record2);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema, props).get(), record2);\n  }\n","date":"2021-09-12 11:27:40","endLine":85,"groupId":"10927","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testActiveRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/87/d4e746d81cb7092ed535919ca1e6298d4fa064.src","preCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    DefaultHoodieRecordPayload payload1 = new DefaultHoodieRecordPayload(record1, 1);\n    DefaultHoodieRecordPayload payload2 = new DefaultHoodieRecordPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2, props), payload2);\n    assertEquals(payload2.preCombine(payload1, props), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema).get());\n    assertEquals(record2, payload2.getInsertValue(schema).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema, props).get(), record2);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema, props).get(), record2);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/model/TestDefaultHoodieRecordPayload.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-07-23 10:39:57","commitOrder":3,"curCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2), payload2);\n    assertEquals(payload2.preCombine(payload1), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema).get());\n    assertEquals(record2, payload2.getInsertValue(schema).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema).get(), record1);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema).get(), record2);\n  }\n","date":"2020-07-23 10:39:57","endLine":75,"groupId":"10927","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testActiveRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7c/5951a7cac049a2a0f063d4ed764cee195a8593.src","preCode":"  public void testActiveRecords() throws IOException {\n    GenericRecord record1 = new GenericData.Record(schema);\n    record1.put(\"id\", \"1\");\n    record1.put(\"partition\", \"partition0\");\n    record1.put(\"ts\", 0L);\n    record1.put(\"_hoodie_is_deleted\", false);\n\n    GenericRecord record2 = new GenericData.Record(schema);\n    record2.put(\"id\", \"2\");\n    record2.put(\"partition\", \"partition1\");\n    record2.put(\"ts\", 1L);\n    record2.put(\"_hoodie_is_deleted\", false);\n\n    OverwriteWithLatestAvroPayload payload1 = new OverwriteWithLatestAvroPayload(record1, 1);\n    OverwriteWithLatestAvroPayload payload2 = new OverwriteWithLatestAvroPayload(record2, 2);\n    assertEquals(payload1.preCombine(payload2), payload2);\n    assertEquals(payload2.preCombine(payload1), payload2);\n\n    assertEquals(record1, payload1.getInsertValue(schema).get());\n    assertEquals(record2, payload2.getInsertValue(schema).get());\n\n    assertEquals(payload1.combineAndGetUpdateValue(record2, schema).get(), record1);\n    assertEquals(payload2.combineAndGetUpdateValue(record1, schema).get(), record2);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/model/TestOverwriteWithLatestAvroPayload.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"}],"commitId":"4f991ee3525c6225c7bf3b46e272f7d5b919196e","commitMessage":"@@@[HUDI-2398] Collect event time for inserts in DefaultHoodieRecordPayload (#3602)\n\n","date":"2021-09-12 11:27:40","modifiedFileCount":"3","status":"M","submitter":"Ankush Kanungo"}]
