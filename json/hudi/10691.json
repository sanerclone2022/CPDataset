[{"authorTime":"2021-03-19 06:33:31","codes":[{"authorDate":"2020-11-03 05:12:51","commitOrder":2,"curCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY, \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY, \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n  }\n","date":"2020-11-03 05:12:51","endLine":115,"groupId":"2050","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValueKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/54/f4ffaef9dd230ddc2f6a50f656ac5c449d3843.src","preCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY, \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY, \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"NB"},{"authorDate":"2021-03-19 06:33:31","commitOrder":2,"curCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY, \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY, \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","date":"2021-03-19 06:33:31","endLine":116,"groupId":"2051","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValueKeyGeneratorNonPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/47/82caa1584f4470cc35caf92b142ef4b0ea3e8f.src","preCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY, \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY, \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestNonpartitionedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"1277c62398c58690cd5a6aa78048335d5313ca05","commitMessage":"@@@[HUDI-1653] Add support for composite keys in NonpartitionedKeyGenerator (#2627)\n\n* [HUDI-1653] Add support for composite keys in NonpartitionedKeyGenerator\n\n* update NonpartitionedKeyGenerator to support composite record keys\n\n* update NonpartitionedKeyGenerator","date":"2021-03-19 06:33:31","modifiedFileCount":"2","status":"M","submitter":"Jintao Guan"},{"authorTime":"2021-07-01 05:26:30","codes":[{"authorDate":"2021-07-01 05:26:30","commitOrder":3,"curCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n  }\n","date":"2021-07-01 05:26:30","endLine":115,"groupId":"2050","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValueKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/76/b83e1c760cbcc64bd3199a15afe36abbba1a40.src","preCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY, \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY, \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2021-07-01 05:26:30","commitOrder":3,"curCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","date":"2021-07-01 05:26:30","endLine":116,"groupId":"2051","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValueKeyGeneratorNonPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/56/d576e9d5f87e80907f595c34746f2446574b06.src","preCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY, \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY, \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestNonpartitionedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"d412fb2fe642417460532044cac162bb68f4bec4","commitMessage":"@@@[HUDI-89] Add configOption & refactor all configs based on that (#2833)\n\nCo-authored-by: Wenning Ding <wenningd@amazon.com>","date":"2021-07-01 05:26:30","modifiedFileCount":"138","status":"M","submitter":"wenningd"},{"authorTime":"2021-07-01 05:26:30","codes":[{"authorDate":"2021-07-20 08:43:48","commitOrder":4,"curCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n\n    Row row = KeyGeneratorTestUtilities.getRow(record, HoodieTestDataGenerator.AVRO_SCHEMA,\n        AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA));\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row), partitionPath);\n    InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row);\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow, row.schema()), partitionPath);\n  }\n","date":"2021-07-20 08:43:48","endLine":126,"groupId":"2050","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValueKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1b/fd40344932ce11264d5e8addc415ad684f93ab.src","preCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-07-01 05:26:30","commitOrder":4,"curCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","date":"2021-07-01 05:26:30","endLine":116,"groupId":"2051","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValueKeyGeneratorNonPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/56/d576e9d5f87e80907f595c34746f2446574b06.src","preCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestNonpartitionedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"}],"commitId":"d5026e9a24850bdcce9f6df3686bf2235d7d01c4","commitMessage":"@@@[HUDI-2161] Adding support to disable meta columns with bulk insert operation (#3247)\n\n","date":"2021-07-20 08:43:48","modifiedFileCount":"39","status":"M","submitter":"Sivabalan Narayanan"},{"authorTime":"2021-08-04 08:50:30","codes":[{"authorDate":"2021-08-04 08:50:30","commitOrder":5,"curCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD.key(), \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD.key(), \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n\n    Row row = KeyGeneratorTestUtilities.getRow(record, HoodieTestDataGenerator.AVRO_SCHEMA,\n        AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA));\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row), partitionPath);\n    InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row);\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow, row.schema()), partitionPath);\n  }\n","date":"2021-08-04 08:50:30","endLine":126,"groupId":"2050","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValueKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f4/f6a6cef7ea42c5a2825c5fec5e203c42db4f90.src","preCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n\n    Row row = KeyGeneratorTestUtilities.getRow(record, HoodieTestDataGenerator.AVRO_SCHEMA,\n        AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA));\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row), partitionPath);\n    InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row);\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow, row.schema()), partitionPath);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-08-04 08:50:30","commitOrder":5,"curCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD.key(), \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD.key(), \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","date":"2021-08-04 08:50:30","endLine":116,"groupId":"2051","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValueKeyGeneratorNonPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/99/dfbdb627bb3fae7bca3191d917844c7a7116d4.src","preCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_OPT_KEY.key(), \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_OPT_KEY.key(), \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestNonpartitionedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"91bb0d13184c57ec08f02db3337e734bc20739c4","commitMessage":"@@@[HUDI-2255] Refactor Datasource options (#3373)\n\nCo-authored-by: Wenning Ding <wenningd@amazon.com>","date":"2021-08-04 08:50:30","modifiedFileCount":"50","status":"M","submitter":"wenningd"},{"authorTime":"2021-08-20 17:42:59","codes":[{"authorDate":"2021-08-20 17:42:59","commitOrder":6,"curCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_NAME.key(), \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_NAME.key(), \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n\n    Row row = KeyGeneratorTestUtilities.getRow(record, HoodieTestDataGenerator.AVRO_SCHEMA,\n        AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA));\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row), partitionPath);\n    InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row);\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow, row.schema()), partitionPath);\n  }\n","date":"2021-08-20 17:42:59","endLine":126,"groupId":"10691","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testSingleValueKeyGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/87/deef2a58c4e51320c862b47c802acef0995324.src","preCode":"  public void testSingleValueKeyGenerator() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD.key(), \"_row_key\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD.key(), \"timestamp\");\n    ComplexKeyGenerator compositeKeyGenerator = new ComplexKeyGenerator(properties);\n    assertEquals(compositeKeyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(compositeKeyGenerator.getPartitionPathFields().size(), 1);\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"_row_key\").toString();\n    String partitionPath = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = compositeKeyGenerator.getKey(record);\n    assertEquals(\"_row_key:\" + rowKey, hoodieKey.getRecordKey());\n    assertEquals(partitionPath, hoodieKey.getPartitionPath());\n\n    Row row = KeyGeneratorTestUtilities.getRow(record, HoodieTestDataGenerator.AVRO_SCHEMA,\n        AvroConversionUtils.convertAvroSchemaToStructType(HoodieTestDataGenerator.AVRO_SCHEMA));\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(row), partitionPath);\n    InternalRow internalRow = KeyGeneratorTestUtilities.getInternalRow(row);\n    Assertions.assertEquals(compositeKeyGenerator.getPartitionPath(internalRow, row.schema()), partitionPath);\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestComplexKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2021-08-20 17:42:59","commitOrder":6,"curCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD_NAME.key(), \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD_NAME.key(), \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","date":"2021-08-20 17:42:59","endLine":116,"groupId":"10691","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testSingleValueKeyGeneratorNonPartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/07/60de112b934f279a05047105b158b79650c0a2.src","preCode":"  public void testSingleValueKeyGeneratorNonPartitioned() {\n    TypedProperties properties = new TypedProperties();\n    properties.setProperty(KeyGeneratorOptions.RECORDKEY_FIELD.key(), \"timestamp\");\n    properties.setProperty(KeyGeneratorOptions.PARTITIONPATH_FIELD.key(), \"\");\n    NonpartitionedKeyGenerator keyGenerator = new NonpartitionedKeyGenerator(properties);\n    assertEquals(keyGenerator.getRecordKeyFields().size(), 1);\n    assertEquals(keyGenerator.getPartitionPathFields().size(), 0);\n\n    HoodieTestDataGenerator dataGenerator = new HoodieTestDataGenerator();\n    GenericRecord record = dataGenerator.generateGenericRecords(1).get(0);\n    String rowKey = record.get(\"timestamp\").toString();\n    HoodieKey hoodieKey = keyGenerator.getKey(record);\n    assertEquals(rowKey, hoodieKey.getRecordKey());\n    assertEquals(\"\", hoodieKey.getPartitionPath());\n  }\n","realPath":"hudi-client/hudi-spark-client/src/test/java/org/apache/hudi/keygen/TestNonpartitionedKeyGenerator.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"e39d0a2f2852ef51c524e5b16a1cecb099674eed","commitMessage":"@@@Keep non-conflicting names for common configs between DataSourceOptions and HoodieWriteConfig (#3511)\n\n","date":"2021-08-20 17:42:59","modifiedFileCount":"29","status":"M","submitter":"Udit Mehrotra"}]
