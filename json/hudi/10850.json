[{"authorTime":"2020-08-31 23:05:59","codes":[{"authorDate":"2020-10-02 05:25:29","commitOrder":2,"curCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2020-10-02 05:25:29","endLine":53,"groupId":"4320","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getFileWriter","params":"(StringinstantTime@Pathpath@HoodieTable<T@I@K@O>hoodieTable@HoodieWriteConfigconfig@Schemaschema@TaskContextSuppliertaskContextSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5f/4eec088700351a7522b0092e54ee56c040a28b.src","preCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/io/storage/HoodieFileWriterFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2020-08-31 23:05:59","commitOrder":2,"curCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord> HoodieFileReader<R> getFileReader(\n      Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2020-08-31 23:05:59","endLine":47,"groupId":"4222","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getFileReader","params":"(Configurationconf@Pathpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/3c/97b3665c1e18c25da117531cb1f620195b1b22.src","preCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord> HoodieFileReader<R> getFileReader(\n      Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/io/storage/HoodieFileReaderFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"NB"}],"commitId":"1f7add92916c37b05be270d9c75a9042134ec506","commitMessage":"@@@[HUDI-1089] Refactor hudi-client to support multi-engine (#1827)\n\n- This change breaks `hudi-client` into `hudi-client-common` and `hudi-spark-client` modules \n- Simple usages of Spark using jsc.parallelize() has been redone using EngineContext#map.  EngineContext#flatMap etc\n- Code changes in the PR.  break classes into `BaseXYZ` parent classes with no spark dependencies living in `hudi-client-common`\n- Classes on `hudi-spark-client` are named `SparkXYZ` extending the parent classes with all the Spark dependencies\n- To simplify/cleanup.  HoodieIndex#fetchRecordLocation has been removed and its usages in tests replaced with alternatives\n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2020-10-02 05:25:29","modifiedFileCount":"31","status":"M","submitter":"Mathieu"},{"authorTime":"2020-10-12 09:38:42","codes":[{"authorDate":"2020-10-02 05:25:29","commitOrder":3,"curCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2020-10-02 05:25:29","endLine":53,"groupId":"4320","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getFileWriter","params":"(StringinstantTime@Pathpath@HoodieTable<T@I@K@O>hoodieTable@HoodieWriteConfigconfig@Schemaschema@TaskContextSuppliertaskContextSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/5f/4eec088700351a7522b0092e54ee56c040a28b.src","preCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/io/storage/HoodieFileWriterFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"},{"authorDate":"2020-10-12 09:38:42","commitOrder":3,"curCode":"  public static <R extends IndexedRecord> HoodieFileReader<R> getFileReader(Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2020-10-12 09:38:42","endLine":45,"groupId":"4222","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getFileReader","params":"(Configurationconf@Pathpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ff/559c5593712b421242ae99916abf4b8d3e6596.src","preCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord> HoodieFileReader<R> getFileReader(\n      Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/io/storage/HoodieFileReaderFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"b58daf29ba7f0100d16deb793757d93d073c9a03","commitMessage":"@@@[MINOR] remove unused generics type (#2163)\n\n","date":"2020-10-12 09:38:42","modifiedFileCount":"3","status":"M","submitter":"dugenkui"},{"authorTime":"2021-06-16 06:21:43","codes":[{"authorDate":"2021-06-16 06:21:43","commitOrder":4,"curCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (ORC.getFileExtension().equals(extension)) {\n      return newOrcFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2021-06-16 06:21:43","endLine":57,"groupId":"4320","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getFileWriter","params":"(StringinstantTime@Pathpath@HoodieTable<T@I@K@O>hoodieTable@HoodieWriteConfigconfig@Schemaschema@TaskContextSuppliertaskContextSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/96/f19caf0abef27ae062a5ed320c12de9377385d.src","preCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/io/storage/HoodieFileWriterFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2021-06-16 06:21:43","commitOrder":4,"curCode":"  public static <R extends IndexedRecord> HoodieFileReader<R> getFileReader(Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n    if (ORC.getFileExtension().equals(extension)) {\n      return newOrcFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2021-06-16 06:21:43","endLine":49,"groupId":"4222","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getFileReader","params":"(Configurationconf@Pathpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f9/13df7e152a922af2d64664a15e062d9b9ba9cd.src","preCode":"  public static <R extends IndexedRecord> HoodieFileReader<R> getFileReader(Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/io/storage/HoodieFileReaderFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"b8fe5b91d599418cd908d833fd63edc7f362c548","commitMessage":"@@@[HUDI-764] [HUDI-765] ORC reader writer Implementation (#2999)\n\n\nCo-authored-by: Qingyun (Teresa) Kang <kteresa@uber.com>","date":"2021-06-16 06:21:43","modifiedFileCount":"14","status":"M","submitter":"Jintao Guan"},{"authorTime":"2021-06-16 06:21:43","codes":[{"authorDate":"2021-07-27 05:21:04","commitOrder":5,"curCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier, config.populateMetaFields());\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (ORC.getFileExtension().equals(extension)) {\n      return newOrcFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2021-07-27 05:21:04","endLine":58,"groupId":"10850","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getFileWriter","params":"(StringinstantTime@Pathpath@HoodieTable<T@I@K@O>hoodieTable@HoodieWriteConfigconfig@Schemaschema@TaskContextSuppliertaskContextSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/56/022c94edefc8fe95274a2f532c49a96dcc98f2.src","preCode":"  public static <T extends HoodieRecordPayload, R extends IndexedRecord, I, K, O> HoodieFileWriter<R> getFileWriter(\n      String instantTime, Path path, HoodieTable<T, I, K, O> hoodieTable, HoodieWriteConfig config, Schema schema,\n      TaskContextSupplier taskContextSupplier) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.getName());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    if (ORC.getFileExtension().equals(extension)) {\n      return newOrcFileWriter(instantTime, path, config, schema, hoodieTable, taskContextSupplier);\n    }\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/io/storage/HoodieFileWriterFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2021-06-16 06:21:43","commitOrder":5,"curCode":"  public static <R extends IndexedRecord> HoodieFileReader<R> getFileReader(Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n    if (ORC.getFileExtension().equals(extension)) {\n      return newOrcFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","date":"2021-06-16 06:21:43","endLine":49,"groupId":"10850","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getFileReader","params":"(Configurationconf@Pathpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/f9/13df7e152a922af2d64664a15e062d9b9ba9cd.src","preCode":"  public static <R extends IndexedRecord> HoodieFileReader<R> getFileReader(Configuration conf, Path path) throws IOException {\n    final String extension = FSUtils.getFileExtension(path.toString());\n    if (PARQUET.getFileExtension().equals(extension)) {\n      return newParquetFileReader(conf, path);\n    }\n    if (HFILE.getFileExtension().equals(extension)) {\n      return newHFileFileReader(conf, path);\n    }\n    if (ORC.getFileExtension().equals(extension)) {\n      return newOrcFileReader(conf, path);\n    }\n\n    throw new UnsupportedOperationException(extension + \" format not supported yet.\");\n  }\n","realPath":"hudi-common/src/main/java/org/apache/hudi/io/storage/HoodieFileReaderFactory.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"}],"commitId":"61148c1c43c9ff5ba04b6c174e9e2a006db9e7b3","commitMessage":"@@@[HUDI-2176.  2178.  2179] Adding virtual key support to COW table (#3306)\n\n","date":"2021-07-27 05:21:04","modifiedFileCount":"42","status":"M","submitter":"Sivabalan Narayanan"}]
