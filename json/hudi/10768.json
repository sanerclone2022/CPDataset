[{"authorTime":"2021-07-27 10:58:23","codes":[{"authorDate":"2021-07-20 08:43:48","commitOrder":2,"curCode":"  public void write(InternalRow record) throws IOException {\n    try {\n      String partitionPath = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.PARTITION_PATH_METADATA_FIELD)).toString();\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      String recordKey = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.RECORD_KEY_METADATA_FIELD)).toString();\n      HoodieInternalRow internalRow = new HoodieInternalRow(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record);\n      try {\n        fileWriter.writeRow(recordKey, internalRow);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","date":"2021-07-20 08:43:48","endLine":130,"groupId":"3034","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(InternalRowrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/aa89a9e279820af66aed8c9e025cbd91167999.src","preCode":"  public void write(InternalRow record) throws IOException {\n    try {\n      String partitionPath = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.PARTITION_PATH_METADATA_FIELD)).toString();\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      String recordKey = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.RECORD_KEY_METADATA_FIELD)).toString();\n      HoodieInternalRow internalRow = new HoodieInternalRow(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record);\n      try {\n        fileWriter.writeRow(recordKey, internalRow);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"NB"},{"authorDate":"2021-07-27 10:58:23","commitOrder":2,"curCode":"  public void write(String recordKey, String partitionPath, RowData record) throws IOException {\n    try {\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      HoodieRowData rowData = new HoodieRowData(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record);\n      try {\n        fileWriter.writeRow(recordKey, rowData);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","date":"2021-07-27 10:58:23","endLine":130,"groupId":"2045","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(StringrecordKey@StringpartitionPath@RowDatarecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/3c/eee8ba0472be4d4dcd832fe635deb9d6925eef.src","preCode":"  public void write(String recordKey, String partitionPath, RowData record) throws IOException {\n    try {\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      HoodieRowData rowData = new HoodieRowData(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record);\n      try {\n        fileWriter.writeRow(recordKey, rowData);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowDataCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"}],"commitId":"9d2a65a6a6ff9add81411147f1cddd03f7c08e6c","commitMessage":"@@@[HUDI-2209] Bulk insert for flink writer (#3334)\n\n","date":"2021-07-27 10:58:23","modifiedFileCount":"8","status":"M","submitter":"Danny Chan"},{"authorTime":"2021-08-10 20:23:23","codes":[{"authorDate":"2021-07-20 08:43:48","commitOrder":3,"curCode":"  public void write(InternalRow record) throws IOException {\n    try {\n      String partitionPath = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.PARTITION_PATH_METADATA_FIELD)).toString();\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      String recordKey = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.RECORD_KEY_METADATA_FIELD)).toString();\n      HoodieInternalRow internalRow = new HoodieInternalRow(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record);\n      try {\n        fileWriter.writeRow(recordKey, internalRow);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","date":"2021-07-20 08:43:48","endLine":130,"groupId":"10768","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(InternalRowrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/2a/aa89a9e279820af66aed8c9e025cbd91167999.src","preCode":"  public void write(InternalRow record) throws IOException {\n    try {\n      String partitionPath = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.PARTITION_PATH_METADATA_FIELD)).toString();\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      String recordKey = record.getUTF8String(HoodieRecord.HOODIE_META_COLUMNS_NAME_TO_POS.get(\n          HoodieRecord.RECORD_KEY_METADATA_FIELD)).toString();\n      HoodieInternalRow internalRow = new HoodieInternalRow(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record);\n      try {\n        fileWriter.writeRow(recordKey, internalRow);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","realPath":"hudi-client/hudi-spark-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"},{"authorDate":"2021-08-10 20:23:23","commitOrder":3,"curCode":"  public void write(String recordKey, String partitionPath, RowData record) throws IOException {\n    try {\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      HoodieRowData rowData = new HoodieRowData(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record, writeConfig.allowOperationMetadataField());\n      try {\n        fileWriter.writeRow(recordKey, rowData);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","date":"2021-08-10 20:23:23","endLine":131,"groupId":"10768","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(StringrecordKey@StringpartitionPath@RowDatarecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/23/8367b5d4fe2f777545c3292de5726a07780f6c.src","preCode":"  public void write(String recordKey, String partitionPath, RowData record) throws IOException {\n    try {\n      String seqId = HoodieRecord.generateSequenceId(instantTime, taskPartitionId, SEQGEN.getAndIncrement());\n      HoodieRowData rowData = new HoodieRowData(instantTime, seqId, recordKey, partitionPath, path.getName(),\n          record);\n      try {\n        fileWriter.writeRow(recordKey, rowData);\n        writeStatus.markSuccess(recordKey);\n      } catch (Throwable t) {\n        writeStatus.markFailure(recordKey, t);\n      }\n    } catch (Throwable ge) {\n      writeStatus.setGlobalError(ge);\n      throw ge;\n    }\n  }\n","realPath":"hudi-client/hudi-flink-client/src/main/java/org/apache/hudi/io/storage/row/HoodieRowDataCreateHandle.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"21db6d7a84d4a83ec98c110e92ff9c92d05dd530","commitMessage":"@@@[HUDI-1771] Propagate CDC format for hoodie (#3285)\n\n","date":"2021-08-10 20:23:23","modifiedFileCount":"47","status":"M","submitter":"swuferhong"}]
