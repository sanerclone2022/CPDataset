[{"authorTime":"2020-05-27 16:28:17","codes":[{"authorDate":"2020-08-06 12:34:55","commitOrder":2,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = \"jdbc:hive2://127.0.0.1:9999/\";\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = \"/tmp/hdfs/TestHiveSyncTool/\";\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n\n    clear();\n  }\n","date":"2020-08-06 12:34:55","endLine":125,"groupId":"1863","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/d0/d1b667aea20b9592b845de9833ace73a3ed40a.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = \"jdbc:hive2://127.0.0.1:9999/\";\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = \"/tmp/hdfs/TestHiveSyncTool/\";\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n\n    clear();\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/testutils/HiveTestUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2020-05-27 16:28:17","commitOrder":2,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","date":"2020-05-27 16:28:17","endLine":49,"groupId":"5661","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ec/c00e5f683119f717aa9139c0419b46a2ce2ff6.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/testutils/minicluster/MiniClusterUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"NB"}],"commitId":"51ea27d665d8053895dd047ca85e3338b357a81d","commitMessage":"@@@[HUDI-875] Abstract hudi-sync-common.  and support hudi-hive-sync.  hudi-dla-sync (#1810)\n\n- Generalize the hive-sync module for syncing to multiple metastores\n- Added new options for datasource\n- Added new command line for delta streamer \n\nCo-authored-by: Vinoth Chandar <vinoth@apache.org>","date":"2020-08-06 12:34:55","modifiedFileCount":"3","status":"M","submitter":"lw0090"},{"authorTime":"2020-05-27 16:28:17","codes":[{"authorDate":"2021-03-17 07:43:53","commitOrder":3,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = \"jdbc:hive2://127.0.0.1:9999/\";\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = \"/tmp/hdfs/TestHiveSyncTool/\";\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n\n    clear();\n  }\n","date":"2021-03-17 07:43:53","endLine":126,"groupId":"1863","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/80/a681db40e0745290437e0094cc01d8c701ea0e.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = \"jdbc:hive2://127.0.0.1:9999/\";\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = \"/tmp/hdfs/TestHiveSyncTool/\";\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n\n    clear();\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/testutils/HiveTestUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-05-27 16:28:17","commitOrder":3,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","date":"2020-05-27 16:28:17","endLine":49,"groupId":"5661","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ec/c00e5f683119f717aa9139c0419b46a2ce2ff6.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/testutils/minicluster/MiniClusterUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"74241947c123c860a1b0344f25cef316440a70d6","commitMessage":"@@@[HUDI-845] Added locking capability to allow multiple writers (#2374)\n\n* [HUDI-845] Added locking capability to allow multiple writers\n1. Added LockProvider API for pluggable lock methodologies\n2. Added Resolution Strategy API to allow for pluggable conflict resolution\n3. Added TableService client API to schedule table services\n4. Added Transaction Manager for wrapping actions within transactions","date":"2021-03-17 07:43:53","modifiedFileCount":"48","status":"M","submitter":"n3nash"},{"authorTime":"2020-05-27 16:28:17","codes":[{"authorDate":"2021-06-08 06:38:59","commitOrder":4,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    configuration = new Configuration();\n    if (zkServer == null) {\n      zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = hiveTestService.getJdbcHive2Url();\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = Files.createTempDirectory(\"hivesynctest\" + Instant.now().toEpochMilli()).toUri().toString();\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n\n    clear();\n  }\n","date":"2021-06-08 06:38:59","endLine":121,"groupId":"3834","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/74/f28ccdab625057cd266bac1658725265be5f1d.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = \"jdbc:hive2://127.0.0.1:9999/\";\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = \"/tmp/hdfs/TestHiveSyncTool/\";\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n\n    clear();\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/testutils/HiveTestUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-05-27 16:28:17","commitOrder":4,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","date":"2020-05-27 16:28:17","endLine":49,"groupId":"5661","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ec/c00e5f683119f717aa9139c0419b46a2ce2ff6.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/testutils/minicluster/MiniClusterUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"441076b2ccf66949310030fc6680bb68c259d8da","commitMessage":"@@@[HUDI-1950] Move TestHiveMetastoreBasedLockProvider to functional (#3043)\n\nHiveTestUtil static setup mini servers caused connection refused issue in Azure CI environment.  as TestHiveSyncTool and TestHiveMetastoreBasedLockProvider share the same test facilities. Moving TestHiveMetastoreBasedLockProvider (the easier one) to functional test with a separate and improved mini server setup resolved the issue.\n\nAlso cleaned up dfs cluster from HiveTestUtil.\n\nThe next step is to move TestHiveSyncTool to functional as well.","date":"2021-06-08 06:38:59","modifiedFileCount":"3","status":"M","submitter":"Raymond Xu"},{"authorTime":"2020-05-27 16:28:17","codes":[{"authorDate":"2021-07-24 00:03:15","commitOrder":5,"curCode":"  public static void setUp() throws IOException, InterruptedException, HiveException, MetaException {\n    configuration = new Configuration();\n    if (zkServer == null) {\n      zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = hiveTestService.getJdbcHive2Url();\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = Files.createTempDirectory(\"hivesynctest\" + Instant.now().toEpochMilli()).toUri().toString();\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n    ddlExecutor = new HiveQueryDDLExecutor(hiveSyncConfig, fileSystem, getHiveConf());\n\n    clear();\n  }\n","date":"2021-07-24 00:03:15","endLine":126,"groupId":"3834","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7b/9f1d127fd216350c1a10e71def80662b9eac6a.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    configuration = new Configuration();\n    if (zkServer == null) {\n      zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = hiveTestService.getJdbcHive2Url();\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = Files.createTempDirectory(\"hivesynctest\" + Instant.now().toEpochMilli()).toUri().toString();\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n\n    clear();\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/testutils/HiveTestUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-05-27 16:28:17","commitOrder":5,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","date":"2020-05-27 16:28:17","endLine":49,"groupId":"5661","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ec/c00e5f683119f717aa9139c0419b46a2ce2ff6.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/testutils/minicluster/MiniClusterUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"66207ed91a75ce8e91ccc0c417dc0d310dc36a5c","commitMessage":"@@@[HUDI-1848] Adding support for HMS for running DDL queries in hive-sy? (#2879)\n\n* [HUDI-1848] Adding support for HMS for running DDL queries in hive-sync-tool\n\n* [HUDI-1848] Fixing test cases\n\n* [HUDI-1848] CR changes\n\n* [HUDI-1848] Fix checkstyle violations\n\n* [HUDI-1848] Fixed a bug when metastore api fails for complex schemas with multiple levels.\n\n* [HUDI-1848] Adding the complex schema and resolving merge conflicts\n\n* [HUDI-1848] Adding some more javadocs\n\n* [HUDI-1848] Added javadocs for DDLExecutor impls\n\n* [HUDI-1848] Fixed style issue","date":"2021-07-24 00:03:15","modifiedFileCount":"9","status":"M","submitter":"jsbali"},{"authorTime":"2020-05-27 16:28:17","codes":[{"authorDate":"2021-08-11 11:25:41","commitOrder":6,"curCode":"  public static void setUp() throws IOException, InterruptedException, HiveException, MetaException {\n    configuration = new Configuration();\n    if (zkServer == null) {\n      zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = hiveTestService.getJdbcHive2Url();\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = Files.createTempDirectory(\"hivesynctest\" + Instant.now().toEpochMilli()).toUri().toString();\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");\n    ddlExecutor = new HiveQueryDDLExecutor(hiveSyncConfig, fileSystem, getHiveConf());\n\n    clear();\n  }\n","date":"2021-08-11 11:25:41","endLine":127,"groupId":"10343","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/a3/bc2268dcac24706513384a719971574dd0b48b.src","preCode":"  public static void setUp() throws IOException, InterruptedException, HiveException, MetaException {\n    configuration = new Configuration();\n    if (zkServer == null) {\n      zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    if (hiveServer == null) {\n      hiveTestService = new HiveTestService(configuration);\n      hiveServer = hiveTestService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n\n    hiveSyncConfig = new HiveSyncConfig();\n    hiveSyncConfig.jdbcUrl = hiveTestService.getJdbcHive2Url();\n    hiveSyncConfig.hiveUser = \"\";\n    hiveSyncConfig.hivePass = \"\";\n    hiveSyncConfig.databaseName = \"testdb\";\n    hiveSyncConfig.tableName = \"test1\";\n    hiveSyncConfig.basePath = Files.createTempDirectory(\"hivesynctest\" + Instant.now().toEpochMilli()).toUri().toString();\n    hiveSyncConfig.assumeDatePartitioning = true;\n    hiveSyncConfig.usePreApacheInputFormat = false;\n    hiveSyncConfig.partitionFields = Collections.singletonList(\"datestr\");\n\n    dtfOut = DateTimeFormat.forPattern(\"yyyy/MM/dd\");\n    ddlExecutor = new HiveQueryDDLExecutor(hiveSyncConfig, fileSystem, getHiveConf());\n\n    clear();\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/testutils/HiveTestUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-05-27 16:28:17","commitOrder":6,"curCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","date":"2020-05-27 16:28:17","endLine":49,"groupId":"10343","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/ec/c00e5f683119f717aa9139c0419b46a2ce2ff6.src","preCode":"  public static void setUp() throws IOException, InterruptedException {\n    if (dfsCluster == null) {\n      HdfsTestService service = new HdfsTestService();\n      dfsCluster = service.start(true);\n      configuration = service.getHadoopConf();\n    }\n    if (zkServer == null) {\n      ZookeeperTestService zkService = new ZookeeperTestService(configuration);\n      zkServer = zkService.start();\n    }\n    fileSystem = FileSystem.get(configuration);\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/testutils/minicluster/MiniClusterUtil.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"8255a86cb4d7f2173f0adcf0d752096b0b4df78c","commitMessage":"@@@[HUDI-1939] remove joda time in hivesync module (#3430)\n\n","date":"2021-08-11 11:25:41","modifiedFileCount":"5","status":"M","submitter":"Raymond Xu"}]
