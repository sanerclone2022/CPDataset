[{"authorTime":"2021-06-25 11:26:26","codes":[{"authorDate":"2021-06-25 11:26:26","commitOrder":1,"curCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","date":"2021-06-25 11:26:26","endLine":818,"groupId":"4353","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPickingOlderParquetFileIfLatestIsEmptyCommit","params":"(booleanuseJdbc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e8/8c46a2d4abad6ec9bc7fdc8d8868ba74b38887.src","preCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"B"},{"authorDate":"2021-06-25 11:26:26","commitOrder":1,"curCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    DateTime dateTime = DateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","date":"2021-06-25 11:26:26","endLine":860,"groupId":"5715","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotPickingOlderParquetFileWhenLatestCommitReadFails","params":"(booleanuseJdbc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/e8/8c46a2d4abad6ec9bc7fdc8d8868ba74b38887.src","preCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    DateTime dateTime = DateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":822,"status":"B"}],"commitId":"0fb8556b0d9274aef650a46bb82a8cf495d4450b","commitMessage":"@@@Add ability to provide multi-region (global) data consistency across HMS in different regions (#2542)\n\n[global-hive-sync-tool] Add a global hive sync tool to sync hudi table across clusters. Add a way to rollback the replicated time stamp if we fail to sync or if we partly sync\n\nCo-authored-by: Jagmeet Bali <jsbali@uber.com>","date":"2021-06-25 11:26:26","modifiedFileCount":"14","status":"B","submitter":"s-sanjay"},{"authorTime":"2021-07-04 22:30:36","codes":[{"authorDate":"2021-07-04 22:30:36","commitOrder":2,"curCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","date":"2021-07-04 22:30:36","endLine":749,"groupId":"4353","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPickingOlderParquetFileIfLatestIsEmptyCommit","params":"(booleanuseJdbc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c4/125337ea9d8f89fd4b103aa96d08392d77e7ff.src","preCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":732,"status":"M"},{"authorDate":"2021-07-04 22:30:36","commitOrder":2,"curCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    DateTime dateTime = DateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","date":"2021-07-04 22:30:36","endLine":792,"groupId":"5715","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotPickingOlderParquetFileWhenLatestCommitReadFails","params":"(booleanuseJdbc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/c4/125337ea9d8f89fd4b103aa96d08392d77e7ff.src","preCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    DateTime dateTime = DateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"M"}],"commitId":"6a71412f7804c9cbd34e4c6fc01545a994523bb4","commitMessage":"@@@[HUDI-2116] Support batch synchronization of partition datas to  hive metastore to avoid oom problem (#3209)\n\n","date":"2021-07-04 22:30:36","modifiedFileCount":"4","status":"M","submitter":"xiarixiaoyao"},{"authorTime":"2021-07-24 00:03:15","codes":[{"authorDate":"2021-07-24 00:03:15","commitOrder":3,"curCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(String syncMode) throws Exception {\n    hiveSyncConfig.syncMode = syncMode;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","date":"2021-07-24 00:03:15","endLine":959,"groupId":"4353","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPickingOlderParquetFileIfLatestIsEmptyCommit","params":"(StringsyncMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/af/94c16b62f45519cc2c42f9335f83cb6f25c6e3.src","preCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"M"},{"authorDate":"2021-07-24 00:03:15","commitOrder":3,"curCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(String syncMode) throws Exception {\n    hiveSyncConfig.syncMode = syncMode;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    DateTime dateTime = DateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","date":"2021-07-24 00:03:15","endLine":1002,"groupId":"5715","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotPickingOlderParquetFileWhenLatestCommitReadFails","params":"(StringsyncMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/af/94c16b62f45519cc2c42f9335f83cb6f25c6e3.src","preCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(boolean useJdbc) throws Exception {\n    HiveTestUtil.hiveSyncConfig.useJdbc = useJdbc;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    DateTime dateTime = DateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":963,"status":"M"}],"commitId":"66207ed91a75ce8e91ccc0c417dc0d310dc36a5c","commitMessage":"@@@[HUDI-1848] Adding support for HMS for running DDL queries in hive-sy? (#2879)\n\n* [HUDI-1848] Adding support for HMS for running DDL queries in hive-sync-tool\n\n* [HUDI-1848] Fixing test cases\n\n* [HUDI-1848] CR changes\n\n* [HUDI-1848] Fix checkstyle violations\n\n* [HUDI-1848] Fixed a bug when metastore api fails for complex schemas with multiple levels.\n\n* [HUDI-1848] Adding the complex schema and resolving merge conflicts\n\n* [HUDI-1848] Adding some more javadocs\n\n* [HUDI-1848] Added javadocs for DDLExecutor impls\n\n* [HUDI-1848] Fixed style issue","date":"2021-07-24 00:03:15","modifiedFileCount":"9","status":"M","submitter":"jsbali"},{"authorTime":"2021-08-11 11:25:41","codes":[{"authorDate":"2021-07-24 00:03:15","commitOrder":4,"curCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(String syncMode) throws Exception {\n    hiveSyncConfig.syncMode = syncMode;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","date":"2021-07-24 00:03:15","endLine":959,"groupId":"10333","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPickingOlderParquetFileIfLatestIsEmptyCommit","params":"(StringsyncMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/af/94c16b62f45519cc2c42f9335f83cb6f25c6e3.src","preCode":"  public void testPickingOlderParquetFileIfLatestIsEmptyCommit(String syncMode) throws Exception {\n    hiveSyncConfig.syncMode = syncMode;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFileWithSchema(commitMetadata, emptyCommitTime, true);\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    tool.syncHoodieTable();\n\n    verifyOldParquetFileTest(hiveClient, emptyCommitTime);\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"N"},{"authorDate":"2021-08-11 11:25:41","commitOrder":4,"curCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(String syncMode) throws Exception {\n    hiveSyncConfig.syncMode = syncMode;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    ZonedDateTime dateTime = ZonedDateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","date":"2021-08-11 11:25:41","endLine":930,"groupId":"10333","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testNotPickingOlderParquetFileWhenLatestCommitReadFails","params":"(StringsyncMode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/fc/b626eb3231099263b43694f1b44490fadcd30e.src","preCode":"  public void testNotPickingOlderParquetFileWhenLatestCommitReadFails(String syncMode) throws Exception {\n    hiveSyncConfig.syncMode = syncMode;\n    HiveTestUtil.hiveSyncConfig.batchSyncNum = 2;\n    final String commitTime = \"100\";\n    HiveTestUtil.createCOWTable(commitTime, 1, true);\n    HoodieCommitMetadata commitMetadata = new HoodieCommitMetadata();\n\n    \r\n    DateTime dateTime = DateTime.now().plusDays(6);\n    String commitTime2 = \"101\";\n    HiveTestUtil.addCOWPartitions(1, false, true, dateTime, commitTime2);\n\n    \r\n    final String emptyCommitTime = \"200\";\n    HiveTestUtil.createCommitFile(commitMetadata, emptyCommitTime);\n\n    HoodieHiveClient hiveClient =\n        new HoodieHiveClient(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist initially\");\n\n    HiveSyncTool tool = new HiveSyncTool(HiveTestUtil.hiveSyncConfig, HiveTestUtil.getHiveConf(), HiveTestUtil.fileSystem);\n\n    \r\n    Path fullPath = new Path(HiveTestUtil.hiveSyncConfig.basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n        + hiveClient.getActiveTimeline().getInstants()\n        .filter(inst -> inst.getTimestamp().equals(commitTime2))\n        .findFirst().get().getFileName());\n    assertTrue(HiveTestUtil.fileSystem.delete(fullPath, false));\n\n    try {\n      tool.syncHoodieTable();\n    } catch (RuntimeException e) {\n      \r\n    }\n\n    \r\n    assertFalse(\n        hiveClient.doesTableExist(HiveTestUtil.hiveSyncConfig.tableName),\"Table \" + HiveTestUtil.hiveSyncConfig.tableName + \" should not exist at all\");\n  }\n","realPath":"hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"M"}],"commitId":"8255a86cb4d7f2173f0adcf0d752096b0b4df78c","commitMessage":"@@@[HUDI-1939] remove joda time in hivesync module (#3430)\n\n","date":"2021-08-11 11:25:41","modifiedFileCount":"5","status":"M","submitter":"Raymond Xu"}]
