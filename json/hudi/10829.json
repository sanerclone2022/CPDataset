[{"authorTime":"2021-09-16 06:52:43","codes":[{"authorDate":"2021-09-16 06:52:43","commitOrder":1,"curCode":"  protected List<HoodieRollbackStat> executeRollback() {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    LOG.info(\"Rolling back instant \" + instantToRollback);\n\n    HoodieInstant resolvedInstant = instantToRollback;\n    \r\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Un-publishing instant \" + instantToRollback + \", deleteInstants=\" + deleteInstants);\n      resolvedInstant = table.getActiveTimeline().revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    List<HoodieRollbackStat> allRollbackStats = new ArrayList<>();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      LOG.info(\"Unpublished \" + resolvedInstant);\n      allRollbackStats = getRollbackStrategy().execute(resolvedInstant);\n    }\n\n    dropBootstrapIndexIfNeeded(resolvedInstant);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, table.getActiveTimeline(), resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return allRollbackStats;\n  }\n","date":"2021-09-16 06:52:43","endLine":108,"groupId":"3297","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/87/d26281ddf15d6ff6af9b2317f7bc5af8a3cc1f.src","preCode":"  protected List<HoodieRollbackStat> executeRollback() {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    LOG.info(\"Rolling back instant \" + instantToRollback);\n\n    HoodieInstant resolvedInstant = instantToRollback;\n    \r\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Un-publishing instant \" + instantToRollback + \", deleteInstants=\" + deleteInstants);\n      resolvedInstant = table.getActiveTimeline().revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    List<HoodieRollbackStat> allRollbackStats = new ArrayList<>();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      LOG.info(\"Unpublished \" + resolvedInstant);\n      allRollbackStats = getRollbackStrategy().execute(resolvedInstant);\n    }\n\n    dropBootstrapIndexIfNeeded(resolvedInstant);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, table.getActiveTimeline(), resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return allRollbackStats;\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/rollback/MergeOnReadRollbackActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2021-09-16 06:52:43","commitOrder":1,"curCode":"  protected List<HoodieRollbackStat> executeRollback() {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    List<HoodieRollbackStat> stats = new ArrayList<>();\n    HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n    HoodieInstant resolvedInstant = instantToRollback;\n\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Unpublishing instant \" + instantToRollback);\n      resolvedInstant = activeTimeline.revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      \r\n      LOG.info(\"Clean out all base files generated for commit: \" + resolvedInstant);\n      stats = getRollbackStrategy().execute(resolvedInstant);\n    }\n\n    dropBootstrapIndexIfNeeded(instantToRollback);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return stats;\n  }\n","date":"2021-09-16 06:52:43","endLine":99,"groupId":"4079","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeRollback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/44/b5492e742e5e46f07270e28278adba1b1435ce.src","preCode":"  protected List<HoodieRollbackStat> executeRollback() {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    List<HoodieRollbackStat> stats = new ArrayList<>();\n    HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n    HoodieInstant resolvedInstant = instantToRollback;\n\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Unpublishing instant \" + instantToRollback);\n      resolvedInstant = activeTimeline.revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      \r\n      LOG.info(\"Clean out all base files generated for commit: \" + resolvedInstant);\n      stats = getRollbackStrategy().execute(resolvedInstant);\n    }\n\n    dropBootstrapIndexIfNeeded(instantToRollback);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return stats;\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"916f12b7dd4b635c790b17876fa49fb786233e94","commitMessage":"@@@[HUDI-2433] Refactor rollback actions in hudi-client module (#3664)\n\n","date":"2021-09-16 06:52:43","modifiedFileCount":"18","status":"B","submitter":"Y Ethan Guo"},{"authorTime":"2021-09-16 23:16:06","codes":[{"authorDate":"2021-09-16 23:16:06","commitOrder":2,"curCode":"  protected List<HoodieRollbackStat> executeRollback(HoodieRollbackPlan hoodieRollbackPlan) {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    LOG.info(\"Rolling back instant \" + instantToRollback);\n\n    HoodieInstant resolvedInstant = instantToRollback;\n    \r\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Un-publishing instant \" + instantToRollback + \", deleteInstants=\" + deleteInstants);\n      resolvedInstant = table.getActiveTimeline().revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    List<HoodieRollbackStat> allRollbackStats = new ArrayList<>();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      LOG.info(\"Unpublished \" + resolvedInstant);\n      allRollbackStats = executeRollback(instantToRollback, hoodieRollbackPlan);\n    }\n\n    dropBootstrapIndexIfNeeded(resolvedInstant);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, table.getActiveTimeline(), resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return allRollbackStats;\n  }\n","date":"2021-09-16 23:16:06","endLine":98,"groupId":"10829","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"executeRollback","params":"(HoodieRollbackPlanhoodieRollbackPlan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/23/af44552827881d78adbedafba3b4297d09132b.src","preCode":"  protected List<HoodieRollbackStat> executeRollback() {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    LOG.info(\"Rolling back instant \" + instantToRollback);\n\n    HoodieInstant resolvedInstant = instantToRollback;\n    \r\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Un-publishing instant \" + instantToRollback + \", deleteInstants=\" + deleteInstants);\n      resolvedInstant = table.getActiveTimeline().revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    List<HoodieRollbackStat> allRollbackStats = new ArrayList<>();\n\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      LOG.info(\"Unpublished \" + resolvedInstant);\n      allRollbackStats = getRollbackStrategy().execute(resolvedInstant);\n    }\n\n    dropBootstrapIndexIfNeeded(resolvedInstant);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, table.getActiveTimeline(), resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return allRollbackStats;\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/rollback/MergeOnReadRollbackActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-09-16 23:16:06","commitOrder":2,"curCode":"  protected List<HoodieRollbackStat> executeRollback(HoodieRollbackPlan hoodieRollbackPlan) {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    List<HoodieRollbackStat> stats = new ArrayList<>();\n    HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n    HoodieInstant resolvedInstant = instantToRollback;\n\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Unpublishing instant \" + instantToRollback);\n      resolvedInstant = activeTimeline.revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      \r\n      LOG.info(\"Clean out all base files generated for commit: \" + resolvedInstant);\n      stats = executeRollback(resolvedInstant, hoodieRollbackPlan);\n    }\n\n    dropBootstrapIndexIfNeeded(instantToRollback);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return stats;\n  }\n","date":"2021-09-16 23:16:06","endLine":91,"groupId":"10829","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"executeRollback","params":"(HoodieRollbackPlanhoodieRollbackPlan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/91/87179ffa032bb225108c48b2ce285949ce536d.src","preCode":"  protected List<HoodieRollbackStat> executeRollback() {\n    HoodieTimer rollbackTimer = new HoodieTimer();\n    rollbackTimer.startTimer();\n\n    List<HoodieRollbackStat> stats = new ArrayList<>();\n    HoodieActiveTimeline activeTimeline = table.getActiveTimeline();\n    HoodieInstant resolvedInstant = instantToRollback;\n\n    if (instantToRollback.isCompleted()) {\n      LOG.info(\"Unpublishing instant \" + instantToRollback);\n      resolvedInstant = activeTimeline.revertToInflight(instantToRollback);\n      \r\n      table.getMetaClient().reloadActiveTimeline();\n    }\n\n    \r\n    \r\n    if (!resolvedInstant.isRequested()) {\n      \r\n      LOG.info(\"Clean out all base files generated for commit: \" + resolvedInstant);\n      stats = getRollbackStrategy().execute(resolvedInstant);\n    }\n\n    dropBootstrapIndexIfNeeded(instantToRollback);\n\n    \r\n    deleteInflightAndRequestedInstant(deleteInstants, activeTimeline, resolvedInstant);\n    LOG.info(\"Time(in ms) taken to finish rollback \" + rollbackTimer.endTimer());\n    return stats;\n  }\n","realPath":"hudi-client/hudi-client-common/src/main/java/org/apache/hudi/table/action/rollback/CopyOnWriteRollbackActionExecutor.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"b8dad628e584e0acfa8ef6ba0056f7cb6efafad0","commitMessage":"@@@[HUDI-2422] Adding rollback plan and rollback requested instant (#3651)\n\n- This patch introduces rollback plan and rollback.requested instant. Rollback will be done in two phases.  namely rollback plan and rollback action. In planning.  we prepare the rollback plan and serialize it to rollback.requested. In the rollback action phase.  we fetch details from the plan and just delete the files as per the plan. This will ensure final rollback commit metadata will contain all files that got rolled back even if rollback failed midway and retried again. ","date":"2021-09-16 23:16:06","modifiedFileCount":"30","status":"M","submitter":"Sivabalan Narayanan"}]
