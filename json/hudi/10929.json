[{"authorTime":"2020-03-30 01:58:49","codes":[{"authorDate":"2020-03-30 01:58:49","commitOrder":1,"curCode":"  public void testAddKey() {\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(versionToTest, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n      for (java.lang.String key : inputs) {\n        Assert.assertTrue(\"Filter should have returned true for \" + key, filter.mightContain(key));\n      }\n      for (int i = 0; i < 100; i++) {\n        String randomKey = UUID.randomUUID().toString();\n        if (inputs.contains(randomKey)) {\n          Assert.assertTrue(\"Filter should have returned true for \" + randomKey, filter.mightContain(randomKey));\n        }\n      }\n    }\n  }\n","date":"2020-03-30 01:58:49","endLine":77,"groupId":"2427","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/0514cdd21ea673fca442ead9d3f3a9ff2cd119.src","preCode":"  public void testAddKey() {\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(versionToTest, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n      for (java.lang.String key : inputs) {\n        Assert.assertTrue(\"Filter should have returned true for \" + key, filter.mightContain(key));\n      }\n      for (int i = 0; i < 100; i++) {\n        String randomKey = UUID.randomUUID().toString();\n        if (inputs.contains(randomKey)) {\n          Assert.assertTrue(\"Filter should have returned true for \" + randomKey, filter.mightContain(randomKey));\n        }\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/bloom/TestBloomFilter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2020-03-30 01:58:49","commitOrder":1,"curCode":"  public void testSerialize() {\n\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(versionToTest, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n\n      String serString = filter.serializeToString();\n      BloomFilter recreatedBloomFilter = BloomFilterFactory\n          .fromString(serString, versionToTest);\n      for (String key : inputs) {\n        Assert.assertTrue(\"Filter should have returned true for \" + key, recreatedBloomFilter.mightContain(key));\n      }\n    }\n  }\n","date":"2020-03-30 01:58:49","endLine":100,"groupId":"2428","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1e/0514cdd21ea673fca442ead9d3f3a9ff2cd119.src","preCode":"  public void testSerialize() {\n\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(versionToTest, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n\n      String serString = filter.serializeToString();\n      BloomFilter recreatedBloomFilter = BloomFilterFactory\n          .fromString(serString, versionToTest);\n      for (String key : inputs) {\n        Assert.assertTrue(\"Filter should have returned true for \" + key, recreatedBloomFilter.mightContain(key));\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/bloom/TestBloomFilter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"e057c27603301d8b49e9b50b78a3ffce247b1059","commitMessage":"@@@[HUDI-744] Restructure hudi-common and clean up files under util packages (#1462)\n\n - Brings more order and cohesion to the classes in hudi-common\n - Utils classes related to a particular concept (avro.  timeline. ...) are placed near to the package\n - common.fs package now contains all the filesystem level classes including wrapper filesystem\n - bloom.filter package renamed to just bloom\n - config package contains classes that help store properties\n - common.fs.inline package contains all the inline filesystem classes/impl\n - common.table.timeline now consolidates all timeline related classes\n - common.table.view consolidates all the classes related to filesystem view metadata\n - common.table.timeline.versioning contains all classes related to versioning of timeline\n - Fix few unit tests as a result\n - Moved the test packages around to match the source file move\n - Rename AvroUtils to TimelineMetadataUtils & minor fixes/typos","date":"2020-03-30 01:58:49","modifiedFileCount":"206","status":"B","submitter":"vinoth chandar"},{"authorTime":"2020-05-06 19:15:20","codes":[{"authorDate":"2020-05-06 19:15:20","commitOrder":2,"curCode":"  public void testAddKey(String typeCode) {\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(typeCode, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n      for (java.lang.String key : inputs) {\n        assertTrue(filter.mightContain(key), \"Filter should have returned true for \" + key);\n      }\n      for (int i = 0; i < 100; i++) {\n        String randomKey = UUID.randomUUID().toString();\n        if (inputs.contains(randomKey)) {\n          assertTrue(filter.mightContain(randomKey), \"Filter should have returned true for \" + randomKey);\n        }\n      }\n    }\n  }\n","date":"2020-05-06 19:15:20","endLine":69,"groupId":"10929","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddKey","params":"(StringtypeCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/55/2098e71bb15ac6d32233ce00e089ab35879091.src","preCode":"  public void testAddKey() {\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(versionToTest, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n      for (java.lang.String key : inputs) {\n        Assert.assertTrue(\"Filter should have returned true for \" + key, filter.mightContain(key));\n      }\n      for (int i = 0; i < 100; i++) {\n        String randomKey = UUID.randomUUID().toString();\n        if (inputs.contains(randomKey)) {\n          Assert.assertTrue(\"Filter should have returned true for \" + randomKey, filter.mightContain(randomKey));\n        }\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/bloom/TestBloomFilter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-05-06 19:15:20","commitOrder":2,"curCode":"  public void testSerialize(String typeCode) {\n\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(typeCode, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n\n      String serString = filter.serializeToString();\n      BloomFilter recreatedBloomFilter = BloomFilterFactory\n          .fromString(serString, typeCode);\n      for (String key : inputs) {\n        assertTrue(recreatedBloomFilter.mightContain(key), \"Filter should have returned true for \" + key);\n      }\n    }\n  }\n","date":"2020-05-06 19:15:20","endLine":93,"groupId":"10929","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSerialize","params":"(StringtypeCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/55/2098e71bb15ac6d32233ce00e089ab35879091.src","preCode":"  public void testSerialize() {\n\n    List<String> inputs;\n    int[] sizes = {100, 1000, 10000};\n    for (int size : sizes) {\n      inputs = new ArrayList<>();\n      BloomFilter filter = getBloomFilter(versionToTest, size, 0.000001, size * 10);\n      for (int i = 0; i < size; i++) {\n        String key = UUID.randomUUID().toString();\n        inputs.add(key);\n        filter.add(key);\n      }\n\n      String serString = filter.serializeToString();\n      BloomFilter recreatedBloomFilter = BloomFilterFactory\n          .fromString(serString, versionToTest);\n      for (String key : inputs) {\n        Assert.assertTrue(\"Filter should have returned true for \" + key, recreatedBloomFilter.mightContain(key));\n      }\n    }\n  }\n","realPath":"hudi-common/src/test/java/org/apache/hudi/common/bloom/TestBloomFilter.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"366bb10d8c4fe98424f09a6cf6f4aee7716451a4","commitMessage":"@@@[HUDI-812] Migrate hudi common tests to JUnit 5 (#1590)\n\n* [HUDI-812] Migrate hudi-common tests to JUnit 5","date":"2020-05-06 19:15:20","modifiedFileCount":"38","status":"M","submitter":"Raymond Xu"}]
