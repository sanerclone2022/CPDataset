[{"authorTime":"2020-05-05 02:27:14","codes":[{"authorDate":"2020-05-05 02:27:14","commitOrder":1,"curCode":"  public void testHoodieParquetInputFormatAnnotation() {\n    assertTrue(HoodieParquetInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetInputFormat.class.getAnnotations();\n    boolean found = false;\n    for (Annotation annotation : annotations) {\n      if (\"UseFileSplitsFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        found = true;\n      }\n    }\n    assertTrue(found);\n  }\n","date":"2020-05-05 02:27:14","endLine":40,"groupId":"2702","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHoodieParquetInputFormatAnnotation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1f/74c7a2aebfd15c1891a4129b4dfff2a421e98a.src","preCode":"  public void testHoodieParquetInputFormatAnnotation() {\n    assertTrue(HoodieParquetInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetInputFormat.class.getAnnotations();\n    boolean found = false;\n    for (Annotation annotation : annotations) {\n      if (\"UseFileSplitsFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        found = true;\n      }\n    }\n    assertTrue(found);\n  }\n","realPath":"hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/TestAnnotation.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"B"},{"authorDate":"2020-05-05 02:27:14","commitOrder":1,"curCode":"  public void testHoodieParquetRealtimeInputFormatAnnotations() {\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseRecordReaderFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetRealtimeInputFormat.class.getAnnotations();\n    boolean foundFileSplitsAnnotation = false;\n    boolean foundRecordReaderAnnotation = false;\n    for (Annotation annotation : annotations) {\n      if (\"UseFileSplitsFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        foundFileSplitsAnnotation = true;\n      }\n      if (\"UseRecordReaderFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        foundRecordReaderAnnotation = true;\n      }\n    }\n    assertTrue(foundFileSplitsAnnotation);\n    assertTrue(foundRecordReaderAnnotation);\n  }\n","date":"2020-05-05 02:27:14","endLine":59,"groupId":"3253","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHoodieParquetRealtimeInputFormatAnnotations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/1f/74c7a2aebfd15c1891a4129b4dfff2a421e98a.src","preCode":"  public void testHoodieParquetRealtimeInputFormatAnnotations() {\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseRecordReaderFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetRealtimeInputFormat.class.getAnnotations();\n    boolean foundFileSplitsAnnotation = false;\n    boolean foundRecordReaderAnnotation = false;\n    for (Annotation annotation : annotations) {\n      if (\"UseFileSplitsFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        foundFileSplitsAnnotation = true;\n      }\n      if (\"UseRecordReaderFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        foundRecordReaderAnnotation = true;\n      }\n    }\n    assertTrue(foundFileSplitsAnnotation);\n    assertTrue(foundRecordReaderAnnotation);\n  }\n","realPath":"hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/TestAnnotation.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"}],"commitId":"e21441ad8317f302fed947c414e059a332e4d1ef","commitMessage":"@@@Add changes for presto mor queries (#1578)\n\nAdds the neccessary changes to hudi for support of presto querying hudi\nmerge-on-read table's realtime view.\n\nCo-authored-by: Brandon Scheller <bschelle@amazon.com>","date":"2020-05-05 02:27:14","modifiedFileCount":"2","status":"B","submitter":"bschell"},{"authorTime":"2020-08-13 08:51:31","codes":[{"authorDate":"2020-08-13 08:51:31","commitOrder":2,"curCode":"  public void testHoodieParquetInputFormatAnnotation() {\n    assertTrue(HoodieParquetInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    assertTrue(HoodieParquetInputFormat.class.isAnnotationPresent(UseRecordReaderFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetInputFormat.class.getAnnotations();\n    boolean foundFileSplitsAnnotation = false;\n    boolean foundRecordReaderAnnotation = false;\n    for (Annotation annotation : annotations) {\n      if (UseFileSplitsFromInputFormat.class.getSimpleName().equals(annotation.annotationType().getSimpleName())) {\n        foundFileSplitsAnnotation = true;\n      } else if (UseRecordReaderFromInputFormat.class.getSimpleName().equals(annotation.annotationType().getSimpleName())) {\n        foundRecordReaderAnnotation = true;\n      }\n    }\n    assertTrue(foundFileSplitsAnnotation);\n    assertTrue(foundRecordReaderAnnotation);\n  }\n","date":"2020-08-13 08:51:31","endLine":45,"groupId":"1061","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testHoodieParquetInputFormatAnnotation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7a/4f260ea4322c52eb11e18fca6f33675d8b81c3.src","preCode":"  public void testHoodieParquetInputFormatAnnotation() {\n    assertTrue(HoodieParquetInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetInputFormat.class.getAnnotations();\n    boolean found = false;\n    for (Annotation annotation : annotations) {\n      if (\"UseFileSplitsFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        found = true;\n      }\n    }\n    assertTrue(found);\n  }\n","realPath":"hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/TestAnnotation.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"M"},{"authorDate":"2020-08-13 08:51:31","commitOrder":2,"curCode":"  public void testHoodieParquetRealtimeInputFormatAnnotations() {\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseRecordReaderFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetRealtimeInputFormat.class.getAnnotations();\n    boolean foundFileSplitsAnnotation = false;\n    boolean foundRecordReaderAnnotation = false;\n    for (Annotation annotation : annotations) {\n      if (UseFileSplitsFromInputFormat.class.getSimpleName().equals(annotation.annotationType().getSimpleName())) {\n        foundFileSplitsAnnotation = true;\n      } else if (UseRecordReaderFromInputFormat.class.getSimpleName().equals(annotation.annotationType().getSimpleName())) {\n        foundRecordReaderAnnotation = true;\n      }\n    }\n    assertTrue(foundFileSplitsAnnotation);\n    assertTrue(foundRecordReaderAnnotation);\n  }\n","date":"2020-08-13 08:51:31","endLine":63,"groupId":"1061","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testHoodieParquetRealtimeInputFormatAnnotations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-hudi-10-0.7/blobInfo/CC_OUT/blobs/7a/4f260ea4322c52eb11e18fca6f33675d8b81c3.src","preCode":"  public void testHoodieParquetRealtimeInputFormatAnnotations() {\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseFileSplitsFromInputFormat.class));\n    assertTrue(HoodieParquetRealtimeInputFormat.class.isAnnotationPresent(UseRecordReaderFromInputFormat.class));\n    Annotation[] annotations = HoodieParquetRealtimeInputFormat.class.getAnnotations();\n    boolean foundFileSplitsAnnotation = false;\n    boolean foundRecordReaderAnnotation = false;\n    for (Annotation annotation : annotations) {\n      if (\"UseFileSplitsFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        foundFileSplitsAnnotation = true;\n      }\n      if (\"UseRecordReaderFromInputFormat\".equals(annotation.annotationType().getSimpleName())) {\n        foundRecordReaderAnnotation = true;\n      }\n    }\n    assertTrue(foundFileSplitsAnnotation);\n    assertTrue(foundRecordReaderAnnotation);\n  }\n","realPath":"hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/TestAnnotation.java","repoName":"hudi","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"8d0426826472f5b861b6bd7c43d8935917431467","commitMessage":"@@@[HUDI-1174] Changes for bootstrapped tables to work with presto (#1944)\n\nThe purpose of this pull request is to implement changes required on Hudi side to get Bootstrapped tables integrated with Presto. The testing was done against presto 0.232 and following changes were identified to make it work:\n\nAnnotation UseRecordReaderFromInputFormat is required on HoodieParquetInputFormat as well.  because the reading for bootstrapped tables needs to happen through record reader to be able to perform the merge. On presto side.  this annotation is already handled.\n\nWe need to internally maintain VIRTUAL_COLUMN_NAMES because presto's internal hive version hive-apache-1.2.2 has VirutalColumn as a class.  versus the one we depend on in hudi which is an enum. \n\nDependency changes in hudi-presto-bundle to avoid runtime exceptions.\n","date":"2020-08-13 08:51:31","modifiedFileCount":"3","status":"M","submitter":"Udit Mehrotra"}]
