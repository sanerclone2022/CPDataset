[{"authorTime":"2020-02-28 16:15:21","codes":[{"authorDate":"2020-02-28 16:15:21","commitOrder":1,"curCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.getDescp());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.getDescp());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","date":"2020-02-28 16:15:21","endLine":288,"groupId":"3106","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuerySubProcessInstanceByTaskId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/95/9dca21bfae4a8a8c80b0cc6a7fa64dbce5ee21.src","preCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.getDescp());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.getDescp());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"},{"authorDate":"2020-02-28 16:15:21","commitOrder":1,"curCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","date":"2020-02-28 16:15:21","endLine":385,"groupId":"2873","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryParentInstanceBySubId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/95/9dca21bfae4a8a8c80b0cc6a7fa64dbce5ee21.src","preCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"B"}],"commitId":"84409b57ee47cb8300976fd2d7cc1022bf786b20","commitMessage":"@@@fix taskinstance.isSubprocess misjudgment (#2007)\n\n* add processInstanceService UT\n\n* fix taskInstance.isSubProcess\nadd processInstanceService UT\n\n* add taskInstance.isSubProcess UT\n\n* modify taskInstance.isSubProcess UT\n\n* add license\n\n* remove author&date\n","date":"2020-02-28 16:15:21","modifiedFileCount":"2","status":"B","submitter":"Yelli"},{"authorTime":"2020-02-28 16:15:21","codes":[{"authorDate":"2020-04-10 12:06:03","commitOrder":2,"curCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.toString());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.toString());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","date":"2020-04-10 12:06:03","endLine":282,"groupId":"3106","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuerySubProcessInstanceByTaskId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/a1/b1246df1f9c809d252c3236c76849499812645.src","preCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.getDescp());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.getDescp());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-02-28 16:15:21","commitOrder":2,"curCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","date":"2020-02-28 16:15:21","endLine":385,"groupId":"2873","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryParentInstanceBySubId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/95/9dca21bfae4a8a8c80b0cc6a7fa64dbce5ee21.src","preCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"}],"commitId":"4c90f04bb22c67475b7ccdebb62414a02a28c7eb","commitMessage":"@@@Merge pull request #2380 from qiaozhanwei/dev\n\nrefactor-worker merge to dev","date":"2020-04-10 12:06:03","modifiedFileCount":"156","status":"M","submitter":"Tboy"},{"authorTime":"2020-08-13 15:37:46","codes":[{"authorDate":"2020-08-13 15:37:46","commitOrder":3,"curCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.toString());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.toString());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","date":"2020-08-13 15:37:46","endLine":331,"groupId":"3106","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuerySubProcessInstanceByTaskId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/aa/d884d50856441080f28df9b51598cad246ed50.src","preCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.toString());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.toString());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2020-08-13 15:37:46","commitOrder":3,"curCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","date":"2020-08-13 15:37:46","endLine":428,"groupId":"2873","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryParentInstanceBySubId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/aa/d884d50856441080f28df9b51598cad246ed50.src","preCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"}],"commitId":"46ab86d6dff94827bd265965f0c70b4f9c979868","commitMessage":"@@@batch copy or move process #2753 (#2884)\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* Roll back the package.json file\n\n* rerun test\n\n* revert blank\n\n* resolve conflicts\n\n* resolve conflicts\n\n* resolve ut error\n\n* resolve sonar error\n\nCo-authored-by: sunchaohe <sunzhaohe@linklogis.com>\nCo-authored-by: dailidong <dailidong66@gmail.com>","date":"2020-08-13 15:37:46","modifiedFileCount":"28","status":"M","submitter":"zixi0825"},{"authorTime":"2020-08-25 10:46:58","codes":[{"authorDate":"2020-08-13 15:37:46","commitOrder":4,"curCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.toString());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.toString());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","date":"2020-08-13 15:37:46","endLine":331,"groupId":"3106","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuerySubProcessInstanceByTaskId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/aa/d884d50856441080f28df9b51598cad246ed50.src","preCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.toString());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.toString());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"N"},{"authorDate":"2020-08-25 10:46:58","commitOrder":4,"curCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","date":"2020-08-25 10:46:58","endLine":426,"groupId":"1802","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryParentInstanceBySubId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/55/11f69aebe16f1455f03a020282de4d8bb2fbc3.src","preCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"}],"commitId":"93660f4d617d750d803cc3a7f68fe06c6f694463","commitMessage":"@@@[Feature-2154][api] Workflow version control (#3053)\n\n* [Feature][api] Workflow version control\n\n* Update messages.properties\n\n* Update messages_en_US.properties\n\n* Update messages_zh_CN.properties","date":"2020-08-25 10:46:58","modifiedFileCount":"12","status":"M","submitter":"Yichao Yang"},{"authorTime":"2020-08-25 10:46:58","codes":[{"authorDate":"2021-05-12 18:44:30","commitOrder":5,"curCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.getDesc());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.getDesc());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","date":"2021-05-12 18:44:30","endLine":354,"groupId":"196","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuerySubProcessInstanceByTaskId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/65/49890a6ed017bc37decd2c78a1d492c5c972ac.src","preCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.toString());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.toString());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"},{"authorDate":"2020-08-25 10:46:58","commitOrder":5,"curCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","date":"2020-08-25 10:46:58","endLine":426,"groupId":"1802","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryParentInstanceBySubId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/55/11f69aebe16f1455f03a020282de4d8bb2fbc3.src","preCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"N"}],"commitId":"a3e5dfc146e2ca72e75ee5b270241cea5bd7a478","commitMessage":"@@@Merge pull request #5390 from apache/json_split\n\n[Feature-4417] Process definition json split","date":"2021-05-12 18:44:30","modifiedFileCount":"113","status":"M","submitter":"Kirs"},{"authorTime":"2021-09-08 13:26:00","codes":[{"authorDate":"2021-09-08 13:26:00","commitOrder":6,"curCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        long projectCode = 1L;\n        User loginUser = getAdminUser();\n        Project project = getProject(projectCode);\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);\n\n        \r\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.getDesc());\n        taskInstance.setProcessInstanceId(1);\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.getDesc());\n        subTask.setProcessInstanceId(1);\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","date":"2021-09-08 13:26:00","endLine":369,"groupId":"10402","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuerySubProcessInstanceByTaskId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/63/0769344b136dcc161eb50f68856e2335a83f48.src","preCode":"    public void testQuerySubProcessInstanceByTaskId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findTaskInstanceById(1)).thenReturn(null);\n        Map<String, Object> taskNullRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_EXISTS, taskNullRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance taskInstance = getTaskInstance();\n        taskInstance.setTaskType(TaskType.HTTP.getDesc());\n        taskInstance.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(1)).thenReturn(taskInstance);\n        Map<String, Object> notSubprocessRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.TASK_INSTANCE_NOT_SUB_WORKFLOW_INSTANCE, notSubprocessRes.get(Constants.STATUS));\n\n        \r\n        TaskInstance subTask = getTaskInstance();\n        subTask.setTaskType(TaskType.SUB_PROCESS.getDesc());\n        subTask.setProcessInstanceId(1);\n        when(processService.findTaskInstanceById(subTask.getId())).thenReturn(subTask);\n        when(processService.findSubProcessInstance(subTask.getProcessInstanceId(), subTask.getId())).thenReturn(null);\n        Map<String, Object> subprocessNotExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subprocessNotExistRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        when(processService.findSubProcessInstance(taskInstance.getProcessInstanceId(), taskInstance.getId())).thenReturn(processInstance);\n        Map<String, Object> subprocessExistRes = processInstanceService.querySubProcessInstanceByTaskId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, subprocessExistRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2021-09-08 13:26:00","commitOrder":6,"curCode":"    public void testQueryParentInstanceBySubId() {\n        long projectCode = 1L;\n        User loginUser = getAdminUser();\n        Project project = getProject(projectCode);\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);\n\n        \r\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectCode, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","date":"2021-09-08 13:26:00","endLine":475,"groupId":"10402","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryParentInstanceBySubId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/63/0769344b136dcc161eb50f68856e2335a83f48.src","preCode":"    public void testQueryParentInstanceBySubId() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        Project project = getProject(projectName);\n        putMsg(result, Status.SUCCESS, projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> processInstanceNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_EXIST, processInstanceNullRes.get(Constants.STATUS));\n\n        \r\n        ProcessInstance processInstance = getProcessInstance();\n        processInstance.setIsSubProcess(Flag.NO);\n        when(processService.findProcessInstanceDetailById(1)).thenReturn(processInstance);\n        Map<String, Object> notSubProcessRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.PROCESS_INSTANCE_NOT_SUB_PROCESS_INSTANCE, notSubProcessRes.get(Constants.STATUS));\n\n        \r\n        processInstance.setIsSubProcess(Flag.YES);\n        when(processService.findParentProcessInstance(1)).thenReturn(null);\n        Map<String, Object> subProcessNullRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUB_PROCESS_INSTANCE_NOT_EXIST, subProcessNullRes.get(Constants.STATUS));\n\n        \r\n        when(processService.findParentProcessInstance(1)).thenReturn(processInstance);\n        Map<String, Object> successRes = processInstanceService.queryParentInstanceBySubId(loginUser, projectName, 1);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"1f838e61026fab1db479754b64c9b15690b1a80b","commitMessage":"@@@Merge pull request #6124 from apache/json_split_two\n\n[Feature][JsonSplit-api] api module controller design","date":"2021-09-08 13:26:00","modifiedFileCount":"129","status":"M","submitter":"David"}]
