[{"authorTime":"2021-02-18 15:05:49","codes":[{"authorDate":"2021-02-18 15:05:49","commitOrder":1,"curCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>(5);\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-18 15:05:49","endLine":541,"groupId":"1248","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"grantProject","params":"(UserloginUser@intuserId@StringprojectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/d1/416dfd11297dd98570c40974fd532aa79e0433.src","preCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>(5);\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"B"},{"authorDate":"2021-02-18 15:05:49","commitOrder":1,"curCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>(5);\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Resource> oldAuthorizedRes = resourceMapper.queryAuthorizedResourceList(userId);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourcesUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourcesUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-18 15:05:49","endLine":636,"groupId":"2693","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"grantResources","params":"(UserloginUser@intuserId@StringresourceIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/d1/416dfd11297dd98570c40974fd532aa79e0433.src","preCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>(5);\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Resource> oldAuthorizedRes = resourceMapper.queryAuthorizedResourceList(userId);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourcesUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourcesUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"B"}],"commitId":"a53195fa15f2a8e66db60bb1f2143ddab36adb4e","commitMessage":"@@@[Improvement-3369][api] Introduce alert group and users service interface for clear code (#4758)\n\n","date":"2021-02-18 15:05:49","modifiedFileCount":"7","status":"B","submitter":"Shiwen Cheng"},{"authorTime":"2021-02-18 23:17:01","codes":[{"authorDate":"2021-02-18 23:17:01","commitOrder":2,"curCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-18 23:17:01","endLine":540,"groupId":"1248","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"grantProject","params":"(UserloginUser@intuserId@StringprojectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/58/e4912be53d4c51fecd55b7e72ead6fa6be50ec.src","preCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>(5);\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":502,"status":"M"},{"authorDate":"2021-02-18 23:17:01","commitOrder":2,"curCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>();\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Resource> oldAuthorizedRes = resourceMapper.queryAuthorizedResourceList(userId);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourcesUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourcesUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-18 23:17:01","endLine":635,"groupId":"2693","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"grantResources","params":"(UserloginUser@intuserId@StringresourceIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/58/e4912be53d4c51fecd55b7e72ead6fa6be50ec.src","preCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>(5);\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Resource> oldAuthorizedRes = resourceMapper.queryAuthorizedResourceList(userId);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourcesUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourcesUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"M"}],"commitId":"9ae29a756f0aeed894c80f5e495d786ccf03f41f","commitMessage":"@@@[Improvement-3369][api] Introduce resources.  scheduler and taskinstance service interface for clear code (#4766)\n\n* [Improvement-3369][api] Introduce resources.  scheduler and taskinstance service interface for clear code\n","date":"2021-02-18 23:17:01","modifiedFileCount":"13","status":"M","submitter":"Shiwen Cheng"},{"authorTime":"2021-02-19 11:52:42","codes":[{"authorDate":"2021-02-18 23:17:01","commitOrder":3,"curCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-18 23:17:01","endLine":540,"groupId":"1248","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"grantProject","params":"(UserloginUser@intuserId@StringprojectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/58/e4912be53d4c51fecd55b7e72ead6fa6be50ec.src","preCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":502,"status":"N"},{"authorDate":"2021-02-19 11:52:42","commitOrder":3,"curCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>();\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Resource> oldAuthorizedRes = resourceMapper.queryAuthorizedResourceList(userId);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourceUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourceUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-19 11:52:42","endLine":634,"groupId":"2693","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"grantResources","params":"(UserloginUser@intuserId@StringresourceIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/50/ad9e6c30a086e6a49233ed411de15f8a45f0a7.src","preCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>();\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Resource> oldAuthorizedRes = resourceMapper.queryAuthorizedResourceList(userId);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourcesUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourcesUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"}],"commitId":"61397b338af4bbfb8add5fec4b765ffc1b519576","commitMessage":"@@@[Improvement][api] Introduce base service interface for clear code and unify all controllers.  services and tests of api (#4798)\n\n* [Improvement][api] Introduce base service interface for clear code\n\n* [Improvement][api] Unify all controllers.  services and tests of api\n\n* [Fix][api] Fix unit tests left over from the past\n\n* [Improvement][api] Use RegexUtils.escapeNRT instead of StringUtils.replaceNRTtoUnderline for vulnerable check","date":"2021-02-19 11:52:42","modifiedFileCount":"106","status":"M","submitter":"Shiwen Cheng"},{"authorTime":"2021-03-20 12:50:26","codes":[{"authorDate":"2021-02-18 23:17:01","commitOrder":4,"curCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-18 23:17:01","endLine":540,"groupId":"1248","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"grantProject","params":"(UserloginUser@intuserId@StringprojectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/58/e4912be53d4c51fecd55b7e72ead6fa6be50ec.src","preCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":502,"status":"N"},{"authorDate":"2021-03-20 12:50:26","commitOrder":4,"curCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>();\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Integer> resIds = resourceUserMapper.queryResourcesIdListByUserIdAndPerm(userId, Constants.AUTHORIZE_WRITABLE_PERM);\n        List<Resource> oldAuthorizedRes = CollectionUtils.isEmpty(resIds) ? new ArrayList<>() : resourceMapper.queryResourceListById(resIds);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourceUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourceUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-03-20 12:50:26","endLine":648,"groupId":"3352","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"grantResources","params":"(UserloginUser@intuserId@StringresourceIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/62/561aea66d6300b336bc2e6d370d977f607194f.src","preCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>();\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Resource> oldAuthorizedRes = resourceMapper.queryAuthorizedResourceList(userId);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourceUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourceUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"M"}],"commitId":"ba039dc252a2ddfe316297a2955f0ea9f966432a","commitMessage":"@@@[Improvement][dao] Resource features SQL slow query optimization. (#4947)\n\n* Resourse features SQL slow query optimization.\n\n* update resource mapper queryResourcePaging method.\n\n* split resource and resource_uesr sql statement.\n\n* determine the size of the collection.\n\n* update process service class code style.\n\n* update ResourceUserMapper java class code style.\n\n* add resourceUserMapper in the test config file.\n\n* solve code smell\n\n* split paging query join statement.\n\n* update ResourceUserMapper class.\n\n* remove sql join statement.\n\n* update resource test class code style.\n\n* update ResourcesServiceTest test class.\n\n* rerun ut.\n\n* update user service test class.\n\n* solve query resource list method code smell.","date":"2021-03-20 12:50:26","modifiedFileCount":"10","status":"M","submitter":"zhuangchong"},{"authorTime":"2021-05-12 18:44:30","codes":[{"authorDate":"2021-05-12 18:44:30","commitOrder":5,"curCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        \r\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            projectUserMapper.deleteProjectRelation(0, userId);\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-05-12 18:44:30","endLine":571,"groupId":"10512","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"grantProject","params":"(UserloginUser@intuserId@StringprojectIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/0d/28d68bd6ac4f8401cb3ea9bdde748d5796f4f3.src","preCode":"    public Map<String, Object> grantProject(User loginUser, int userId, String projectIds) {\n        Map<String, Object> result = new HashMap<>();\n        result.put(Constants.STATUS, false);\n\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n\n        \r\n        User tempUser = userMapper.selectById(userId);\n        if (tempUser == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n        \r\n        projectUserMapper.deleteProjectRelation(0, userId);\n\n        if (check(result, StringUtils.isEmpty(projectIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        String[] projectIdArr = projectIds.split(\",\");\n\n        for (String projectId : projectIdArr) {\n            Date now = new Date();\n            ProjectUser projectUser = new ProjectUser();\n            projectUser.setUserId(userId);\n            projectUser.setProjectId(Integer.parseInt(projectId));\n            projectUser.setPerm(7);\n            projectUser.setCreateTime(now);\n            projectUser.setUpdateTime(now);\n            projectUserMapper.insert(projectUser);\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"},{"authorDate":"2021-05-12 18:44:30","commitOrder":5,"curCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>();\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Integer> resIds = resourceUserMapper.queryResourcesIdListByUserIdAndPerm(userId, Constants.AUTHORIZE_WRITABLE_PERM);\n        List<Resource> oldAuthorizedRes = CollectionUtils.isEmpty(resIds) ? new ArrayList<>() : resourceMapper.queryResourceListById(resIds);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Long>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourceUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourceUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-05-12 18:44:30","endLine":668,"groupId":"10512","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"grantResources","params":"(UserloginUser@intuserId@StringresourceIds)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/0d/28d68bd6ac4f8401cb3ea9bdde748d5796f4f3.src","preCode":"    public Map<String, Object> grantResources(User loginUser, int userId, String resourceIds) {\n        Map<String, Object> result = new HashMap<>();\n        \r\n        if (check(result, !isAdmin(loginUser), Status.USER_NO_OPERATION_PERM)) {\n            return result;\n        }\n        User user = userMapper.selectById(userId);\n        if (user == null) {\n            putMsg(result, Status.USER_NOT_EXIST, userId);\n            return result;\n        }\n\n        Set<Integer> needAuthorizeResIds = new HashSet<>();\n        if (StringUtils.isNotBlank(resourceIds)) {\n            String[] resourceFullIdArr = resourceIds.split(\",\");\n            \r\n            for (String resourceFullId : resourceFullIdArr) {\n                String[] resourceIdArr = resourceFullId.split(\"-\");\n                for (int i = 0; i <= resourceIdArr.length - 1; i++) {\n                    int resourceIdValue = Integer.parseInt(resourceIdArr[i]);\n                    needAuthorizeResIds.add(resourceIdValue);\n                }\n            }\n        }\n\n        \r\n        List<Integer> resIds = resourceUserMapper.queryResourcesIdListByUserIdAndPerm(userId, Constants.AUTHORIZE_WRITABLE_PERM);\n        List<Resource> oldAuthorizedRes = CollectionUtils.isEmpty(resIds) ? new ArrayList<>() : resourceMapper.queryResourceListById(resIds);\n        \r\n        Set<Integer> oldAuthorizedResIds = oldAuthorizedRes.stream().map(Resource::getId).collect(Collectors.toSet());\n\n        \r\n        oldAuthorizedResIds.removeAll(needAuthorizeResIds);\n\n        if (CollectionUtils.isNotEmpty(oldAuthorizedResIds)) {\n\n            \r\n            List<Map<String, Object>> list = processDefinitionMapper.listResourcesByUser(userId);\n            Map<Integer, Set<Integer>> resourceProcessMap = ResourceProcessDefinitionUtils.getResourceProcessDefinitionMap(list);\n            Set<Integer> resourceIdSet = resourceProcessMap.keySet();\n\n            resourceIdSet.retainAll(oldAuthorizedResIds);\n            if (CollectionUtils.isNotEmpty(resourceIdSet)) {\n                logger.error(\"can't be deleted,because it is used of process definition\");\n                for (Integer resId : resourceIdSet) {\n                    logger.error(\"resource id:{} is used of process definition {}\", resId, resourceProcessMap.get(resId));\n                }\n                putMsg(result, Status.RESOURCE_IS_USED);\n                return result;\n            }\n\n        }\n\n        resourceUserMapper.deleteResourceUser(userId, 0);\n\n        if (check(result, StringUtils.isEmpty(resourceIds), Status.SUCCESS)) {\n            return result;\n        }\n\n        for (int resourceIdValue : needAuthorizeResIds) {\n            Resource resource = resourceMapper.selectById(resourceIdValue);\n            if (resource == null) {\n                putMsg(result, Status.RESOURCE_NOT_EXIST);\n                return result;\n            }\n\n            Date now = new Date();\n            ResourcesUser resourcesUser = new ResourcesUser();\n            resourcesUser.setUserId(userId);\n            resourcesUser.setResourcesId(resourceIdValue);\n            if (resource.isDirectory()) {\n                resourcesUser.setPerm(Constants.AUTHORIZE_READABLE_PERM);\n            } else {\n                resourcesUser.setPerm(Constants.AUTHORIZE_WRITABLE_PERM);\n            }\n\n            resourcesUser.setCreateTime(now);\n            resourcesUser.setUpdateTime(now);\n            resourceUserMapper.insert(resourcesUser);\n\n        }\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/UsersServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"M"}],"commitId":"a3e5dfc146e2ca72e75ee5b270241cea5bd7a478","commitMessage":"@@@Merge pull request #5390 from apache/json_split\n\n[Feature-4417] Process definition json split","date":"2021-05-12 18:44:30","modifiedFileCount":"113","status":"M","submitter":"Kirs"}]
