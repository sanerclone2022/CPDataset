[{"authorTime":"2021-03-03 08:52:45","codes":[{"authorDate":"2021-03-03 08:52:45","commitOrder":1,"curCode":"    public void testBasicFailure() throws Exception {\n        testBasicInit();\n        ProcessInstance dependentProcessInstance =\n                getProcessInstanceForFindLastRunningProcess(200, 2, ExecutionStatus.SUCCESS);\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2), Mockito.any(), Mockito.any()))\n                .thenReturn(dependentProcessInstance);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", dependentProcessInstance),\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.SUCCESS, \"B\", dependentProcessInstance)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.FAILURE, taskExecThread.getTaskInstance().getState());\n    }\n","date":"2021-03-03 08:52:45","endLine":177,"groupId":"2159","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/48/a0750666787a6b82bcf7aa6bf30d2e98f8e0ec.src","preCode":"    public void testBasicFailure() throws Exception {\n        testBasicInit();\n        ProcessInstance dependentProcessInstance =\n                getProcessInstanceForFindLastRunningProcess(200, 2, ExecutionStatus.SUCCESS);\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2), Mockito.any(), Mockito.any()))\n                .thenReturn(dependentProcessInstance);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", dependentProcessInstance),\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.SUCCESS, \"B\", dependentProcessInstance)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.FAILURE, taskExecThread.getTaskInstance().getState());\n    }\n","realPath":"dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"},{"authorDate":"2021-03-03 08:52:45","commitOrder":1,"curCode":"    public void testDependentRelation() throws Exception {\n        DependentTaskModel dependentTaskModel1 = new DependentTaskModel();\n        dependentTaskModel1.setRelation(DependentRelation.AND);\n        dependentTaskModel1.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3, \"B\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        DependentTaskModel dependentTaskModel2 = new DependentTaskModel();\n        dependentTaskModel2.setRelation(DependentRelation.OR);\n        dependentTaskModel2.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3, \"C\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        \r\n\r\n\r\n\n        DependentParameters dependentParameters = new DependentParameters();\n        dependentParameters.setRelation(DependentRelation.OR);\n        dependentParameters.setDependTaskList(Stream.of(\n                dependentTaskModel1,\n                dependentTaskModel2\n        ).collect(Collectors.toList()));\n\n        TaskNode taskNode = getDependantTaskNode();\n        taskNode.setDependence(JSONUtils.toJsonString(dependentParameters));\n        setupTaskInstance(taskNode);\n\n        ProcessInstance processInstance200 =\n                getProcessInstanceForFindLastRunningProcess(200, 2, ExecutionStatus.FAILURE);\n        ProcessInstance processInstance300 =\n                getProcessInstanceForFindLastRunningProcess(300, 3, ExecutionStatus.SUCCESS);\n\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance200);\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(3), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance300);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", processInstance200)\n                ).collect(Collectors.toList()));\n        Mockito.when(processService\n                .findValidTaskListByProcessId(300))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(3000, ExecutionStatus.SUCCESS, \"B\", processInstance300),\n                        getTaskInstanceForValidTaskList(3001, ExecutionStatus.SUCCESS, \"C\", processInstance300)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.SUCCESS, taskExecThread.getTaskInstance().getState());\n    }\n","date":"2021-03-03 08:52:45","endLine":239,"groupId":"2159","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDependentRelation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/48/a0750666787a6b82bcf7aa6bf30d2e98f8e0ec.src","preCode":"    public void testDependentRelation() throws Exception {\n        DependentTaskModel dependentTaskModel1 = new DependentTaskModel();\n        dependentTaskModel1.setRelation(DependentRelation.AND);\n        dependentTaskModel1.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3, \"B\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        DependentTaskModel dependentTaskModel2 = new DependentTaskModel();\n        dependentTaskModel2.setRelation(DependentRelation.OR);\n        dependentTaskModel2.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3, \"C\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        \r\n\r\n\r\n\n        DependentParameters dependentParameters = new DependentParameters();\n        dependentParameters.setRelation(DependentRelation.OR);\n        dependentParameters.setDependTaskList(Stream.of(\n                dependentTaskModel1,\n                dependentTaskModel2\n        ).collect(Collectors.toList()));\n\n        TaskNode taskNode = getDependantTaskNode();\n        taskNode.setDependence(JSONUtils.toJsonString(dependentParameters));\n        setupTaskInstance(taskNode);\n\n        ProcessInstance processInstance200 =\n                getProcessInstanceForFindLastRunningProcess(200, 2, ExecutionStatus.FAILURE);\n        ProcessInstance processInstance300 =\n                getProcessInstanceForFindLastRunningProcess(300, 3, ExecutionStatus.SUCCESS);\n\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance200);\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(3), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance300);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", processInstance200)\n                ).collect(Collectors.toList()));\n        Mockito.when(processService\n                .findValidTaskListByProcessId(300))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(3000, ExecutionStatus.SUCCESS, \"B\", processInstance300),\n                        getTaskInstanceForValidTaskList(3001, ExecutionStatus.SUCCESS, \"C\", processInstance300)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.SUCCESS, taskExecThread.getTaskInstance().getState());\n    }\n","realPath":"dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"}],"commitId":"ccd8aaebab635174c0b8dccbd49f7415c43cd405","commitMessage":"@@@[Improvement][Server] Improve dependent task unit tests (#4911)\n\n","date":"2021-03-03 08:52:45","modifiedFileCount":"1","status":"B","submitter":"Shiwen Cheng"},{"authorTime":"2021-05-12 18:44:30","codes":[{"authorDate":"2021-05-12 18:44:30","commitOrder":2,"curCode":"    public void testBasicFailure() {\n        testBasicInit();\n        ProcessInstance dependentProcessInstance =\n                getProcessInstanceForFindLastRunningProcess(200, ExecutionStatus.SUCCESS);\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2L), Mockito.any(), Mockito.any()))\n                .thenReturn(dependentProcessInstance);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", dependentProcessInstance),\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.SUCCESS, \"B\", dependentProcessInstance)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.FAILURE, taskExecThread.getTaskInstance().getState());\n    }\n","date":"2021-05-12 18:44:30","endLine":186,"groupId":"2159","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/4f/80f5d36b6fd324a45d8f37ee4bd94a3cd33194.src","preCode":"    public void testBasicFailure() throws Exception {\n        testBasicInit();\n        ProcessInstance dependentProcessInstance =\n                getProcessInstanceForFindLastRunningProcess(200, 2, ExecutionStatus.SUCCESS);\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2), Mockito.any(), Mockito.any()))\n                .thenReturn(dependentProcessInstance);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", dependentProcessInstance),\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.SUCCESS, \"B\", dependentProcessInstance)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.FAILURE, taskExecThread.getTaskInstance().getState());\n    }\n","realPath":"dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2021-05-12 18:44:30","commitOrder":2,"curCode":"    public void testDependentRelation() {\n        DependentTaskModel dependentTaskModel1 = new DependentTaskModel();\n        dependentTaskModel1.setRelation(DependentRelation.AND);\n        dependentTaskModel1.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2L, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3L, \"B\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        DependentTaskModel dependentTaskModel2 = new DependentTaskModel();\n        dependentTaskModel2.setRelation(DependentRelation.OR);\n        dependentTaskModel2.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2L, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3L, \"C\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        \r\n\r\n\r\n\n        DependentParameters dependentParameters = new DependentParameters();\n        dependentParameters.setRelation(DependentRelation.OR);\n        dependentParameters.setDependTaskList(Stream.of(\n                dependentTaskModel1,\n                dependentTaskModel2\n        ).collect(Collectors.toList()));\n\n        TaskNode taskNode = getDependantTaskNode();\n        taskNode.setDependence(JSONUtils.toJsonString(dependentParameters));\n        setupTaskInstance(taskNode);\n\n        ProcessInstance processInstance200 =\n                getProcessInstanceForFindLastRunningProcess(200, ExecutionStatus.FAILURE);\n        ProcessInstance processInstance300 =\n                getProcessInstanceForFindLastRunningProcess(300, ExecutionStatus.SUCCESS);\n\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2L), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance200);\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(3L), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance300);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", processInstance200)\n                ).collect(Collectors.toList()));\n        Mockito.when(processService\n                .findValidTaskListByProcessId(300))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(3000, ExecutionStatus.SUCCESS, \"B\", processInstance300),\n                        getTaskInstanceForValidTaskList(3001, ExecutionStatus.SUCCESS, \"C\", processInstance300)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.SUCCESS, taskExecThread.getTaskInstance().getState());\n    }\n","date":"2021-05-12 18:44:30","endLine":248,"groupId":"2159","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDependentRelation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/4f/80f5d36b6fd324a45d8f37ee4bd94a3cd33194.src","preCode":"    public void testDependentRelation() throws Exception {\n        DependentTaskModel dependentTaskModel1 = new DependentTaskModel();\n        dependentTaskModel1.setRelation(DependentRelation.AND);\n        dependentTaskModel1.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3, \"B\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        DependentTaskModel dependentTaskModel2 = new DependentTaskModel();\n        dependentTaskModel2.setRelation(DependentRelation.OR);\n        dependentTaskModel2.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3, \"C\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        \r\n\r\n\r\n\n        DependentParameters dependentParameters = new DependentParameters();\n        dependentParameters.setRelation(DependentRelation.OR);\n        dependentParameters.setDependTaskList(Stream.of(\n                dependentTaskModel1,\n                dependentTaskModel2\n        ).collect(Collectors.toList()));\n\n        TaskNode taskNode = getDependantTaskNode();\n        taskNode.setDependence(JSONUtils.toJsonString(dependentParameters));\n        setupTaskInstance(taskNode);\n\n        ProcessInstance processInstance200 =\n                getProcessInstanceForFindLastRunningProcess(200, 2, ExecutionStatus.FAILURE);\n        ProcessInstance processInstance300 =\n                getProcessInstanceForFindLastRunningProcess(300, 3, ExecutionStatus.SUCCESS);\n\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance200);\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(3), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance300);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", processInstance200)\n                ).collect(Collectors.toList()));\n        Mockito.when(processService\n                .findValidTaskListByProcessId(300))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(3000, ExecutionStatus.SUCCESS, \"B\", processInstance300),\n                        getTaskInstanceForValidTaskList(3001, ExecutionStatus.SUCCESS, \"C\", processInstance300)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.SUCCESS, taskExecThread.getTaskInstance().getState());\n    }\n","realPath":"dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"a3e5dfc146e2ca72e75ee5b270241cea5bd7a478","commitMessage":"@@@Merge pull request #5390 from apache/json_split\n\n[Feature-4417] Process definition json split","date":"2021-05-12 18:44:30","modifiedFileCount":"113","status":"M","submitter":"Kirs"},{"authorTime":"2021-09-06 16:57:02","codes":[{"authorDate":"2021-09-06 16:57:02","commitOrder":3,"curCode":"    public void testBasicFailure() {\n        testBasicInit();\n        ProcessInstance dependentProcessInstance =\n                getProcessInstanceForFindLastRunningProcess(200, ExecutionStatus.SUCCESS);\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2L), Mockito.any(), Mockito.any()))\n                .thenReturn(dependentProcessInstance);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", dependentProcessInstance),\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.SUCCESS, \"B\", dependentProcessInstance)\n                ).collect(Collectors.toList()));\n    }\n","date":"2021-09-06 16:57:02","endLine":178,"groupId":"1034","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBasicFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/9a/1861388d08b09773c19ae83f062a88c43572ee.src","preCode":"    public void testBasicFailure() {\n        testBasicInit();\n        ProcessInstance dependentProcessInstance =\n                getProcessInstanceForFindLastRunningProcess(200, ExecutionStatus.SUCCESS);\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2L), Mockito.any(), Mockito.any()))\n                .thenReturn(dependentProcessInstance);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", dependentProcessInstance),\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.SUCCESS, \"B\", dependentProcessInstance)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.FAILURE, taskExecThread.getTaskInstance().getState());\n    }\n","realPath":"dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2021-09-06 16:57:02","commitOrder":3,"curCode":"    public void testDependentRelation() {\n        DependentTaskModel dependentTaskModel1 = new DependentTaskModel();\n        dependentTaskModel1.setRelation(DependentRelation.AND);\n        dependentTaskModel1.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2L, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3L, \"B\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        DependentTaskModel dependentTaskModel2 = new DependentTaskModel();\n        dependentTaskModel2.setRelation(DependentRelation.OR);\n        dependentTaskModel2.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2L, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3L, \"C\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        \r\n\r\n\r\n\n        DependentParameters dependentParameters = new DependentParameters();\n        dependentParameters.setRelation(DependentRelation.OR);\n        dependentParameters.setDependTaskList(Stream.of(\n                dependentTaskModel1,\n                dependentTaskModel2\n        ).collect(Collectors.toList()));\n\n        TaskNode taskNode = getDependantTaskNode();\n        taskNode.setDependence(JSONUtils.toJsonString(dependentParameters));\n        setupTaskInstance(taskNode);\n\n        ProcessInstance processInstance200 =\n                getProcessInstanceForFindLastRunningProcess(200, ExecutionStatus.FAILURE);\n        ProcessInstance processInstance300 =\n                getProcessInstanceForFindLastRunningProcess(300, ExecutionStatus.SUCCESS);\n\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2L), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance200);\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(3L), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance300);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", processInstance200)\n                ).collect(Collectors.toList()));\n        Mockito.when(processService\n                .findValidTaskListByProcessId(300))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(3000, ExecutionStatus.SUCCESS, \"B\", processInstance300),\n                        getTaskInstanceForValidTaskList(3001, ExecutionStatus.SUCCESS, \"C\", processInstance300)\n                ).collect(Collectors.toList()));\n\n        \r\n        \r\n        \r\n    }\n","date":"2021-09-06 16:57:02","endLine":240,"groupId":"1034","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testDependentRelation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/9a/1861388d08b09773c19ae83f062a88c43572ee.src","preCode":"    public void testDependentRelation() {\n        DependentTaskModel dependentTaskModel1 = new DependentTaskModel();\n        dependentTaskModel1.setRelation(DependentRelation.AND);\n        dependentTaskModel1.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2L, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3L, \"B\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        DependentTaskModel dependentTaskModel2 = new DependentTaskModel();\n        dependentTaskModel2.setRelation(DependentRelation.OR);\n        dependentTaskModel2.setDependItemList(Stream.of(\n                getDependentItemFromTaskNode(2L, \"A\", \"today\", \"day\"),\n                getDependentItemFromTaskNode(3L, \"C\", \"today\", \"day\")\n        ).collect(Collectors.toList()));\n\n        \r\n\r\n\r\n\n        DependentParameters dependentParameters = new DependentParameters();\n        dependentParameters.setRelation(DependentRelation.OR);\n        dependentParameters.setDependTaskList(Stream.of(\n                dependentTaskModel1,\n                dependentTaskModel2\n        ).collect(Collectors.toList()));\n\n        TaskNode taskNode = getDependantTaskNode();\n        taskNode.setDependence(JSONUtils.toJsonString(dependentParameters));\n        setupTaskInstance(taskNode);\n\n        ProcessInstance processInstance200 =\n                getProcessInstanceForFindLastRunningProcess(200, ExecutionStatus.FAILURE);\n        ProcessInstance processInstance300 =\n                getProcessInstanceForFindLastRunningProcess(300, ExecutionStatus.SUCCESS);\n\n        \r\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(2L), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance200);\n        Mockito.when(processService\n                .findLastRunningProcess(Mockito.eq(3L), Mockito.any(), Mockito.any()))\n                .thenReturn(processInstance300);\n\n        \r\n        Mockito.when(processService\n                .findValidTaskListByProcessId(200))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(2000, ExecutionStatus.FAILURE, \"A\", processInstance200)\n                ).collect(Collectors.toList()));\n        Mockito.when(processService\n                .findValidTaskListByProcessId(300))\n                .thenReturn(Stream.of(\n                        getTaskInstanceForValidTaskList(3000, ExecutionStatus.SUCCESS, \"B\", processInstance300),\n                        getTaskInstanceForValidTaskList(3001, ExecutionStatus.SUCCESS, \"C\", processInstance300)\n                ).collect(Collectors.toList()));\n\n        DependentTaskExecThread taskExecThread = new DependentTaskExecThread(taskInstance);\n        taskExecThread.call();\n        Assert.assertEquals(ExecutionStatus.SUCCESS, taskExecThread.getTaskInstance().getState());\n    }\n","realPath":"dolphinscheduler-server/src/test/java/org/apache/dolphinscheduler/server/master/DependentTaskTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"e34c65d5a676ad4ff9b8eca5c5446d578b0b39b3","commitMessage":"@@@[Feature-4355][Master-Worker-API] improvements of master and scheduler module (#6095)\n\n* [Feature-4355][Master-Worker-API] improvements of master and scheduler module (#6085)\n\n* master refactor:\n   1. spi for task submit and other actions(pause.  kill)\n   2. remove threads for process instance and task instance.\n   3. add events for process instance and task instance\n\n* ut npe\n\n* add try catch\n\n* code style\n\n* fix critical bugs\n\n* fix critical bugs\n\n* fix critical bugs\n\n* fix critical bugs","date":"2021-09-06 16:57:02","modifiedFileCount":"41","status":"M","submitter":"OS"}]
