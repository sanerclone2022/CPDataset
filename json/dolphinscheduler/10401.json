[{"authorTime":"2020-02-20 13:25:41","codes":[{"authorDate":"2020-02-20 13:25:41","commitOrder":2,"curCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser,null,projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","date":"2020-02-20 13:25:41","endLine":144,"groupId":"2254","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/18/f1d6947f15208a15b53276e128f3f0f6a42bee.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser,null,projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2020-02-20 13:25:41","commitOrder":2,"curCode":"    public void queryTaskListPaging(){\n\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser,null,projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n    }\n","date":"2020-02-20 13:25:41","endLine":129,"groupId":"229","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/eb/b61395776a4521b55cf955e75d62016e6878f2.src","preCode":"    public void queryTaskListPaging(){\n\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser,null,projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"MB"}],"commitId":"619fb30c503ef5039657a898c42b63ebc5af851e","commitMessage":"@@@#1310 add executor user to the process instance & task instance pages (#1973)\n\n* add executor name in processDefinitionInstance & taskInstance\n\n* modify processInstanceTest\n\n* modify processInstanceTest\n\n* #1310 add executor user to the process instance & task instance pages\n\n* add processInstanceUT & taskInstanceUT\n\n* add processInstanceUT & taskInstanceUT\n\n* modify processInstanceTest & taskInstanceTest\n\n* Remove duplicate code\n\n* add userServiceUT\n","date":"2020-02-20 13:25:41","modifiedFileCount":"15","status":"M","submitter":"Yelli"},{"authorTime":"2020-08-13 15:37:46","codes":[{"authorDate":"2020-08-13 15:37:46","commitOrder":3,"curCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","date":"2020-08-13 15:37:46","endLine":164,"groupId":"2254","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/aa/d884d50856441080f28df9b51598cad246ed50.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-08-13 15:37:46","commitOrder":3,"curCode":"    public void queryTaskListPaging(){\n\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser,null,projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n    }\n","date":"2020-08-13 15:37:46","endLine":129,"groupId":"229","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/8e/220345bf0a9406b6b5af1c9aa069ab6bb6e459.src","preCode":"    public void queryTaskListPaging(){\n\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>(5);\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser,null,projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser,project,projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"46ab86d6dff94827bd265965f0c70b4f9c979868","commitMessage":"@@@batch copy or move process #2753 (#2884)\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process sovle code smell\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* batch copy or move process\n\n* Roll back the package.json file\n\n* rerun test\n\n* revert blank\n\n* resolve conflicts\n\n* resolve conflicts\n\n* resolve ut error\n\n* resolve sonar error\n\nCo-authored-by: sunchaohe <sunzhaohe@linklogis.com>\nCo-authored-by: dailidong <dailidong66@gmail.com>","date":"2020-08-13 15:37:46","modifiedFileCount":"28","status":"M","submitter":"zixi0825"},{"authorTime":"2020-08-25 10:51:02","codes":[{"authorDate":"2020-08-13 15:37:46","commitOrder":4,"curCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","date":"2020-08-13 15:37:46","endLine":164,"groupId":"2254","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/aa/d884d50856441080f28df9b51598cad246ed50.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"},{"authorDate":"2020-08-25 10:51:02","commitOrder":4,"curCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","date":"2020-08-25 10:51:02","endLine":149,"groupId":"229","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/16/547b3fd70df9d028e9e17e2ff7887c496543ab.src","preCode":"    public void queryTaskListPaging() {\n\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"f7c4b0f3514284941f8e5625bb0d7e836e94b512","commitMessage":"@@@[Improvement-3556] remove unnecessary try catch.  and do the unittest ? (#3563)\n\n* [Improvement-3556] remove unnecessary try catch.  and do the unittest to full coverage.\n\n* [Improvement-3556] add REQUEST_PARAMS_NOT_VALID_ERROR res when param is not valid\n\n* [fix-3548] Monitor gauge chart display blank with same pid\n\nCo-authored-by: wanggang <wanggy01@servyou.com.cn>","date":"2020-08-25 10:51:02","modifiedFileCount":"2","status":"M","submitter":"geosmart"},{"authorTime":"2020-11-16 20:07:06","codes":[{"authorDate":"2020-08-13 15:37:46","commitOrder":5,"curCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","date":"2020-08-13 15:37:46","endLine":164,"groupId":"2254","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/aa/d884d50856441080f28df9b51598cad246ed50.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"},{"authorDate":"2020-11-16 20:07:06","commitOrder":5,"curCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","date":"2020-11-16 20:07:06","endLine":150,"groupId":"1603","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/19/9b34cc1bdb28212545b191cd98033db7f2dc1b.src","preCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"1eecbb1ef7d35c7d1363b1bcafc3367bb25caa8a","commitMessage":"@@@[Improvement-3767][api] Task instance supports query by process instance name (#3825)\n\n* Task instance supports query by process instance name.\n\n* add test code checkstyle.\n\n* add test param.\n\n* resolve the sonar duplication check.\n\n* solve logger single-line string exceeds 200 characters.\n\n* resolve the sonar check.\n\n* Resolve code conflicts.\n\nCo-authored-by: zhuangchong <zhuangchong8@163.com>","date":"2020-11-16 20:07:06","modifiedFileCount":"6","status":"M","submitter":"zhuangchong"},{"authorTime":"2021-02-25 09:16:27","codes":[{"authorDate":"2021-02-25 09:16:27","commitOrder":6,"curCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> dataParameterRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"20200101 00:00:00\",\n                \"20200102 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(null), eq(null))).thenReturn(pageReturn);\n        successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"\",\n                \"\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","date":"2021-02-25 09:16:27","endLine":183,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/1a/fad6ec424bb7a90c3c9759a54c83570415ee44.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2021-02-25 09:16:27","commitOrder":6,"curCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"20200101 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","date":"2021-02-25 09:16:27","endLine":159,"groupId":"1603","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/62/b0b73da3b25fc873c5dc30523f482d50ccac52.src","preCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"ffe215f6852e2d4cd36e7c3ceb60899ce182e5a8","commitMessage":"@@@[Fix-4816][API] The API calls the workflow instance query interface and queries all the data when the time parameter is wrong  (#4817)\n\n* fix process instance query paramter is date. date parse error.\n\n* solve code duplication.\n\n* update checkAndParseDateParameter call parameters.\n\n* update instance service test.\n\n* update check and parse date parameters method.\n\n* update BaseService class code style.\n\n* Update check data parameter result judgment condition.","date":"2021-02-25 09:16:27","modifiedFileCount":"7","status":"M","submitter":"zhuangchong"},{"authorTime":"2021-05-12 18:44:30","codes":[{"authorDate":"2021-05-12 18:44:30","commitOrder":7,"curCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processDefineMapper.selectById(Mockito.anyInt())).thenReturn(getProcessDefinition());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class)\n                , Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(),\n                eq(\"192.168.xx.xx\"), Mockito.any(), Mockito.any())).thenReturn(pageReturn);\n\n        Map<String, Object> dataParameterRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"20200101 00:00:00\",\n                \"20200102 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(null), eq(null))).thenReturn(pageReturn);\n        successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"\",\n                \"\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","date":"2021-05-12 18:44:30","endLine":194,"groupId":"195","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/65/49890a6ed017bc37decd2c78a1d492c5c972ac.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> dataParameterRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"20200101 00:00:00\",\n                \"20200102 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(null), eq(null))).thenReturn(pageReturn);\n        successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"\",\n                \"\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-05-12 18:44:30","commitOrder":7,"curCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"20200101 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","date":"2021-05-12 18:44:30","endLine":159,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/32/de49fc3e3357330d3e0075fc4d70e563e1e8c0.src","preCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"20200101 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getId()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"a3e5dfc146e2ca72e75ee5b270241cea5bd7a478","commitMessage":"@@@Merge pull request #5390 from apache/json_split\n\n[Feature-4417] Process definition json split","date":"2021-05-12 18:44:30","modifiedFileCount":"113","status":"M","submitter":"Kirs"},{"authorTime":"2021-08-03 12:30:55","codes":[{"authorDate":"2021-08-03 12:30:55","commitOrder":8,"curCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Result proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(),(int) proejctAuthFailRes.getCode());\n\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processDefineMapper.selectById(Mockito.anyInt())).thenReturn(getProcessDefinition());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class)\n                , Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(),\n                eq(\"192.168.xx.xx\"), Mockito.any(), Mockito.any())).thenReturn(pageReturn);\n\n        Result dataParameterRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"20200101 00:00:00\",\n                \"20200102 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(),(int) dataParameterRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Result successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(null), eq(null))).thenReturn(pageReturn);\n        successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"\",\n                \"\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(),  (int)successRes.getCode());\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Result executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorExistRes.getCode());\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Result executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorEmptyRes.getCode());\n\n    }\n","date":"2021-08-03 12:30:55","endLine":194,"groupId":"195","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/40/78277f89898fc391bf1b02717510f0fdc3a169.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processDefineMapper.selectById(Mockito.anyInt())).thenReturn(getProcessDefinition());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class)\n                , Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(),\n                eq(\"192.168.xx.xx\"), Mockito.any(), Mockito.any())).thenReturn(pageReturn);\n\n        Map<String, Object> dataParameterRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"20200101 00:00:00\",\n                \"20200102 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Map<String, Object> successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(null), eq(null))).thenReturn(pageReturn);\n        successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"\",\n                \"\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorExistRes.get(Constants.STATUS));\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-08-03 12:30:55","commitOrder":8,"curCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Result proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(), (int)proejctAuthFailRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Result dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"20200101 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)dataParameterRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n\n        Result successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Result executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorEmptyRes.getCode());\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Result executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(),(int)executorNullRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Result executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(),(int) executorNullDateRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Result executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)executorErrorStartDateRes.getCode());\n        Result executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)executorErrorEndDateRes.getCode());\n    }\n","date":"2021-08-03 12:30:55","endLine":161,"groupId":"1430","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/3b/5006cdf59db0f7e8551c79449f05bbf8db33bf.src","preCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Map<String, Object> proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT, proejctAuthFailRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Map<String, Object> dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"20200101 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, dataParameterRes.get(Constants.STATUS));\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Map<String, Object> successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Map<String, Object> executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorEmptyRes.get(Constants.STATUS));\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Map<String, Object> executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS, executorNullDateRes.get(Constants.STATUS));\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Map<String, Object> executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorStartDateRes.get(Constants.STATUS));\n        Map<String, Object> executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR, executorErrorEndDateRes.get(Constants.STATUS));\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"f5675170311ccc3cc8e6f88e74c956220297e8cd","commitMessage":"@@@[Improvement-5880][api] Optimized data structure of pagination query API results (#5895)\n\n* [5880][refactor]Optimized data structure of pagination query API results\n- refactor PageInfo and delete returnDataListPaging in API\n- modify the related Controller and Service and the corresponding Test\n\n* Merge branch 'dev' of github.com:apache/dolphinscheduler into dev\n\n\u0001 Conflicts:\n\u0001\tdolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ProcessDefinitionServiceImpl.java\n\nCo-authored-by: ??? <sorea1k@163.com>","date":"2021-08-03 12:30:55","modifiedFileCount":"83","status":"M","submitter":"soreak"},{"authorTime":"2021-09-08 13:26:00","codes":[{"authorDate":"2021-09-08 13:26:00","commitOrder":9,"curCode":"    public void testQueryProcessInstanceList() {\n        long projectCode = 1L;\n        User loginUser = getAdminUser();\n        Project project = getProject(projectCode);\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);\n\n        \r\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        Result proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectCode, 46, \"2020-01-01 00:00:00\",\n            \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n            \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(), (int) proejctAuthFailRes.getCode());\n\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n\n        \r\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        when(processDefineMapper.selectById(Mockito.anyInt())).thenReturn(getProcessDefinition());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class)\n            , Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(),\n            eq(\"192.168.xx.xx\"), Mockito.any(), Mockito.any())).thenReturn(pageReturn);\n\n        Result dataParameterRes = processInstanceService.queryProcessInstanceList(loginUser, projectCode, 1, \"20200101 00:00:00\",\n            \"20200102 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n            \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int) dataParameterRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectCode);\n\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n            eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n\n        Result successRes = processInstanceService.queryProcessInstanceList(loginUser, projectCode, 1, \"2020-01-01 00:00:00\",\n            \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n            \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n            eq(\"192.168.xx.xx\"), eq(null), eq(null))).thenReturn(pageReturn);\n        successRes = processInstanceService.queryProcessInstanceList(loginUser, projectCode, 1, \"\",\n            \"\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n            \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Result executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectCode, 1, \"2020-01-01 00:00:00\",\n            \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n            \"192.168.xx.xx\", 1, 10);\n\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorExistRes.getCode());\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(0), Mockito.any(),\n            eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Result executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectCode, 1, \"2020-01-01 00:00:00\",\n            \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n            \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorEmptyRes.getCode());\n\n    }\n","date":"2021-09-08 13:26:00","endLine":206,"groupId":"10401","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryProcessInstanceList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/63/0769344b136dcc161eb50f68856e2335a83f48.src","preCode":"    public void testQueryProcessInstanceList() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Result proejctAuthFailRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 46, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"test_user\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(),(int) proejctAuthFailRes.getCode());\n\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        List<ProcessInstance> processInstanceList = new ArrayList<>();\n        Page<ProcessInstance> pageReturn = new Page<>(1, 10);\n        processInstanceList.add(processInstance);\n        pageReturn.setRecords(processInstanceList);\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(processDefineMapper.selectById(Mockito.anyInt())).thenReturn(getProcessDefinition());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class)\n                , Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any(),\n                eq(\"192.168.xx.xx\"), Mockito.any(), Mockito.any())).thenReturn(pageReturn);\n\n        Result dataParameterRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"20200101 00:00:00\",\n                \"20200102 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(),(int) dataParameterRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n\n        when(projectMapper.queryByName(projectName)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        Result successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(-1), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(null), eq(null))).thenReturn(pageReturn);\n        successRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"\",\n                \"\", \"\", loginUser.getUserName(), ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(),  (int)successRes.getCode());\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Result executorExistRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"admin\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorExistRes.getCode());\n\n        \r\n        when(processInstanceMapper.queryProcessInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1L), eq(\"\"), eq(0), Mockito.any(),\n                eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Result executorEmptyRes = processInstanceService.queryProcessInstanceList(loginUser, projectName, 1, \"2020-01-01 00:00:00\",\n                \"2020-01-02 00:00:00\", \"\", \"\", ExecutionStatus.SUBMITTED_SUCCESS,\n                \"192.168.xx.xx\", 1, 10);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorEmptyRes.getCode());\n\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2021-09-08 13:26:00","commitOrder":9,"curCode":"    public void queryTaskListPaging() {\n        long projectCode = 1L;\n        User loginUser = getAdminUser();\n        Project project = getProject(projectCode);\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectCode);\n\n        \r\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        Result projectAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(), (int)projectAuthFailRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectCode);\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        Result dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 1, \"\", \"\",\n                \"test_user\", \"20200101 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)dataParameterRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectCode);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByCode(projectCode)).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectCode)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n        Result successRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Result executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorEmptyRes.getCode());\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Result executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(),(int)executorNullRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Result executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(),(int) executorNullDateRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n\n        Result executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)executorErrorStartDateRes.getCode());\n        Result executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectCode, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)executorErrorEndDateRes.getCode());\n    }\n","date":"2021-09-08 13:26:00","endLine":161,"groupId":"10401","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"queryTaskListPaging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/08/fdf5fe51927afaa3329a220d1b61ff9f99499e.src","preCode":"    public void queryTaskListPaging() {\n        String projectName = \"project_test1\";\n        User loginUser = getAdminUser();\n        Map<String, Object> result = new HashMap<>();\n        putMsg(result, Status.PROJECT_NOT_FOUNT, projectName);\n\n        \r\n        when(projectMapper.queryByName(projectName)).thenReturn(null);\n        when(projectService.checkProjectAndAuth(loginUser, null, projectName)).thenReturn(result);\n        Result proejctAuthFailRes = taskInstanceService.queryTaskListPaging(loginUser, \"project_test1\", 0, \"\", \"\",\n                \"test_user\", \"2019-02-26 19:48:00\", \"2019-02-26 19:48:22\", \"\", null, \"\", 1, 20);\n        Assert.assertEquals(Status.PROJECT_NOT_FOUNT.getCode(), (int)proejctAuthFailRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Project project = getProject(projectName);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        Result dataParameterRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"20200101 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)dataParameterRes.getCode());\n\n        \r\n        putMsg(result, Status.SUCCESS, projectName);\n        Date start = DateUtils.getScheduleDate(\"2020-01-01 00:00:00\");\n        Date end = DateUtils.getScheduleDate(\"2020-01-02 00:00:00\");\n        ProcessInstance processInstance = getProcessInstance();\n        TaskInstance taskInstance = getTaskInstance();\n        List<TaskInstance> taskInstanceList = new ArrayList<>();\n        Page<TaskInstance> pageReturn = new Page<>(1, 10);\n        taskInstanceList.add(taskInstance);\n        pageReturn.setRecords(taskInstanceList);\n        when(projectMapper.queryByName(Mockito.anyString())).thenReturn(project);\n        when(projectService.checkProjectAndAuth(loginUser, project, projectName)).thenReturn(result);\n        when(usersService.queryUser(loginUser.getId())).thenReturn(loginUser);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(loginUser.getId());\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        when(usersService.queryUser(processInstance.getExecutorId())).thenReturn(loginUser);\n        when(processService.findProcessInstanceDetailById(taskInstance.getProcessInstanceId())).thenReturn(processInstance);\n\n\n        Result successRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)successRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), eq(start), eq(end))).thenReturn(pageReturn);\n        Result executorEmptyRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(), (int)executorEmptyRes.getCode());\n\n        \r\n        when(usersService.queryUser(loginUser.getId())).thenReturn(null);\n        when(usersService.getUserIdByName(loginUser.getUserName())).thenReturn(-1);\n        Result executorNullRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"test_user\", \"2020-01-01 00:00:00\", \"2020-01-02 00:00:00\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(),(int)executorNullRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Result executorNullDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.SUCCESS.getCode(),(int) executorNullDateRes.getCode());\n\n        \r\n        when(taskInstanceMapper.queryTaskInstanceListPaging(Mockito.any(Page.class), eq(project.getCode()), eq(1), eq(\"\"), eq(\"\"), eq(\"\"),\n                eq(0), Mockito.any(), eq(\"192.168.xx.xx\"), any(), any())).thenReturn(pageReturn);\n        Result executorErrorStartDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", \"error date\", null, \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)executorErrorStartDateRes.getCode());\n        Result executorErrorEndDateRes = taskInstanceService.queryTaskListPaging(loginUser, projectName, 1, \"\", \"\",\n                \"\", null, \"error date\", \"\", ExecutionStatus.SUCCESS, \"192.168.xx.xx\", 1, 20);\n        Assert.assertEquals(Status.REQUEST_PARAMS_NOT_VALID_ERROR.getCode(), (int)executorErrorEndDateRes.getCode());\n    }\n","realPath":"dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/TaskInstanceServiceTest.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"1f838e61026fab1db479754b64c9b15690b1a80b","commitMessage":"@@@Merge pull request #6124 from apache/json_split_two\n\n[Feature][JsonSplit-api] api module controller design","date":"2021-09-08 13:26:00","modifiedFileCount":"129","status":"M","submitter":"David"}]
