[{"authorTime":"2021-02-18 23:27:37","codes":[{"authorDate":"2021-02-18 23:27:37","commitOrder":1,"curCode":"    public Result<Object> createDataSource(User loginUser, String name, String desc, DbType type, String parameter) {\n\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(name)) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        Result<Object> isConnection = checkConnection(type, parameter);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(name.trim());\n        dataSource.setNote(desc);\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(type);\n        dataSource.setConnectionParams(parameter);\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.insert(dataSource);\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-02-18 23:27:37","endLine":123,"groupId":"2237","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataSource","params":"(UserloginUser@Stringname@Stringdesc@DbTypetype@Stringparameter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/cd/b5197716e6ad66fd7fa44c95a0c98a8316f0cd.src","preCode":"    public Result<Object> createDataSource(User loginUser, String name, String desc, DbType type, String parameter) {\n\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(name)) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        Result<Object> isConnection = checkConnection(type, parameter);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(name.trim());\n        dataSource.setNote(desc);\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(type);\n        dataSource.setConnectionParams(parameter);\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.insert(dataSource);\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2021-02-18 23:27:37","commitOrder":1,"curCode":"    public Result<Object> updateDataSource(int id, User loginUser, String name, String desc, DbType type, String parameter) {\n\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!name.trim().equals(dataSource.getName()) && checkName(name)) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ObjectNode paramObject = JSONUtils.parseObject(parameter);\n        String password = paramObject.path(Constants.PASSWORD).asText();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            paramObject.put(Constants.PASSWORD, oldParams.path(Constants.PASSWORD).asText());\n        }\n        \r\n        String connectionParams = paramObject.toString();\n\n        Result<Object> isConnection = checkConnection(type, parameter);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(name.trim());\n        dataSource.setNote(desc);\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(type);\n        dataSource.setConnectionParams(connectionParams);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.updateById(dataSource);\n        putMsg(result, Status.SUCCESS);\n        return result;\n    }\n","date":"2021-02-18 23:27:37","endLine":183,"groupId":"1918","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDataSource","params":"(intid@UserloginUser@Stringname@Stringdesc@DbTypetype@Stringparameter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/cd/b5197716e6ad66fd7fa44c95a0c98a8316f0cd.src","preCode":"    public Result<Object> updateDataSource(int id, User loginUser, String name, String desc, DbType type, String parameter) {\n\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!name.trim().equals(dataSource.getName()) && checkName(name)) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ObjectNode paramObject = JSONUtils.parseObject(parameter);\n        String password = paramObject.path(Constants.PASSWORD).asText();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            paramObject.put(Constants.PASSWORD, oldParams.path(Constants.PASSWORD).asText());\n        }\n        \r\n        String connectionParams = paramObject.toString();\n\n        Result<Object> isConnection = checkConnection(type, parameter);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(name.trim());\n        dataSource.setNote(desc);\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(type);\n        dataSource.setConnectionParams(connectionParams);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.updateById(dataSource);\n        putMsg(result, Status.SUCCESS);\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"}],"commitId":"15a5b0588399bbafd201405af02d611d548fac12","commitMessage":"@@@[Improvement-3369][api] Introduce executor and datasource service interface for clear code (#4759)\n\n","date":"2021-02-18 23:27:37","modifiedFileCount":"8","status":"B","submitter":"Shiwen Cheng"},{"authorTime":"2021-04-25 13:51:59","codes":[{"authorDate":"2021-04-25 13:51:59","commitOrder":2,"curCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.insert(dataSource);\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","date":"2021-04-25 13:51:59","endLine":111,"groupId":"3253","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataSource","params":"(UserloginUser@BaseDataSourceParamDTOdatasourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/8d/86690d2be8a0c40a73c9811ba175c95cde9a77.src","preCode":"    public Result<Object> createDataSource(User loginUser, String name, String desc, DbType type, String parameter) {\n\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(name)) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        Result<Object> isConnection = checkConnection(type, parameter);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(name.trim());\n        dataSource.setNote(desc);\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(type);\n        dataSource.setConnectionParams(parameter);\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.insert(dataSource);\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-04-25 13:51:59","commitOrder":2,"curCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSource.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.updateById(dataSource);\n        putMsg(result, Status.SUCCESS);\n        return result;\n    }\n","date":"2021-04-25 13:51:59","endLine":170,"groupId":"1080","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDataSource","params":"(intid@UserloginUser@BaseDataSourceParamDTOdataSourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/8d/86690d2be8a0c40a73c9811ba175c95cde9a77.src","preCode":"    public Result<Object> updateDataSource(int id, User loginUser, String name, String desc, DbType type, String parameter) {\n\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!name.trim().equals(dataSource.getName()) && checkName(name)) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ObjectNode paramObject = JSONUtils.parseObject(parameter);\n        String password = paramObject.path(Constants.PASSWORD).asText();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            paramObject.put(Constants.PASSWORD, oldParams.path(Constants.PASSWORD).asText());\n        }\n        \r\n        String connectionParams = paramObject.toString();\n\n        Result<Object> isConnection = checkConnection(type, parameter);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(name.trim());\n        dataSource.setNote(desc);\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(type);\n        dataSource.setConnectionParams(connectionParams);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.updateById(dataSource);\n        putMsg(result, Status.SUCCESS);\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"e6d8da484f8d3eff528b206ab4b159b451865df3","commitMessage":"@@@[Improvement][API] Create Datasource #5083 (#5116)\n\n* [Improvement][API] Create Datasource #5083\n\n  * Refact create/ update datasource API\n\n* fix Code Smells\n\n* fix code smell\n\n* resolve code smell\n\n* use ConnectionParam to replace BaseDatasource\n\n* solve license\n\n* add ut\n\n* code check\n\n* add ut\n\n* fix ut coverage\n\n* fix ut","date":"2021-04-25 13:51:59","modifiedFileCount":"14","status":"M","submitter":"ruanwenjun"},{"authorTime":"2021-05-06 09:32:28","codes":[{"authorDate":"2021-05-06 09:32:28","commitOrder":3,"curCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","date":"2021-05-06 09:32:28","endLine":116,"groupId":"3253","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataSource","params":"(UserloginUser@BaseDataSourceParamDTOdatasourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/88/69db366ecb4b5e19063c4b23e99fc9500000d9.src","preCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.insert(dataSource);\n\n        putMsg(result, Status.SUCCESS);\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-05-06 09:32:28","commitOrder":3,"curCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSource.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","date":"2021-05-06 09:32:28","endLine":180,"groupId":"1080","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDataSource","params":"(intid@UserloginUser@BaseDataSourceParamDTOdataSourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/88/69db366ecb4b5e19063c4b23e99fc9500000d9.src","preCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSource.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        dataSourceMapper.updateById(dataSource);\n        putMsg(result, Status.SUCCESS);\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"0bdf15efb9774ee11afab61f79d5f5547457e402","commitMessage":"@@@[Improvement][DAO] Add Unique key in t_ds_alertgroup and t_ds_datasource (#5373)\n\n* [Improvement][DAO] Add Unique key to t_ds_worker_group t_ds_datasource\n\n* Add exception catch\n\n* add ddl\n\n* fix ut","date":"2021-05-06 09:32:28","modifiedFileCount":"5","status":"M","submitter":"ruanwenjun"},{"authorTime":"2021-06-16 17:29:17","codes":[{"authorDate":"2021-05-06 09:32:28","commitOrder":4,"curCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","date":"2021-05-06 09:32:28","endLine":116,"groupId":"3253","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataSource","params":"(UserloginUser@BaseDataSourceParamDTOdatasourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/88/69db366ecb4b5e19063c4b23e99fc9500000d9.src","preCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2021-06-16 17:29:17","commitOrder":4,"curCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSourceParam.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","date":"2021-06-16 17:29:17","endLine":180,"groupId":"1080","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDataSource","params":"(intid@UserloginUser@BaseDataSourceParamDTOdataSourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/38/2339a240a3de0cfa54288a032de681b3664f11.src","preCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSource.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"015ed7ffa6bb736ef9956210997baaf77ffd2967","commitMessage":"@@@[Bug Fix] Edit the note of existed datasource does't work. (#5642)\n\n* Update DataSourceServiceImpl.java\n\n* Update DataSourceServiceImpl.java","date":"2021-06-16 17:29:17","modifiedFileCount":"1","status":"M","submitter":"kyoty"},{"authorTime":"2021-06-21 18:52:25","codes":[{"authorDate":"2021-05-06 09:32:28","commitOrder":5,"curCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","date":"2021-05-06 09:32:28","endLine":116,"groupId":"3253","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataSource","params":"(UserloginUser@BaseDataSourceParamDTOdatasourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/88/69db366ecb4b5e19063c4b23e99fc9500000d9.src","preCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2021-06-21 18:52:25","commitOrder":5,"curCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return isConnection;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSourceParam.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","date":"2021-06-21 18:52:25","endLine":180,"groupId":"1080","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDataSource","params":"(intid@UserloginUser@BaseDataSourceParamDTOdataSourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/d8/955763f0870fae6538d22ae374d7b7387b3191.src","preCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return result;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSourceParam.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"e2eed1f24f05a2d6fdfda36fad2afe31324d5a1f","commitMessage":"@@@[Improvement] Fix a potential problem when editing an existing mysql data source\n\n","date":"2021-06-21 18:52:25","modifiedFileCount":"1","status":"M","submitter":"kyoty"},{"authorTime":"2021-06-22 01:47:24","codes":[{"authorDate":"2021-05-06 09:32:28","commitOrder":6,"curCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","date":"2021-05-06 09:32:28","endLine":116,"groupId":"3253","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataSource","params":"(UserloginUser@BaseDataSourceParamDTOdatasourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/88/69db366ecb4b5e19063c4b23e99fc9500000d9.src","preCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2021-06-22 01:47:24","commitOrder":6,"curCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (isConnection.isFailed()) {\n            return isConnection;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSourceParam.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","date":"2021-06-22 01:47:24","endLine":180,"groupId":"1080","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDataSource","params":"(intid@UserloginUser@BaseDataSourceParamDTOdataSourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/f3/6d63b989c8456879095247965d3b0e61f1b207.src","preCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            return isConnection;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSourceParam.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"e628e4e8fdc72f0362449a78870493789450b284","commitMessage":"@@@[Improvement][API] Simplify the Check of Result by introducing several new methods. (#5666)\n\n","date":"2021-06-22 01:47:24","modifiedFileCount":"31","status":"M","submitter":"kyoty"},{"authorTime":"2021-07-14 13:51:10","codes":[{"authorDate":"2021-05-06 09:32:28","commitOrder":7,"curCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","date":"2021-05-06 09:32:28","endLine":116,"groupId":"10497","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataSource","params":"(UserloginUser@BaseDataSourceParamDTOdatasourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/88/69db366ecb4b5e19063c4b23e99fc9500000d9.src","preCode":"    public Result<Object> createDataSource(User loginUser, BaseDataSourceParamDTO datasourceParam) {\n        DatasourceUtil.checkDatasourceParam(datasourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        if (checkName(datasourceParam.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        ConnectionParam connectionParam = DatasourceUtil.buildConnectionParams(datasourceParam);\n        Result<Object> isConnection = checkConnection(datasourceParam.getType(), connectionParam);\n        if (Status.SUCCESS.getCode() != isConnection.getCode()) {\n            putMsg(result, Status.DATASOURCE_CONNECT_FAILED);\n            return result;\n        }\n\n        \r\n        DataSource dataSource = new DataSource();\n        Date now = new Date();\n\n        dataSource.setName(datasourceParam.getName().trim());\n        dataSource.setNote(datasourceParam.getNote());\n        dataSource.setUserId(loginUser.getId());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(datasourceParam.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setCreateTime(now);\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.insert(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Create datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2021-07-14 13:51:10","commitOrder":7,"curCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (isConnection.isFailed()) {\n            return isConnection;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSourceParam.getName().trim());\n        dataSource.setNote(dataSourceParam.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","date":"2021-07-14 13:51:10","endLine":176,"groupId":"10497","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"updateDataSource","params":"(intid@UserloginUser@BaseDataSourceParamDTOdataSourceParam)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dolphinscheduler-10-0.7/blobInfo/CC_OUT/blobs/52/9dbb23fb348cceed8e1b1e28b09ef04fa7de2b.src","preCode":"    public Result<Object> updateDataSource(int id, User loginUser, BaseDataSourceParamDTO dataSourceParam) {\n        DatasourceUtil.checkDatasourceParam(dataSourceParam);\n        Result<Object> result = new Result<>();\n        \r\n        DataSource dataSource = dataSourceMapper.selectById(id);\n        if (dataSource == null) {\n            putMsg(result, Status.RESOURCE_NOT_EXIST);\n            return result;\n        }\n\n        if (!hasPerm(loginUser, dataSource.getUserId())) {\n            putMsg(result, Status.USER_NO_OPERATION_PERM);\n            return result;\n        }\n\n        \r\n        if (!dataSource.getName().trim().equals(dataSource.getName()) && checkName(dataSource.getName())) {\n            putMsg(result, Status.DATASOURCE_EXIST);\n            return result;\n        }\n        \r\n        BaseConnectionParam connectionParam = (BaseConnectionParam) DatasourceUtil.buildConnectionParams(dataSourceParam);\n        String password = connectionParam.getPassword();\n        if (StringUtils.isBlank(password)) {\n            String oldConnectionParams = dataSource.getConnectionParams();\n            ObjectNode oldParams = JSONUtils.parseObject(oldConnectionParams);\n            connectionParam.setPassword(oldParams.path(Constants.PASSWORD).asText());\n        }\n\n        Result<Object> isConnection = checkConnection(dataSource.getType(), connectionParam);\n        if (isConnection.isFailed()) {\n            return isConnection;\n        }\n\n        Date now = new Date();\n\n        dataSource.setName(dataSource.getName().trim());\n        dataSource.setNote(dataSourceParam.getNote());\n        dataSource.setUserName(loginUser.getUserName());\n        dataSource.setType(dataSource.getType());\n        dataSource.setConnectionParams(JSONUtils.toJsonString(connectionParam));\n        dataSource.setUpdateTime(now);\n        try {\n            dataSourceMapper.updateById(dataSource);\n            putMsg(result, Status.SUCCESS);\n        } catch (DuplicateKeyException ex) {\n            logger.error(\"Update datasource error.\", ex);\n            putMsg(result, Status.DATASOURCE_EXIST);\n        }\n        return result;\n    }\n","realPath":"dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/DataSourceServiceImpl.java","repoName":"dolphinscheduler","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"1f0c67bfb772f46a0e7d6289b13a499aae403fe3","commitMessage":"@@@[Fix-5726] When we used the UI page.  we found some problems such as parameter validation.  parameter update shows success but actually work (#5727)\n\n* enhance the validation in UI\n\n* enchance form verifaction\n\n* simplify disable condition","date":"2021-07-14 13:51:10","modifiedFileCount":"1","status":"M","submitter":"kyoty"}]
