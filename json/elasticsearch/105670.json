[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        TransportWriteAction.WritePrimaryResult<TestRequest, TestResponse> result =\n                testAction.shardOperationOnPrimary(request, indexShard);\n        CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n        result.respond(listener);\n        assertNotNull(listener.response);\n        assertNull(listener.failure);\n        verify(indexShard, never()).refresh(any());\n        verify(indexShard, never()).addRefreshListener(any(), any());\n    }\n","date":"2018-04-26 03:22:53","endLine":145,"groupId":"29152","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryNoRefreshCall","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/2fbf1578714dc92914f0d663ebe2ee4ffbe5e6.src","preCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        TransportWriteAction.WritePrimaryResult<TestRequest, TestResponse> result =\n                testAction.shardOperationOnPrimary(request, indexShard);\n        CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n        result.respond(listener);\n        assertNotNull(listener.response);\n        assertNull(listener.failure);\n        verify(indexShard, never()).refresh(any());\n        verify(indexShard, never()).addRefreshListener(any(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        TransportWriteAction.WritePrimaryResult<TestRequest, TestResponse> writePrimaryResult =\n                testAction.shardOperationOnPrimary(request, indexShard);\n        CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n        writePrimaryResult.respond(listener);\n        assertNull(listener.response);\n        assertNotNull(listener.failure);\n    }\n","date":"2018-04-26 03:22:53","endLine":243,"groupId":"29156","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocumentFailureInShardOperationOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/2fbf1578714dc92914f0d663ebe2ee4ffbe5e6.src","preCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        TransportWriteAction.WritePrimaryResult<TestRequest, TestResponse> writePrimaryResult =\n                testAction.shardOperationOnPrimary(request, indexShard);\n        CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n        writePrimaryResult.respond(listener);\n        assertNull(listener.response);\n        assertNotNull(listener.failure);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-04-07 00:11:00","codes":[{"authorDate":"2019-04-07 00:11:00","commitOrder":2,"curCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.respond(listener);\n                assertNotNull(listener.response);\n                assertNull(listener.failure);\n                verify(indexShard, never()).refresh(any());\n                verify(indexShard, never()).addRefreshListener(any(), any());\n            }));\n    }\n","date":"2019-04-07 00:11:00","endLine":153,"groupId":"22931","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryNoRefreshCall","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/c4f215fca8a5715e5f772e9557d012b7a61bec.src","preCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        TransportWriteAction.WritePrimaryResult<TestRequest, TestResponse> result =\n                testAction.shardOperationOnPrimary(request, indexShard);\n        CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n        result.respond(listener);\n        assertNotNull(listener.response);\n        assertNull(listener.failure);\n        verify(indexShard, never()).refresh(any());\n        verify(indexShard, never()).addRefreshListener(any(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2019-04-07 00:11:00","commitOrder":2,"curCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(writePrimaryResult -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                writePrimaryResult.respond(listener);\n                assertNull(listener.response);\n                assertNotNull(listener.failure);\n            }));\n    }\n","date":"2019-04-07 00:11:00","endLine":254,"groupId":"27289","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocumentFailureInShardOperationOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/c4f215fca8a5715e5f772e9557d012b7a61bec.src","preCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        TransportWriteAction.WritePrimaryResult<TestRequest, TestResponse> writePrimaryResult =\n                testAction.shardOperationOnPrimary(request, indexShard);\n        CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n        writePrimaryResult.respond(listener);\n        assertNull(listener.response);\n        assertNotNull(listener.failure);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"5d26243aba226648e1bd2c327e0ac0cae4a4c14f","commitMessage":"@@@Make Transport Shard Bulk Action Async (#39793)\n\nThis is a dependency of #39504 \n\nMotivation: \nBy refactoring `TransportShardBulkAction#shardOperationOnPrimary` to async.  we enable using `DeterministicTaskQueue` based tests to run indexing operations. This was previously impossible since we were blocking on the `write` thread until the `update` thread finished the mapping update.\nWith this change.  the mapping update will trigger a new task in the `write` queue instead. \nThis change significantly enhances the amount of coverage we get from `SnapshotResiliencyTests` (and other potential future tests) when it comes to tracking down concurrency issues with distributed state machines.\n\nThe logical change is effectively all in `TransportShardBulkAction`.  the rest of the changes is then simply mechanically moving the caller code and tests to being async and passing the `ActionListener` down.\n\nSince the move to async would've added more parameters to the `private static` steps in this logic.  I decided to inline and dry up (between delete and update) the logic as much as I could instead of passing the listener + wait-consumer down through all of them.\n","date":"2019-04-07 00:11:00","modifiedFileCount":"28","status":"M","submitter":"Armin Braun"},{"authorTime":"2019-12-03 18:46:50","codes":[{"authorDate":"2019-12-03 18:46:50","commitOrder":3,"curCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNotNull(listener.response);\n                assertNull(listener.failure);\n                verify(indexShard, never()).refresh(any());\n                verify(indexShard, never()).addRefreshListener(any(), any());\n            }));\n    }\n","date":"2019-12-03 18:46:50","endLine":149,"groupId":"36394","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryNoRefreshCall","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/1d532652a362bb6dc1b9d0c8675ff1a3877637.src","preCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.respond(listener);\n                assertNotNull(listener.response);\n                assertNull(listener.failure);\n                verify(indexShard, never()).refresh(any());\n                verify(indexShard, never()).addRefreshListener(any(), any());\n            }));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2019-12-03 18:46:50","commitOrder":3,"curCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNull(listener.response);\n                assertNotNull(listener.failure);\n            }));\n    }\n","date":"2019-12-03 18:46:50","endLine":250,"groupId":"36401","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocumentFailureInShardOperationOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/1d532652a362bb6dc1b9d0c8675ff1a3877637.src","preCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(writePrimaryResult -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                writePrimaryResult.respond(listener);\n                assertNull(listener.response);\n                assertNotNull(listener.failure);\n            }));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"8c165e04a1cf0efd019a5c5f686e3b49fb17d145","commitMessage":"@@@Replicate write actions before fsyncing them (#49746)\n\nThis commit fixes a number of issues with data replication:\n\n- Local and global checkpoints are not updated after the new operations have been fsynced.  but\nmight capture a state before the fsync. The reason why this probably went undetected for so\nlong is that AsyncIOProcessor is synchronous if you index one item at a time.  and hence working\nas intended unless you have a high enough level of concurrent indexing. As we rely in other\nplaces on the assumption that we have an up-to-date local checkpoint in case of synchronous\ntranslog durability.  there's a risk for the local and global checkpoints not to be up-to-date after\nreplication completes.  and that this won't be corrected by the periodic global checkpoint sync.\n- AsyncIOProcessor also has another \"bad\" side effect here: if you index one bulk at a time.  the\nbulk is always first fsynced on the primary before being sent to the replica. Further.  if one thread\nis tasked by AsyncIOProcessor to drain the processing queue and fsync.  other threads can\neasily pile more bulk requests on top of that thread. Things are not very fair here.  and the thread\nmight continue doing a lot more fsyncs before returning (as the other threads pile more and\nmore on top).  which blocks it from returning as a replication request (e.g. if this thread is on the\nprimary.  it blocks the replication requests to the replicas from going out.  and delaying\ncheckpoint advancement).\n\nThis commit fixes all these issues.  and also simplifies the code that coordinates all the after\nwrite actions.","date":"2019-12-03 18:46:50","modifiedFileCount":"13","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":4,"curCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        testAction.dispatchedShardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNotNull(listener.response);\n                assertNull(listener.failure);\n                verify(indexShard, never()).refresh(any());\n                verify(indexShard, never()).addRefreshListener(any(), any());\n            }));\n    }\n","date":"2020-06-26 22:33:37","endLine":150,"groupId":"36394","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryNoRefreshCall","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/ef04b10d43d8a75c204ef96a0e119463cd3db8.src","preCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNotNull(listener.response);\n                assertNull(listener.failure);\n                verify(indexShard, never()).refresh(any());\n                verify(indexShard, never()).addRefreshListener(any(), any());\n            }));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":4,"curCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        testAction.dispatchedShardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNull(listener.response);\n                assertNotNull(listener.failure);\n            }));\n    }\n","date":"2020-06-26 22:33:37","endLine":255,"groupId":"36401","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocumentFailureInShardOperationOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/ef04b10d43d8a75c204ef96a0e119463cd3db8.src","preCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        testAction.shardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNull(listener.response);\n                assertNotNull(listener.failure);\n            }));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-12-01 10:00:51","codes":[{"authorDate":"2020-12-01 10:00:51","commitOrder":5,"curCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        testAction.dispatchedShardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(listener.map(ignore -> result.finalResponseIfSuccessful));\n                assertNotNull(listener.response);\n                assertNull(listener.failure);\n                verify(indexShard, never()).refresh(any());\n                verify(indexShard, never()).addRefreshListener(any(), any());\n            }));\n    }\n","date":"2020-12-01 10:00:51","endLine":152,"groupId":"105670","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryNoRefreshCall","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/c22fd719f79449c48418642e993cde24023ebb.src","preCode":"    public void testPrimaryNoRefreshCall() throws Exception {\n        TestRequest request = new TestRequest();\n        request.setRefreshPolicy(RefreshPolicy.NONE); \r\n        TestAction testAction = new TestAction();\n        testAction.dispatchedShardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNotNull(listener.response);\n                assertNull(listener.failure);\n                verify(indexShard, never()).refresh(any());\n                verify(indexShard, never()).addRefreshListener(any(), any());\n            }));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2020-12-01 10:00:51","commitOrder":5,"curCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        testAction.dispatchedShardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(listener.map(ignore -> result.finalResponseIfSuccessful));\n                assertNull(listener.response);\n                assertNotNull(listener.failure);\n            }));\n    }\n","date":"2020-12-01 10:00:51","endLine":257,"groupId":"105670","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocumentFailureInShardOperationOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/c22fd719f79449c48418642e993cde24023ebb.src","preCode":"    public void testDocumentFailureInShardOperationOnPrimary() throws Exception {\n        TestRequest request = new TestRequest();\n        TestAction testAction = new TestAction(true, true);\n        testAction.dispatchedShardOperationOnPrimary(request, indexShard,\n            ActionTestUtils.assertNoFailureListener(result -> {\n                CapturingActionListener<TestResponse> listener = new CapturingActionListener<>();\n                result.runPostReplicationActions(ActionListener.map(listener, ignore -> result.finalResponseIfSuccessful));\n                assertNull(listener.response);\n                assertNotNull(listener.failure);\n            }));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"4547d3b24501bcdfef343e5a493af657395942fd","commitMessage":"@@@Refactor ActionListener#map towards Stricter API (#65526)\n\nMaking `#map` look and feel a little nicer.  optimize chains of `#map`. \nand replace `#delegateFailure` calls with `#map` calls where possible\nin order to enforce callbacks not throwing where possible.\n","date":"2020-12-01 10:00:51","modifiedFileCount":"52","status":"M","submitter":"Armin Braun"}]
