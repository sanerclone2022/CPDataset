[{"authorTime":"2018-05-24 17:07:44","codes":[{"authorDate":"2018-05-24 17:07:44","commitOrder":2,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-05-24 17:07:44","endLine":187,"groupId":"35544","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3e/7c415db7b968389a1da36b020b2307b22a2c94.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"MB"},{"authorDate":"2018-05-24 17:07:44","commitOrder":2,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-05-24 17:07:44","endLine":283,"groupId":"21991","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3e/7c415db7b968389a1da36b020b2307b22a2c94.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"MB"}],"commitId":"84c4598e478f0ede1b7f33ad30dc3306f48246ed","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n\nx-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClien\ntPlugin.java\n/Users/colings86/dev/work/git/elasticsearch/.git/worktrees/elasticsearch\n-ilm/MERGE_HEAD\n\nbuildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlu\ngin.groovy\ndocs/reference/migration/migrate_7_0/settings.asciidoc\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpChannel.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpPipeliningHandler.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpRequestHandler.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpResponse.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpServerTransport.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/pip\nelining/HttpPipelinedRequest.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/pip\nelining/HttpPipelinedResponse.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/pip\nelining/HttpPipeliningHandler.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4HttpChannelTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/pip\nelining/Netty4HttpPipeliningHandlerTests.java ->\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4HttpPipeliningHandlerTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4HttpServerPipeliningTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4PipeliningEnabledIT.java ->\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4PipeliningIT.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadW\nriteHandler.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpWrite\nOperation.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NettyAdap\ntor.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NettyList\nener.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpCh\nannel.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpPi\npeliningHandler.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpRe\nsponse.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpSe\nrverTransport.java\nplugins/transport-nio/src/test/java/org/elasticsearch/NioIntegTestCase.j\nava\nplugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadW\nriteHandlerTests.java\nplugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpPi\npeliningHandlerTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4PipeliningDisabledIT.java ->\nplugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioPipeli\nningIT.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/PackagingTests.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/VMTestRunner.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCas\ne.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/DefaultTarTest\ns.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/DefaultZipTest\ns.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/OssTarTests.ja\nva\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/OssZipTests.ja\nva\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Archives.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Cleanup.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Distribution.j\nava\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/FileMatcher.ja\nva\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/FileUtils.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Installation.j\nava\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Platforms.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Shell.java\nserver/src/main/java/org/elasticsearch/client/transport/TransportClient.\njava\nserver/src/main/java/org/elasticsearch/cluster/ClusterModule.java\nserver/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.ja\nva\nserver/src/main/java/org/elasticsearch/cluster/service/ClusterApplierSer\nvice.java\nserver/src/main/java/org/elasticsearch/common/settings/ClusterSettings.j\nava\nserver/src/main/java/org/elasticsearch/discovery/single/SingleNodeDiscov\nery.java\nserver/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java\nserver/src/main/java/org/elasticsearch/http/HttpHandlingSettings.java\nserver/src/main/java/org/elasticsearch/http/HttpPipelinedMessage.java\nserver/src/main/java/org/elasticsearch/http/HttpPipelinedRequest.java\nserver/src/main/java/org/elasticsearch/http/HttpPipeliningAggregator.jav\na\nserver/src/main/java/org/elasticsearch/http/HttpTransportSettings.java\nserver/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.\njava\nserver/src/main/java/org/elasticsearch/persistent/PersistentTasksCustomM\netaData.java\nserver/src/main/java/org/elasticsearch/transport/TcpTransport.java\nserver/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestC\nase.java\nserver/src/test/java/org/elasticsearch/client/transport/TransportClientT\nests.java\nserver/src/test/java/org/elasticsearch/cluster/service/ClusterApplierSer\nviceTests.java\nserver/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscov\neryIT.java\nserver/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscov\neryTests.java\nserver/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryUnitTes\nts.java\nserver/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderT\nests.java\nserver/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegra\ntionIT.java\nserver/src/test/java/org/elasticsearch/persistent/TestPersistentTasksPlu\ngin.java\nserver/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationIT.\njava\ntest/framework/src/main/java/org/elasticsearch/test/ClusterServiceUtils.\njava\ntest/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java\ntest/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.\njava\ntest/framework/src/test/java/org/elasticsearch/test/test/InternalTestClu\nsterTests.java\nx-pack/docs/en/security/auditing/event-types.asciidoc\nx-pack/docs/en/security/auditing/forwarding-logs.asciidoc\nx-pack/docs/en/security/auditing/output-index.asciidoc\nx-pack/docs/en/security/auditing/output-logfile.asciidoc\nx-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClien\ntPlugin.java\nx-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/au\ndit/index/IndexAuditTrailTests.java\nx-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/au\ndit/index/RemoteIndexAuditTrailStartingTests.java\nx-pack/qa/ml-native-tests/src/test/java/org/elasticsearch/xpack/ml/integ\nration/MlNativeAutodetectIntegTestCase.java\n","date":"2018-05-24 17:07:44","modifiedFileCount":"44","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-02 01:15:18","codes":[{"authorDate":"2018-08-02 01:15:18","commitOrder":3,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-08-02 01:15:18","endLine":186,"groupId":"35544","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cb/f8a7eda2b3e85060d63d1068f94a61c735f5f6.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2018-08-02 01:15:18","commitOrder":3,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-08-02 01:15:18","endLine":282,"groupId":"21991","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cb/f8a7eda2b3e85060d63d1068f94a61c735f5f6.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"ea1e26ca2716210395390170c982ba05d8425a37","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-02 01:15:18","modifiedFileCount":"69","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-30 05:03:55","codes":[{"authorDate":"2018-10-30 05:03:55","commitOrder":4,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-10-30 05:03:55","endLine":187,"groupId":"35544","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/9b84f9f1a6bc2a868abff5bc37e179974995c4.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2018-10-30 05:03:55","commitOrder":4,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-10-30 05:03:55","endLine":283,"groupId":"21991","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/9b84f9f1a6bc2a868abff5bc37e179974995c4.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = Loggers.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"c9e4d26a531f213094b89b6956d2dddbbb5a6567","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-30 05:03:55","modifiedFileCount":"387","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-30 05:03:55","codes":[{"authorDate":"2018-11-16 05:09:52","commitOrder":5,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                clusterApplierService.getClass().getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2018-11-16 05:15:23","endLine":184,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/54b796f0cd89dd1d7c5917383b11478ed08280.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(3);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2018-10-30 05:03:55","commitOrder":5,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-10-30 05:03:55","endLine":283,"groupId":"21991","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/9b84f9f1a6bc2a868abff5bc37e179974995c4.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"N"}],"commitId":"ce35d049e9eb935027d172e2e8eb5d6c78897c22","commitMessage":"@@@[TEST] Fix ClusterApplierServiceTests.testClusterStateUpdateLogging\n\nThis changes the test to not use a `CountDownlatch`.  instead adding an assertion\nfor the final logging message and waiting until the `MockAppender` has seen it\nbefore proceeding.\n\nResolves #23739\n","date":"2018-11-16 05:15:23","modifiedFileCount":"2","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-11-20 00:51:32","codes":[{"authorDate":"2018-11-20 00:51:32","commitOrder":6,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                clusterApplierService.getClass().getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2018-11-20 00:51:32","endLine":184,"groupId":"33688","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/9c74910ed183fe4a8ce1042cde04b67043e56b.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                clusterApplierService.getClass().getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2018-11-20 00:51:32","commitOrder":6,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-11-20 00:51:32","endLine":280,"groupId":"21991","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/9c74910ed183fe4a8ce1042cde04b67043e56b.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        clusterApplierService.getClass().getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(\"org.elasticsearch.cluster.service\");\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"b2057138a72dd221655fc868fee555c018c8c838","commitMessage":"@@@Remove AbstractComponent from AbstractLifecycleComponent (#35560)\n\nAbstractLifecycleComponent now no longer extends AbstractComponent. In\norder to accomplish this.  many.  many classes now instantiate their own\nlogger.\n","date":"2018-11-20 00:51:32","modifiedFileCount":"48","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-11-20 00:51:32","codes":[{"authorDate":"2018-11-20 04:23:49","commitOrder":7,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2018-11-20 04:23:49","endLine":184,"groupId":"33688","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90909489c7513ec195860213b951f70e5099fb.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                clusterApplierService.getClass().getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2018-11-20 00:51:32","commitOrder":7,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2018-11-20 00:51:32","endLine":280,"groupId":"21991","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/9c74910ed183fe4a8ce1042cde04b67043e56b.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"7a779a998801e2a055b53f6c11917e911e570415","commitMessage":"@@@[TEST] fixing ClusterApplierService#testClusterStateUpdateLogging() (#35714)\n\n","date":"2018-11-20 04:23:49","modifiedFileCount":"1","status":"M","submitter":"Benjamin Trent"},{"authorTime":"2019-02-05 01:44:00","codes":[{"authorDate":"2018-11-20 04:23:49","commitOrder":8,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2018-11-20 04:23:49","endLine":184,"groupId":"33688","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90909489c7513ec195860213b951f70e5099fb.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2019-02-05 01:44:00","commitOrder":8,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2019-02-05 01:44:00","endLine":283,"groupId":"21991","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/0ed96bf12aab8d8583f02e18d7e1cdec451e9f.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"2c1eab2b8a65663c17bc86df32e209e39757ff24","commitMessage":"@@@Clarify slow cluster-state log messages (#38302)\n\nThe message `... took [31s] above the warn threshold of 30s` suggests\nincorrectly that the task took 61 seconds. This commit adds the clarifying\nwords `which is`.","date":"2019-02-05 01:44:00","modifiedFileCount":"5","status":"M","submitter":"David Turner"},{"authorTime":"2019-03-05 17:28:21","codes":[{"authorDate":"2019-03-05 17:28:21","commitOrder":9,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2019-03-05 17:28:21","endLine":187,"groupId":"33688","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/0283736a22fe9bb78608ef3af12aff4c682d3b.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2019-03-05 17:28:21","commitOrder":9,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2019-03-05 17:28:21","endLine":283,"groupId":"72879","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/0283736a22fe9bb78608ef3af12aff4c682d3b.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = System.nanoTime();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).nanos();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).nanos(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"c71807ae759c1428f0ed2a7f50bcd45cc509ed05","commitMessage":"@@@Use Threadpool Time in ClusterApplierService (#39679)\n\n* Use threadpool's time in `ClusterApplierService` to allow for deterministic tests\n* This is a part of/requirement for #39504","date":"2019-03-05 17:28:21","modifiedFileCount":"3","status":"M","submitter":"Armin Braun"},{"authorTime":"2019-08-01 15:21:40","codes":[{"authorDate":"2019-03-05 17:28:21","commitOrder":10,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2019-03-05 17:28:21","endLine":187,"groupId":"33688","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/0283736a22fe9bb78608ef3af12aff4c682d3b.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"},{"authorDate":"2019-08-01 15:21:40","commitOrder":10,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test2]] took [*\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test3]] took [*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2019-08-01 15:21:40","endLine":277,"groupId":"72879","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/0ca00111ee610ee669c6f619e2af581e4ef054.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of *\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"7776f755ee8b7219d7467c77989673e9b7e3c37f","commitMessage":"@@@More logging for slow cluster state application (#45007)\n\nToday the lag detector may remove nodes from the cluster if they fail to apply\na cluster state within a reasonable timeframe.  but it is rather unclear from\nthe default logging that this has occurred and there is very little extra\ninformation beyond the fact that the removed node was lagging. Moreover the\nonly forewarning that the lag detector might be invoked is a message indicating\nthat cluster state publication took unreasonably long.  which does not contain\nenough information to investigate the problem further.\n\nThis commit adds a good deal more detail to make the issues of slow nodes more\nprominent:\n\n- after 10 seconds (by default) we log an INFO message indicating that a\n  publication is still waiting for responses from some nodes.  including the\n  identities of the problematic nodes.\n\n- when the publication times out after 30 seconds (by default) we log a WARN\n  message identifying the nodes that are still pending.\n\n- the lag detector logs a more detailed warning when a fatally-lagging node is\n  detected.\n\n- if applying a cluster state takes too long then the cluster applier service\n  logs a breakdown of all the tasks it ran as part of that process.","date":"2019-08-01 15:21:40","modifiedFileCount":"11","status":"M","submitter":"David Turner"},{"authorTime":"2021-09-01 00:35:32","codes":[{"authorDate":"2021-09-01 00:35:32","commitOrder":11,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            currentTimeMillis = randomLongBetween(0L, Long.MAX_VALUE / 2);\n            clusterApplierService.runOnApplierThread(\n                \"test1\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(1).millis()),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            clusterApplierService.runOnApplierThread(\n                \"test2\",\n                Priority.HIGH,\n                currentState -> {\n                    advanceTime(TimeValue.timeValueSeconds(2).millis());\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) { }\n                }\n            );\n            \r\n            clusterApplierService.runOnApplierThread(\n                \"test3\",\n                Priority.HIGH,\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() { }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2021-09-01 00:35:32","endLine":197,"groupId":"50547","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/8d390adb5e0b1fe166a03908e3539601d4126e.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n            });\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) { }\n                });\n            \r\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) { }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2021-09-01 00:35:32","commitOrder":11,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test2]] took [*\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test3]] took [*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            currentTimeMillis = randomLongBetween(0L, Long.MAX_VALUE / 2);\n            clusterApplierService.runOnApplierThread(\n                \"test1\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(1).millis()),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\n                \"test2\",\n                Priority.HIGH,\n                currentState -> {\n                    advanceTime(TimeValue.timeValueSeconds(32).millis());\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        latch.countDown();\n                    }\n                }\n            );\n            clusterApplierService.runOnApplierThread(\n                \"test3\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(34).millis()),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\n                \"test4\",\n                Priority.HIGH,\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2021-09-01 00:35:32","endLine":307,"groupId":"50545","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/8d390adb5e0b1fe166a03908e3539601d4126e.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test2]] took [*\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test3]] took [*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();\n            clusterApplierService.runOnApplierThread(\"test1\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\"test2\",\n                currentState -> {\n                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).millis();\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        latch.countDown();\n                    }\n                });\n            clusterApplierService.runOnApplierThread(\"test3\",\n                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).millis(),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\"test4\",\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess(String source) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(String source, Exception e) {\n                        fail();\n                    }\n                });\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"ead0020497b1aeb989e940c239b5447f7c571279","commitMessage":"@@@Tidy up ClusterApplierService (#76837)\n\nThis commit cleans up some cruft left over from older versions of the\n`ClusterApplierService`:\n\n- `UpdateTask` doesn't need to implement lots of interfaces and give\n  access to its internals.  it can just pass appropriate arguments to\n  `runTasks()`.\n- No need for the `runOnApplierThread` override with a default priority. \n  just have callers be explicit about the priority.\n- `submitStateUpdateTask` takes a config which never has a timeout.  may\n  as well just pass the priority and remove the dead code\n- `SafeClusterApplyListener` doesn't need to be a\n  `ClusterApplyListener`.  may as well just be an `ActionListener<Void>`.\n- No implementations of `ClusterApplyListener` care about the source\n  argument.  may as well drop it.\n- Adds assertions to prevent `ClusterApplyListener` implementations from\n  throwing exceptions since we just swallow them.\n- No need to override getting the current time in the\n  `ClusterApplierService`.  we can control this from the `ThreadPool`.","date":"2021-09-01 00:35:32","modifiedFileCount":"16","status":"M","submitter":"David Turner"},{"authorTime":"2021-09-14 23:51:18","codes":[{"authorDate":"2021-09-14 23:51:18","commitOrder":12,"curCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            currentTimeMillis = randomLongBetween(0L, Long.MAX_VALUE / 2);\n            clusterApplierService.runOnApplierThread(\n                \"test1\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(1).millis()),\n                new ActionListener<>() {\n                    @Override\n                    public void onResponse(Void ignored) {\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            clusterApplierService.runOnApplierThread(\n                \"test2\",\n                Priority.HIGH,\n                currentState -> {\n                    advanceTime(TimeValue.timeValueSeconds(2).millis());\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ActionListener<>() {\n                    @Override\n                    public void onResponse(Void ignored) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) { }\n                }\n            );\n            \r\n            clusterApplierService.runOnApplierThread(\n                \"test3\",\n                Priority.HIGH,\n                currentState -> {},\n                new ActionListener<>() {\n                    @Override\n                    public void onResponse(Void ignored) { }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","date":"2021-09-14 23:51:18","endLine":196,"groupId":"102387","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"testClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/83659942b30268dd981030426bd0366163446e.src","preCode":"    public void testClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test1\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.DEBUG,\n                        \"*processing [test1]: took [1s] no change in cluster state\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.TRACE,\n                        \"*failed to execute cluster state applier in [2s]*\"));\n        mockAppender.addExpectation(\n            new MockLogAppender.SeenEventExpectation(\n                \"test3\",\n                ClusterApplierService.class.getCanonicalName(),\n                Level.DEBUG,\n                \"*processing [test3]: took [0s] no change in cluster state*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            currentTimeMillis = randomLongBetween(0L, Long.MAX_VALUE / 2);\n            clusterApplierService.runOnApplierThread(\n                \"test1\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(1).millis()),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            clusterApplierService.runOnApplierThread(\n                \"test2\",\n                Priority.HIGH,\n                currentState -> {\n                    advanceTime(TimeValue.timeValueSeconds(2).millis());\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) { }\n                }\n            );\n            \r\n            clusterApplierService.runOnApplierThread(\n                \"test3\",\n                Priority.HIGH,\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() { }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            assertBusy(mockAppender::assertAllExpectationsMatched);\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-09-14 23:51:18","commitOrder":12,"curCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test2]] took [*\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test3]] took [*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            currentTimeMillis = randomLongBetween(0L, Long.MAX_VALUE / 2);\n            clusterApplierService.runOnApplierThread(\n                \"test1\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(1).millis()),\n                new ActionListener<>() {\n                    @Override\n                    public void onResponse(Void ignored) {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\n                \"test2\",\n                Priority.HIGH,\n                currentState -> {\n                    advanceTime(TimeValue.timeValueSeconds(32).millis());\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ActionListener<>() {\n                    @Override\n                    public void onResponse(Void ignored) {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        latch.countDown();\n                    }\n                }\n            );\n            clusterApplierService.runOnApplierThread(\n                \"test3\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(34).millis()),\n                new ActionListener<>() {\n                    @Override\n                    public void onResponse(Void ignored) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\n                \"test4\",\n                Priority.HIGH,\n                currentState -> {},\n                new ActionListener<>() {\n                    @Override\n                    public void onResponse(Void ignored) {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","date":"2021-09-14 23:51:18","endLine":306,"groupId":"102387","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"testLongClusterStateUpdateLogging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/83659942b30268dd981030426bd0366163446e.src","preCode":"    public void testLongClusterStateUpdateLogging() throws Exception {\n        MockLogAppender mockAppender = new MockLogAppender();\n        mockAppender.start();\n        mockAppender.addExpectation(\n                new MockLogAppender.UnseenEventExpectation(\n                        \"test1 shouldn't see because setting is too low\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test1] took [*] which is above the warn threshold of *\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test2\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test2] took [32s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test2]] took [*\"));\n        mockAppender.addExpectation(\n                new MockLogAppender.SeenEventExpectation(\n                        \"test4\",\n                        ClusterApplierService.class.getCanonicalName(),\n                        Level.WARN,\n                        \"*cluster state applier task [test3] took [34s] which is above the warn threshold of [*]: \" +\n                            \"[running task [test3]] took [*\"));\n\n        Logger clusterLogger = LogManager.getLogger(ClusterApplierService.class);\n        Loggers.addAppender(clusterLogger, mockAppender);\n        try {\n            final CountDownLatch latch = new CountDownLatch(4);\n            final CountDownLatch processedFirstTask = new CountDownLatch(1);\n            currentTimeMillis = randomLongBetween(0L, Long.MAX_VALUE / 2);\n            clusterApplierService.runOnApplierThread(\n                \"test1\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(1).millis()),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        latch.countDown();\n                        processedFirstTask.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            processedFirstTask.await();\n            clusterApplierService.runOnApplierThread(\n                \"test2\",\n                Priority.HIGH,\n                currentState -> {\n                    advanceTime(TimeValue.timeValueSeconds(32).millis());\n                    throw new IllegalArgumentException(\"Testing handling of exceptions in the cluster state task\");\n                },\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        fail();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        latch.countDown();\n                    }\n                }\n            );\n            clusterApplierService.runOnApplierThread(\n                \"test3\",\n                Priority.HIGH,\n                currentState -> advanceTime(TimeValue.timeValueSeconds(34).millis()),\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            \r\n            \r\n            clusterApplierService.runOnApplierThread(\n                \"test4\",\n                Priority.HIGH,\n                currentState -> {},\n                new ClusterApplyListener() {\n                    @Override\n                    public void onSuccess() {\n                        latch.countDown();\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        fail();\n                    }\n                }\n            );\n            latch.await();\n        } finally {\n            Loggers.removeAppender(clusterLogger, mockAppender);\n            mockAppender.stop();\n        }\n        mockAppender.assertAllExpectationsMatched();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"1a3f31f4a614278c390ae7303c761692e957eaa9","commitMessage":"@@@Use ActionListener for joins and state application (#77712)\n\nToday we have dedicated `JoinCallback` and `ClusterApplyListener`\ninterfaces for receiving the result of a join and a cluster state\napplication respectively. This commit replaces these two dedicated\ninterfaces with `ActionListener<Void>`.  reducing the need for adapter\ncode when interfacing with the rest of the system and simplifying the\nconstruction of some of the listeners used.","date":"2021-09-14 23:51:18","modifiedFileCount":"17","status":"M","submitter":"David Turner"}]
