[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public Query newFuzzyQuery(String text, int fuzziness) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                final BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                Query query = ft.fuzzyQuery(term, Fuzziness.fromEdits(fuzziness), settings.fuzzyPrefixLength,\n                    settings.fuzzyMaxExpansions, settings.fuzzyTranspositions);\n                disjuncts.add(wrapWithBoost(query, entry.getValue()));\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","date":"2018-04-26 03:22:53","endLine":147,"groupId":"1133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newFuzzyQuery","params":"(Stringtext@intfuzziness)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/221aa0244eb98d8a5380ddb8942a10408f6b63.src","preCode":"    public Query newFuzzyQuery(String text, int fuzziness) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                final BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                Query query = ft.fuzzyQuery(term, Fuzziness.fromEdits(fuzziness), settings.fuzzyPrefixLength,\n                    settings.fuzzyMaxExpansions, settings.fuzzyTranspositions);\n                disjuncts.add(wrapWithBoost(query, entry.getValue()));\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public Query newPrefixQuery(String text) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                if (settings.analyzeWildcard()) {\n                    Query analyzedQuery = newPossiblyAnalyzedQuery(fieldName, text, getAnalyzer(ft));\n                    if (analyzedQuery != null) {\n                        disjuncts.add(wrapWithBoost(analyzedQuery, entry.getValue()));\n                    }\n                } else {\n                    BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                    Query query = ft.prefixQuery(term.utf8ToString(), null, context);\n                    disjuncts.add(wrapWithBoost(query, entry.getValue()));\n                }\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","date":"2018-04-26 03:22:53","endLine":196,"groupId":"4021","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newPrefixQuery","params":"(Stringtext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/221aa0244eb98d8a5380ddb8942a10408f6b63.src","preCode":"    public Query newPrefixQuery(String text) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                if (settings.analyzeWildcard()) {\n                    Query analyzedQuery = newPossiblyAnalyzedQuery(fieldName, text, getAnalyzer(ft));\n                    if (analyzedQuery != null) {\n                        disjuncts.add(wrapWithBoost(analyzedQuery, entry.getValue()));\n                    }\n                } else {\n                    BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                    Query query = ft.prefixQuery(term.utf8ToString(), null, context);\n                    disjuncts.add(wrapWithBoost(query, entry.getValue()));\n                }\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2020-02-13 01:06:04","commitOrder":2,"curCode":"    public Query newFuzzyQuery(String text, int fuzziness) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                final BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                Query query = ft.fuzzyQuery(term, Fuzziness.fromEdits(fuzziness), settings.fuzzyPrefixLength,\n                    settings.fuzzyMaxExpansions, settings.fuzzyTranspositions, context);\n                disjuncts.add(wrapWithBoost(query, entry.getValue()));\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","date":"2020-02-13 01:06:04","endLine":147,"groupId":"27716","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newFuzzyQuery","params":"(Stringtext@intfuzziness)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/509ca2c112c69b49c102d71ca4d421e8c3b8cc.src","preCode":"    public Query newFuzzyQuery(String text, int fuzziness) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                final BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                Query query = ft.fuzzyQuery(term, Fuzziness.fromEdits(fuzziness), settings.fuzzyPrefixLength,\n                    settings.fuzzyMaxExpansions, settings.fuzzyTranspositions);\n                disjuncts.add(wrapWithBoost(query, entry.getValue()));\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public Query newPrefixQuery(String text) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                if (settings.analyzeWildcard()) {\n                    Query analyzedQuery = newPossiblyAnalyzedQuery(fieldName, text, getAnalyzer(ft));\n                    if (analyzedQuery != null) {\n                        disjuncts.add(wrapWithBoost(analyzedQuery, entry.getValue()));\n                    }\n                } else {\n                    BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                    Query query = ft.prefixQuery(term.utf8ToString(), null, context);\n                    disjuncts.add(wrapWithBoost(query, entry.getValue()));\n                }\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","date":"2018-04-26 03:22:53","endLine":196,"groupId":"4021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newPrefixQuery","params":"(Stringtext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/221aa0244eb98d8a5380ddb8942a10408f6b63.src","preCode":"    public Query newPrefixQuery(String text) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                if (settings.analyzeWildcard()) {\n                    Query analyzedQuery = newPossiblyAnalyzedQuery(fieldName, text, getAnalyzer(ft));\n                    if (analyzedQuery != null) {\n                        disjuncts.add(wrapWithBoost(analyzedQuery, entry.getValue()));\n                    }\n                } else {\n                    BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                    Query query = ft.prefixQuery(term.utf8ToString(), null, context);\n                    disjuncts.add(wrapWithBoost(query, entry.getValue()));\n                }\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"N"}],"commitId":"a8b39ed842c7770bd9275958c9f747502fd9a3ea","commitMessage":"@@@Add a cluster setting to disallow expensive queries (#51385)\n\nAdd a new cluster setting `search.allow_expensive_queries` which by\ndefault is `true`. If set to `false`.  certain queries that have \nusually slow performance cannot be executed and an error message\nis returned.\n\n- Queries that need to do linear scans to identify matches:\n  - Script queries\n- Queries that have a high up-front cost:\n  - Fuzzy queries\n  - Regexp queries\n  - Prefix queries (without index_prefixes enabled\n  - Wildcard queries\n  - Range queries on text and keyword fields\n- Joining queries\n  - HasParent queries\n  - HasChild queries\n  - ParentId queries\n  - Nested queries\n- Queries on deprecated 6.x geo shapes (using PrefixTree implementation)\n- Queries that may have a high per-document cost:\n  - Script score queries\n  - Percolate queries\n\nCloses: #29050","date":"2020-02-13 01:06:04","modifiedFileCount":"66","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-10-07 22:11:53","codes":[{"authorDate":"2020-10-07 22:11:53","commitOrder":3,"curCode":"    public Query newFuzzyQuery(String text, int fuzziness) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.getFieldType(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                final BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                Query query = ft.fuzzyQuery(term, Fuzziness.fromEdits(fuzziness), settings.fuzzyPrefixLength,\n                    settings.fuzzyMaxExpansions, settings.fuzzyTranspositions, context);\n                disjuncts.add(wrapWithBoost(query, entry.getValue()));\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","date":"2020-10-07 22:11:53","endLine":148,"groupId":"107743","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newFuzzyQuery","params":"(Stringtext@intfuzziness)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/9208d78dce566617cdd17809a6d47cacd9024e.src","preCode":"    public Query newFuzzyQuery(String text, int fuzziness) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                final BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                Query query = ft.fuzzyQuery(term, Fuzziness.fromEdits(fuzziness), settings.fuzzyPrefixLength,\n                    settings.fuzzyMaxExpansions, settings.fuzzyTranspositions, context);\n                disjuncts.add(wrapWithBoost(query, entry.getValue()));\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2020-10-07 22:11:53","commitOrder":3,"curCode":"    public Query newPrefixQuery(String text) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.getFieldType(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                if (settings.analyzeWildcard()) {\n                    Query analyzedQuery = newPossiblyAnalyzedQuery(fieldName, text, getAnalyzer(ft));\n                    if (analyzedQuery != null) {\n                        disjuncts.add(wrapWithBoost(analyzedQuery, entry.getValue()));\n                    }\n                } else {\n                    BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                    Query query = ft.prefixQuery(term.utf8ToString(), null, context);\n                    disjuncts.add(wrapWithBoost(query, entry.getValue()));\n                }\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","date":"2020-10-07 22:11:53","endLine":197,"groupId":"107743","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"newPrefixQuery","params":"(Stringtext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/9208d78dce566617cdd17809a6d47cacd9024e.src","preCode":"    public Query newPrefixQuery(String text) {\n        List<Query> disjuncts = new ArrayList<>();\n        for (Map.Entry<String,Float> entry : weights.entrySet()) {\n            final String fieldName = entry.getKey();\n            final MappedFieldType ft = context.fieldMapper(fieldName);\n            if (ft == null) {\n                disjuncts.add(newUnmappedFieldQuery(fieldName));\n                continue;\n            }\n            try {\n                if (settings.analyzeWildcard()) {\n                    Query analyzedQuery = newPossiblyAnalyzedQuery(fieldName, text, getAnalyzer(ft));\n                    if (analyzedQuery != null) {\n                        disjuncts.add(wrapWithBoost(analyzedQuery, entry.getValue()));\n                    }\n                } else {\n                    BytesRef term = getAnalyzer(ft).normalize(fieldName, text);\n                    Query query = ft.prefixQuery(term.utf8ToString(), null, context);\n                    disjuncts.add(wrapWithBoost(query, entry.getValue()));\n                }\n            } catch (RuntimeException e) {\n                disjuncts.add(rethrowUnlessLenient(e));\n            }\n        }\n        if (disjuncts.size() == 1) {\n            return disjuncts.get(0);\n        }\n        return new DisjunctionMaxQuery(disjuncts, 1.0f);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"95582da9a57086c1bf519b300ffc420d03448e28","commitMessage":"@@@Rename QueryShardContext#fieldMapper to getFieldType (#63399)\n\nGiven that we have a class called `FieldMapper` and that the `fieldMapper` method exposed by `QueryShardContext` actually allows to get a `MappedFieldType` given its name.  this commit renames such method to `getFieldType`","date":"2020-10-07 22:11:53","modifiedFileCount":"72","status":"M","submitter":"Luca Cavanna"}]
