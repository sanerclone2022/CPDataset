[{"authorTime":"2019-07-30 01:14:07","codes":[{"authorDate":"2019-07-30 01:14:07","commitOrder":1,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","date":"2019-07-30 01:14:07","endLine":51,"groupId":"30660","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/1b59049a3f425f4dfb38fff5d6f102dc2aec23.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/LifecyclePolicyMetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2019-07-30 01:14:07","commitOrder":1,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","date":"2019-07-30 01:14:07","endLine":76,"groupId":"30660","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/7a81ba56f2d9bdaac0afd155ef2e056f835e50.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/action/PutLifecycleRequestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"}],"commitId":"ea933280bc9496d2fcf15c4deff474b4668bf149","commitMessage":"@@@Rename indexlifecycle to ilm and snapshotlifecycle to slm (#44917)\n\nAs a followup to #44725 and #44608.  which renamed the packages within\nthe x-pack project.  this renames the packages within the core x-pack\nproject. It also renames 'snapshotlifecycle' within the HLRC to slm.","date":"2019-07-30 01:14:07","modifiedFileCount":"74","status":"B","submitter":"Lee Hinman"},{"authorTime":"2020-01-09 14:37:05","codes":[{"authorDate":"2020-01-09 14:37:05","commitOrder":2,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","date":"2020-01-09 14:37:05","endLine":52,"groupId":"30660","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/50616a128dd718e9094b8fa919d6616f828e3c.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/LifecyclePolicyMetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2020-01-09 14:37:05","commitOrder":2,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","date":"2020-01-09 14:37:05","endLine":78,"groupId":"30660","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/fd2f7dd5d76bf0dd542d147767a73b955578f8.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/action/PutLifecycleRequestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"060100d7327553594024b9effdca30851ce9dde3","commitMessage":"@@@ILM action to wait for SLM policy execution (#50454)\n\nThis change add new ILM action to wait for SLM policy execution to ensure that index has snapshot before deletion.\n\nCloses #45067 ","date":"2020-01-09 14:37:05","modifiedFileCount":"9","status":"M","submitter":"Przemko Robakowski"},{"authorTime":"2020-04-06 21:51:05","codes":[{"authorDate":"2020-04-06 21:51:05","commitOrder":3,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","date":"2020-04-06 21:51:05","endLine":53,"groupId":"30660","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/68/4b32a19a277c7bb3cb0266abe6585c428d7fe5.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/LifecyclePolicyMetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2020-04-06 21:51:05","commitOrder":3,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new)\n            ));\n    }\n","date":"2020-04-06 21:51:05","endLine":80,"groupId":"30660","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/1e20c5551dff4e926041f25b73fecad127a4ef.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/action/PutLifecycleRequestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"f6feb6c2c845aaab31cec4b4047c77c2caf85b89","commitMessage":"@@@Merge feature/searchable-snapshots branch into master (#54803)\n\nThis commit merges the searchable-snapshots feature branch into master.\nSee #54803 for the complete list of squashed commits.\n\nCo-authored-by: David Turner <david.turner@elastic.co>\nCo-authored-by: Yannick Welsch <yannick@welsch.lu>\nCo-authored-by: Lee Hinman <dakrone@users.noreply.github.com>\nCo-authored-by: Andrei Dan <andrei.dan@elastic.co>","date":"2020-04-06 21:51:05","modifiedFileCount":"73","status":"M","submitter":"Tanguy Leroux"},{"authorTime":"2020-09-17 17:56:49","codes":[{"authorDate":"2020-09-17 17:56:49","commitOrder":4,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MigrateAction.NAME, MigrateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","date":"2020-09-17 17:56:49","endLine":54,"groupId":"30660","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/048b51d743ba0aa053e99f026c01b8caa52d76.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/LifecyclePolicyMetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2020-09-17 17:56:49","commitOrder":4,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MigrateAction.NAME, MigrateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new)\n            ));\n    }\n","date":"2020-09-17 17:56:49","endLine":82,"groupId":"30660","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/a34217a8e4d1b3471a1b13426fc129178f197b.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/action/PutLifecycleRequestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"c1746afffd61048d0c12d3a77e6d8191a804ed49","commitMessage":"@@@ILM migrate data between tiers (#61377)\n\nThis adds ILM support for automatically migrating the managed\nindices between data tiers.\n\nThis proposal makes use of a MigrateAction that is injected\n(similar to how the Unfollow action is injected) in phases that\ndon't define index allocation rules using the AllocateAction or\ndon't explicitly define the MigrateAction itself (regardless if it's\nenabled or disabled).","date":"2020-09-17 17:56:49","modifiedFileCount":"18","status":"M","submitter":"Andrei Dan"},{"authorTime":"2021-01-29 09:48:09","codes":[{"authorDate":"2021-01-29 09:48:09","commitOrder":5,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MigrateAction.NAME, MigrateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RollupILMAction.NAME, RollupILMAction::new)\n            ));\n    }\n","date":"2021-01-29 09:48:09","endLine":55,"groupId":"108029","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/795bd47a9548079984a5bf6713761f7c9c086f.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MockAction.NAME, MockAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MigrateAction.NAME, MigrateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/LifecyclePolicyMetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2021-01-29 09:48:09","commitOrder":5,"curCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MigrateAction.NAME, MigrateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RollupILMAction.NAME, RollupILMAction::new)\n            ));\n    }\n","date":"2021-01-29 09:48:09","endLine":84,"groupId":"108029","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getNamedWriteableRegistry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/f4fb524fbf2cdf7e81a32dff9914611dcee531.src","preCode":"    protected NamedWriteableRegistry getNamedWriteableRegistry() {\n        return new NamedWriteableRegistry(\n            Arrays.asList(\n                new NamedWriteableRegistry.Entry(LifecycleType.class, TimeseriesLifecycleType.TYPE,\n                    (in) -> TimeseriesLifecycleType.INSTANCE),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, AllocateAction.NAME, AllocateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, WaitForSnapshotAction.NAME, WaitForSnapshotAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, DeleteAction.NAME, DeleteAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ForceMergeAction.NAME, ForceMergeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ReadOnlyAction.NAME, ReadOnlyAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, RolloverAction.NAME, RolloverAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, ShrinkAction.NAME, ShrinkAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, FreezeAction.NAME, FreezeAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SetPriorityAction.NAME, SetPriorityAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, UnfollowAction.NAME, UnfollowAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, MigrateAction.NAME, MigrateAction::new),\n                new NamedWriteableRegistry.Entry(LifecycleAction.class, SearchableSnapshotAction.NAME, SearchableSnapshotAction::new)\n            ));\n    }\n","realPath":"x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ilm/action/PutLifecycleRequestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"5811deb580ed1d72e1b412d3d29418deeaac9317","commitMessage":"@@@Add Rollup ILM Action (#65633)\n\nthis commit introduces a new Rollup ILM Action that allows indices\nto be rolled up according to a specific rollup config. The\naction also allows for the new rolled up index to be associated with\na different policy than the original/source index.\n\nRelates #42720.\n\nCloses #48003.","date":"2021-01-29 09:48:09","modifiedFileCount":"11","status":"M","submitter":"Tal Levy"}]
