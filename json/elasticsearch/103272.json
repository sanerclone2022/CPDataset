[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(null, \"value\"));\n            assertEquals(\"[match] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(\"fieldName\", null));\n            assertEquals(\"[match] requires query value\", e.getMessage());\n        }\n\n        MatchQueryBuilder matchQuery = new MatchQueryBuilder(\"fieldName\", \"text\");\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.prefixLength(-1));\n            assertEquals(\"[match] requires prefix length to be non-negative.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                    () -> matchQuery.maxExpansions(randomIntBetween(-10, 0)));\n            assertEquals(\"[match] requires maxExpansions to be positive.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.operator(null));\n            assertEquals(\"[match] requires operator to be non-null\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.zeroTermsQuery(null));\n            assertEquals(\"[match] requires zeroTermsQuery to be non-null\", e.getMessage());\n        }\n\n        matchQuery.analyzer(\"bogusAnalyzer\");\n        {\n            QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":245,"groupId":"68215","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIllegalValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/a4b99f19d1a7c3b886c31c92293620178d966b.src","preCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(null, \"value\"));\n            assertEquals(\"[match] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(\"fieldName\", null));\n            assertEquals(\"[match] requires query value\", e.getMessage());\n        }\n\n        MatchQueryBuilder matchQuery = new MatchQueryBuilder(\"fieldName\", \"text\");\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.prefixLength(-1));\n            assertEquals(\"[match] requires prefix length to be non-negative.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                    () -> matchQuery.maxExpansions(randomIntBetween(-10, 0)));\n            assertEquals(\"[match] requires maxExpansions to be positive.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.operator(null));\n            assertEquals(\"[match] requires operator to be non-null\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.zeroTermsQuery(null));\n            assertEquals(\"[match] requires zeroTermsQuery to be non-null\", e.getMessage());\n        }\n\n        matchQuery.analyzer(\"bogusAnalyzer\");\n        {\n            QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testBadAnalyzer() throws IOException {\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        matchQuery.analyzer(\"bogusAnalyzer\");\n\n        QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));\n        assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":119,"groupId":"68215","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/d5f98fe0b4769e74ba2b33275a7b53cfef14b8.src","preCode":"    public void testBadAnalyzer() throws IOException {\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        matchQuery.analyzer(\"bogusAnalyzer\");\n\n        QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));\n        assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":2,"curCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(null, \"value\"));\n            assertEquals(\"[match] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(\"fieldName\", null));\n            assertEquals(\"[match] requires query value\", e.getMessage());\n        }\n\n        MatchQueryBuilder matchQuery = new MatchQueryBuilder(\"fieldName\", \"text\");\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.prefixLength(-1));\n            assertEquals(\"[match] requires prefix length to be non-negative.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> matchQuery.maxExpansions(randomIntBetween(-10, 0)));\n            assertEquals(\"[match] requires maxExpansions to be positive.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.operator(null));\n            assertEquals(\"[match] requires operator to be non-null\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.zeroTermsQuery(null));\n            assertEquals(\"[match] requires zeroTermsQuery to be non-null\", e.getMessage());\n        }\n\n        matchQuery.analyzer(\"bogusAnalyzer\");\n        {\n            QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createSearchExecutionContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":246,"groupId":"103272","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIllegalValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fe/bef003dadd4ecf44f88693de56c7329680117c.src","preCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(null, \"value\"));\n            assertEquals(\"[match] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchQueryBuilder(\"fieldName\", null));\n            assertEquals(\"[match] requires query value\", e.getMessage());\n        }\n\n        MatchQueryBuilder matchQuery = new MatchQueryBuilder(\"fieldName\", \"text\");\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.prefixLength(-1));\n            assertEquals(\"[match] requires prefix length to be non-negative.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> matchQuery.maxExpansions(randomIntBetween(-10, 0)));\n            assertEquals(\"[match] requires maxExpansions to be positive.\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.operator(null));\n            assertEquals(\"[match] requires operator to be non-null\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> matchQuery.zeroTermsQuery(null));\n            assertEquals(\"[match] requires zeroTermsQuery to be non-null\", e.getMessage());\n        }\n\n        matchQuery.analyzer(\"bogusAnalyzer\");\n        {\n            QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":2,"curCode":"    public void testBadAnalyzer() throws IOException {\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        matchQuery.analyzer(\"bogusAnalyzer\");\n\n        QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createSearchExecutionContext()));\n        assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n    }\n","date":"2021-01-15 01:11:59","endLine":122,"groupId":"103272","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadAnalyzer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/14/be4c199888b2894c00e8e533bd733571c733c9.src","preCode":"    public void testBadAnalyzer() throws IOException {\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        matchQuery.analyzer(\"bogusAnalyzer\");\n\n        QueryShardException e = expectThrows(QueryShardException.class, () -> matchQuery.toQuery(createShardContext()));\n        assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
