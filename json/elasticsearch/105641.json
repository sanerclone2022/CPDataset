[{"authorTime":"2019-03-07 06:18:43","codes":[{"authorDate":"2019-03-07 06:18:43","commitOrder":1,"curCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","date":"2019-03-07 06:18:43","endLine":515,"groupId":"57061","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotFindDefaultPipelineFromTemplateMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a1/3e8af919b2a598a86bf5557a5a12b1a7ef2180.src","preCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"B"},{"authorDate":"2019-03-07 06:18:43","commitOrder":1,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n    }\n","date":"2019-03-07 06:18:43","endLine":551,"groupId":"57061","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a1/3e8af919b2a598a86bf5557a5a12b1a7ef2180.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"B"}],"commitId":"66ec35801cf9761180ca24de71d73c7f128a4dba","commitMessage":"@@@Execute ingest node pipeline before creating the index (#39607)\n\nPrior to this commit (and after 6.5.0).  if an ingest node changes\nthe _index in a pipeline.  the original target index would be created.\nFor daily indexes this could create an extra.  empty index per day.\n\nThis commit changes the TransportBulkAction to execute the ingest node\npipeline before attempting to create the index. This ensures that the \nonly index created is the original or one set by the ingest node pipeline. \nThis was the execution order prior to 6.5.0 (#32786). \n\nThe execution order was changed in 6.5 to better support default pipelines. \nSpecifically the execution order was changed to be able to read the settings\nfrom the index meta data. This commit also includes a change in logic such \nthat if the target index does not exist when ingest node pipeline runs.  it \nwill now pull the default pipeline (if one exists) from the settings of the \nbest matched of the index template. \n\nRelates #32786\nRelates #32758 \nCloses #36545 \n","date":"2019-03-07 06:18:43","modifiedFileCount":"2","status":"B","submitter":"Jake Landis"},{"authorTime":"2019-07-12 04:53:46","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":2,"curCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","date":"2019-07-12 04:53:46","endLine":530,"groupId":"57061","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotFindDefaultPipelineFromTemplateMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/22ed75d60912a306cc7ba72585df219f545b7e.src","preCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"},{"authorDate":"2019-07-12 04:53:46","commitOrder":2,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n    }\n","date":"2019-07-12 04:53:46","endLine":566,"groupId":"57061","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/22ed75d60912a306cc7ba72585df219f545b7e.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"M"}],"commitId":"f7d06eea557cc5bb0f5a56c4ec0716bd58ef7bca","commitMessage":"@@@Remove most direct test calls to TransportAction.execute (#44241)\n\nThere are currently 3 variants of TransportAction.execute. The\nimplementations of these require additional ctor arguments to all\nTransportAction implementations. While the non test uses can be\nconverted to using NodeClient to execute other actions.  using that for\ntest cases would be cumbersome and defeat the purpose of unit tests\ntesting an action's implementation directly. This commit adds a public\ntest-only utility method for test to use to call execute. This method\nwill continue to be available when the execute implementations are\ncollapsed and made package private.\n\nrelates #43881","date":"2019-07-12 04:53:46","modifiedFileCount":"12","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":3,"curCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","date":"2019-07-12 04:53:46","endLine":530,"groupId":"57061","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotFindDefaultPipelineFromTemplateMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/22ed75d60912a306cc7ba72585df219f545b7e.src","preCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"N"},{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2019-09-25 22:03:06","endLine":573,"groupId":"57061","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90b5200d19a1ff79e24d52ad0067627eeb00da.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"M"}],"commitId":"2c7fd822930b4ecb651d1903d99798e6f0c504b2","commitMessage":"@@@Allow ingest processors to execute in a non blocking manner. (#46241)\n\nThis PR changes the ingest executing to be non blocking\nby adding an additional method to the Processor interface\nthat accepts a BiConsumer as handler and changing\nIngestService#executeBulkRequest(...) to ingest document\nin a non blocking fashion iff a processor executes\nin a non blocking fashion.\n\nThis is the second PR that merges changes made to server module from\nthe enrich branch (see #32789) into the master branch.\n\nThe plan is to merge changes made to the server module separately from\nthe pr that will merge enrich into master.  so that these changes can\nbe reviewed in isolation.\n\nThis change originates from the enrich branch and was introduced there\nin #43361.","date":"2019-09-25 22:03:06","modifiedFileCount":"20","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-10-11 17:23:55","codes":[{"authorDate":"2019-10-11 17:23:55","commitOrder":4,"curCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","date":"2019-10-11 17:23:55","endLine":537,"groupId":"57061","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotFindDefaultPipelineFromTemplateMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"M"},{"authorDate":"2019-10-11 17:23:55","commitOrder":4,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2019-10-11 17:23:55","endLine":574,"groupId":"57061","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"}],"commitId":"566e1b7d33ec62e2f6011245782cd65d6381ee43","commitMessage":"@@@Remove type field from DocWriteRequest and associated Response objects (#47671)\n\nThis commit removes the type field from index.  update and delete requests.  and their\nassociated responses.\n\nRelates to #41059","date":"2019-10-11 17:23:55","modifiedFileCount":"145","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2019-10-11 17:23:55","commitOrder":5,"curCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","date":"2019-10-11 17:23:55","endLine":537,"groupId":"57061","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotFindDefaultPipelineFromTemplateMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"N"},{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","date":"2020-04-01 03:52:01","endLine":574,"groupId":"57061","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/570215d8a3449beb96241f498163d105c9441a.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetaData> templateMetaDataBuilder = ImmutableOpenMap.builder();\n        templateMetaDataBuilder.put(\"template1\", IndexTemplateMetaData.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetaDataBuilder.put(\"template2\", IndexTemplateMetaData.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetaDataBuilder.put(\"template3\", IndexTemplateMetaData.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetaDataBuilder.put(\"template4\", IndexTemplateMetaData.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        MetaData metaData = mock(MetaData.class);\n        when(state.metaData()).thenReturn(metaData);\n        when(state.getMetaData()).thenReturn(metaData);\n        when(metaData.templates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.getTemplates()).thenReturn(templateMetaDataBuilder.build());\n        when(metaData.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-09-23 02:14:45","codes":[{"authorDate":"2019-10-11 17:23:55","commitOrder":6,"curCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","date":"2019-10-11 17:23:55","endLine":537,"groupId":"57061","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotFindDefaultPipelineFromTemplateMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"N"},{"authorDate":"2020-09-23 02:14:45","commitOrder":6,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-09-23 02:14:45","endLine":627,"groupId":"57061","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"242083a36e02496aae9214dc41b89372022e7076","commitMessage":"@@@Dedicated threadpool for system index writes (#61655)\n\nThis commit adds a dedicated threadpool for system index write\noperations. The dedicated resources for system index writes serves as\na means to ensure that user activity does not block important system\noperations from occurring such as the management of users and roles.","date":"2020-09-23 02:14:45","modifiedFileCount":"29","status":"M","submitter":"Jay Modi"},{"authorTime":"2020-11-18 18:17:00","codes":[{"authorDate":"2019-10-11 17:23:55","commitOrder":7,"curCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","date":"2019-10-11 17:23:55","endLine":537,"groupId":"105641","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotFindDefaultPipelineFromTemplateMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testNotFindDefaultPipelineFromTemplateMatches(){\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n        assertEquals(IngestService.NOOP_PIPELINE_NAME, indexRequest.getPipeline());\n        verifyZeroInteractions(ingestService);\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"N"},{"authorDate":"2020-11-18 18:17:00","commitOrder":7,"curCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        final ImmutableOpenMap<String, IndexTemplateMetadata> templateMetadata = templateMetadataBuilder.build();\n        when(metadata.templates()).thenReturn(templateMetadata);\n        when(metadata.getTemplates()).thenReturn(templateMetadata);\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","date":"2020-11-18 18:17:00","endLine":622,"groupId":"105641","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindDefaultPipelineFromTemplateMatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9c/cdf19c14562dcce5af39a0937a84e4a9a99925.src","preCode":"    public void testFindDefaultPipelineFromTemplateMatch(){\n        Exception exception = new Exception(\"fake exception\");\n        ClusterState state = clusterService.state();\n\n        ImmutableOpenMap.Builder<String, IndexTemplateMetadata> templateMetadataBuilder = ImmutableOpenMap.builder();\n        templateMetadataBuilder.put(\"template1\", IndexTemplateMetadata.builder(\"template1\").patterns(Arrays.asList(\"missing_index\"))\n            .order(1).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline1\").build()).build());\n        templateMetadataBuilder.put(\"template2\", IndexTemplateMetadata.builder(\"template2\").patterns(Arrays.asList(\"missing_*\"))\n            .order(2).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline2\").build()).build());\n        templateMetadataBuilder.put(\"template3\", IndexTemplateMetadata.builder(\"template3\").patterns(Arrays.asList(\"missing*\"))\n            .order(3).build());\n        templateMetadataBuilder.put(\"template4\", IndexTemplateMetadata.builder(\"template4\").patterns(Arrays.asList(\"nope\"))\n            .order(4).settings(Settings.builder().put(IndexSettings.DEFAULT_PIPELINE.getKey(), \"pipeline4\").build()).build());\n\n        Metadata metadata = mock(Metadata.class);\n        when(state.metadata()).thenReturn(metadata);\n        when(state.getMetadata()).thenReturn(metadata);\n        when(metadata.templates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.getTemplates()).thenReturn(templateMetadataBuilder.build());\n        when(metadata.indices()).thenReturn(ImmutableOpenMap.of());\n\n        IndexRequest indexRequest = new IndexRequest(\"missing_index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> responseCalled.set(true),\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        assertEquals(\"pipeline2\", indexRequest.getPipeline());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"M"}],"commitId":"ba5f454139051c8b088c7d0ba097294ea3a6bf40","commitMessage":"@@@Minor Cleanup in org.elasticsearch.common.collect (#64955)\n\n* Return empty map singleton from builder\n* Remove dead methods\n* Cleanup duplicate iterator\n","date":"2020-11-18 18:17:00","modifiedFileCount":"16","status":"M","submitter":"Armin Braun"}]
