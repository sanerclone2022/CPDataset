[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRandomDoubles() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(\"field\", valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n            }\n        );\n    }\n","date":"2018-04-26 03:22:53","endLine":88,"groupId":"33488","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomDoubles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/c1420fb22653346dee1376e6028cf1f5584977.src","preCode":"    public void testRandomDoubles() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(\"field\", valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRandomLongs() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        long value = randomIntBetween(-100, 100);\n                        doc.add(new SortedNumericDocValuesField(\"field\", value));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n            }\n        );\n    }\n","date":"2018-04-26 03:22:53","endLine":117,"groupId":"33488","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomLongs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/c1420fb22653346dee1376e6028cf1f5584977.src","preCode":"    public void testRandomLongs() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        long value = randomIntBetween(-100, 100);\n                        doc.add(new SortedNumericDocValuesField(\"field\", value));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-01-23 01:38:55","codes":[{"authorDate":"2019-01-23 01:38:55","commitOrder":2,"curCode":"    public void testRandomDoubles() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(\"field\", valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","date":"2019-01-23 01:38:55","endLine":89,"groupId":"33488","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomDoubles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/b15145455069180b760c05263752874ccfa28d.src","preCode":"    public void testRandomDoubles() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(\"field\", valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2019-01-23 01:38:55","commitOrder":2,"curCode":"    public void testRandomLongs() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        long value = randomIntBetween(-100, 100);\n                        doc.add(new SortedNumericDocValuesField(\"field\", value));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","date":"2019-01-23 01:38:55","endLine":119,"groupId":"33488","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomLongs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/b15145455069180b760c05263752874ccfa28d.src","preCode":"    public void testRandomLongs() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        long value = randomIntBetween(-100, 100);\n                        doc.add(new SortedNumericDocValuesField(\"field\", value));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"2ba9e361aba7df6e9c0b5fa8fae3d219d50ddf09","commitMessage":"@@@Add helper classes to determine if aggs have a value (#36020)\n\nThis adds a set of helper classes to determine if an agg \"has a value\". \nThis is needed because InternalAggs represent \"empty\" in different \nmanners according to convention. Some use `NaN`.  `+/- Inf`.  `0.0`.  etc.\n\nA user can pass the Internal agg type to one of these helper methods\nand it will report if the agg contains a value or not.  which allows the\nuser to differentiate \"empty\" from a real `NaN`.\n\nThese helpers are best-effort in some cases.  For example.  several\npipeline aggs share a single return class but use different conventions\nto mark \"empty\".  so the helper uses the loosest definition that applies\nto all the aggs that use the class.\n\nSums in particular are unreliable.  The InternalSum simply returns 0.0\nif the agg is empty (which is correct.  no values == sum of zero).  But this\nalso means the helper cannot differentiate from \"empty\" and `+1 + -1`.","date":"2019-01-23 01:38:55","modifiedFileCount":"45","status":"M","submitter":"Zachary Tong"},{"authorTime":"2020-03-24 09:39:56","codes":[{"authorDate":"2020-03-24 09:39:56","commitOrder":3,"curCode":"    public void testRandomDoubles() throws IOException {\n        final MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(\n            stats(\"_name\").field(ft.name()),\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(ft.name(), valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            },\n            singleton(ft)\n        );\n    }\n","date":"2020-03-24 09:39:56","endLine":123,"groupId":"8580","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomDoubles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/d01c94de2f3163474251780be16cb0b5437f19.src","preCode":"    public void testRandomDoubles() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(\"field\", valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-03-24 09:39:56","commitOrder":3,"curCode":"    public void testRandomLongs() throws IOException {\n        randomLongsTestCase(\n            randomIntBetween(1, 5),\n            stats(\"_name\").field(\"field\"),\n            (expected, stats) -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","date":"2020-03-24 09:39:56","endLine":138,"groupId":"33488","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomLongs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/d01c94de2f3163474251780be16cb0b5437f19.src","preCode":"    public void testRandomLongs() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        long value = randomIntBetween(-100, 100);\n                        doc.add(new SortedNumericDocValuesField(\"field\", value));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"408311dc0f33e323d7e67ecfc4c5348be9c025ab","commitMessage":"@@@add tests to StatsAggregatorTests (#53768)\n\nAdds tests for supported ValuesSourceTypes.  unmapped fields.  scripting. \nand the missing param. The tests for unmapped fields and scripting are\nmigrated from the StatsIT integration test","date":"2020-03-24 09:39:56","modifiedFileCount":"4","status":"M","submitter":"Andy Bristol"},{"authorTime":"2020-03-24 09:39:56","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testRandomDoubles() throws IOException {\n        final MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.DOUBLE);\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(\n            stats(\"_name\").field(ft.name()),\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(ft.name(), valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            },\n            singleton(ft)\n        );\n    }\n","date":"2020-06-16 00:47:15","endLine":122,"groupId":"8580","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomDoubles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/11dbf867bad8ae103fa03dc92c964e63b4489b.src","preCode":"    public void testRandomDoubles() throws IOException {\n        final MappedFieldType ft = new NumberFieldMapper.NumberFieldType(NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(\n            stats(\"_name\").field(ft.name()),\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(ft.name(), valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            },\n            singleton(ft)\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-03-24 09:39:56","commitOrder":4,"curCode":"    public void testRandomLongs() throws IOException {\n        randomLongsTestCase(\n            randomIntBetween(1, 5),\n            stats(\"_name\").field(\"field\"),\n            (expected, stats) -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","date":"2020-03-24 09:39:56","endLine":138,"groupId":"33488","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomLongs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/d01c94de2f3163474251780be16cb0b5437f19.src","preCode":"    public void testRandomLongs() throws IOException {\n        randomLongsTestCase(\n            randomIntBetween(1, 5),\n            stats(\"_name\").field(\"field\"),\n            (expected, stats) -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-03-24 09:39:56","codes":[{"authorDate":"2021-01-14 16:12:24","commitOrder":5,"curCode":"    public void testRandomDoubles() throws IOException {\n        final MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.DOUBLE);\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(\n            stats(\"_name\").field(ft.name()),\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(ft.name(), valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            },\n            ft\n        );\n    }\n","date":"2021-01-14 16:12:24","endLine":122,"groupId":"105277","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomDoubles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/04/7c443058edf443ae9a6237bb7802dc49da1a9f.src","preCode":"    public void testRandomDoubles() throws IOException {\n        final MappedFieldType ft = new NumberFieldMapper.NumberFieldType(\"field\", NumberType.DOUBLE);\n        final SimpleStatsAggregator expected = new SimpleStatsAggregator();\n        testCase(\n            stats(\"_name\").field(ft.name()),\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(ft.name(), valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            },\n            singleton(ft)\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-03-24 09:39:56","commitOrder":5,"curCode":"    public void testRandomLongs() throws IOException {\n        randomLongsTestCase(\n            randomIntBetween(1, 5),\n            stats(\"_name\").field(\"field\"),\n            (expected, stats) -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","date":"2020-03-24 09:39:56","endLine":138,"groupId":"105277","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomLongs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/d01c94de2f3163474251780be16cb0b5437f19.src","preCode":"    public void testRandomLongs() throws IOException {\n        randomLongsTestCase(\n            randomIntBetween(1, 5),\n            stats(\"_name\").field(\"field\"),\n            (expected, stats) -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertTrue(AggregationInspectionHelper.hasValue(stats));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"c8dcbe7687b56d8da234db313f583e76d9683614","commitMessage":"@@@add the ability to retrieve the fieldnames an aggregation creates from the builder (#65139)\n\nAdd a getOutputFieldNames method to aggregationbuilder to retrieve the names of the fields the\naggregation produces. Implementation is optional and provided for a set of multi value aggregations\nas a start.","date":"2021-01-14 16:12:24","modifiedFileCount":"12","status":"M","submitter":"Hendrik Muhs"}]
