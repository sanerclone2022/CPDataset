[{"authorTime":"2019-01-16 18:52:17","codes":[{"authorDate":"2019-01-16 18:52:17","commitOrder":1,"curCode":"    public void testLoadTrustFromPkcs12() {\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.p12\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"p12-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"p12-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"PKCS12\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.p12\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","date":"2019-01-16 18:52:17","endLine":122,"groupId":"65305","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadTrustFromPkcs12","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/a161b78fd5f9e13d17503177041f73f67e50ce.src","preCode":"    public void testLoadTrustFromPkcs12() {\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.p12\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"p12-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"p12-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"PKCS12\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.p12\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2019-01-16 18:52:17","commitOrder":1,"curCode":"    public void testLoadTrustFromJKS() {\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.jks\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"jks-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"jks-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"jks\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.jks\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","date":"2019-01-16 18:52:17","endLine":144,"groupId":"65305","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadTrustFromJKS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/a161b78fd5f9e13d17503177041f73f67e50ce.src","preCode":"    public void testLoadTrustFromJKS() {\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.jks\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"jks-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"jks-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"jks\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.jks\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"6d99e790b3ee78f99f4810ff79b38488e43a146d","commitMessage":"@@@Add SSL Configuration Library (#37287)\n\nThis introduces a new ssl-config library that can parse\nand validate SSL/TLS settings and files.\n\nIt supports the standard configuration settings as used in the\nElastic Stack such as \"ssl.verification_mode\" and\n\"ssl.certificate_authorities\" as well as all file formats used\nin other parts of Elasticsearch security (such as PEM.  JKS. \nPKCS#12.  PKCS#8.  et al).\n\n","date":"2019-01-16 18:52:17","modifiedFileCount":"0","status":"B","submitter":"Tim Vernum"},{"authorTime":"2020-12-24 03:00:49","codes":[{"authorDate":"2020-12-24 03:00:49","commitOrder":2,"curCode":"    public void testLoadTrustFromPkcs12() {\n        assumeFalse(\"Can't use JKS/PKCS12 keystores in a FIPS JVM\", inFipsJvm());\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.p12\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"p12-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"p12-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"PKCS12\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.p12\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","date":"2020-12-24 03:00:49","endLine":126,"groupId":"101540","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadTrustFromPkcs12","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/c8818bf5cfd81d0feffd58255d245c0353fc2a.src","preCode":"    public void testLoadTrustFromPkcs12() {\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.p12\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"p12-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"p12-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"PKCS12\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.p12\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-12-24 03:00:49","commitOrder":2,"curCode":"    public void testLoadTrustFromJKS() {\n        assumeFalse(\"Can't use JKS/PKCS12 keystores in a FIPS JVM\", inFipsJvm());\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.jks\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"jks-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"jks-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"jks\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.jks\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","date":"2020-12-24 03:00:49","endLine":149,"groupId":"101540","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadTrustFromJKS","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/c8818bf5cfd81d0feffd58255d245c0353fc2a.src","preCode":"    public void testLoadTrustFromJKS() {\n        final Settings.Builder builder = Settings.builder().put(\"test.ssl.truststore.path\", \"ca-all/ca.jks\");\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.password\", \"jks-pass\");\n        } else {\n            secureSettings.setString(\"test.ssl.truststore.secure_password\", \"jks-pass\");\n        }\n        if (randomBoolean()) {\n            \r\n            builder.put(\"test.ssl.truststore.type\", \"jks\");\n        }\n        if (randomBoolean()) {\n            builder.put(\"test.ssl.truststore.algorithm\", TrustManagerFactory.getDefaultAlgorithm());\n        }\n        settings = builder.build();\n        final SslConfiguration configuration = loader.load(certRoot);\n        final SslTrustConfig trustConfig = configuration.getTrustConfig();\n        assertThat(trustConfig, instanceOf(StoreTrustConfig.class));\n        assertThat(trustConfig.getDependentFiles(), containsInAnyOrder(getDataPath(\"/certs/ca-all/ca.jks\")));\n        assertThat(trustConfig.createTrustManager(), notNullValue());\n    }\n","realPath":"libs/ssl-config/src/test/java/org/elasticsearch/common/ssl/SslConfigurationLoaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"bd873698bceec01e3860c9544bce80f645a1f704","commitMessage":"@@@Ensure CI is run in FIPS 140 approved only mode (#64024)\n\nWe were depending on the BouncyCastle FIPS own mechanics to set\nitself in approved only mode since we run with the Security\nManager enabled. The check during startup seems to happen before we\nset our restrictive SecurityManager though in\norg.elasticsearch.bootstrap.Elasticsearch .  and this means that\nBCFIPS would not be in approved only mode.  unless explicitly\nconfigured so.\n\nThis commit sets the appropriate JVM property to explicitly set\nBCFIPS in approved only mode in CI and adds tests to ensure that we\nwill be running with BCFIPS in approved only mode when we expect to.\nIt also sets xpack.security.fips_mode.enabled to true for all test clusters\nused in fips mode and sets the distribution to the default one. It adds a\npassword to the elasticsearch keystore for all test clusters that run in fips\nmode.\nMoreover.  it changes a few unit tests where we would use bcrypt even in\nFIPS 140 mode. These would still pass since we are bundling our own\nbcrypt implementation.  but are now changed to use FIPS 140 approved\nalgorithms instead for better coverage.\n\nIt also addresses a number of tests that would fail in approved only mode\nMainly:\n\n    Tests that use PBKDF2 with a password less than 112 bits (14char). We\n    elected to change the passwords used everywhere to be at least 14\n    characters long instead of mandating\n    the use of pbkdf2_stretch because both pbkdf2 and\n    pbkdf2_stretch are supported and allowed in fips mode and it makes sense\n    to test with both. We could possibly figure out the password algorithm used\n    for each test and adjust password length accordingly only for pbkdf2 but\n    there is little value in that. It's good practice to use strong passwords so if\n    our docs and tests use longer passwords.  then it's for the best. The approach\n    is brittle as there is no guarantee that the next test that will be added won't\n    use a short password.  so we add some testing documentation too.\n    This leaves us with a possible coverage gap since we do support passwords\n    as short as 6 characters but we only test with > 14 chars but the\n    validation itself was not tested even before. Tests can be added in a followup. \n    outside of fips related context.\n\n    Tests that use a PKCS12 keystore and were not already muted.\n\n    Tests that depend on running test clusters with a basic license or\n    using the OSS distribution as FIPS 140 support is not available in\n    neither of these.\n\nFinally.  it adds some information around FIPS 140 testing in our testing\ndocumentation reference so that developers can hopefully keep in\nmind fips 140 related intricacies when writing/changing docs.","date":"2020-12-24 03:00:49","modifiedFileCount":"81","status":"M","submitter":"Ioannis Kakavas"}]
