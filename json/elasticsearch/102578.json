[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testParseGeoPointLonNoLat() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lon\", lon).endObject();\n        XContentParser parser = createParser(json);\n        parser.nextToken();\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n        assertThat(e.getMessage(), is(\"field [lat] missing\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":474,"groupId":"2781","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseGeoPointLonNoLat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/db80c4b0633ac56cfc05ac99aa493bf01175db.src","preCode":"    public void testParseGeoPointLonNoLat() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lon\", lon).endObject();\n        XContentParser parser = createParser(json);\n        parser.nextToken();\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n        assertThat(e.getMessage(), is(\"field [lat] missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testParseGeoPointLatWrongType() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lat\", false).field(\"lon\", lon).endObject();\n        XContentParser parser = createParser(json);\n        parser.nextToken();\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n        assertThat(e.getMessage(), is(\"latitude must be a number\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":492,"groupId":"2781","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseGeoPointLatWrongType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/db80c4b0633ac56cfc05ac99aa493bf01175db.src","preCode":"    public void testParseGeoPointLatWrongType() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lat\", false).field(\"lon\", lon).endObject();\n        XContentParser parser = createParser(json);\n        parser.nextToken();\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n        assertThat(e.getMessage(), is(\"latitude must be a number\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-06-25 03:39:56","codes":[{"authorDate":"2018-06-25 03:39:56","commitOrder":2,"curCode":"    public void testParseGeoPointLonNoLat() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lon\", lon).endObject();\n        try (XContentParser parser = createParser(json)) {\n            parser.nextToken();\n            Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n            assertThat(e.getMessage(), is(\"field [lat] missing\"));\n        }\n    }\n","date":"2018-06-25 16:41:24","endLine":484,"groupId":"67422","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseGeoPointLonNoLat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/ec336e2a33fcd0ad4f849aca7c53f995043205.src","preCode":"    public void testParseGeoPointLonNoLat() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lon\", lon).endObject();\n        XContentParser parser = createParser(json);\n        parser.nextToken();\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n        assertThat(e.getMessage(), is(\"field [lat] missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"M"},{"authorDate":"2018-06-25 03:39:56","commitOrder":2,"curCode":"    public void testParseGeoPointLatWrongType() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lat\", false).field(\"lon\", lon).endObject();\n        try (XContentParser parser = createParser(json)) {\n            parser.nextToken();\n            Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n            assertThat(e.getMessage(), is(\"latitude must be a number\"));\n        }\n    }\n","date":"2018-06-25 16:41:24","endLine":504,"groupId":"67422","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseGeoPointLatWrongType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/ec336e2a33fcd0ad4f849aca7c53f995043205.src","preCode":"    public void testParseGeoPointLatWrongType() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lat\", false).field(\"lon\", lon).endObject();\n        XContentParser parser = createParser(json);\n        parser.nextToken();\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n        assertThat(e.getMessage(), is(\"latitude must be a number\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"M"}],"commitId":"e6dc01d2b7d36b6d2a6aa11289afb70c9568c986","commitMessage":"@@@Close xcontent parsers (partial) (#31513)\n\nPartial pass at closing XContentParsers in server.  This mostly involved adding try-with-resources statements around the usage of XContentParsers.","date":"2018-06-25 16:41:24","modifiedFileCount":"53","status":"M","submitter":"Tom Callahan"},{"authorTime":"2019-03-29 01:55:31","codes":[{"authorDate":"2019-03-29 01:55:31","commitOrder":3,"curCode":"    public void testParseGeoPointLonNoLat() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lon\", lon).endObject();\n        try (XContentParser parser = createParser(json)) {\n            parser.nextToken();\n            Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n            assertThat(e.getMessage(), is(\"field [lat] missing\"));\n            assertThat(parser.currentToken(), is(Token.END_OBJECT));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-03-29 01:55:31","endLine":519,"groupId":"102578","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseGeoPointLonNoLat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/85e29f0209073b16dc36f491b5e8de6161814d.src","preCode":"    public void testParseGeoPointLonNoLat() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lon\", lon).endObject();\n        try (XContentParser parser = createParser(json)) {\n            parser.nextToken();\n            Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n            assertThat(e.getMessage(), is(\"field [lat] missing\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"},{"authorDate":"2019-03-29 01:55:31","commitOrder":3,"curCode":"    public void testParseGeoPointLatWrongType() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lat\", false).field(\"lon\", lon).endObject();\n        try (XContentParser parser = createParser(json)) {\n            parser.nextToken();\n            Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n            assertThat(e.getMessage(), is(\"latitude must be a number\"));\n            assertThat(parser.currentToken(), is(Token.END_OBJECT));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-03-29 01:55:31","endLine":543,"groupId":"102578","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseGeoPointLatWrongType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/85e29f0209073b16dc36f491b5e8de6161814d.src","preCode":"    public void testParseGeoPointLatWrongType() throws IOException {\n        double lon = 0.0;\n        XContentBuilder json = jsonBuilder().startObject().field(\"lat\", false).field(\"lon\", lon).endObject();\n        try (XContentParser parser = createParser(json)) {\n            parser.nextToken();\n            Exception e = expectThrows(ElasticsearchParseException.class, () -> GeoUtils.parseGeoPoint(parser));\n            assertThat(e.getMessage(), is(\"latitude must be a number\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/geo/GeoUtilsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"}],"commitId":"bd9e9b3acf0b08ba3bc1c647fbffc22e2d305002","commitMessage":"@@@Geo Point parse error fix (#40447)\n\nWhen geo point parsing threw a parse exception.  it did not consume\nremaining tokens from the parser. This in turn meant that\nindexing documents with malformed geo points into mappings with\nignore_malformed=true would fail in some cases.  since DocumentParser\nexpects geo_point parsing to end on the END_OBJECT token.\n\nRelated to #17617","date":"2019-03-29 01:55:31","modifiedFileCount":"5","status":"M","submitter":"Henning Andersen"}]
