[{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":1,"curCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         Settings indexSettings, MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, indexSettings, multiFields,\n                ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","date":"2020-06-16 00:47:15","endLine":73,"groupId":"45094","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@SettingsindexSettings@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/88ba791a67d99777e250a9c584420716deac77.src","preCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         Settings indexSettings, MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, indexSettings, multiFields,\n                ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2020-06-16 00:47:15","commitOrder":1,"curCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      Settings indexSettings,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, indexSettings, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","date":"2020-06-16 00:47:15","endLine":53,"groupId":"45094","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@SettingsindexSettings@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/64/40147615ba4b81dd588d150ec20e1c149b9bd2.src","preCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      Settings indexSettings,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, indexSettings, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"B","submitter":"Alan Woodward"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":2,"curCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","date":"2020-06-26 22:33:37","endLine":74,"groupId":"45094","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/400ba75cdaffa3cf22c304bd4d179176aaa0a2.src","preCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         Settings indexSettings, MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, indexSettings, multiFields,\n                ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":2,"curCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","date":"2020-06-26 22:33:37","endLine":51,"groupId":"45094","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/3e5ed0ec3e66d5272e5dd488170ed19fd276cb.src","preCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      Settings indexSettings,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, indexSettings, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-22 21:41:24","codes":[{"authorDate":"2020-09-22 21:41:24","commitOrder":3,"curCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","date":"2020-09-22 21:41:24","endLine":82,"groupId":"45094","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/5de97575d9ae845eac33d1afc8204feb647752.src","preCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2020-09-22 21:41:24","commitOrder":3,"curCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","date":"2020-09-22 21:41:24","endLine":53,"groupId":"45094","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/702631376932e3cb89c6fdc9be747c553e9bf2.src","preCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"3a9b65733c50e36182c2906a692297ef80720466","commitMessage":"@@@Move stored flag from TextSearchInfo to MappedFieldType (#62717)\n\n","date":"2020-09-22 21:41:24","modifiedFileCount":"84","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-28 20:44:34","codes":[{"authorDate":"2020-09-28 20:44:34","commitOrder":4,"curCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","date":"2020-09-28 20:44:34","endLine":84,"groupId":"36870","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/8c638c8c0d8897228344c183e03868b64d9fb5.src","preCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-09-28 20:44:34","commitOrder":4,"curCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedCartesianPoint::new, (parser, point) -> {\n                ParsedCartesianPoint.parsePoint(parser, point, ignoreZValue.value());\n                return point;\n            }, (ParsedCartesianPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","date":"2020-09-28 20:44:34","endLine":54,"groupId":"28890","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/93694f2f52a46690d0677e3c10cfb9215e5a9f.src","preCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>());\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"34c79afd9d84982fe9f97ad8795a757e39513a6b","commitMessage":"@@@Refactor PointParser to not take FieldMapper as a parameter (#62950)\n\nPassing FieldMappers to point parsing functions makes trying to build source-only\nfields from MappedFieldTypes more complicated. This small refactoring changes\nthings so that the relevant parsing and factory functions from\nAbstractGeometryFieldMapper are instead passed as lambdas to the PointParser\nconstructor.","date":"2020-09-28 20:44:34","modifiedFileCount":"6","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-01 15:27:56","codes":[{"authorDate":"2020-10-01 15:27:56","commitOrder":5,"curCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","date":"2020-10-01 15:27:56","endLine":85,"groupId":"36870","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/82/dcd581f3249350aff6ea4f681fd344ad6cd4c0.src","preCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            ft.setGeometryQueryBuilder(new VectorGeoPointShapeQueryProcessor());\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-10-01 15:27:56","commitOrder":5,"curCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedCartesianPoint::new, (parser, point) -> {\n                ParsedCartesianPoint.parsePoint(parser, point, ignoreZValue.value());\n                return point;\n            }, (ParsedCartesianPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","date":"2020-10-01 15:27:56","endLine":57,"groupId":"28890","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/a1979fb04d6260127cfb07669741ed05aa1f39.src","preCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedCartesianPoint::new, (parser, point) -> {\n                ParsedCartesianPoint.parsePoint(parser, point, ignoreZValue.value());\n                return point;\n            }, (ParsedCartesianPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            ft.setGeometryQueryBuilder(new ShapeQueryPointProcessor());\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"31a77869f11538874bf15da3134d1a5658249cc6","commitMessage":"@@@Remove dependency of Geometry queries with mapped type names (#63077)\n\n It extracts the query capabilities from AbstractGeometryFieldType into two new interfaces.  GeoshapeQueryable and ShapeQueryable. Those interfaces are implemented by the final mappers.","date":"2020-10-01 15:27:56","modifiedFileCount":"19","status":"M","submitter":"Ignacio Vera"},{"authorTime":"2020-10-01 15:27:56","codes":[{"authorDate":"2020-10-14 18:13:27","commitOrder":6,"curCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, geoParser, meta);\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue, nullValue, copyTo, new GeoPointIndexer(ft), geoParser);\n        }\n","date":"2020-10-14 18:13:27","endLine":85,"groupId":"37214","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3c/69c3f1a9e9b3d3b12036057e3021c1efeab4ae.src","preCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            GeoPointFieldType ft = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new GeoPointIndexer(ft));\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields, ignoreMalformed, ignoreZValue, nullValue, copyTo);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2020-10-01 15:27:56","commitOrder":6,"curCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedCartesianPoint::new, (parser, point) -> {\n                ParsedCartesianPoint.parsePoint(parser, point, ignoreZValue.value());\n                return point;\n            }, (ParsedCartesianPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","date":"2020-10-01 15:27:56","endLine":57,"groupId":"28890","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext@StringsimpleName@FieldTypefieldType@MultiFieldsmultiFields@Explicit<Boolean>ignoreMalformed@Explicit<Boolean>ignoreZValue@ParsedPointnullValue@CopyTocopyTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/a1979fb04d6260127cfb07669741ed05aa1f39.src","preCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedCartesianPoint::new, (parser, point) -> {\n                ParsedCartesianPoint.parsePoint(parser, point, ignoreZValue.value());\n                return point;\n            }, (ParsedCartesianPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"f4adb2de3871d9b4952c245fb944300c50851f94","commitMessage":"@@@Move geometry indexer to FieldMapper (#63618)\n\nIndexing and parsing of geometrical objects is handled by specialised\nGeoIndexer and GeoParser classes.  which are currently set on the FieldTypes\nfor their respective field mappers. Seeing as indexing is handled entirely\nby FieldMappers.  we should move them there instead. This allows us to\nremove the complex generics on AbstractGeometryFieldType.  and simplify\nthem on the corresponding FieldMappers as well.","date":"2020-10-14 18:13:27","modifiedFileCount":"13","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-22 16:11:41","codes":[{"authorDate":"2020-10-22 16:11:41","commitOrder":7,"curCode":"        public ParametrizedFieldMapper build(BuilderContext context) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), geoParser, meta.get());\n            return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new GeoPointIndexer(ft), geoParser, this);\n        }\n","date":"2020-10-22 16:11:41","endLine":121,"groupId":"23186","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/8f6bec3007be01dfc7116e41afca774e936d45.src","preCode":"        public GeoPointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                         MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                         Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, geoParser, meta);\n            return new GeoPointFieldMapper(name, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue, nullValue, copyTo, new GeoPointIndexer(ft), geoParser);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-10-22 16:11:41","commitOrder":7,"curCode":"        public ParametrizedFieldMapper build(BuilderContext context) {\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new PointIndexer(ft), parser, this);\n        }\n","date":"2020-10-22 16:11:41","endLine":102,"groupId":"23186","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6c/25c0139e4186011f06ac27d0be703c393e8139.src","preCode":"        public PointFieldMapper build(BuilderContext context, String simpleName, FieldType fieldType,\n                                      MultiFields multiFields, Explicit<Boolean> ignoreMalformed,\n                                      Explicit<Boolean> ignoreZValue, ParsedPoint nullValue, CopyTo copyTo) {\n            PointFieldType ft = new PointFieldType(buildFullName(context), indexed, fieldType.stored(), hasDocValues, meta);\n            ft.setGeometryParser(new PointParser<>(name, ParsedCartesianPoint::new, (parser, point) -> {\n                ParsedCartesianPoint.parsePoint(parser, point, ignoreZValue.value());\n                return point;\n            }, (ParsedCartesianPoint) nullValue, ignoreZValue.value(), ignoreMalformed.value()));\n            ft.setGeometryIndexer(new PointIndexer(ft));\n            return new PointFieldMapper(simpleName, fieldType, ft, multiFields,\n                ignoreMalformed, ignoreZValue(context), nullValue, copyTo);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"bfaf3040c6e5245b6d3367483ba86c676dd09bd2","commitMessage":"@@@Convert geo field mappers to Parametrized form (#63836)\n\nRelates to #62988","date":"2020-10-22 16:11:41","modifiedFileCount":"42","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-02 23:07:52","codes":[{"authorDate":"2020-11-02 23:07:52","commitOrder":8,"curCode":"        public FieldMapper build(BuilderContext context) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), geoParser, meta.get());\n            return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new GeoPointIndexer(ft), geoParser, this);\n        }\n","date":"2020-11-02 23:07:52","endLine":121,"groupId":"23186","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/9e7bac2b24948397e43a5d6719ee704f28c29c.src","preCode":"        public ParametrizedFieldMapper build(BuilderContext context) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), geoParser, meta.get());\n            return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new GeoPointIndexer(ft), geoParser, this);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-11-02 23:07:52","commitOrder":8,"curCode":"        public FieldMapper build(BuilderContext context) {\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new PointIndexer(ft), parser, this);\n        }\n","date":"2020-11-02 23:07:52","endLine":101,"groupId":"23186","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(BuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/3f4a145e70c60c3b775da5e1efc5d6534b1d2c.src","preCode":"        public ParametrizedFieldMapper build(BuilderContext context) {\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new PointIndexer(ft), parser, this);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"a5168572d5b1649227c32cb323cd4985fc7bb564","commitMessage":"@@@Collapse ParametrizedFieldMapper into FieldMapper (#64365)\n\nNow that all our FieldMapper implementations extend ParametrizedFieldMapper. \nwe can collapse the two classes together.  and remove a load of cruft from\nFieldMapper that is unused. In particular:\n\n* we no longer need the lucene FieldType field on FieldMapper\n* we no longer use clone() for merging.  so we can remove it from all impls\n* the serialization code in FieldMapper that assumes we're looking at text fields can go","date":"2020-11-02 23:07:52","modifiedFileCount":"57","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-05 18:48:39","codes":[{"authorDate":"2020-11-05 18:48:39","commitOrder":9,"curCode":"        public FieldMapper build(ContentPath contentPath) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), geoParser, meta.get());\n            return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), new GeoPointIndexer(ft), geoParser, this);\n        }\n","date":"2020-11-05 18:48:39","endLine":121,"groupId":"23186","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(ContentPathcontentPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/99/b1b0029c30363cae99aeae82759d9bc91bde7c.src","preCode":"        public FieldMapper build(BuilderContext context) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), geoParser, meta.get());\n            return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new GeoPointIndexer(ft), geoParser, this);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-11-05 18:48:39","commitOrder":9,"curCode":"        public FieldMapper build(ContentPath contentPath) {\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), new PointIndexer(ft), parser, this);\n        }\n","date":"2020-11-05 18:48:39","endLine":102,"groupId":"23186","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(ContentPathcontentPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/0fe39dc5b1b2e0f843a11ddc55aee67192593a.src","preCode":"        public FieldMapper build(BuilderContext context) {\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(context), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), new PointIndexer(ft), parser, this);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"0fd70ae383620d587a36ea71baca9295da93a76a","commitMessage":"@@@Remove Mapper.BuilderContext (#64625)\n\nMapper.BuilderContext is a simple wrapper around two objects.  some\nIndexSettings and a ContentPath. The IndexSettings are the same as\nthose provided in the ParserContext.  so we can simplify things here\nby removing them and just passing ContentPath directly to\nMapper.Builder#build()","date":"2020-11-05 18:48:39","modifiedFileCount":"103","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":10,"curCode":"        public FieldMapper build(ContentPath contentPath) {\n            Parser<ParsedGeoPoint> geoParser = new PointParser<>(\n                name,\n                ParsedGeoPoint::new,\n                (parser, point) -> {\n                    GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                    return point;\n                },\n                (ParsedGeoPoint) nullValue.get(),\n                ignoreZValue.get().value(),\n                ignoreMalformed.get().value());\n            GeoPointFieldType ft = new GeoPointFieldType(\n                buildFullName(contentPath),\n                indexed.get(),\n                stored.get(),\n                hasDocValues.get(),\n                geoParser,\n                scriptValues(),\n                meta.get());\n            if (this.script.get() == null) {\n                return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                    copyTo.build(), geoParser, this);\n            }\n            return new GeoPointFieldMapper(name, ft, geoParser, this);\n        }\n","date":"2021-04-21 21:28:12","endLine":153,"groupId":"30827","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(ContentPathcontentPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/d8484e8eace58a71e62de8f2b8541af1d6f0b4.src","preCode":"        public FieldMapper build(ContentPath contentPath) {\n            Parser<List<ParsedGeoPoint>> geoParser = new PointParser<>(name, ParsedGeoPoint::new, (parser, point) -> {\n                GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                return point;\n            }, (ParsedGeoPoint) nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            GeoPointFieldType ft\n                = new GeoPointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), geoParser, meta.get());\n            return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), new GeoPointIndexer(ft), geoParser, this);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-04-21 21:28:12","commitOrder":10,"curCode":"        public FieldMapper build(ContentPath contentPath) {\n            if (multiFieldsBuilder.hasMultiFields()) {\n                DEPRECATION_LOGGER.deprecate(\n                    DeprecationCategory.MAPPINGS,\n                    \"point_multifields\",\n                    \"Adding multifields to [point] mappers has no effect and will be forbidden in future\"\n                );\n            }\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), parser, this);\n        }\n","date":"2021-04-21 21:28:12","endLine":113,"groupId":"23186","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(ContentPathcontentPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/2363979de64b463fa2337c12ebd397b05181b4.src","preCode":"        public FieldMapper build(ContentPath contentPath) {\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), new PointIndexer(ft), parser, this);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"},{"authorTime":"2021-06-07 17:00:50","codes":[{"authorDate":"2021-06-07 17:00:50","commitOrder":11,"curCode":"        public FieldMapper build(ContentPath contentPath) {\n            Parser<GeoPoint> geoParser = new GeoPointParser(\n                name,\n                GeoPoint::new,\n                (parser, point) -> {\n                    GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(),\n                ignoreMalformed.get().value());\n            GeoPointFieldType ft = new GeoPointFieldType(\n                buildFullName(contentPath),\n                indexed.get(),\n                stored.get(),\n                hasDocValues.get(),\n                geoParser,\n                scriptValues(),\n                meta.get());\n            if (this.script.get() == null) {\n                return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                    copyTo.build(), geoParser, this);\n            }\n            return new GeoPointFieldMapper(name, ft, geoParser, this);\n        }\n","date":"2021-06-07 17:00:50","endLine":156,"groupId":"30827","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"build","params":"(ContentPathcontentPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/bec171f2da522c103ff250f8cf357fc9cfe762.src","preCode":"        public FieldMapper build(ContentPath contentPath) {\n            Parser<ParsedGeoPoint> geoParser = new PointParser<>(\n                name,\n                ParsedGeoPoint::new,\n                (parser, point) -> {\n                    GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                    return point;\n                },\n                (ParsedGeoPoint) nullValue.get(),\n                ignoreZValue.get().value(),\n                ignoreMalformed.get().value());\n            GeoPointFieldType ft = new GeoPointFieldType(\n                buildFullName(contentPath),\n                indexed.get(),\n                stored.get(),\n                hasDocValues.get(),\n                geoParser,\n                scriptValues(),\n                meta.get());\n            if (this.script.get() == null) {\n                return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                    copyTo.build(), geoParser, this);\n            }\n            return new GeoPointFieldMapper(name, ft, geoParser, this);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-06-07 17:00:50","commitOrder":11,"curCode":"        public FieldMapper build(ContentPath contentPath) {\n            if (multiFieldsBuilder.hasMultiFields()) {\n                DEPRECATION_LOGGER.deprecate(\n                    DeprecationCategory.MAPPINGS,\n                    \"point_multifields\",\n                    \"Adding multifields to [point] mappers has no effect and will be forbidden in future\"\n                );\n            }\n            CartesianPointParser parser\n                = new CartesianPointParser(\n                    name,\n                    CartesianPoint::new,\n                    (p, point) -> {\n                      CartesianPoint.parsePoint(p, point, ignoreZValue.get().value());\n                      return point;\n                    },\n                    nullValue.get(),\n                ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), parser, this);\n        }\n","date":"2021-06-07 17:00:50","endLine":115,"groupId":"23186","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(ContentPathcontentPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9e/2923f8a87a477ee262bcfcf523f53b6fd11f63.src","preCode":"        public FieldMapper build(ContentPath contentPath) {\n            if (multiFieldsBuilder.hasMultiFields()) {\n                DEPRECATION_LOGGER.deprecate(\n                    DeprecationCategory.MAPPINGS,\n                    \"point_multifields\",\n                    \"Adding multifields to [point] mappers has no effect and will be forbidden in future\"\n                );\n            }\n            CartesianPointParser parser\n                = new CartesianPointParser(name, nullValue.get(), ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), parser, this);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"9cbc5f7e8fd4a73255d4ed35d4935410b52b9bcd","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-06-07 17:00:50","modifiedFileCount":"192","status":"M","submitter":"iverase"},{"authorTime":"2021-09-08 23:34:14","codes":[{"authorDate":"2021-09-08 23:34:14","commitOrder":12,"curCode":"        public FieldMapper build(MapperBuilderContext context) {\n            Parser<GeoPoint> geoParser = new GeoPointParser(\n                name,\n                GeoPoint::new,\n                (parser, point) -> {\n                    GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(),\n                ignoreMalformed.get().value());\n            GeoPointFieldType ft = new GeoPointFieldType(\n                context.buildFullName(name),\n                indexed.get(),\n                stored.get(),\n                hasDocValues.get(),\n                geoParser,\n                scriptValues(),\n                meta.get());\n            if (this.script.get() == null) {\n                return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                    copyTo.build(), geoParser, this);\n            }\n            return new GeoPointFieldMapper(name, ft, geoParser, this);\n        }\n","date":"2021-09-08 23:34:14","endLine":159,"groupId":"30827","id":23,"instanceNumber":1,"isCurCommit":1,"methodName":"build","params":"(MapperBuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/863fe61d7593b0da0fdcc2da3b13ab23cd963d.src","preCode":"        public FieldMapper build(ContentPath contentPath) {\n            Parser<GeoPoint> geoParser = new GeoPointParser(\n                name,\n                GeoPoint::new,\n                (parser, point) -> {\n                    GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(),\n                ignoreMalformed.get().value());\n            GeoPointFieldType ft = new GeoPointFieldType(\n                buildFullName(contentPath),\n                indexed.get(),\n                stored.get(),\n                hasDocValues.get(),\n                geoParser,\n                scriptValues(),\n                meta.get());\n            if (this.script.get() == null) {\n                return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                    copyTo.build(), geoParser, this);\n            }\n            return new GeoPointFieldMapper(name, ft, geoParser, this);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-09-08 23:34:14","commitOrder":12,"curCode":"        public FieldMapper build(MapperBuilderContext context) {\n            if (multiFieldsBuilder.hasMultiFields()) {\n                DEPRECATION_LOGGER.deprecate(\n                    DeprecationCategory.MAPPINGS,\n                    \"point_multifields\",\n                    \"Adding multifields to [point] mappers has no effect and will be forbidden in future\"\n                );\n            }\n            CartesianPointParser parser\n                = new CartesianPointParser(\n                name,\n                CartesianPoint::new,\n                (p, point) -> {\n                    CartesianPoint.parsePoint(p, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(context.buildFullName(name), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), parser, this);\n        }\n","date":"2021-09-08 23:34:14","endLine":115,"groupId":"23186","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"build","params":"(MapperBuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/0161761a299c3b7ac9f8ebf64ca6839d185c42.src","preCode":"        public FieldMapper build(ContentPath contentPath) {\n            if (multiFieldsBuilder.hasMultiFields()) {\n                DEPRECATION_LOGGER.deprecate(\n                    DeprecationCategory.MAPPINGS,\n                    \"point_multifields\",\n                    \"Adding multifields to [point] mappers has no effect and will be forbidden in future\"\n                );\n            }\n            CartesianPointParser parser\n                = new CartesianPointParser(\n                name,\n                CartesianPoint::new,\n                (p, point) -> {\n                    CartesianPoint.parsePoint(p, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(buildFullName(contentPath), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, contentPath),\n                copyTo.build(), parser, this);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"9312eba5ed2a4174e0ac1ce823e98f47a19b4fc1","commitMessage":"@@@Change Mapper.build() to take a context object (#77108)\n\nMapper.build() currently takes a ContentPath object that it can use to generate\nfield type names that will include its parent names. We would like to expand field types\nto include more information about their parents.  and ContentPath does not hold this\ninformation. This commit replaces the ContentPath parameter with a new\nMapperBuilderContext.  which currently holds only the content path information but\ncan be expanded in future to hold parent relationship information.\n\nRelates to #75474","date":"2021-09-08 23:34:14","modifiedFileCount":"97","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-09-09 18:23:52","codes":[{"authorDate":"2021-09-08 23:34:14","commitOrder":13,"curCode":"        public FieldMapper build(MapperBuilderContext context) {\n            Parser<GeoPoint> geoParser = new GeoPointParser(\n                name,\n                GeoPoint::new,\n                (parser, point) -> {\n                    GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(),\n                ignoreMalformed.get().value());\n            GeoPointFieldType ft = new GeoPointFieldType(\n                context.buildFullName(name),\n                indexed.get(),\n                stored.get(),\n                hasDocValues.get(),\n                geoParser,\n                scriptValues(),\n                meta.get());\n            if (this.script.get() == null) {\n                return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                    copyTo.build(), geoParser, this);\n            }\n            return new GeoPointFieldMapper(name, ft, geoParser, this);\n        }\n","date":"2021-09-08 23:34:14","endLine":159,"groupId":"107858","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"build","params":"(MapperBuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/863fe61d7593b0da0fdcc2da3b13ab23cd963d.src","preCode":"        public FieldMapper build(MapperBuilderContext context) {\n            Parser<GeoPoint> geoParser = new GeoPointParser(\n                name,\n                GeoPoint::new,\n                (parser, point) -> {\n                    GeoUtils.parseGeoPoint(parser, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(),\n                ignoreMalformed.get().value());\n            GeoPointFieldType ft = new GeoPointFieldType(\n                context.buildFullName(name),\n                indexed.get(),\n                stored.get(),\n                hasDocValues.get(),\n                geoParser,\n                scriptValues(),\n                meta.get());\n            if (this.script.get() == null) {\n                return new GeoPointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                    copyTo.build(), geoParser, this);\n            }\n            return new GeoPointFieldMapper(name, ft, geoParser, this);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"N"},{"authorDate":"2021-09-09 18:23:52","commitOrder":13,"curCode":"        public FieldMapper build(MapperBuilderContext context) {\n            if (multiFieldsBuilder.hasMultiFields()) {\n                DEPRECATION_LOGGER.critical(\n                    DeprecationCategory.MAPPINGS,\n                    \"point_multifields\",\n                    \"Adding multifields to [point] mappers has no effect and will be forbidden in future\"\n                );\n            }\n            CartesianPointParser parser\n                = new CartesianPointParser(\n                name,\n                CartesianPoint::new,\n                (p, point) -> {\n                    CartesianPoint.parsePoint(p, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(context.buildFullName(name), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), parser, this);\n        }\n","date":"2021-09-09 18:23:52","endLine":115,"groupId":"107858","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"build","params":"(MapperBuilderContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/e652bd103324363cdda3bff7fd62304193a45f.src","preCode":"        public FieldMapper build(MapperBuilderContext context) {\n            if (multiFieldsBuilder.hasMultiFields()) {\n                DEPRECATION_LOGGER.deprecate(\n                    DeprecationCategory.MAPPINGS,\n                    \"point_multifields\",\n                    \"Adding multifields to [point] mappers has no effect and will be forbidden in future\"\n                );\n            }\n            CartesianPointParser parser\n                = new CartesianPointParser(\n                name,\n                CartesianPoint::new,\n                (p, point) -> {\n                    CartesianPoint.parsePoint(p, point, ignoreZValue.get().value());\n                    return point;\n                },\n                nullValue.get(),\n                ignoreZValue.get().value(), ignoreMalformed.get().value());\n            PointFieldType ft\n                = new PointFieldType(context.buildFullName(name), indexed.get(), stored.get(), hasDocValues.get(), parser, meta.get());\n            return new PointFieldMapper(name, ft, multiFieldsBuilder.build(this, context),\n                copyTo.build(), parser, this);\n        }\n","realPath":"x-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"0d3cebe812080ea153d124b313fb2c184c7df75b","commitMessage":"@@@Change default deprecation logger level to CRITICAL (#77030)\n\nThis commit changes default deprecation logger level to CRITICAL.  where default means deprecations emitted by DeprecationLogger#critical method.\nIt also introduces WARN deprecations which are emitted by DeprecationLogger#warn Those log lines emitted at WARN are meant to indicate that a functionality is deprecated but will not break at next major version.\nrelates #76754","date":"2021-09-09 18:23:52","modifiedFileCount":"122","status":"M","submitter":"Przemyslaw Gomulka"}]
