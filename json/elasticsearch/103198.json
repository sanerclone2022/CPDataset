[{"authorTime":"2019-05-28 22:51:04","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":4,"curCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2018-12-25 03:06:50","endLine":135,"groupId":"67442","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/f41589fb1fd31145149d4dad6ac70e5ed84248.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"},{"authorDate":"2019-05-28 22:51:04","commitOrder":4,"curCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\",\n            Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),\n                VersionUtils.randomIndexCompatibleVersion(random())).build())\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2019-05-28 22:51:04","endLine":739,"groupId":"67442","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/2fe0233ef057ea097ec9bf2bd9c97cd7cf05e6.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\",\n            Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),\n                VersionUtils.randomIndexCompatibleVersion(random())).build())\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"B"}],"commitId":"4a08b3d1c94cc5821841b6682ccc9606c4095112","commitMessage":"@@@remove 6.4.x version constants (#42127)\n\nrelates refactoring initiative #41164.","date":"2019-05-28 22:51:04","modifiedFileCount":"18","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":5,"curCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2019-10-15 16:05:29","endLine":134,"groupId":"67442","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/dee44f2fa7bc9d632c7889796a49c55a73a4ef.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":5,"curCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\",\n            Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),\n                VersionUtils.randomIndexCompatibleVersion(random())).build())\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2019-10-15 16:05:29","endLine":739,"groupId":"67442","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/dee44f2fa7bc9d632c7889796a49c55a73a4ef.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\",\n            Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),\n                VersionUtils.randomIndexCompatibleVersion(random())).build())\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":701,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-23 00:31:34","codes":[{"authorDate":"2020-01-23 00:31:34","commitOrder":6,"curCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-01-23 00:31:34","endLine":135,"groupId":"67442","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/b235f5e0bfe6b51988650e5fec60a4adee2ee5.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-01-23 00:31:34","commitOrder":6,"curCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-01-23 00:31:34","endLine":744,"groupId":"32359","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/b235f5e0bfe6b51988650e5fec60a4adee2ee5.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\",\n            Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),\n                VersionUtils.randomIndexCompatibleVersion(random())).build())\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePathAsString()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":702,"status":"M"}],"commitId":"1dc9dd42235e876fde8c3b31934f1bc88d668896","commitMessage":"@@@Add NestedPathFieldMapper to store nested path information (#51100)\n\nCurrently nested documents repurpose the _type field to store their nested paths.\nThis commit adds a dedicated _nested_path field instead.  which decouples this\ninformation from types and will allow the removal of the _type field entirely further\ndown the line. To preserve backwards compatibility.  references to this field are\nmediated via methods that take an index settings object.  and indexes created before\n8x still use the _type field.\n\nRelates to #41059\nCloses #24362","date":"2020-01-23 00:31:34","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-01-23 00:31:34","commitOrder":7,"curCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-01-23 00:31:34","endLine":135,"groupId":"67442","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/b235f5e0bfe6b51988650e5fec60a4adee2ee5.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2020-04-01 03:52:01","commitOrder":7,"curCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":744,"groupId":"32359","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/43e0f655ada19a8c460f8d8d4ba7ff03d739aa.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetaData.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":702,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-09-30 22:47:29","codes":[{"authorDate":"2020-01-23 00:31:34","commitOrder":8,"curCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-01-23 00:31:34","endLine":135,"groupId":"67442","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/b235f5e0bfe6b51988650e5fec60a4adee2ee5.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2020-09-30 22:47:29","commitOrder":8,"curCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-09-30 22:47:29","endLine":812,"groupId":"50771","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/81fe0b1b8980b25aac5c6a4fb6b6fd1e4591ad.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"M"}],"commitId":"981258b02b2018f769d3a5617b0768103d7a97a1","commitMessage":"@@@Remove TypeFieldMapper (#62838)\n\nWe don't need a special TypeFieldMapper for anything in particular; all access\nto the type field can be done via a TypeFieldType that issues appropriate\ndeprecation warnings.\n\nRelates to #41059","date":"2020-09-30 22:47:29","modifiedFileCount":"14","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-20 21:03:25","codes":[{"authorDate":"2020-10-20 21:03:25","commitOrder":9,"curCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-10-20 21:03:25","endLine":135,"groupId":"67442","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/0151f39d4cc86011ab4729ec87a52e0ede0b98.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-10-20 21:03:25","commitOrder":9,"curCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-10-20 21:03:25","endLine":812,"groupId":"50771","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/0151f39d4cc86011ab4729ec87a52e0ede0b98.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"M"}],"commitId":"04200361f4fb2e17203612020ef4e379a53aef70","commitMessage":"@@@Remove two redundant DocumentMapper methods (#63922)\n\nDocumentMapper exposes field types and object mappers through specific getter methods.  that call the corresponding getters exposed by MappingLookup. MappingLookup is though exposed directly by DocumentMapper.  hence there is no need for additional methods other than the one to retrieve the mapping lookup object.\n","date":"2020-10-20 21:03:25","modifiedFileCount":"10","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-10-21 02:11:29","codes":[{"authorDate":"2020-10-21 02:11:29","commitOrder":10,"curCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-10-21 02:11:29","endLine":133,"groupId":"67442","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/62/bc263d0886a14ab1cdb90ddce21f744a428faf.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2020-10-21 02:11:29","commitOrder":10,"curCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings).mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-10-21 02:11:29","endLine":804,"groupId":"50771","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/62/bc263d0886a14ab1cdb90ddce21f744a428faf.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings)\n            .mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":763,"status":"M"}],"commitId":"b96f26eba2049ffafb3197fbbb1942b3cdf8733a","commitMessage":"@@@Remove documentMapperParser method from MapperService (#63938)\n\nMapperService allows to retrieve its internal DocumentMapperParser instance. Such method is only used in tests.  and always to parse mappings which is already exposed by MapperService through a specific parse method.\n\nThis commit removes the getter for DocumentMapperParser from MapperService in favour of calling MapperService#parse","date":"2020-10-21 02:11:29","modifiedFileCount":"27","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-11-05 01:48:32","codes":[{"authorDate":"2020-11-05 01:48:32","commitOrder":11,"curCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-11-05 01:48:32","endLine":109,"groupId":"67442","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testSingleNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2020-11-05 01:48:32","commitOrder":11,"curCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2020-11-05 01:48:32","endLine":816,"groupId":"30541","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testReorderParent() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_INDEX_VERSION_CREATED.getKey(),\n            VersionUtils.randomIndexCompatibleVersion(random())).build();\n        DocumentMapper docMapper = createIndex(\"test\", settings).mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (Version.indexCreated(settings).before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":777,"status":"M"}],"commitId":"63b96c0d7ce90d78eace02e507ca8b52321acb68","commitMessage":"@@@Convert some object mapper testcases to use MapperServiceTestCase (#64543)\n\n","date":"2020-11-05 01:48:32","modifiedFileCount":"3","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-01-13 22:41:39","codes":[{"authorDate":"2021-01-13 22:41:39","commitOrder":12,"curCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-01-13 22:41:39","endLine":109,"groupId":"67442","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/3ea7660b88547cb6c6fb6abf8cb0400bc1d232.src","preCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2021-01-13 22:41:39","commitOrder":12,"curCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-01-13 22:41:39","endLine":818,"groupId":"30541","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/3ea7660b88547cb6c6fb6abf8cb0400bc1d232.src","preCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"M"}],"commitId":"d7761bf4d6323dc08620e634b2c2c5799158c06c","commitMessage":"@@@Use a mapping snapshot for fetching nested docs (#66877)\n\nThis uses the mapping snapshot that we built for the search phase\nin #66295 for fetching nested documents. This is simpler to reason about\nbecause the mapping snapshot is immutable.\n\n","date":"2021-01-13 22:41:39","modifiedFileCount":"13","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-02-06 04:13:05","codes":[{"authorDate":"2021-01-13 22:41:39","commitOrder":13,"curCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-01-13 22:41:39","endLine":109,"groupId":"67442","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/3ea7660b88547cb6c6fb6abf8cb0400bc1d232.src","preCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2021-02-06 04:13:05","commitOrder":13,"curCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(\"_type\"), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-02-06 04:13:05","endLine":807,"groupId":"67445","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/ec5f97446e9ef55fe72df8a3df4bc13a836676.src","preCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(TypeFieldType.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":768,"status":"M"}],"commitId":"af1cc495b2d8d5a54327a596a9a6044d3aa8d3bc","commitMessage":"@@@Remove support for _type in searches (#68564)\n\nTypes are no longer allowed in requests in 8.0.  so we can remove support for\nusing the `_type` field within a search request.\n\nRelates to #41059.\nCloses #68311.","date":"2021-02-06 04:13:05","modifiedFileCount":"15","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-06-08 06:05:30","codes":[{"authorDate":"2021-06-08 06:05:30","commitOrder":14,"curCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper;\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-06-08 06:05:30","endLine":101,"groupId":"67442","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/68338445e5d51266706810a7f14c6f9b5a1b85.src","preCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-06-08 06:05:30","commitOrder":14,"curCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper, instanceOf(NestedObjectMapper.class));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper;\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(\"_type\"), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-06-08 06:05:30","endLine":819,"groupId":"58392","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/68338445e5d51266706810a7f14c6f9b5a1b85.src","preCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(\"_type\"), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"M"}],"commitId":"ad111598867545d0dbeae60c6d24dfcd502c0c26","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-08 06:05:30","modifiedFileCount":"156","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":15,"curCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-06-17 05:31:31","endLine":98,"groupId":"67442","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/d10f6aa3f3bc80209d9bc55f3560efd9b0b7ab.src","preCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper;\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":15,"curCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(\"_type\"), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-06-17 05:31:31","endLine":777,"groupId":"67445","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/d10f6aa3f3bc80209d9bc55f3560efd9b0b7ab.src","preCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper, instanceOf(NestedObjectMapper.class));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper;\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(\"_type\"), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":738,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-07-19 16:44:48","codes":[{"authorDate":"2021-07-19 16:44:48","commitOrder":16,"curCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper;\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-07-19 16:44:48","endLine":101,"groupId":"103198","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"testSingleNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/a31bc81b3f1eecf82398149bfffe679cbd33ec.src","preCode":"    public void testSingleNested() throws Exception {\n\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startObject(\"nested1\").field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(2));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n\n        assertThat(doc.docs().get(1).get(\"field\"), equalTo(\"value\"));\n\n\n        doc = docMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").field(\"field2\", \"2\").endObject()\n                        .startObject().field(\"field1\", \"3\").field(\"field2\", \"4\").endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-07-19 16:44:48","commitOrder":16,"curCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper, instanceOf(NestedObjectMapper.class));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper;\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(\"_type\"), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","date":"2021-07-19 16:44:48","endLine":827,"groupId":"103198","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"testReorderParent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/a31bc81b3f1eecf82398149bfffe679cbd33ec.src","preCode":"    public void testReorderParent() throws IOException {\n\n        Version version = VersionUtils.randomIndexCompatibleVersion(random());\n\n        DocumentMapper docMapper\n            = createDocumentMapper(version, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject()));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"value\")\n                .startArray(\"nested1\")\n                .startObject()\n                .field(\"field1\", \"1\")\n                .field(\"field2\", \"2\")\n                .endObject()\n                .startObject()\n                .field(\"field1\", \"3\")\n                .field(\"field2\", \"4\")\n                .endObject()\n                .endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(3));\n        if (version.before(Version.V_8_0_0)) {\n            assertThat(doc.docs().get(0).get(\"_type\"), equalTo(nested1Mapper.nestedTypePath()));\n        } else {\n            assertThat(doc.docs().get(0).get(NestedPathFieldMapper.NAME), equalTo(nested1Mapper.nestedTypePath()));\n        }\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field2\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"field\"), equalTo(\"value\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":787,"status":"M"}],"commitId":"cf575f4766e3b3d7a58698be0d91559664f1bd80","commitMessage":"@@@Make NestedObjectMapper its own class (#74410)\n\nNested objects are implemented via a Nested class directly on object mappers. \neven though nested and non-nested objects have quite different semantics. In\naddition.  most call-sites that need to get an object mapper in fact need a nested\nobject mapper. To make it clearer that nested and object mappers are different\nbeasts with different implementations and different requirements.  we should\nsplit them into different classes.","date":"2021-07-19 16:44:48","modifiedFileCount":"39","status":"M","submitter":"Alan Woodward"}]
