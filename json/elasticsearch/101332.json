[{"authorTime":"2018-07-18 18:41:23","codes":[{"authorDate":"2018-07-18 18:41:23","commitOrder":3,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 68, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(627);\n      functionName();\n      setState(628);\n      match(T__0);\n      setState(640);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(630);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(629);\n          setQuantifier();\n          }\n        }\n\n        setState(632);\n        expression();\n        setState(637);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(633);\n          match(T__2);\n          setState(634);\n          expression();\n          }\n          }\n          setState(639);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(642);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-18 18:41:23","endLine":4452,"groupId":"36503","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/1758dadbc3a2ce81a4fd8df65e14e6c51442db.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 68, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(627);\n      functionName();\n      setState(628);\n      match(T__0);\n      setState(640);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(630);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(629);\n          setQuantifier();\n          }\n        }\n\n        setState(632);\n        expression();\n        setState(637);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(633);\n          match(T__2);\n          setState(634);\n          expression();\n          }\n          }\n          setState(639);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(642);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4394,"status":"MB"},{"authorDate":"2018-07-18 18:41:23","commitOrder":3,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 94, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(725);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-18 18:41:23","endLine":5670,"groupId":"47134","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/1758dadbc3a2ce81a4fd8df65e14e6c51442db.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 94, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(725);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5645,"status":"MB"}],"commitId":"6c77449a87764147099b1e35c0ec191de3202d7a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-18 18:41:23","modifiedFileCount":"222","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-05 16:48:48","codes":[{"authorDate":"2018-09-05 16:48:48","commitOrder":4,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 70, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(623);\n      functionName();\n      setState(624);\n      match(T__0);\n      setState(636);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(626);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(625);\n          setQuantifier();\n          }\n        }\n\n        setState(628);\n        expression();\n        setState(633);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(629);\n          match(T__2);\n          setState(630);\n          expression();\n          }\n          }\n          setState(635);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(638);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-05 16:48:48","endLine":4628,"groupId":"36503","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f5b0cb09d760d20697333cd3f1abbb49f48511.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 68, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(627);\n      functionName();\n      setState(628);\n      match(T__0);\n      setState(640);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(630);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(629);\n          setQuantifier();\n          }\n        }\n\n        setState(632);\n        expression();\n        setState(637);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(633);\n          match(T__2);\n          setState(634);\n          expression();\n          }\n          }\n          setState(639);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(642);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4570,"status":"M"},{"authorDate":"2018-09-05 16:48:48","commitOrder":4,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(721);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-05 16:48:48","endLine":5846,"groupId":"47134","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f5b0cb09d760d20697333cd3f1abbb49f48511.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 94, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(725);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5821,"status":"M"}],"commitId":"f00a28a909be71e17f0d1bc4c4a6ee15c5fdd0cb","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-05 16:48:48","modifiedFileCount":"122","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-19 03:57:41","codes":[{"authorDate":"2018-09-05 16:48:48","commitOrder":5,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 70, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(623);\n      functionName();\n      setState(624);\n      match(T__0);\n      setState(636);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(626);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(625);\n          setQuantifier();\n          }\n        }\n\n        setState(628);\n        expression();\n        setState(633);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(629);\n          match(T__2);\n          setState(630);\n          expression();\n          }\n          }\n          setState(635);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(638);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-05 16:48:48","endLine":4628,"groupId":"36503","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f5b0cb09d760d20697333cd3f1abbb49f48511.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 70, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(623);\n      functionName();\n      setState(624);\n      match(T__0);\n      setState(636);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(626);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(625);\n          setQuantifier();\n          }\n        }\n\n        setState(628);\n        expression();\n        setState(633);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(629);\n          match(T__2);\n          setState(630);\n          expression();\n          }\n          }\n          setState(635);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(638);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4570,"status":"N"},{"authorDate":"2018-09-19 03:57:41","commitOrder":5,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(727);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-19 03:57:41","endLine":5832,"groupId":"47134","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/4eacd402bf7f40f9ccc47a158e50f5ca28906f.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(721);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5807,"status":"M"}],"commitId":"c87cff22b4b41925053cf05e0f0dd171959e3d7e","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-19 03:57:41","modifiedFileCount":"73","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-09-19 23:43:26","codes":[{"authorDate":"2018-09-19 23:43:26","commitOrder":6,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(614);\n      functionName();\n      setState(615);\n      match(T__0);\n      setState(627);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(617);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(616);\n          setQuantifier();\n          }\n        }\n\n        setState(619);\n        expression();\n        setState(624);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(620);\n          match(T__2);\n          setState(621);\n          expression();\n          }\n          }\n          setState(626);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(629);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-19 23:43:26","endLine":4599,"groupId":"36503","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/6de0cf1a9fe535e4d80fdb9250c32e969c7db3.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 70, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(623);\n      functionName();\n      setState(624);\n      match(T__0);\n      setState(636);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(626);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(625);\n          setQuantifier();\n          }\n        }\n\n        setState(628);\n        expression();\n        setState(633);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(629);\n          match(T__2);\n          setState(630);\n          expression();\n          }\n          }\n          setState(635);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(638);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4541,"status":"M"},{"authorDate":"2018-09-19 23:43:26","commitOrder":6,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(718);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-19 23:43:26","endLine":5851,"groupId":"47134","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/6de0cf1a9fe535e4d80fdb9250c32e969c7db3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(727);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5826,"status":"M"}],"commitId":"81e9150c7a60ca6efac26c57cd5aaa60b04641a4","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-19 23:43:26","modifiedFileCount":"75","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-09-25 00:33:51","codes":[{"authorDate":"2018-09-25 00:33:51","commitOrder":7,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(612);\n      functionName();\n      setState(613);\n      match(T__0);\n      setState(625);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(615);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(614);\n          setQuantifier();\n          }\n        }\n\n        setState(617);\n        expression();\n        setState(622);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(618);\n          match(T__2);\n          setState(619);\n          expression();\n          }\n          }\n          setState(624);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(627);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-25 00:33:51","endLine":4564,"groupId":"36503","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/1344588212b883233fdfd29dd4153e31d1fd12.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(614);\n      functionName();\n      setState(615);\n      match(T__0);\n      setState(627);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(617);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(616);\n          setQuantifier();\n          }\n        }\n\n        setState(619);\n        expression();\n        setState(624);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(620);\n          match(T__2);\n          setState(621);\n          expression();\n          }\n          }\n          setState(626);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(629);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4506,"status":"M"},{"authorDate":"2018-09-25 00:33:51","commitOrder":7,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(716);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-25 00:33:51","endLine":5816,"groupId":"47134","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/1344588212b883233fdfd29dd4153e31d1fd12.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(718);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5791,"status":"M"}],"commitId":"243e863f6e862074b564f909e90a8fd83ae8ad01","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-25 00:33:51","modifiedFileCount":"253","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-10-03 03:43:46","codes":[{"authorDate":"2018-09-25 00:33:51","commitOrder":8,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(612);\n      functionName();\n      setState(613);\n      match(T__0);\n      setState(625);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(615);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(614);\n          setQuantifier();\n          }\n        }\n\n        setState(617);\n        expression();\n        setState(622);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(618);\n          match(T__2);\n          setState(619);\n          expression();\n          }\n          }\n          setState(624);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(627);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-25 00:33:51","endLine":4564,"groupId":"36503","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/1344588212b883233fdfd29dd4153e31d1fd12.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(612);\n      functionName();\n      setState(613);\n      match(T__0);\n      setState(625);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(615);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(614);\n          setQuantifier();\n          }\n        }\n\n        setState(617);\n        expression();\n        setState(622);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(618);\n          match(T__2);\n          setState(619);\n          expression();\n          }\n          }\n          setState(624);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(627);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4506,"status":"N"},{"authorDate":"2018-10-03 03:43:46","commitOrder":8,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(710);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-03 03:43:46","endLine":5830,"groupId":"47134","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9e/7848e8e6ef26a891528f50d182416e1eacabc1.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(716);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5805,"status":"M"}],"commitId":"fb907706ecea4c8894075295f0aa148efe01adbf","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-03 03:43:46","modifiedFileCount":"70","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-10-23 04:09:37","codes":[{"authorDate":"2018-10-23 04:09:37","commitOrder":9,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(616);\n      functionName();\n      setState(617);\n      match(T__0);\n      setState(629);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(619);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(618);\n          setQuantifier();\n          }\n        }\n\n        setState(621);\n        expression();\n        setState(626);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(622);\n          match(T__2);\n          setState(623);\n          expression();\n          }\n          }\n          setState(628);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(631);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-23 04:09:37","endLine":4634,"groupId":"47617","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/1cd058c08a66d5196a56ed82ba152caf75ecfc.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(612);\n      functionName();\n      setState(613);\n      match(T__0);\n      setState(625);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(615);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(614);\n          setQuantifier();\n          }\n        }\n\n        setState(617);\n        expression();\n        setState(622);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(618);\n          match(T__2);\n          setState(619);\n          expression();\n          }\n          }\n          setState(624);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(627);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4576,"status":"M"},{"authorDate":"2018-10-23 04:09:37","commitOrder":9,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(714);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-23 04:09:37","endLine":5852,"groupId":"47618","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/1cd058c08a66d5196a56ed82ba152caf75ecfc.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(710);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5827,"status":"M"}],"commitId":"67bfdb16ad0a1039686d3a74b1705c613e96e231","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-23 04:09:37","modifiedFileCount":"190","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-24 00:43:46","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":10,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(630);\n      functionName();\n      setState(631);\n      match(T__0);\n      setState(643);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(633);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(632);\n          setQuantifier();\n          }\n        }\n\n        setState(635);\n        expression();\n        setState(640);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(636);\n          match(T__2);\n          setState(637);\n          expression();\n          }\n          }\n          setState(642);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(645);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-24 00:43:46","endLine":4714,"groupId":"47617","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/25bd18dc90f87f9d9ba5f32b511de90a1d6f35.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 72, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(616);\n      functionName();\n      setState(617);\n      match(T__0);\n      setState(629);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(619);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(618);\n          setQuantifier();\n          }\n        }\n\n        setState(621);\n        expression();\n        setState(626);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(622);\n          match(T__2);\n          setState(623);\n          expression();\n          }\n          }\n          setState(628);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(631);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4656,"status":"M"},{"authorDate":"2018-10-24 00:43:46","commitOrder":10,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 100, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(728);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-24 00:43:46","endLine":5932,"groupId":"47618","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/25bd18dc90f87f9d9ba5f32b511de90a1d6f35.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(714);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5907,"status":"M"}],"commitId":"62ac2fa5ec57a4701323d1c2a0077e2179a7d422","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-24 00:43:46","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-11-21 21:45:59","codes":[{"authorDate":"2018-11-21 21:45:59","commitOrder":11,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(636);\n      functionName();\n      setState(637);\n      match(T__0);\n      setState(649);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n        {\n        setState(639);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(638);\n          setQuantifier();\n          }\n        }\n\n        setState(641);\n        expression();\n        setState(646);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(642);\n          match(T__2);\n          setState(643);\n          expression();\n          }\n          }\n          setState(648);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(651);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-21 21:45:59","endLine":4787,"groupId":"20338","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/baeceb633f830ab04d05d594b0362242263de3.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(630);\n      functionName();\n      setState(631);\n      match(T__0);\n      setState(643);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(633);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(632);\n          setQuantifier();\n          }\n        }\n\n        setState(635);\n        expression();\n        setState(640);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(636);\n          match(T__2);\n          setState(637);\n          expression();\n          }\n          }\n          setState(642);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(645);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4729,"status":"M"},{"authorDate":"2018-11-21 21:45:59","commitOrder":11,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-21 21:45:59","endLine":6305,"groupId":"69837","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/baeceb633f830ab04d05d594b0362242263de3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 100, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(728);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6280,"status":"M"}],"commitId":"f0a3d326022b92ead0a2b2bf9c5155a77d8ad8c8","commitMessage":"@@@SQL: Introduce INTERVAL support (#35521)\n\nIntroduce INTERVAL as a DataType\nAdd INTERVAL to the grammar which supports the standard SQL declaration\n (without precision):\n > INTERVAL '1 23:45:01.123456789' DAY TO SECOND\n but also number for single unit intervals:\n > INTERVAL 1 YEAR\n as well as the plurals of the units:\n > INTERVAL 2 YEARS\nInterval are internally supported as just another Literal being backed\n by java.time.Period and java.time.Duration\nMove JDBC away from JDBCType enum to SQLType interface\nRefactor DataType by moving it into server core and adding dedicated (and\n much simpler) JDBC driver type\nImprove internal JDBC conversion by normalizing on the DataType\nRename JDBC columnInfo to JdbcColumnInfo to differentiate between it and\n the SQL ColumnInfo\n\nFix #29990","date":"2018-11-21 21:45:59","modifiedFileCount":"74","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-11-23 23:14:52","codes":[{"authorDate":"2018-11-23 23:14:52","commitOrder":12,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(634);\n      functionName();\n      setState(635);\n      match(T__0);\n      setState(647);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n        {\n        setState(637);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(636);\n          setQuantifier();\n          }\n        }\n\n        setState(639);\n        expression();\n        setState(644);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(640);\n          match(T__2);\n          setState(641);\n          expression();\n          }\n          }\n          setState(646);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(649);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-23 23:14:52","endLine":4786,"groupId":"20338","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/d33d9ca80301231b12903937c0cc10dea96c75.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(636);\n      functionName();\n      setState(637);\n      match(T__0);\n      setState(649);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n        {\n        setState(639);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(638);\n          setQuantifier();\n          }\n        }\n\n        setState(641);\n        expression();\n        setState(646);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(642);\n          match(T__2);\n          setState(643);\n          expression();\n          }\n          }\n          setState(648);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(651);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4728,"status":"M"},{"authorDate":"2018-11-23 23:14:52","commitOrder":12,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(748);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-23 23:14:52","endLine":6241,"groupId":"69837","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/d33d9ca80301231b12903937c0cc10dea96c75.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6216,"status":"M"}],"commitId":"e22a83554eb0bba81e3f7e1b3f353a243fac0c7b","commitMessage":"@@@SQL: Polish grammar for intervals (#35853)\n\n","date":"2018-11-23 23:14:52","modifiedFileCount":"6","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-11-26 17:26:24","codes":[{"authorDate":"2018-11-26 17:26:24","commitOrder":13,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(640);\n      functionName();\n      setState(641);\n      match(T__0);\n      setState(653);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n        {\n        setState(643);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(642);\n          setQuantifier();\n          }\n        }\n\n        setState(645);\n        expression();\n        setState(650);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(646);\n          match(T__2);\n          setState(647);\n          expression();\n          }\n          }\n          setState(652);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(655);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-26 17:26:24","endLine":4815,"groupId":"20338","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/35baffc7bc4a4f227b022f7316a182f23afc47.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(634);\n      functionName();\n      setState(635);\n      match(T__0);\n      setState(647);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n        {\n        setState(637);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(636);\n          setQuantifier();\n          }\n        }\n\n        setState(639);\n        expression();\n        setState(644);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(640);\n          match(T__2);\n          setState(641);\n          expression();\n          }\n          }\n          setState(646);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(649);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4757,"status":"M"},{"authorDate":"2018-11-26 17:26:24","commitOrder":13,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-26 17:26:24","endLine":6270,"groupId":"69837","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/35baffc7bc4a4f227b022f7316a182f23afc47.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(748);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6245,"status":"M"}],"commitId":"971299baf4b258dc19c45354417a140a6e9f7586","commitMessage":"@@@SQL: Add filtering to SYS TYPES (#35852)\n\nFix #35342","date":"2018-11-26 17:26:24","modifiedFileCount":"5","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-12-14 21:42:36","codes":[{"authorDate":"2018-12-14 21:42:36","commitOrder":14,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(651);\n      functionName();\n      setState(652);\n      match(T__0);\n      setState(664);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(654);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(653);\n          setQuantifier();\n          }\n        }\n\n        setState(656);\n        expression();\n        setState(661);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(657);\n          match(T__2);\n          setState(658);\n          expression();\n          }\n          }\n          setState(663);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(666);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-12-14 21:42:36","endLine":4918,"groupId":"20338","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/996e4c4c2e4590c7368c0669388649d3700d05.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 74, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(640);\n      functionName();\n      setState(641);\n      match(T__0);\n      setState(653);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n        {\n        setState(643);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(642);\n          setQuantifier();\n          }\n        }\n\n        setState(645);\n        expression();\n        setState(650);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(646);\n          match(T__2);\n          setState(647);\n          expression();\n          }\n          }\n          setState(652);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(655);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4860,"status":"M"},{"authorDate":"2018-12-14 21:42:36","commitOrder":14,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-12-14 21:42:36","endLine":6378,"groupId":"69837","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/996e4c4c2e4590c7368c0669388649d3700d05.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6353,"status":"M"}],"commitId":"f502ca53d4ff1b330697b01b6d9d5dec063f8581","commitMessage":"@@@SQL: Introduce NOW/CURRENT_TIMESTAMP function (#36562)\n\nAdd CURRENT_TIMESTAMP as keyword as well function alongside NOW() \n These return the current date/time for the  given query.  computed when\n the statement reaches the server. For completeness.  CURRENT_TIMESTAMP\n also accepts precision as an optional parameter.\n\nFix #36534","date":"2018-12-14 21:42:36","modifiedFileCount":"34","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-01-12 05:08:00","codes":[{"authorDate":"2019-01-12 05:08:00","commitOrder":15,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(651);\n      functionName();\n      setState(652);\n      match(T__0);\n      setState(664);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(654);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(653);\n          setQuantifier();\n          }\n        }\n\n        setState(656);\n        expression();\n        setState(661);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(657);\n          match(T__2);\n          setState(658);\n          expression();\n          }\n          }\n          setState(663);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(666);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-12 05:08:00","endLine":4918,"groupId":"20338","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/a886404536bfeb61e1a9ada009b71635628cd8.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(651);\n      functionName();\n      setState(652);\n      match(T__0);\n      setState(664);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(654);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(653);\n          setQuantifier();\n          }\n        }\n\n        setState(656);\n        expression();\n        setState(661);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(657);\n          match(T__2);\n          setState(658);\n          expression();\n          }\n          }\n          setState(663);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(666);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4860,"status":"M"},{"authorDate":"2019-01-12 05:08:00","commitOrder":15,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-12 05:08:00","endLine":6382,"groupId":"69837","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/a886404536bfeb61e1a9ada009b71635628cd8.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6357,"status":"M"}],"commitId":"359222c55c50bf9c15062ca16c71420c41d60100","commitMessage":"@@@SQL: Make `FULL` non-reserved keyword in the grammar (#37377)\n\nSince `full` can be common as a field name or part of a field name\n(e.g.: `full.name` or `name.full`).  it's nice if it's not a reserved\nkeyword of the grammar so a user can use it without resorting to quotes.\n\nFixes: #37376","date":"2019-01-12 05:08:00","modifiedFileCount":"2","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-01-16 18:36:35","codes":[{"authorDate":"2019-01-16 18:36:35","commitOrder":16,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(646);\n      functionName();\n      setState(647);\n      match(T__0);\n      setState(659);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(649);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(648);\n          setQuantifier();\n          }\n        }\n\n        setState(651);\n        expression();\n        setState(656);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(652);\n          match(T__2);\n          setState(653);\n          expression();\n          }\n          }\n          setState(658);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(661);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-16 18:36:35","endLine":4859,"groupId":"20338","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/49bfab8320a88af1649b6f413f945e534384b6.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(651);\n      functionName();\n      setState(652);\n      match(T__0);\n      setState(664);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(654);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(653);\n          setQuantifier();\n          }\n        }\n\n        setState(656);\n        expression();\n        setState(661);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(657);\n          match(T__2);\n          setState(658);\n          expression();\n          }\n          }\n          setState(663);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(666);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4801,"status":"M"},{"authorDate":"2019-01-16 18:36:35","commitOrder":16,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(760);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-16 18:36:35","endLine":6323,"groupId":"69837","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/49bfab8320a88af1649b6f413f945e534384b6.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6298,"status":"M"}],"commitId":"023bb2f1e473f4ad009e22c1947faf844d39dbad","commitMessage":"@@@SQL: Remove slightly used meta commands (#37506)\n\nRemove SYS CATALOGS and SYS TABLE TYPES as they are a subset of SYS\nTABLES (and thus somewhat redundant) and used only by JDBC.\n\nClose #37409","date":"2019-01-16 18:36:35","modifiedFileCount":"10","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-02-06 00:15:26","codes":[{"authorDate":"2019-02-06 00:15:26","commitOrder":17,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(653);\n      functionName();\n      setState(654);\n      match(T__0);\n      setState(666);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(656);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(655);\n          setQuantifier();\n          }\n        }\n\n        setState(658);\n        expression();\n        setState(663);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(659);\n          match(T__2);\n          setState(660);\n          expression();\n          }\n          }\n          setState(665);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(668);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-06 00:15:26","endLine":4881,"groupId":"20338","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/90169409e81595f22037ef440790e20712cae1.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(646);\n      functionName();\n      setState(647);\n      match(T__0);\n      setState(659);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(649);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(648);\n          setQuantifier();\n          }\n        }\n\n        setState(651);\n        expression();\n        setState(656);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(652);\n          match(T__2);\n          setState(653);\n          expression();\n          }\n          }\n          setState(658);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(661);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4823,"status":"M"},{"authorDate":"2019-02-06 00:15:26","commitOrder":17,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(767);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-06 00:15:26","endLine":6341,"groupId":"69837","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/90169409e81595f22037ef440790e20712cae1.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(760);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6316,"status":"M"}],"commitId":"c9701be1e836d154a0758e609d2d0735b03a5231","commitMessage":"@@@SQL: Implement CURRENT_DATE (#38175)\n\nSince DATE data type is now available.  this implements the\n`CURRENT_DATE/CURRENT_DATE()/TODAY()` similar to `CURRENT_TIMESTAMP`.\n\nCloses: #38160\n\n","date":"2019-02-06 00:15:26","modifiedFileCount":"10","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-02-12 22:50:21","codes":[{"authorDate":"2019-02-12 22:50:21","commitOrder":18,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(656);\n      functionName();\n      setState(657);\n      match(T__0);\n      setState(669);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(659);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(658);\n          setQuantifier();\n          }\n        }\n\n        setState(661);\n        expression();\n        setState(666);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(662);\n          match(T__2);\n          setState(663);\n          expression();\n          }\n          }\n          setState(668);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(671);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-12 22:50:21","endLine":4916,"groupId":"20338","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/af98c1afcdf7b984f2ec491ae60de3b228b7f7.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(653);\n      functionName();\n      setState(654);\n      match(T__0);\n      setState(666);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(656);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(655);\n          setQuantifier();\n          }\n        }\n\n        setState(658);\n        expression();\n        setState(663);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(659);\n          match(T__2);\n          setState(660);\n          expression();\n          }\n          }\n          setState(665);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(668);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4858,"status":"M"},{"authorDate":"2019-02-12 22:50:21","commitOrder":18,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(770);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-12 22:50:21","endLine":6376,"groupId":"69837","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/af98c1afcdf7b984f2ec491ae60de3b228b7f7.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(767);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6351,"status":"M"}],"commitId":"526bb65195eacdd4a8fa5bf128a8838a86851bf6","commitMessage":"@@@SQL: Implement `::` cast operator (#38774)\n\n`<expression>::<dataType>` is a simplified altenative syntax to\n`CAST(<expression> AS <dataType> which exists in PostgreSQL and\nprovides an improved user experience and possibly more compact\nSQL queries.\n\nFixes: #38717\n\n","date":"2019-02-12 22:50:21","modifiedFileCount":"8","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-03-30 19:51:13","codes":[{"authorDate":"2019-03-30 19:51:13","commitOrder":19,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(662);\n      functionName();\n      setState(663);\n      match(T__0);\n      setState(675);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(665);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(664);\n          setQuantifier();\n          }\n        }\n\n        setState(667);\n        expression();\n        setState(672);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(668);\n          match(T__2);\n          setState(669);\n          expression();\n          }\n          }\n          setState(674);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(677);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-03-30 19:51:13","endLine":4951,"groupId":"20338","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/94d8d191a98a189dd24f7d1ad00d04354dfe0d.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(656);\n      functionName();\n      setState(657);\n      match(T__0);\n      setState(669);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(659);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(658);\n          setQuantifier();\n          }\n        }\n\n        setState(661);\n        expression();\n        setState(666);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(662);\n          match(T__2);\n          setState(663);\n          expression();\n          }\n          }\n          setState(668);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(671);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4893,"status":"M"},{"authorDate":"2019-03-30 19:51:13","commitOrder":19,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(776);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-03-30 19:51:13","endLine":6411,"groupId":"69837","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/94d8d191a98a189dd24f7d1ad00d04354dfe0d.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(770);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6386,"status":"M"}],"commitId":"e34cc2f38b1477e78788ee377938f42cc47187c7","commitMessage":"@@@SQL: Fix precedence of `::` psql like CAST operator (#40665)\n\nPreviously.  an expression like `10 + 2::long` would be interpreted\nas `CAST(10 + 2 AS LONG)` instead of `10 + CAST(2 AS LONG)`.\n\n","date":"2019-03-30 19:51:13","modifiedFileCount":"7","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-04 01:35:37","codes":[{"authorDate":"2019-04-04 01:35:37","commitOrder":20,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(670);\n      functionName();\n      setState(671);\n      match(T__0);\n      setState(683);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RIGHT - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(673);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(672);\n          setQuantifier();\n          }\n        }\n\n        setState(675);\n        expression();\n        setState(680);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(676);\n          match(T__2);\n          setState(677);\n          expression();\n          }\n          }\n          setState(682);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(685);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-04 01:35:37","endLine":4982,"groupId":"46518","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/ad02b1392ddc5dbbf5dbc4e8aa9ac85464411a.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(662);\n      functionName();\n      setState(663);\n      match(T__0);\n      setState(675);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(665);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(664);\n          setQuantifier();\n          }\n        }\n\n        setState(667);\n        expression();\n        setState(672);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(668);\n          match(T__2);\n          setState(669);\n          expression();\n          }\n          }\n          setState(674);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(677);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4924,"status":"M"},{"authorDate":"2019-04-04 01:35:37","commitOrder":20,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(784);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-04 01:35:37","endLine":6442,"groupId":"69837","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/ad02b1392ddc5dbbf5dbc4e8aa9ac85464411a.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(776);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6417,"status":"M"}],"commitId":"9feede781409d0e264ce45951a25b28ff129b187","commitMessage":"@@@SQL: Implement CURRENT_TIME/CURTIME functions (#40662)\n\nAfter `TIME` SQL data type is introduced.  implement\n`CURRENT_TIME/CURTIME` functions similarly to CURRENT_TIMESTAMP\nthat return the system's current time (only.  without the date part).\n\nCloses: #40468\n","date":"2019-04-04 01:35:37","modifiedFileCount":"10","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-17 15:12:11","codes":[{"authorDate":"2019-04-17 15:12:11","commitOrder":21,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(652);\n      functionName();\n      setState(653);\n      match(T__0);\n      setState(665);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RIGHT - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(655);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(654);\n          setQuantifier();\n          }\n        }\n\n        setState(657);\n        expression();\n        setState(662);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(658);\n          match(T__2);\n          setState(659);\n          expression();\n          }\n          }\n          setState(664);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(667);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-17 15:12:11","endLine":4954,"groupId":"46518","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/69cc88695d6ed79e17b369ca6ac12c8cc8af1b.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(670);\n      functionName();\n      setState(671);\n      match(T__0);\n      setState(683);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RIGHT - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(673);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(672);\n          setQuantifier();\n          }\n        }\n\n        setState(675);\n        expression();\n        setState(680);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(676);\n          match(T__2);\n          setState(677);\n          expression();\n          }\n          }\n          setState(682);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(685);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4896,"status":"M"},{"authorDate":"2019-04-17 15:12:11","commitOrder":21,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(766);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-17 15:12:11","endLine":6426,"groupId":"69837","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/69cc88695d6ed79e17b369ca6ac12c8cc8af1b.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(784);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6401,"status":"M"}],"commitId":"bfbc9f140144b5a35aa29008b58bf58074419853","commitMessage":"@@@SQL: Allow current_date/time/timestamp to be also used as a function escape pattern (#41254)\n\nCURRENT_DATE/CURRENT_TIME/CURRENT_TIMESTAMP can be used as SQL keywords\n(without parentheses) and therefore there is a special rule in the\ngrammar to accommodate this.\n\nPreviously.  this rule was also catching the parenthesised version of those functions too. \nnot allowing the {fn <functionName>()} to be used. E.g.:\n{fn current_time(2)} or {fn current_timestamp()}\n\nNow.  the grammar rule catches only the keyword versions and all the parenthesised\nversions go through the normal function resolution. As a consequence the validation\nof the precision is moved from the parser lever (ExpressionBuilder) to the function\nimplementations.\n\nFixes: #41240\n","date":"2019-04-17 15:12:11","modifiedFileCount":"9","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-23 00:26:15","codes":[{"authorDate":"2019-04-23 00:26:15","commitOrder":22,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(669);\n      functionName();\n      setState(670);\n      match(T__0);\n      setState(682);\n      _la = _input.LA(1);\n      if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (ALL - 1)) | (1L << (ANALYZE - 1)) | (1L << (ANALYZED - 1)) | (1L << (CASE - 1)) | (1L << (CAST - 1)) | (1L << (CATALOGS - 1)) | (1L << (COLUMNS - 1)) | (1L << (CONVERT - 1)) | (1L << (CURRENT_DATE - 1)) | (1L << (CURRENT_TIME - 1)) | (1L << (CURRENT_TIMESTAMP - 1)) | (1L << (DAY - 1)) | (1L << (DEBUG - 1)) | (1L << (DISTINCT - 1)) | (1L << (EXECUTABLE - 1)) | (1L << (EXISTS - 1)) | (1L << (EXPLAIN - 1)) | (1L << (EXTRACT - 1)) | (1L << (FALSE - 1)) | (1L << (FIRST - 1)) | (1L << (FORMAT - 1)) | (1L << (FULL - 1)) | (1L << (FUNCTIONS - 1)) | (1L << (GRAPHVIZ - 1)) | (1L << (HOUR - 1)) | (1L << (INTERVAL - 1)) | (1L << (LAST - 1)) | (1L << (LEFT - 1)) | (1L << (LIMIT - 1)) | (1L << (MAPPED - 1)) | (1L << (MATCH - 1)) | (1L << (MINUTE - 1)) | (1L << (MONTH - 1)) | (1L << (NOT - 1)) | (1L << (NULL - 1)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(672);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(671);\n          setQuantifier();\n          }\n        }\n\n        setState(674);\n        expression();\n        setState(679);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(675);\n          match(T__2);\n          setState(676);\n          expression();\n          }\n          }\n          setState(681);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(684);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-23 00:26:15","endLine":5035,"groupId":"72790","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/e317552268e323e06d0197df942f4599120f4a.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(652);\n      functionName();\n      setState(653);\n      match(T__0);\n      setState(665);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RIGHT - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n        {\n        setState(655);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(654);\n          setQuantifier();\n          }\n        }\n\n        setState(657);\n        expression();\n        setState(662);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(658);\n          match(T__2);\n          setState(659);\n          expression();\n          }\n          }\n          setState(664);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(667);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4977,"status":"M"},{"authorDate":"2019-04-23 00:26:15","commitOrder":22,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(788);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-23 00:26:15","endLine":6564,"groupId":"69837","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/e317552268e323e06d0197df942f4599120f4a.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(766);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6539,"status":"M"}],"commitId":"8b2577406f47ae60d15803058921d128390af0b6","commitMessage":"@@@SQL: Implement CASE... WHEN... THEN... ELSE... END (#41349)\n\nImplement the ANSI SQL CASE expression which provides the if/else\nfunctionality common to most programming languages.\n\nThe CASE expression can have multiple WHEN branches and becomes a\npowerful tool for SQL queries as it can be used in SELECT.  WHERE. \nGROUP BY.  HAVING and ORDER BY clauses.\n\nCloses: #36200\n","date":"2019-04-23 00:26:15","modifiedFileCount":"17","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-05-10 05:26:56","codes":[{"authorDate":"2019-05-10 05:26:56","commitOrder":23,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(684);\n      functionName();\n      setState(685);\n      match(T__0);\n      setState(697);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OPTIMIZED - 65)) | (1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(687);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(686);\n          setQuantifier();\n          }\n        }\n\n        setState(689);\n        expression();\n        setState(694);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(690);\n          match(T__2);\n          setState(691);\n          expression();\n          }\n          }\n          setState(696);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(699);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-05-10 05:26:56","endLine":5069,"groupId":"0","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/e0f4654df6d1a60b39e9842d7970072ae782a5.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(669);\n      functionName();\n      setState(670);\n      match(T__0);\n      setState(682);\n      _la = _input.LA(1);\n      if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (ALL - 1)) | (1L << (ANALYZE - 1)) | (1L << (ANALYZED - 1)) | (1L << (CASE - 1)) | (1L << (CAST - 1)) | (1L << (CATALOGS - 1)) | (1L << (COLUMNS - 1)) | (1L << (CONVERT - 1)) | (1L << (CURRENT_DATE - 1)) | (1L << (CURRENT_TIME - 1)) | (1L << (CURRENT_TIMESTAMP - 1)) | (1L << (DAY - 1)) | (1L << (DEBUG - 1)) | (1L << (DISTINCT - 1)) | (1L << (EXECUTABLE - 1)) | (1L << (EXISTS - 1)) | (1L << (EXPLAIN - 1)) | (1L << (EXTRACT - 1)) | (1L << (FALSE - 1)) | (1L << (FIRST - 1)) | (1L << (FORMAT - 1)) | (1L << (FULL - 1)) | (1L << (FUNCTIONS - 1)) | (1L << (GRAPHVIZ - 1)) | (1L << (HOUR - 1)) | (1L << (INTERVAL - 1)) | (1L << (LAST - 1)) | (1L << (LEFT - 1)) | (1L << (LIMIT - 1)) | (1L << (MAPPED - 1)) | (1L << (MATCH - 1)) | (1L << (MINUTE - 1)) | (1L << (MONTH - 1)) | (1L << (NOT - 1)) | (1L << (NULL - 1)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n        {\n        setState(672);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(671);\n          setQuantifier();\n          }\n        }\n\n        setState(674);\n        expression();\n        setState(679);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(675);\n          match(T__2);\n          setState(676);\n          expression();\n          }\n          }\n          setState(681);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(684);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5011,"status":"M"},{"authorDate":"2019-05-10 05:26:56","commitOrder":23,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(803);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPTIMIZED - 69)) | (1L << (PARSED - 69)) | (1L << (PHYSICAL - 69)) | (1L << (PLAN - 69)) | (1L << (RLIKE - 69)) | (1L << (QUERY - 69)) | (1L << (SCHEMAS - 69)) | (1L << (SECOND - 69)) | (1L << (SHOW - 69)) | (1L << (SYS - 69)) | (1L << (TABLES - 69)) | (1L << (TEXT - 69)) | (1L << (TYPE - 69)) | (1L << (TYPES - 69)) | (1L << (VERIFY - 69)) | (1L << (YEAR - 69)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-05-10 05:26:56","endLine":6598,"groupId":"69837","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/e0f4654df6d1a60b39e9842d7970072ae782a5.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(788);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6573,"status":"M"}],"commitId":"2445a933915f420c7f51e8505afa0a7978ce6b0f","commitMessage":"@@@SQL: Add support for FROZEN indices (#41558)\n\nAllow querying of FROZEN indices both through dedicated SQL grammar\nextension:\n> SELECT field FROM FROZEN index\nand also through driver configuration parameter.  namely:\n> index.include.frozen: true/false\n\nFix #39390\nFix #39377","date":"2019-05-10 05:26:56","modifiedFileCount":"50","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-09-23 23:59:46","codes":[{"authorDate":"2019-09-23 23:59:46","commitOrder":24,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":5340,"groupId":"10734","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(684);\n      functionName();\n      setState(685);\n      match(T__0);\n      setState(697);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OPTIMIZED - 65)) | (1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(687);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(686);\n          setQuantifier();\n          }\n        }\n\n        setState(689);\n        expression();\n        setState(694);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(690);\n          match(T__2);\n          setState(691);\n          expression();\n          }\n          }\n          setState(696);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(699);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5282,"status":"M"},{"authorDate":"2019-09-23 23:59:46","commitOrder":24,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":6873,"groupId":"69837","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(803);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPTIMIZED - 69)) | (1L << (PARSED - 69)) | (1L << (PHYSICAL - 69)) | (1L << (PLAN - 69)) | (1L << (RLIKE - 69)) | (1L << (QUERY - 69)) | (1L << (SCHEMAS - 69)) | (1L << (SECOND - 69)) | (1L << (SHOW - 69)) | (1L << (SYS - 69)) | (1L << (TABLES - 69)) | (1L << (TEXT - 69)) | (1L << (TYPE - 69)) | (1L << (TYPES - 69)) | (1L << (VERIFY - 69)) | (1L << (YEAR - 69)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6848,"status":"M"}],"commitId":"d91263746a222915c570d4a662ec48c1d6b4f583","commitMessage":"@@@SQL: Add PIVOT support (#46489)\n\nAdd initial PIVOT support for transforming a regular table into a\nstatistics table around an arbitrary pivoting column:\n\nSELECT * FROM\n (SELECT languages.  country.  salary.  FROM mp)\n PIVOT (AVG(salary) FOR countries IN ('NL'.  'DE'.  'ES'.  'RO'.  'US'))\n\nIn the current implementation PIVOT allows only one aggregation however\nthis restriction is likely to be lifted in the future.\nAlso not all aggregations are working.  in particular MatrixStats are not yet supported.","date":"2019-09-23 23:59:46","modifiedFileCount":"39","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-09-23 23:59:46","codes":[{"authorDate":"2019-10-07 20:37:20","commitOrder":25,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-10-07 20:37:20","endLine":5343,"groupId":"10734","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/0c4a69f3240451d7d1ad7fd46250e3f74a66d6.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5285,"status":"M"},{"authorDate":"2019-09-23 23:59:46","commitOrder":25,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":6873,"groupId":"69837","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6848,"status":"N"}],"commitId":"08a22d0b393f4a76c52dabc5e7b9cafcc19c30ca","commitMessage":"@@@SQL: Allow whitespaces in escape patterns (#47577)\n\n* SQL: Allow whitespaces in escape patterns\n\nPreviously.  we supported only the format `{fn <FUNCTION_NAME>()}`\nbut other DBs like MSSQL.  DB2.  MariaDB/MySQL alos allow whitespaces\nbetween `{` and `fn`. Furhermore.  also some applications - like PowerBI -\ngenerate escape sequences with spaces: `select { fn name(params) } etc.`\n\nAdd support for white spaces between `{` and the escape pattern definition\nlike `fn`.  `ts`.  `d`.  `guid` etc.\n\nCloses: #47401\n\n* Fix imports\n","date":"2019-10-07 20:37:20","modifiedFileCount":"3","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-06-02 15:56:20","codes":[{"authorDate":"2020-06-02 15:56:20","commitOrder":26,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":5408,"groupId":"10734","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5350,"status":"M"},{"authorDate":"2020-06-02 15:56:20","commitOrder":26,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":6945,"groupId":"69837","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6920,"status":"M"}],"commitId":"2f5ab81b9ad884434d1faa60f4391f966ede73e8","commitMessage":"@@@SQL: Implement TOP as an alternative to LIMIT (#57428)\n\nAdd basic support for `TOP X` as a synonym to LIMIT X which is used\nby [MS-SQL server](https://docs.microsoft.com/en-us/sql/t-sql/queries/top-transact-sql?view=sql-server-ver15). \ne.g.:\n\n```\nSELECT TOP 5 a.  b.  c FROM test\n```\n\nTOP in SQL server also supports the `PERCENTAGE` and `WITH TIES`\nkeywords which this implementation doesn't.\n\nDon't allow usage of both TOP and LIMIT in the same query.\n\nRefers to #41195\n","date":"2020-06-02 15:56:20","modifiedFileCount":"8","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-06-02 15:56:20","codes":[{"authorDate":"2020-11-24 04:47:51","commitOrder":27,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-11-24 04:47:51","endLine":5407,"groupId":"10734","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/e3528b71f5a0945a1b151f3ff26e3d424f0d72.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5349,"status":"M"},{"authorDate":"2020-06-02 15:56:20","commitOrder":27,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":6945,"groupId":"69837","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6920,"status":"N"}],"commitId":"afb9d48a2159b7ff7de6b74001a76e3a62b70876","commitMessage":"@@@SQL: Remove the unused CONCAT token (#65272)\n\nThe `||` token is a leftover from the original grammar definition.\nWe don't have a `||` operator.  the token is unused in our grammar.\nString concatenation is implemented via the `CONCAT` function instead.","date":"2020-11-24 04:47:51","modifiedFileCount":"2","status":"M","submitter":"Andras Palinkas"},{"authorTime":"2021-08-26 20:41:57","codes":[{"authorDate":"2021-08-26 20:41:57","commitOrder":28,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _errHandler.sync(this);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2021-08-26 20:41:57","endLine":5525,"groupId":"101332","id":51,"instanceNumber":1,"isCurCommit":1,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/d494e5390668eab2b6833facff621cc7a73b1e.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5465,"status":"M"},{"authorDate":"2021-08-26 20:41:57","commitOrder":28,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      }\n      else {\n        if ( _input.LA(1)==Token.EOF ) matchedEOF = true;\n        _errHandler.reportMatch(this);\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2021-08-26 20:41:57","endLine":7089,"groupId":"101332","id":52,"instanceNumber":2,"isCurCommit":1,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/d494e5390668eab2b6833facff621cc7a73b1e.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":7061,"status":"M"}],"commitId":"d349f252476a0f50dbc3fd23bc796d77ec6c97fa","commitMessage":"@@@QL: regenerate parser due to ANTLR upgrade (#76970)\n\n* QL: regenerate parser due to ANTLR upgrade\n\nTo avoid warnings and subtle change in behavior.  regenerate the parser\nclasses using the upgraded ANTLR (4.9.2 vs 4.5.3).\n\nFix #76969","date":"2021-08-26 20:41:57","modifiedFileCount":"6","status":"M","submitter":"Costin Leau"}]
