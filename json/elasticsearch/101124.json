[{"authorTime":"2020-10-17 04:46:40","codes":[{"authorDate":"2020-10-17 04:46:40","commitOrder":1,"curCode":"    public void visitLoadDotShortcut(LoadDotShortcutNode irDotSubShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irDotSubShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irDotSubShortcutNode.getGetter();\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (!getterPainlessMethod.returnType.equals(getterPainlessMethod.javaMethod.getReturnType())) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","date":"2020-10-17 04:46:40","endLine":1275,"groupId":"50482","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitLoadDotShortcut","params":"(LoadDotShortcutNodeirDotSubShortcutNode@WriteScopewriteScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/37de35760fc08ca4e25e549ab0828f1025f8a8.src","preCode":"    public void visitLoadDotShortcut(LoadDotShortcutNode irDotSubShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irDotSubShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irDotSubShortcutNode.getGetter();\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (!getterPainlessMethod.returnType.equals(getterPainlessMethod.javaMethod.getReturnType())) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1265,"status":"B"},{"authorDate":"2020-10-17 04:46:40","commitOrder":1,"curCode":"    public void visitLoadListShortcut(LoadListShortcutNode irLoadListShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irLoadListShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irLoadListShortcutNode.getGetter();\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (getterPainlessMethod.returnType == getterPainlessMethod.javaMethod.getReturnType()) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","date":"2020-10-17 04:46:40","endLine":1288,"groupId":"50482","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitLoadListShortcut","params":"(LoadListShortcutNodeirLoadListShortcutNode@WriteScopewriteScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/37de35760fc08ca4e25e549ab0828f1025f8a8.src","preCode":"    public void visitLoadListShortcut(LoadListShortcutNode irLoadListShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irLoadListShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irLoadListShortcutNode.getGetter();\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (getterPainlessMethod.returnType == getterPainlessMethod.javaMethod.getReturnType()) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"B"}],"commitId":"bbcf8c47368ecfca6b5b685644fc01d74b276acb","commitMessage":"@@@Move write out of ir nodes and into an external phase (#63512)\n\nThis change moves the write phase out of the ir nodes and into an external phase to match the design \nof the rest of the phases for the both the user tree and ir the tree. This is the final phase internal to \nthe either the user tree nodes and ir tree nodes.","date":"2020-10-17 04:46:40","modifiedFileCount":"70","status":"B","submitter":"Jack Conradson"},{"authorTime":"2020-12-04 04:01:07","codes":[{"authorDate":"2020-12-04 04:01:07","commitOrder":2,"curCode":"    public void visitLoadDotShortcut(LoadDotShortcutNode irDotSubShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irDotSubShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irDotSubShortcutNode.getDecorationValue(IRDMethod.class);\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (!getterPainlessMethod.returnType.equals(getterPainlessMethod.javaMethod.getReturnType())) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","date":"2020-12-04 04:01:07","endLine":1354,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitLoadDotShortcut","params":"(LoadDotShortcutNodeirDotSubShortcutNode@WriteScopewriteScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/c4079b8c60f92997a9b4345bab3e834b6db5b2.src","preCode":"    public void visitLoadDotShortcut(LoadDotShortcutNode irDotSubShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irDotSubShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irDotSubShortcutNode.getGetter();\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (!getterPainlessMethod.returnType.equals(getterPainlessMethod.javaMethod.getReturnType())) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"M"},{"authorDate":"2020-12-04 04:01:07","commitOrder":2,"curCode":"    public void visitLoadListShortcut(LoadListShortcutNode irLoadListShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irLoadListShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irLoadListShortcutNode.getDecorationValue(IRDMethod.class);\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (getterPainlessMethod.returnType == getterPainlessMethod.javaMethod.getReturnType()) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","date":"2020-12-04 04:01:07","endLine":1367,"groupId":"1499","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitLoadListShortcut","params":"(LoadListShortcutNodeirLoadListShortcutNode@WriteScopewriteScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/c4079b8c60f92997a9b4345bab3e834b6db5b2.src","preCode":"    public void visitLoadListShortcut(LoadListShortcutNode irLoadListShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irLoadListShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irLoadListShortcutNode.getGetter();\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (getterPainlessMethod.returnType == getterPainlessMethod.javaMethod.getReturnType()) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1357,"status":"M"}],"commitId":"a44ad560a23ee2570d5faaecc3de73e555c51608","commitMessage":"@@@Complete replacing member data with decorations in the ir tree (#64825)\n\nThis change replaces all the member data in the ir nodes with decorations instead. This completes the \ntransition to a decoration system in the ir tree. This change allows for maximum flexibility when \nmodifying existing phases or adding additional phases.","date":"2020-12-04 04:01:07","modifiedFileCount":"52","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-12-04 04:01:07","codes":[{"authorDate":"2021-01-26 22:47:09","commitOrder":3,"curCode":"    public void visitLoadDotShortcut(LoadDotShortcutNode irDotSubShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irDotSubShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irDotSubShortcutNode.getDecorationValue(IRDMethod.class);\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (getterPainlessMethod.returnType.equals(getterPainlessMethod.javaMethod.getReturnType()) == false) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","date":"2021-01-26 22:47:09","endLine":1354,"groupId":"101124","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitLoadDotShortcut","params":"(LoadDotShortcutNodeirDotSubShortcutNode@WriteScopewriteScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/38d3240ef12cd2f6d134c47c26f077f7b9b5cd.src","preCode":"    public void visitLoadDotShortcut(LoadDotShortcutNode irDotSubShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irDotSubShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irDotSubShortcutNode.getDecorationValue(IRDMethod.class);\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (!getterPainlessMethod.returnType.equals(getterPainlessMethod.javaMethod.getReturnType())) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"M"},{"authorDate":"2020-12-04 04:01:07","commitOrder":3,"curCode":"    public void visitLoadListShortcut(LoadListShortcutNode irLoadListShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irLoadListShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irLoadListShortcutNode.getDecorationValue(IRDMethod.class);\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (getterPainlessMethod.returnType == getterPainlessMethod.javaMethod.getReturnType()) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","date":"2020-12-04 04:01:07","endLine":1367,"groupId":"101124","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitLoadListShortcut","params":"(LoadListShortcutNodeirLoadListShortcutNode@WriteScopewriteScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/c4079b8c60f92997a9b4345bab3e834b6db5b2.src","preCode":"    public void visitLoadListShortcut(LoadListShortcutNode irLoadListShortcutNode, WriteScope writeScope) {\n        MethodWriter methodWriter = writeScope.getMethodWriter();\n        methodWriter.writeDebugInfo(irLoadListShortcutNode.getLocation());\n\n        PainlessMethod getterPainlessMethod = irLoadListShortcutNode.getDecorationValue(IRDMethod.class);\n        methodWriter.invokeMethodCall(getterPainlessMethod);\n\n        if (getterPainlessMethod.returnType == getterPainlessMethod.javaMethod.getReturnType()) {\n            methodWriter.checkCast(MethodWriter.getType(getterPainlessMethod.returnType));\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultIRTreeToASMBytesPhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1357,"status":"N"}],"commitId":"ad1f876daa714001877622ae4d6c91043c38eae7","commitMessage":"@@@Replace NOT operator with explicit `false` check (#67817)\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-01-26 22:47:09","modifiedFileCount":"117","status":"M","submitter":"Rory Hunter"}]
