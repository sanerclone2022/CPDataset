[{"authorTime":"2018-05-31 21:29:00","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final InetSocketAddress c1N1Address = c1N1Node.getAddress().address();\n                    final InetSocketAddress c1N2Address = c1N2Node.getAddress().address();\n                    final InetSocketAddress c2N1Address = c2N1Node.getAddress().address();\n                    final InetSocketAddress c2N2Address = c2N2Node.getAddress().address();\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Address, c1N2Address),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Address, c2N2Address),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":280,"groupId":"13911","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/21a2fb2077ea6302443188e3311738ec5fd0d7.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final InetSocketAddress c1N1Address = c1N1Node.getAddress().address();\n                    final InetSocketAddress c1N2Address = c1N2Node.getAddress().address();\n                    final InetSocketAddress c2N1Address = c2N1Node.getAddress().address();\n                    final InetSocketAddress c2N2Address = c2N2Node.getAddress().address();\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Address, c1N2Address),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Address, c2N2Address),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"NB"},{"authorDate":"2018-05-31 21:29:00","commitOrder":2,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final InetSocketAddress c1N1Address = c1N1Node.getAddress().address();\n                    final InetSocketAddress c1N2Address = c1N2Node.getAddress().address();\n                    final InetSocketAddress c2N1Address = c2N1Node.getAddress().address();\n                    final InetSocketAddress c2N2Address = c2N2Node.getAddress().address();\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Address, c1N2Address),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Address, c2N2Address),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","date":"2018-05-31 21:29:00","endLine":352,"groupId":"13911","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/29f98af3342d80554b6da6478c5f0feb3aac30.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final InetSocketAddress c1N1Address = c1N1Node.getAddress().address();\n                    final InetSocketAddress c1N2Address = c1N2Node.getAddress().address();\n                    final InetSocketAddress c2N1Address = c2N1Node.getAddress().address();\n                    final InetSocketAddress c2N2Address = c2N2Node.getAddress().address();\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Address, c1N2Address),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Address, c2N2Address),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"B"}],"commitId":"976935967b5dc28e09279aecb58cc8045c4d9a64","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-31 21:29:00","modifiedFileCount":"76","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-20 17:06:02","codes":[{"authorDate":"2018-08-20 17:06:02","commitOrder":3,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","date":"2018-08-20 17:06:02","endLine":289,"groupId":"27728","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/4b1cbdef547635e5caf3541bc941846013ba91.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final InetSocketAddress c1N1Address = c1N1Node.getAddress().address();\n                    final InetSocketAddress c1N2Address = c1N2Node.getAddress().address();\n                    final InetSocketAddress c2N1Address = c2N1Node.getAddress().address();\n                    final InetSocketAddress c2N2Address = c2N2Node.getAddress().address();\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Address, c1N2Address),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Address, c2N2Address),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2018-08-20 17:06:02","commitOrder":3,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","date":"2018-08-20 17:06:02","endLine":353,"groupId":"27728","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/4b1cbdef547635e5caf3541bc941846013ba91.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final InetSocketAddress c1N1Address = c1N1Node.getAddress().address();\n                    final InetSocketAddress c1N2Address = c1N2Node.getAddress().address();\n                    final InetSocketAddress c2N1Address = c2N1Node.getAddress().address();\n                    final InetSocketAddress c2N2Address = c2N2Node.getAddress().address();\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Address, c1N2Address),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Address, c2N2Address),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"}],"commitId":"3736097e199717cf86481e021bdc60573c88e318","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-20 17:06:02","modifiedFileCount":"36","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-24 01:52:59","codes":[{"authorDate":"2018-08-24 01:52:59","commitOrder":4,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2018-08-24 01:52:59","endLine":290,"groupId":"27728","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/929e72d8b33a62c0839c14187452c50b914d37.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2018-08-24 01:52:59","commitOrder":4,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2018-08-24 01:52:59","endLine":355,"groupId":"27728","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/929e72d8b33a62c0839c14187452c50b914d37.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"1f13c77b49f46f13b7a2dd40581d942f5ccedb05","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-24 01:52:59","modifiedFileCount":"111","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-08-27 23:19:05","codes":[{"authorDate":"2018-08-27 23:19:05","commitOrder":5,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2018-08-27 23:19:05","endLine":305,"groupId":"27728","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/42b4e458dbebfa8339b3084944c44a4cfe372a.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2018-08-27 23:19:05","commitOrder":5,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2018-08-27 23:19:05","endLine":370,"groupId":"27728","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/42b4e458dbebfa8339b3084944c44a4cfe372a.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"57835452228ba03238ef39e19829a67581689843","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-27 23:19:05","modifiedFileCount":"55","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-09-06 15:17:40","codes":[{"authorDate":"2018-09-06 15:17:40","commitOrder":6,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2018-09-06 15:17:40","endLine":305,"groupId":"27728","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/bde8839b44bd3062e9eda775ecafa93dc5b70d.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"search.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2018-09-06 15:17:40","commitOrder":6,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2018-09-06 15:17:40","endLine":370,"groupId":"27728","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/bde8839b44bd3062e9eda775ecafa93dc5b70d.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"search.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"search.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"b1257d873bc8541b15d7c933a383344c151a1333","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-06 15:17:40","modifiedFileCount":"43","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-02-20 02:32:21","codes":[{"authorDate":"2019-02-20 02:32:21","commitOrder":7,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_1\"), connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_2\"), connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-02-20 02:32:21","endLine":514,"groupId":"27728","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/c8a5fac7299ff91fdc041302bd31bd71ad6e46.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"},{"authorDate":"2019-02-20 02:32:21","commitOrder":7,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_1\"), connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_2\"), connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-02-20 02:32:21","endLine":579,"groupId":"27728","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/c8a5fac7299ff91fdc041302bd31bd71ad6e46.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"a5cbef9d1bc5b3ec24398c7dd793179f32951b64","commitMessage":"@@@Rebuild remote connections on profile changes (#37678)\n\nCurrently remote compression and ping schedule settings are dynamic.\nHowever.  we do not listen for changes. This commit adds listeners for\nchanges to those two settings. Additionally.  when those settings change\nwe now close existing connections and open new ones with the settings\napplied.\n\nFixes #37201.","date":"2019-02-20 02:32:21","modifiedFileCount":"15","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-10-25 01:13:06","codes":[{"authorDate":"2019-10-25 01:13:06","commitOrder":8,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-10-25 01:13:06","endLine":490,"groupId":"27728","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/0e81fad5c3b11d3e7948c23583a6d53af7f90e.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_1\"), connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_2\"), connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"M"},{"authorDate":"2019-10-25 01:13:06","commitOrder":8,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-10-25 01:13:06","endLine":555,"groupId":"27728","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/0e81fad5c3b11d3e7948c23583a6d53af7f90e.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_1\"), connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString()), null,\n                            genericProfile(\"cluster_2\"), connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"M"}],"commitId":"0600e6587815a2172417bca83b3403271f19a04c","commitMessage":"@@@Make remote setting updates support diff strategies (#47891)\n\nCurrently the entire remote cluster settings infrastructure is designed\naround the sniff strategy. As we introduce an additional conneciton\nstrategy this infrastructure needs to be modified to support it. This\ncommit modifies the code so that the strategy implementations will tell\nthe service if the connection needs to be torn down and rebuilt.\n\nAs part of this commit.  we will wait 10 seconds for new clusters to\nconnect when they are added through the \"update\" settings\ninfrastructure.","date":"2019-10-25 01:13:06","modifiedFileCount":"14","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-11-20 00:08:03","codes":[{"authorDate":"2019-11-20 00:08:03","commitOrder":9,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.sniff.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.sniff.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-11-20 00:08:03","endLine":442,"groupId":"27728","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/e7a848bbb1888994de1643cf7dd9aae25f1203.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"},{"authorDate":"2019-11-20 00:08:03","commitOrder":9,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.sniff.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.sniff.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-11-20 00:08:03","endLine":507,"groupId":"27728","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/e7a848bbb1888994de1643cf7dd9aae25f1203.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"}],"commitId":"4f4140431b83a82f5dc640f11cf9c3d396e88b46","commitMessage":"@@@Allow simple connection strategy to be configured (#49066)\n\nCurrently the simple connection strategy only exists in the code. It\ncannot be configured. This commit moves in the direction of allowing it\nto be configured. It introduces settings for the addresses and socket\ncount. Additionally it introduces new settings for the sniff strategy\nso that the more generic number of connections and seed node settings\ncan be deprecated.\n\nThe simple settings are not yet registered as the registration is\ndependent on follow-up work to validate the settings.","date":"2019-11-20 00:08:03","modifiedFileCount":"20","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-12-20 00:31:28","codes":[{"authorDate":"2019-12-20 00:31:28","commitOrder":10,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seed\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seed\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-12-20 00:31:28","endLine":444,"groupId":"64410","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/e9b69ae29f888027e23e89afc9ee0c16898f5e.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.sniff.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.sniff.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"},{"authorDate":"2019-12-20 00:31:28","commitOrder":10,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seed\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seed\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-12-20 00:31:28","endLine":509,"groupId":"64410","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/e9b69ae29f888027e23e89afc9ee0c16898f5e.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.sniff.seeds\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.sniff.seeds\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":446,"status":"M"}],"commitId":"342a2920a9659ec9c5a8042ddb1d4b6aef965a71","commitMessage":"@@@Rename the remote connection mode simple to proxy (#50291)\n\nThis commit renames the simple connection mode to the proxy connection\nmode for remote cluster connections. In order to do this.  the mode specific\nsettings which we namespaced by their mode (ex: sniff.seed and\nproxy.addresses) have been reverted.","date":"2019-12-20 00:31:28","modifiedFileCount":"16","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2019-12-20 00:31:28","commitOrder":11,"curCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seed\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seed\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2019-12-20 00:31:28","endLine":444,"groupId":"104422","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoteNodeAttribute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/e9b69ae29f888027e23e89afc9ee0c16898f5e.src","preCode":"    public void testRemoteNodeAttribute() throws IOException, InterruptedException {\n        final Settings settings =\n                Settings.builder().put(\"cluster.remote.node.attr\", \"gateway\").build();\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings gateway = Settings.builder().put(\"node.attr.gateway\", true).build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, gateway);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, gateway)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\n                        \"cluster.remote.cluster_1.seed\", c1N1Node.getAddress().toString());\n                builder.putList(\n                        \"cluster.remote.cluster_2.seed\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service =\n                             new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"N"},{"authorDate":"2020-06-26 22:33:37","commitOrder":11,"curCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = nonMasterNode();\n        final Settings dedicatedMaster = masterOnlyNode();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seed\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seed\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":514,"groupId":"104422","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoteNodeRoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/83e433d3a690c3e9c152a55853666aaaf1ee26.src","preCode":"    public void testRemoteNodeRoles() throws IOException, InterruptedException {\n        final Settings settings = Settings.EMPTY;\n        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();\n        final Settings data = Settings.builder().put(\"node.master\", false).build();\n        final Settings dedicatedMaster = Settings.builder().put(\"node.data\", false).put(\"node.ingest\", \"false\").build();\n        try (MockTransportService c1N1 =\n                     startTransport(\"cluster_1_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c1N2 =\n                     startTransport(\"cluster_1_node_2\", knownNodes, Version.CURRENT, data);\n             MockTransportService c2N1 =\n                     startTransport(\"cluster_2_node_1\", knownNodes, Version.CURRENT, dedicatedMaster);\n             MockTransportService c2N2 =\n                     startTransport(\"cluster_2_node_2\", knownNodes, Version.CURRENT, data)) {\n            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();\n            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();\n            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();\n            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();\n            knownNodes.add(c1N1Node);\n            knownNodes.add(c1N2Node);\n            knownNodes.add(c2N1Node);\n            knownNodes.add(c2N2Node);\n            Collections.shuffle(knownNodes, random());\n\n            try (MockTransportService transportService = MockTransportService.createNewService(\n                    settings,\n                    Version.CURRENT,\n                    threadPool,\n                    null)) {\n                transportService.start();\n                transportService.acceptIncomingRequests();\n                final Settings.Builder builder = Settings.builder();\n                builder.putList(\"cluster.remote.cluster_1.seed\", c1N1Node.getAddress().toString());\n                builder.putList(\"cluster.remote.cluster_2.seed\", c2N1Node.getAddress().toString());\n                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {\n                    assertFalse(service.isCrossClusterSearchEnabled());\n                    service.initializeRemoteClusters();\n                    assertFalse(service.isCrossClusterSearchEnabled());\n\n                    final CountDownLatch firstLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_1\",\n                            createSettings(\"cluster_1\", Arrays.asList(c1N1Node.getAddress().toString(), c1N2Node.getAddress().toString())),\n                            connectionListener(firstLatch));\n                    firstLatch.await();\n\n                    final CountDownLatch secondLatch = new CountDownLatch(1);\n                    service.updateRemoteCluster(\n                            \"cluster_2\",\n                            createSettings(\"cluster_2\", Arrays.asList(c2N1Node.getAddress().toString(), c2N2Node.getAddress().toString())),\n                            connectionListener(secondLatch));\n                    secondLatch.await();\n\n                    assertTrue(service.isCrossClusterSearchEnabled());\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_1\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_1\", c1N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_1\", c1N2Node));\n                    assertTrue(service.isRemoteClusterRegistered(\"cluster_2\"));\n                    assertFalse(service.isRemoteNodeConnected(\"cluster_2\", c2N1Node));\n                    assertTrue(service.isRemoteNodeConnected(\"cluster_2\", c2N2Node));\n                    assertEquals(0, transportService.getConnectionManager().size());\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"}]
