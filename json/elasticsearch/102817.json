[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n                .startObject(\"foo\")\n                    .field(\"type\", \"object\")\n                    .field(\"dynamic\", true)\n                    .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\")\n            .field(\"bar\", \"something\")\n            .endObject().endObject());\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":230,"groupId":"36952","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPropagateDynamicWithExistingMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/f69c738e949d93045fcd94f9dee0b99ddc0359.src","preCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n                .startObject(\"foo\")\n                    .field(\"type\", \"object\")\n                    .field(\"dynamic\", true)\n                    .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\")\n            .field(\"bar\", \"something\")\n            .endObject().endObject());\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n            .startObject(\"foo\")\n            .field(\"type\", \"object\")\n            .field(\"dynamic\", true)\n            .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\").startObject(\"bar\")\n                .field(\"baz\", \"something\")\n            .endObject().endObject().endObject());\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":250,"groupId":"17553","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagateDynamicWithDynamicMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/f69c738e949d93045fcd94f9dee0b99ddc0359.src","preCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n            .startObject(\"foo\")\n            .field(\"type\", \"object\")\n            .field(\"dynamic\", true)\n            .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\").startObject(\"bar\")\n                .field(\"baz\", \"something\")\n            .endObject().endObject().endObject());\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n                .startObject(\"foo\")\n                    .field(\"type\", \"object\")\n                    .field(\"dynamic\", true)\n                    .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\")\n            .field(\"bar\", \"something\")\n            .endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","date":"2018-12-25 03:06:50","endLine":264,"groupId":"36952","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPropagateDynamicWithExistingMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/db93474c0e954401f67f66f5529d7452db700a.src","preCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n                .startObject(\"foo\")\n                    .field(\"type\", \"object\")\n                    .field(\"dynamic\", true)\n                    .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\")\n            .field(\"bar\", \"something\")\n            .endObject().endObject());\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n            .startObject(\"foo\")\n            .field(\"type\", \"object\")\n            .field(\"dynamic\", true)\n            .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\").startObject(\"bar\")\n                .field(\"baz\", \"something\")\n            .endObject().endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","date":"2018-12-25 03:06:50","endLine":284,"groupId":"17553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagateDynamicWithDynamicMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/db93474c0e954401f67f66f5529d7452db700a.src","preCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n            .startObject(\"foo\")\n            .field(\"type\", \"object\")\n            .field(\"dynamic\", true)\n            .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\").startObject(\"bar\")\n                .field(\"baz\", \"something\")\n            .endObject().endObject().endObject());\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n                .startObject(\"foo\")\n                    .field(\"type\", \"object\")\n                    .field(\"dynamic\", true)\n                    .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\")\n            .field(\"bar\", \"something\")\n            .endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","date":"2019-10-15 16:05:29","endLine":318,"groupId":"36952","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPropagateDynamicWithExistingMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/8518d073d058bcafb3785a743b3df978586b3d.src","preCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n                .startObject(\"foo\")\n                    .field(\"type\", \"object\")\n                    .field(\"dynamic\", true)\n                    .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\")\n            .field(\"bar\", \"something\")\n            .endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n            .startObject(\"foo\")\n            .field(\"type\", \"object\")\n            .field(\"dynamic\", true)\n            .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\").startObject(\"bar\")\n                .field(\"baz\", \"something\")\n            .endObject().endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","date":"2019-10-15 16:05:29","endLine":338,"groupId":"17553","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagateDynamicWithDynamicMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/8518d073d058bcafb3785a743b3df978586b3d.src","preCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n            .startObject(\"foo\")\n            .field(\"type\", \"object\")\n            .field(\"dynamic\", true)\n            .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\").startObject(\"bar\")\n                .field(\"baz\", \"something\")\n            .endObject().endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-09-09 00:25:01","codes":[{"authorDate":"2020-09-09 00:25:01","commitOrder":4,"curCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n            b.field(\"dynamic\", false);\n            b.startObject(\"properties\");\n            {\n                b.startObject(\"foo\");\n                {\n                    b.field(\"type\", \"object\");\n                    b.field(\"dynamic\", true);\n                    b.startObject(\"properties\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        ParsedDocument doc = mapper.parse(source(b -> b.startObject(\"foo\").field(\"bar\", \"something\").endObject()));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","date":"2020-09-09 00:25:01","endLine":265,"groupId":"102817","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPropagateDynamicWithExistingMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/40a9ae572a6047475b9316c7c3d4e34d1d3bca.src","preCode":"    public void testPropagateDynamicWithExistingMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n                .startObject(\"foo\")\n                    .field(\"type\", \"object\")\n                    .field(\"dynamic\", true)\n                    .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\")\n            .field(\"bar\", \"something\")\n            .endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2020-09-09 00:25:01","commitOrder":4,"curCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> {\n            b.field(\"dynamic\", false);\n            b.startObject(\"properties\");\n            {\n                b.startObject(\"foo\");\n                {\n                    b.field(\"type\", \"object\");\n                    b.field(\"dynamic\", true);\n                    b.startObject(\"properties\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n        ParsedDocument doc = mapper.parse(source(b -> {\n            b.startObject(\"foo\");\n            {\n                b.startObject(\"bar\").field(\"baz\", \"something\").endObject();\n            }\n            b.endObject();\n        }));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","date":"2020-09-09 00:25:01","endLine":291,"groupId":"102817","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagateDynamicWithDynamicMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/40a9ae572a6047475b9316c7c3d4e34d1d3bca.src","preCode":"    public void testPropagateDynamicWithDynamicMapper() throws Exception {\n        DocumentMapperParser mapperParser = createIndex(\"test\").mapperService().documentMapperParser();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .field(\"dynamic\", false)\n            .startObject(\"properties\")\n            .startObject(\"foo\")\n            .field(\"type\", \"object\")\n            .field(\"dynamic\", true)\n            .startObject(\"properties\")\n            .endObject().endObject().endObject().endObject().endObject());\n        DocumentMapper mapper = mapperParser.parse(\"type\", new CompressedXContent(mapping));\n        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject().startObject(\"foo\").startObject(\"bar\")\n                .field(\"baz\", \"something\")\n            .endObject().endObject().endObject());\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", bytes, XContentType.JSON));\n        assertNotNull(doc.dynamicMappingsUpdate());\n        assertNotNull(doc.rootDoc().getField(\"foo.bar.baz\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"98590517f5ecb504874ca24c9d01b5d092b79360","commitMessage":"@@@Convert some more mapping tests to MapperServiceTestCase (#62089)\n\nWe don't need to extend ESSingleNodeTestCase for all these tests.","date":"2020-09-09 00:25:01","modifiedFileCount":"7","status":"M","submitter":"Alan Woodward"}]
