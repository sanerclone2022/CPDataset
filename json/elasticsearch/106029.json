[{"authorTime":"2018-11-26 20:57:57","codes":[{"authorDate":"2018-11-26 20:57:57","commitOrder":1,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"type1\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type1\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON))\n                    .putMapping(\"type2\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type2\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator shardIterator = mock(ShardIterator.class);\n        when(shardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(shardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","date":"2018-11-26 20:57:57","endLine":142,"groupId":"1321","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/bae148ef5965ffa13d786723305911367f4684.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"type1\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type1\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON))\n                    .putMapping(\"type2\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type2\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator shardIterator = mock(ShardIterator.class);\n        when(shardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(shardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2018-11-26 20:57:57","commitOrder":1,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"type1\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type1\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON))\n                    .putMapping(\"type2\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type2\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator shardIterator = mock(ShardIterator.class);\n        when(shardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(shardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","date":"2018-11-26 20:57:57","endLine":140,"groupId":"1321","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/50c038e601698a96102ffd927e0cc2fc86d8cb.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"type1\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type1\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON))\n                    .putMapping(\"type2\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type2\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator shardIterator = mock(ShardIterator.class);\n        when(shardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(shardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"04ebc63e340301f4d4c92c2475b448a55292a983","commitMessage":"@@@ RoutingMissingException in more like this (#33974)\n\nMore like this query allows to provide identifiers of documents to be retrieved as like/unlike items. \nIt can happen that at retrieval time an error is thrown.  for instance caused by missing routing value when `_routing` is set required in the mapping. \nInstead of ignoring such error and returning no documents for the query.  the error should be re-thrown and returned to users. As part of this \nchange also mget and mtermvectors are unified in the way they throw such exception like it happens in other places.  so that a `RoutingMissingException` is raised.\n\nCloses #29678","date":"2018-11-26 20:57:57","modifiedFileCount":"4","status":"B","submitter":"Christophe Bismuth"},{"authorTime":"2018-12-05 02:22:17","codes":[{"authorDate":"2018-12-05 02:22:17","commitOrder":2,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\"_doc\",\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", false)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))\n                    .put(new IndexMetaData.Builder(index2.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\"_doc\",\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", true)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","date":"2018-12-05 02:22:17","endLine":155,"groupId":"1321","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/50f752728207410c7f7f6bc6c7b437cb268402.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"type1\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type1\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON))\n                    .putMapping(\"type2\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type2\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator shardIterator = mock(ShardIterator.class);\n        when(shardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(shardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2018-12-05 02:22:17","commitOrder":2,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"_doc\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))\n                .put(new IndexMetaData.Builder(index2.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"_doc\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","date":"2018-12-05 02:22:17","endLine":153,"groupId":"1321","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/28724a80edd92dba8e35d0396bea38604cf530.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"type1\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type1\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON))\n                    .putMapping(\"type2\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"type2\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator shardIterator = mock(ShardIterator.class);\n        when(shardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(shardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"d24b40f688935dc3c81f968b5d8a93b9905f1039","commitMessage":"@@@Make typeless APIs usable with indices whose type name is different from `_doc` (#35790)\n\nThis commit makes `document`.  `update`.  `explain`.  `termvectors` and `mapping`\ntypeless APIs work on indices that have a type whose name is not `_doc`.\nUnfortunately.  this needs to be a bit of a hack since I didn't want calls with\nrandom type names to see documents with the type name that the user had chosen\nupon type creation.\n\nThe `explain` and `termvectors` do not support being called without a type for\nnow so the test is just using `_doc` as a type for now.  we will need to fix\ntests later but this shouldn't require further changes server-side since passing\n`_doc` as a type name is what typeless APIs do internally anyway.\n\nRelates #35190","date":"2018-12-05 02:22:17","modifiedFileCount":"26","status":"M","submitter":"Adrien Grand"},{"authorTime":"2019-11-14 18:44:43","codes":[{"authorDate":"2019-11-14 18:44:43","commitOrder":3,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", false)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))\n                    .put(new IndexMetaData.Builder(index2.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", true)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","date":"2019-11-14 18:44:43","endLine":156,"groupId":"35553","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/04718adf8b7d96c5271dd3f4794390d1e82633.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\"_doc\",\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", false)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))\n                    .put(new IndexMetaData.Builder(index2.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\"_doc\",\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", true)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-11-14 18:44:43","commitOrder":3,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))\n                .put(new IndexMetaData.Builder(index2.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","date":"2019-11-14 18:44:43","endLine":154,"groupId":"35553","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/a965fc3c41d56c95d45acf768498961570a131.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"_doc\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))\n                .put(new IndexMetaData.Builder(index2.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\"_doc\",\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"6acb70a0ab6f08f3be4b81260c9712c14c1941f2","commitMessage":"@@@IndexMetaData should allow only one mapping per index (#48952)\n\nWe removed IndexMetaData.getMappings() in #47344.  and since then it\nhas only been possible to associate a single mapping with an index within the\ncluster state. However.  it is still possible to add multiple mappings against\ndifferent types when building metadata.  even though this just has a last-applied-wins\neffect.\n\nThis commit removes the type parameter from IndexMetaData.Builder.putMapping()\nand alters various tests and consumers to reflect this.","date":"2019-11-14 18:44:43","modifiedFileCount":"26","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metadata(new Metadata.Builder()\n                .put(new IndexMetadata.Builder(index1.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", false)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))\n                    .put(new IndexMetadata.Builder(index2.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", true)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","date":"2020-04-01 03:52:01","endLine":156,"groupId":"35553","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/51419bfb9282b51cbe07ed6ffd6f7f5e641606.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", false)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))\n                    .put(new IndexMetaData.Builder(index2.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", true)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metadata(new Metadata.Builder()\n                .put(new IndexMetadata.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))\n                .put(new IndexMetadata.Builder(index2.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","date":"2020-04-01 03:52:01","endLine":154,"groupId":"35553","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/0f3ba116c9a28e86f7a14fc45ab0ad18b71e78.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metaData(new MetaData.Builder()\n                .put(new IndexMetaData.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))\n                .put(new IndexMetaData.Builder(index2.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetaData.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2021-06-07 17:00:50","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metadata(new Metadata.Builder()\n                .put(new IndexMetadata.Builder(index1.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", false)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))\n                    .put(new IndexMetadata.Builder(index2.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", true)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","date":"2020-04-01 03:52:01","endLine":156,"groupId":"106029","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/51419bfb9282b51cbe07ed6ffd6f7f5e641606.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metadata(new Metadata.Builder()\n                .put(new IndexMetadata.Builder(index1.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", false)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))\n                    .put(new IndexMetadata.Builder(index2.getName())\n                        .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                            .put(\"index.number_of_shards\", 1)\n                            .put(\"index.number_of_replicas\", 1)\n                            .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                        .putMapping(\n                            XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                                .startObject()\n                                    .startObject(\"_doc\")\n                                        .startObject(\"_routing\")\n                                            .field(\"required\", true)\n                                        .endObject()\n                                    .endObject()\n                                .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiTermsVectorAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiTermVectorsShardRequest request,\n                                     ActionListener<MultiTermVectorsShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"},{"authorDate":"2021-06-07 17:00:50","commitOrder":5,"curCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metadata(new Metadata.Builder()\n                .put(new IndexMetadata.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))\n                .put(new IndexMetadata.Builder(index2.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver(), EmptySystemIndices.INSTANCE.getExecutorSelector()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","date":"2021-06-07 17:00:50","endLine":145,"groupId":"106029","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/0aa49af03d2ea3a7d78bbefe95bae5a559349c.src","preCode":"    public static void beforeClass() throws Exception {\n        threadPool = new TestThreadPool(TransportMultiGetActionTests.class.getSimpleName());\n\n        transportService = new TransportService(Settings.EMPTY, mock(Transport.class), threadPool,\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            boundAddress -> DiscoveryNode.createLocal(Settings.builder().put(\"node.name\", \"node1\").build(),\n                boundAddress.publishAddress(), randomBase64UUID()), null, emptySet()) {\n            @Override\n            public TaskManager getTaskManager() {\n                return taskManager;\n            }\n        };\n\n        final Index index1 = new Index(\"index1\", randomBase64UUID());\n        final Index index2 = new Index(\"index2\", randomBase64UUID());\n        final ClusterState clusterState = ClusterState.builder(new ClusterName(TransportMultiGetActionTests.class.getSimpleName()))\n            .metadata(new Metadata.Builder()\n                .put(new IndexMetadata.Builder(index1.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", false)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))\n                .put(new IndexMetadata.Builder(index2.getName())\n                    .settings(Settings.builder().put(\"index.version.created\", Version.CURRENT)\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.number_of_replicas\", 1)\n                        .put(IndexMetadata.SETTING_INDEX_UUID, index1.getUUID()))\n                    .putMapping(\n                        XContentHelper.convertToJson(BytesReference.bytes(XContentFactory.jsonBuilder()\n                            .startObject()\n                                .startObject(\"_doc\")\n                                    .startObject(\"_routing\")\n                                        .field(\"required\", true)\n                                    .endObject()\n                                .endObject()\n                            .endObject()), true, XContentType.JSON)))).build();\n\n        final ShardIterator index1ShardIterator = mock(ShardIterator.class);\n        when(index1ShardIterator.shardId()).thenReturn(new ShardId(index1, randomInt()));\n\n        final ShardIterator index2ShardIterator = mock(ShardIterator.class);\n        when(index2ShardIterator.shardId()).thenReturn(new ShardId(index2, randomInt()));\n\n        final OperationRouting operationRouting = mock(OperationRouting.class);\n        when(operationRouting.getShards(eq(clusterState), eq(index1.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index1ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index1.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index1, randomInt()));\n        when(operationRouting.getShards(eq(clusterState), eq(index2.getName()), anyString(), anyString(), anyString()))\n            .thenReturn(index2ShardIterator);\n        when(operationRouting.shardId(eq(clusterState), eq(index2.getName()), anyString(), anyString()))\n            .thenReturn(new ShardId(index2, randomInt()));\n\n        clusterService = mock(ClusterService.class);\n        when(clusterService.localNode()).thenReturn(transportService.getLocalNode());\n        when(clusterService.state()).thenReturn(clusterState);\n        when(clusterService.operationRouting()).thenReturn(operationRouting);\n\n        shardAction = new TransportShardMultiGetAction(clusterService, transportService, mock(IndicesService.class), threadPool,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void doExecute(Task task, MultiGetShardRequest request, ActionListener<MultiGetShardResponse> listener) {\n            }\n        };\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"9cbc5f7e8fd4a73255d4ed35d4935410b52b9bcd","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-06-07 17:00:50","modifiedFileCount":"192","status":"M","submitter":"iverase"}]
