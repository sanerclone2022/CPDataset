[{"authorTime":"2019-12-18 19:07:53","codes":[{"authorDate":"2019-12-18 19:07:53","commitOrder":1,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetaData templateMetaData = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetaData.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetaDataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetaData),\n            NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2019-12-18 19:07:53","endLine":558,"groupId":"5392","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/d35eaeb18ab732aa533c331da58a0b5f48e8d0.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetaData templateMetaData = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetaData.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetaDataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetaData),\n            NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"B"},{"authorDate":"2019-12-18 19:07:53","commitOrder":1,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetaData templateMetaData = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetaData.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetaDataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetaData),\n            xContentRegistry());\n        List<AliasMetaData> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(), List.of(templateMetaData),\n            MetaData.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, List.of(templateMetaData), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2019-12-18 19:07:53","endLine":620,"groupId":"45908","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/d35eaeb18ab732aa533c331da58a0b5f48e8d0.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetaData templateMetaData = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetaData.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetaDataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetaData),\n            xContentRegistry());\n        List<AliasMetaData> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(), List.of(templateMetaData),\n            MetaData.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, List.of(templateMetaData), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"B"}],"commitId":"57e6269f750471f05a1a79539ca45361b9e3c2b5","commitMessage":"@@@Extract a create index method that only manipulates the ClusterState (#50240)\n\n* Extract IndexCreationTask execute into applyCreateIndexRequest\n\nThis is the first step in preparation for separating the index creation into a few\nsteps that only deal with the cluster state mutation and removing the IndexCreationTask\naltogether.\n\n* Split applyCreateIndexRequest\n\nThis breaks down the logic in applyCreateIndexRequest into multiple\nsteps that will hopefully make the service more readable and unit testable.\nThe service creation process now goes through a few well defined steps. \nnamely find the templates that possibly match the new index.  parse the\nrequested and template matching mappings.  process the index and template\nmatching settings.  validate the wait for active shards request and\ncreate the `IndexService`.  update the mappings in the `MapperService` (which\nis grouped together with creating the sort order for validation purposes). \nvalidate the requested and templated matching aliases and finally update\nthe `ClusterState` to reflect the requested changes.\n\nThis also removes the `IndexCreationTask` as it was a shallow\nindirection and migrates the tests from `IndexCreationTaskTests` to\n`MetaDataCreateIndexServiceTests` (making them \"real\" unit tests\noperating on the `ClusterState` rather than mocks).\n\n* Add more unit tests.\n\n* Add IT to verify we cleanup in case of failure","date":"2019-12-18 19:07:53","modifiedFileCount":"4","status":"B","submitter":"Andrei Dan"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetadata),\n            NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":633,"groupId":"5392","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/04cfaabd2f7f64d25809d047b88bd0e1cd664b.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetaData templateMetaData = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetaData.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetaDataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetaData),\n            NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetadata),\n            xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(), List.of(templateMetadata),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, List.of(templateMetadata), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":695,"groupId":"45908","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/04cfaabd2f7f64d25809d047b88bd0e1cd664b.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetaData templateMetaData = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetaData.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetaDataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetaData),\n            xContentRegistry());\n        List<AliasMetaData> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(), List.of(templateMetaData),\n            MetaData.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, List.of(templateMetaData), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-03 23:34:50","codes":[{"authorDate":"2020-04-03 23:34:50","commitOrder":3,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-03 23:34:50","endLine":633,"groupId":"5392","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/01/08315240f59417308e1e64e2b99386a709cb76.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetadata),\n            NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"M"},{"authorDate":"2020-04-03 23:34:50","commitOrder":3,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2020-04-03 23:34:50","endLine":696,"groupId":"44066","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/01/08315240f59417308e1e64e2b99386a709cb76.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(), List.of(templateMetadata),\n            xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(), List.of(templateMetadata),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, List.of(templateMetadata), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"}],"commitId":"9f9ade7dcb04c1ffc66e92357f6cd32721dcda38","commitMessage":"@@@Use V2 index templates during index creation (#54669)\n\n* Use V2 index templates during index creation\n\nThis commit changes our index creation code to use (and favor!) V2 index templates during index\ncreation. The creation precedence goes like so.  in order of precedence:\n\n- Existing source `IndexMetadata` - for example.  when recovering from a peer or a shrink/split/clone\n  where index templates should not be applied\n- A matching V2 index template.  if one is found\n  - When a V2 template is found.  all component templates (in the `composed_of` field) are applied\n    in the order that they appear.  with the index template having the 2nd highest precedence (the\n    create index request always has the top priority when it comes to index settings)\n- All matching V1 templates (the old style)\n\nThis also adds index template validation when `PUT`-ing a new v2 index template (because this was\nrequired) and ensures that all index and component templates specify *no* top-level mapping type (it\nis automatically added when the template is added to the cluster state).\n\nThis does not yet implement fine-grained component template merging of mappings.  where we favor\nmerging only a single field's configuration.  that will be done in subsequent work.\n\nThis also keeps the existing hidden index behavior present for v1 templates.  where a hidden index\nwill match v2 index templates unless they are global (`*`) templates.\n\nRelates to #53101","date":"2020-04-03 23:34:50","modifiedFileCount":"11","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-04-23 02:51:44","codes":[{"authorDate":"2020-04-23 02:51:44","commitOrder":4,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-23 02:51:44","endLine":635,"groupId":"5392","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/06ca95599e119563a0294becc788730f650842.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"M"},{"authorDate":"2020-04-23 02:51:44","commitOrder":4,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2020-04-23 02:51:44","endLine":698,"groupId":"44066","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/06ca95599e119563a0294becc788730f650842.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseMappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"}],"commitId":"4574802dc54a72f982cf86a415511bb219e6dbc9","commitMessage":"@@@Merge V2 index/component template mappings in specific manner (#55607)\n\nThis commit changes the way that V2 index.  component.  and request mappings are merged. Specifically:\n\n- Fields are merged in a \"replacement\" manner.  meaning that the entire definition is replaced rather\nthan merging the interior configuration\n- Mapping metadata (all fields outside of `properties`) are merged recursively.\n\nThe merging for V1 templates does not change.\n\nRelates to #53101\n","date":"2020-04-23 02:51:44","modifiedFileCount":"4","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-06-04 05:08:18","codes":[{"authorDate":"2020-04-23 02:51:44","commitOrder":5,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-23 02:51:44","endLine":635,"groupId":"5392","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/06ca95599e119563a0294becc788730f650842.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"N"},{"authorDate":"2020-06-04 05:08:18","commitOrder":5,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2020-06-04 05:08:18","endLine":657,"groupId":"36620","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/573366c0ecb138697d9bd7cd25b49238b2b2b7.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS);\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"M"}],"commitId":"802099a1801adbdad21875c323427e605f9f1632","commitMessage":"@@@Handle `cluster.max_shards_per_node` in YAML config (#57234)\n\nPrior to this commit.  `cluster.max_shards_per_node` is not correctly handled\nwhen it is set via the YAML config file.  only when it is set via the Cluster\nSettings API.\n\nThis commit refactors how the limit is implemented.  both to enable correctly\nhandling the setting in the YAML and to more effectively centralize the logic\nused to enforce the limit. The logic used to apply the limit.  as well as the\nsetting value.  has been moved to the new `ShardLimitValidator`.","date":"2020-06-04 05:08:18","modifiedFileCount":"17","status":"M","submitter":"Gordon Brown"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-04-23 02:51:44","commitOrder":6,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-23 02:51:44","endLine":635,"groupId":"5392","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/06ca95599e119563a0294becc788730f650842.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"N"},{"authorDate":"2020-06-26 22:33:37","commitOrder":6,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2020-06-26 22:33:37","endLine":641,"groupId":"26321","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/1120fce627d1e8c0472deee317133555c99632.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(), Map.of(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-01 20:12:53","codes":[{"authorDate":"2020-04-23 02:51:44","commitOrder":7,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-23 02:51:44","endLine":635,"groupId":"5392","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/06ca95599e119563a0294becc788730f650842.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"N"},{"authorDate":"2020-09-01 20:12:53","commitOrder":7,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService(),\n            Collections.emptySet());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2020-09-01 20:12:53","endLine":633,"groupId":"6250","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/37/2d77da2e1b56c50a84118cae44bfd9c2409ba6.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"M"}],"commitId":"d47d450baff4951da9379234a1b04d417b7ec6af","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-09-01 20:12:53","modifiedFileCount":"119","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2020-04-23 02:51:44","commitOrder":8,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-23 02:51:44","endLine":635,"groupId":"5392","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/06ca95599e119563a0294becc788730f650842.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"N"},{"authorDate":"2021-01-15 01:11:59","commitOrder":8,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), searchExecutionContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService(),\n            Collections.emptySet());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2021-01-15 01:11:59","endLine":636,"groupId":"6250","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/a83597f2070b30f01ff3207cf774152d81357a.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), queryShardContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService(),\n            Collections.emptySet());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-03-04 00:23:29","codes":[{"authorDate":"2020-04-23 02:51:44","commitOrder":9,"curCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","date":"2020-04-23 02:51:44","endLine":635,"groupId":"101979","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMappingsAppliesDataFromTemplateAndRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/06ca95599e119563a0294becc788730f650842.src","preCode":"    public void testParseMappingsAppliesDataFromTemplateAndRequest() throws Exception {\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(templateBuilder -> {\n            templateBuilder.putAlias(AliasMetadata.builder(\"alias1\"));\n            templateBuilder.putMapping(\"_doc\", createMapping(\"mapping_from_template\", \"text\"));\n        });\n        request.mappings(createMapping(\"mapping_from_request\", \"text\").string());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.getMappings()), NamedXContentRegistry.EMPTY);\n\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"mapping_from_request\"));\n        assertThat(mappingsProperties, hasKey(\"mapping_from_template\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"N"},{"authorDate":"2021-03-04 00:23:29","commitOrder":9,"curCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), searchExecutionContext,\n            indexNameExpressionResolver::resolveDateMathExpression);\n\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService(),\n            Collections.emptySet());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","date":"2021-03-04 00:23:29","endLine":642,"groupId":"101979","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestDataHavePriorityOverTemplateData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/e4a451ace4b8e0ba9d5072867cac743fc407c5.src","preCode":"    public void testRequestDataHavePriorityOverTemplateData() throws Exception {\n        CompressedXContent templateMapping = createMapping(\"test\", \"text\");\n        CompressedXContent reqMapping = createMapping(\"test\", \"keyword\");\n\n        IndexTemplateMetadata templateMetadata = addMatchingTemplate(builder -> builder\n            .putAlias(AliasMetadata.builder(\"alias\").searchRouting(\"fromTemplate\").build())\n            .putMapping(\"_doc\", templateMapping)\n            .settings(Settings.builder().put(\"key1\", \"templateValue\"))\n        );\n\n        request.mappings(reqMapping.string());\n        request.aliases(Set.of(new Alias(\"alias\").searchRouting(\"fromRequest\")));\n        request.settings(Settings.builder().put(\"key1\", \"requestValue\").build());\n\n        Map<String, Object> parsedMappings = MetadataCreateIndexService.parseV1Mappings(request.mappings(),\n            List.of(templateMetadata.mappings()), xContentRegistry());\n        List<AliasMetadata> resolvedAliases = resolveAndValidateAliases(request.index(), request.aliases(),\n            MetadataIndexTemplateService.resolveAliases(List.of(templateMetadata)),\n            Metadata.builder().build(), aliasValidator, xContentRegistry(), searchExecutionContext);\n        Settings aggregatedIndexSettings = aggregateIndexSettings(ClusterState.EMPTY_STATE, request, templateMetadata.settings(),\n            null, Settings.EMPTY, IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, randomShardLimitService(),\n            Collections.emptySet());\n\n        assertThat(resolvedAliases.get(0).getSearchRouting(), equalTo(\"fromRequest\"));\n        assertThat(aggregatedIndexSettings.get(\"key1\"), equalTo(\"requestValue\"));\n        assertThat(parsedMappings, hasKey(\"_doc\"));\n        Map<String, Object> doc = (Map<String, Object>) parsedMappings.get(\"_doc\");\n        assertThat(doc, hasKey(\"properties\"));\n        Map<String, Object> mappingsProperties = (Map<String, Object>) doc.get(\"properties\");\n        assertThat(mappingsProperties, hasKey(\"test\"));\n        assertThat((Map<String, Object>) mappingsProperties.get(\"test\"), hasValue(\"keyword\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateIndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"M"}],"commitId":"9c45dbcb8e20e4fbde6a4aac72f81e7092742395","commitMessage":"@@@Add date math support for aliases (#67226)\n\nThis commit adds date match support to aliases to the put alias.  update aliases and create index APIs.\n\nFor example:\n\n```\nPUT %3Clogs-myapp-%7Bnow%2Fd%2B1d%7D-0%3E \nPOST logs-myapp-2021.03.03-0/_alias/%3Clogs-myapp-%7Bnow%2B1d%7D%3E\n```\n\nOr via a single api call:\n\n```\nPUT %3Clogs-myapp-%7Bnow%2Fd%2B1d%7D-0%3E\n{\n   \"aliases\": {\n       '<logs-myapp-{now+1d}> ': {}\n   }\n}\n```\n\nCloses #20367\n\nCo-authored-by: Martijn van Groningen <martijn.v.groningen@gmail.com>","date":"2021-03-04 00:23:29","modifiedFileCount":"11","status":"M","submitter":"Tommmster"}]
