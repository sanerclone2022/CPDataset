[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","date":"2018-04-26 03:22:53","endLine":335,"groupId":"8427","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFuzzinessOnNonStringField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/d4816b01f4a975e26ad4031e1a10f0accb1346.src","preCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPrefixNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","date":"2018-04-26 03:22:53","endLine":813,"groupId":"69027","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/fc66b3985e19e663446f001ab216edcf8db93e.src","preCode":"    public void testPrefixNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":803,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","date":"2018-07-27 17:51:09","endLine":325,"groupId":"8427","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFuzzinessOnNonStringField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/0cdaca40204ff2535233ebe1e814f7ff60e954.src","preCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testPrefixNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","date":"2018-07-27 17:51:09","endLine":793,"groupId":"69027","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/197b662d142956ef2108dfad7672add3fb9657.src","preCode":"    public void testPrefixNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":784,"status":"M"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2020-03-24 17:35:29","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","date":"2018-07-27 17:51:09","endLine":325,"groupId":"8427","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFuzzinessOnNonStringField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/0cdaca40204ff2535233ebe1e814f7ff60e954.src","preCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"},{"authorDate":"2020-03-24 17:35:29","commitOrder":3,"curCode":"    public void testPrefixNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword, text and wildcard fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","date":"2020-03-24 17:35:29","endLine":820,"groupId":"69027","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/24e82a9e083fa1e8542999edaa622d6926346c.src","preCode":"    public void testPrefixNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"M"}],"commitId":"2537e02a7dbfc7805b9e0387ac225069cad1c68a","commitMessage":"@@@Wildcard field - add normalizer support (#53851)\n\n* Add support for normalisation to wildcard field\n\n* Tidied imports\n\n* Added docs about params\n\n* Fix outdated error message\n\n* Avoid normaliser butchering wildcard query special characters\n\n* Fix broken test expectations\n\n* Fix wrong toString method\n\n* Address review comments - common method for normalising wildcard patterns and checkCompatibility\n\n* Remove unused import","date":"2020-03-24 17:35:29","modifiedFileCount":"6","status":"M","submitter":"markharwood"},{"authorTime":"2020-10-13 17:05:43","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":4,"curCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","date":"2018-07-27 17:51:09","endLine":325,"groupId":"8427","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFuzzinessOnNonStringField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/0cdaca40204ff2535233ebe1e814f7ff60e954.src","preCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"},{"authorDate":"2020-10-13 17:05:43","commitOrder":4,"curCode":"    public void testPrefixNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword, text and wildcard fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2020-10-13 17:05:43","endLine":857,"groupId":"69027","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/f6362b36df743eddff434b6a83acf6c5ea297b.src","preCode":"    public void testPrefixNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword, text and wildcard fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"M"}],"commitId":"f491422e1edf79ea08d5657b5035f4a5ee444442","commitMessage":"@@@Ensure field types consistency on supporting text queries (#63487)\n\nSome supported field types don't support term queries.  and throw exception in their termQuery method. That exception is either an IllegalArgumentException or a QueryShardException. There is logic in MatchQuery that skips the field or not depending on the exception that is thrown.\n\nAlso.  such field types should hold a TextSearchInfo.NONE while that is not always the case.\n\nWith this commit we make the following changes:\n\n- streamline using TextSearchInfo.NONE in all field types that don't support text queries\n- standardize the exception being thrown when a field type does not support term queries to be IllegalArgumentException. Note that this is not a breaking change as both exceptions previously returned translated to 400 status code.\n- Adapt the MatchQuery logic to skip fields that don't support term queries. There is no need to call termQuery passing an empty string and catch exceptions potentially thrown. We can rather check the TextSearchInfo which tells already whether the field supports text queries or not.\n- add a test method to MapperTestCase that verifies the consistency of a field type by verifying that it is not searchable whenever it uses TextSearchInfo.NONE.  while it is otherwise. This is what triggered all of the above changes.","date":"2020-10-13 17:05:43","modifiedFileCount":"41","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        SearchExecutionContext context = createSearchExecutionContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","date":"2021-01-15 01:11:59","endLine":366,"groupId":"103289","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFuzzinessOnNonStringField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/c52824fefbdd7894f0f7f5324cc199b7229240.src","preCode":"    public void testFuzzinessOnNonStringField() throws Exception {\n        MultiMatchQueryBuilder query = new MultiMatchQueryBuilder(42).field(INT_FIELD_NAME).field(BOOLEAN_FIELD_NAME);\n        query.fuzziness(randomFuzziness(INT_FIELD_NAME));\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n        query.analyzer(\"keyword\"); \r\n        e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertThat(e.getMessage(), containsString(\"Can only use fuzzy queries on keyword and text fields\"));\n\n        query.lenient(true);\n        query.toQuery(context); \r\n        query.analyzer(null);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    public void testPrefixNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword, text and wildcard fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2021-01-15 01:11:59","endLine":857,"groupId":"103289","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrefixNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/f2b7c45a7bb331c91e314966d9eec736b3e669.src","preCode":"    public void testPrefixNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12*\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use prefix queries on keyword, text and wildcard fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":848,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
