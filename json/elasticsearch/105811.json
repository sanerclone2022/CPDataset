[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-04-26 03:22:53","endLine":246,"groupId":"47991","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/80d48c11a430fc2d01961025208fd3ff90751a.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-04-26 03:22:53","endLine":288,"groupId":"47990","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/80d48c11a430fc2d01961025208fd3ff90751a.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-06 15:17:40","codes":[{"authorDate":"2018-09-06 15:17:40","commitOrder":2,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-09-06 15:17:40","endLine":246,"groupId":"47991","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/19ee58f9fb8a6cd2b360d0beecdaa6d22205ce.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2018-09-06 15:17:40","commitOrder":2,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-09-06 15:17:40","endLine":288,"groupId":"47990","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/19ee58f9fb8a6cd2b360d0beecdaa6d22205ce.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"b1257d873bc8541b15d7c933a383344c151a1333","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-06 15:17:40","modifiedFileCount":"43","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-11-02 00:05:41","codes":[{"authorDate":"2018-11-02 00:05:41","commitOrder":3,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-11-02 01:13:02","endLine":237,"groupId":"47991","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/e4f92ef2b1b36b28b96d283f65a0bbfc14b44b.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2018-11-02 00:05:41","commitOrder":3,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-11-02 01:13:02","endLine":277,"groupId":"47990","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/e4f92ef2b1b36b28b96d283f65a0bbfc14b44b.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"c3cf7dd305b3d4636405c292659dbff05307f146","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-11-02 01:13:02","modifiedFileCount":"456","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-12-06 02:49:06","codes":[{"authorDate":"2018-12-06 02:49:06","commitOrder":4,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-12-06 02:49:06","endLine":239,"groupId":"12429","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/78a2cdd86bb23bef474f566049523c023ad2b0.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2018-12-06 02:49:06","commitOrder":4,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-12-06 02:49:06","endLine":279,"groupId":"47990","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/78a2cdd86bb23bef474f566049523c023ad2b0.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"18866c4c0b1ad640f8554dc4b41765a04dcefa04","commitMessage":"@@@Make hits.total an object in the search response (#35849)\n\nThis commit changes the format of the `hits.total` in the search response to be an object with\na `value` and a `relation`. The `value` indicates the number of hits that match the query and the\n`relation` indicates whether the number is accurate (in which case the relation is equals to `eq`)\nor a lower bound of the total (in which case it is equals to `gte`).\nThis change also adds a parameter called `rest_total_hits_as_int` that can be used in the\nsearch APIs to opt out from this change (retrieve the total hits as a number in the rest response).\nNote that currently all search responses are accurate (`track_total_hits: true`) or they don't contain\n`hits.total` (`track_total_hits: true`). We'll add a way to get a lower bound of the total hits in a\nfollow up (to allow numbers to be passed to `track_total_hits`).\n\nRelates #33028","date":"2018-12-06 02:49:06","modifiedFileCount":"234","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-01-23 16:01:58","codes":[{"authorDate":"2018-12-06 02:49:06","commitOrder":5,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-12-06 02:49:06","endLine":239,"groupId":"12429","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/78a2cdd86bb23bef474f566049523c023ad2b0.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"N"},{"authorDate":"2019-01-23 16:01:58","commitOrder":5,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-01-23 16:01:58","endLine":281,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/8950e4f35697efd1b055e9404226716bffea86.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"52ba407931093ba86538596639eaf35b2a858d01","commitMessage":"@@@Expose sequence number and primary terms in search responses (#37639)\n\nUsers may require the sequence number and primary terms to perform optimistic concurrency control operations. Currently.  you can get the sequence number via the `docvalues_fields` API but the primary term is not accessible because it is maintained by the `SeqNoFieldMapper` and the infrastructure can't find it. \n\nThis commit adds a dedicated sub fetch phase to return both numbers that is connected to a new `seq_no_primary_term` parameter.","date":"2019-01-23 16:01:58","modifiedFileCount":"26","status":"M","submitter":"Boaz Leskes"},{"authorTime":"2019-01-30 15:46:14","codes":[{"authorDate":"2018-12-06 02:49:06","commitOrder":6,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-12-06 02:49:06","endLine":239,"groupId":"12429","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/78a2cdd86bb23bef474f566049523c023ad2b0.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"N"},{"authorDate":"2019-01-30 15:46:14","commitOrder":6,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .fetchSource(false)\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-01-30 15:46:14","endLine":285,"groupId":"12430","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/de69a1c6c622f493ffbcecb07c248b35d70c6d.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"2732bb5cf3d854ab404a5ebe44a2f116cc3f1073","commitMessage":"@@@Fix fetch source option in expand search phase (#37908)\n\nThis change fixes the copy of the fetch source option into the\nexpand search request that is used to retrieve the documents of each\ncollapsed group.\n\nCloses #23829","date":"2019-01-30 15:46:14","modifiedFileCount":"2","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-06-19 17:18:40","codes":[{"authorDate":"2019-06-19 17:18:40","commitOrder":7,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-06-19 17:18:40","endLine":234,"groupId":"12429","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/01290fb65b89fcc21315705bf2ff8971446175.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2019-06-19 17:18:40","commitOrder":7,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .fetchSource(false)\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-06-19 17:18:40","endLine":279,"groupId":"12430","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/01290fb65b89fcc21315705bf2ff8971446175.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .fetchSource(false)\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"54d3a4a30a7b4bcbed70d25927ced67f71bb1e57","commitMessage":"@@@SearchPhaseContext to not extend ActionListener (#43269)\n\nThe fact that SearchPhaseContext extends ActionListener makes it hard\nto reason about when the original listener is notified and to trace\nthose calls. Also.  the corresponding onFailure and onResponse were\nonly needed in two places.  one each.  where they can be replaced by a\nmore intuitive call.  like sendSearchResponse for onResponse.","date":"2019-06-19 17:18:40","modifiedFileCount":"7","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-10-25 19:10:09","codes":[{"authorDate":"2019-10-25 19:10:09","commitOrder":8,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2019-10-25 19:10:09","endLine":201,"groupId":"12429","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/ef855e46697a3010ea29b5530ae8ae2c74f2b2.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2019-10-25 19:10:09","commitOrder":8,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .fetchSource(false)\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2019-10-25 19:10:09","endLine":238,"groupId":"12430","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/ef855e46697a3010ea29b5530ae8ae2c74f2b2.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .fetchSource(false)\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"461c0cd4aa3fb7cd66dd0bc52a1b1478174c57fb","commitMessage":"@@@Remove response search phase from ExpandSearchPhase (#48401)\n\nThe expand phase is always created providing a function that builds\nthe next phase to be run.  which has a single purpose: sending the\nresponse back. Such small search phase is not necessary and causes some\nissues when reporting search progress and counting the search phases\nthat need to be executed and that are already executed. We can simply\nrather send back the response.  without creating a specific phase for that.","date":"2019-10-25 19:10:09","modifiedFileCount":"4","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-10-15 00:13:36","codes":[{"authorDate":"2020-10-15 00:13:36","commitOrder":9,"curCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2020-10-15 00:13:36","endLine":205,"groupId":"105811","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSkipExpandCollapseNoHits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/be/b4ef6d66e6f32092914e0af15d7be1e4b3b900.src","preCode":"    public void testSkipExpandCollapseNoHits() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                fail(\"expand should not try to send empty multi search request\");\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2020-10-15 00:13:36","commitOrder":9,"curCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .fetchSource(false)\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2020-10-15 00:13:36","endLine":242,"groupId":"105811","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandRequestOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/be/b4ef6d66e6f32092914e0af15d7be1e4b3b900.src","preCode":"    public void testExpandRequestOptions() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        boolean version = randomBoolean();\n        final boolean seqNoAndTerm = randomBoolean();\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                final QueryBuilder postFilter = QueryBuilders.existsQuery(\"foo\");\n                assertTrue(request.requests().stream().allMatch((r) -> \"foo\".equals(r.preference())));\n                assertTrue(request.requests().stream().allMatch((r) -> \"baz\".equals(r.routing())));\n                assertTrue(request.requests().stream().allMatch((r) -> version == r.source().version()));\n                assertTrue(request.requests().stream().allMatch((r) -> seqNoAndTerm == r.source().seqNoAndPrimaryTerm()));\n                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().fetchSource() == false));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().includes().length == 0));\n                assertTrue(request.requests().stream().allMatch((r) -> r.source().fetchSource().excludes().length == 0));\n            }\n        };\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(\n                new CollapseBuilder(\"someField\")\n                    .setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\").setVersion(version).setSeqNoAndPrimaryTerm(seqNoAndTerm))\n            )\n            .fetchSource(false)\n            .postFilter(QueryBuilders.existsQuery(\"foo\")))\n            .preference(\"foobar\")\n            .routing(\"baz\");\n\n        SearchHits hits = new SearchHits(new SearchHit[0], new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0f);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"4ee18cd9ae1a73739b30a91afd06ae7ecd20a499","commitMessage":"@@@Cancel search on shard failure when partial results disallowed (#63520)\n\nIf the partial results parameter is false (which defaults to true).  then \nwe should cancel the search request when it hits a shard failure because \nthe caller won't consume the partial results.\n\nCloses #60278","date":"2020-10-15 00:13:36","modifiedFileCount":"13","status":"M","submitter":"Nhat Nguyen"}]
