[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":84,"groupId":"7562","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/4d43b1a6babe29a4814fb0176266c4cf1c2a68.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanGapQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":70,"groupId":"39300","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/35/9793adcf6af1088ef58eba9f68754e4afe962b.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-28 01:00:37","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":84,"groupId":"7562","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/4d43b1a6babe29a4814fb0176266c4cf1c2a68.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanGapQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2018-09-28 01:00:37","commitOrder":2,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(SpanMatchNoDocsQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","date":"2018-09-28 01:00:37","endLine":72,"groupId":"39300","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/22f33db77c7940d4df17fa4a44150c1333001a.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"a26cc1a2422c7d6eda7d0c204f7588d79fa597e6","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-28 01:00:37","modifiedFileCount":"338","status":"M","submitter":"Lee Hinman"},{"authorTime":"2019-09-24 01:37:15","codes":[{"authorDate":"2019-09-24 01:37:15","commitOrder":3,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","date":"2019-09-24 01:37:15","endLine":81,"groupId":"7562","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/5fc08aa8825e49c01af928ce3314336ec2a1fd.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanGapQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-09-24 01:37:15","commitOrder":3,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(SpanMatchNoDocsQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","date":"2019-09-24 01:37:15","endLine":71,"groupId":"39300","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/34174005791bcb68e4474893586216593e6bd7.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(SpanMatchNoDocsQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context.getQueryShardContext())));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context.getQueryShardContext())));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"4414fccb2765dd24895216636e68aabea2d156ca","commitMessage":"@@@Replace SearchContext with QueryShardContext in query builder tests (#46978)\n\nThis commit replaces the SearchContext used in AbstractQueryTestCase with\na QueryShardContext in order to reduce the visibility of search contexts.\n\nRelates #46523","date":"2019-09-24 01:37:15","modifiedFileCount":"57","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchExecutionContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":81,"groupId":"7562","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/eddbfbde80184c49cce5e7c571818a79397715.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanGapQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchExecutionContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(SpanMatchNoDocsQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":71,"groupId":"39300","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/0dcf15936dbf2c845644986e812ccdd1eec47a.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(SpanMatchNoDocsQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-06-23 20:15:54","codes":[{"authorDate":"2021-06-23 20:15:54","commitOrder":5,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchExecutionContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","date":"2021-06-23 20:15:54","endLine":68,"groupId":"103383","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/59/99be5e818508cbec5a77d605790adfed1402d7.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchExecutionContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                SpanQueryBuilder spanQB = spanQueryBuilderIterator.next();\n                if (spanQB instanceof SpanGapQueryBuilder) continue;\n                assertThat(spanQuery, equalTo(spanQB.toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanGapQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-06-23 20:15:54","commitOrder":5,"curCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchExecutionContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanMatchNoDocsQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","date":"2021-06-23 20:15:54","endLine":58,"groupId":"103383","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"doAssertLuceneQuery","params":"(SpanNearQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/eea3703a7265fd4fd65d871b80e34eacfab7d9.src","preCode":"    protected void doAssertLuceneQuery(SpanNearQueryBuilder queryBuilder, Query query, SearchExecutionContext context) throws IOException {\n        assertThat(query, either(instanceOf(SpanNearQuery.class))\n            .or(instanceOf(SpanTermQuery.class))\n            .or(instanceOf(SpanBoostQuery.class))\n            .or(instanceOf(SpanMatchNoDocsQuery.class))\n            .or(instanceOf(MatchAllQueryBuilder.class)));\n        if (query instanceof SpanNearQuery) {\n            SpanNearQuery spanNearQuery = (SpanNearQuery) query;\n            assertThat(spanNearQuery.getSlop(), equalTo(queryBuilder.slop()));\n            assertThat(spanNearQuery.isInOrder(), equalTo(queryBuilder.inOrder()));\n            assertThat(spanNearQuery.getClauses().length, equalTo(queryBuilder.clauses().size()));\n            Iterator<SpanQueryBuilder> spanQueryBuilderIterator = queryBuilder.clauses().iterator();\n            for (SpanQuery spanQuery : spanNearQuery.getClauses()) {\n                assertThat(spanQuery, equalTo(spanQueryBuilderIterator.next().toQuery(context)));\n            }\n        } else if (query instanceof SpanTermQuery || query instanceof SpanBoostQuery) {\n            assertThat(queryBuilder.clauses().size(), equalTo(1));\n            assertThat(query, equalTo(queryBuilder.clauses().get(0).toQuery(context)));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"4b069c217eba7ee1641938cc9624b27bf6e60867","commitMessage":"@@@Remove references to SpanBoostQuery (#74432)\n\nSpanBoostQuery will be removed in lucene 9.0. It is currently a no-op anyway. \nunless it appears at the top level of a span query tree.  in which case it is\nequivalent to a standard BoostQuery. This commit removes references to\nSpanBoostQuery from elasticsearch SpanQueryBuilders.  replacing it with\nBoostQuery where appropriate.\n\nIt also adds a new.  breaking.  check to field_masking_span to ensure that\nits inner query does not have a boost set on it.  bringing it into line with all\nother span queries that wrap inner spans.","date":"2021-06-23 20:15:54","modifiedFileCount":"8","status":"M","submitter":"Alan Woodward"}]
