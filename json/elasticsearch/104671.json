[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.getFreq(), parsed.getFreq());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","date":"2018-04-26 03:22:53","endLine":76,"groupId":"43476","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestFromXContent","params":"(booleanaddRandomFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/5fe09341ec1b69343dcbd6dd195621c7f4ad3f.src","preCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.getFreq(), parsed.getFreq());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/TermSuggestionOptionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getHighlighted(), parsed.getHighlighted());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.collateMatch(), parsed.collateMatch());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","date":"2018-04-26 03:22:53","endLine":78,"groupId":"43476","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFromXContent","params":"(booleanaddRandomFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/85dd38f45b44917a91555df0ef7504dcce8357.src","preCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getHighlighted(), parsed.getHighlighted());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.collateMatch(), parsed.collateMatch());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/SuggestionOptionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-08 22:21:01","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.getFreq(), parsed.getFreq());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","date":"2018-04-26 03:22:53","endLine":76,"groupId":"43476","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestFromXContent","params":"(booleanaddRandomFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/5fe09341ec1b69343dcbd6dd195621c7f4ad3f.src","preCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.getFreq(), parsed.getFreq());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/TermSuggestionOptionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2018-08-08 22:21:01","commitOrder":2,"curCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = PhraseSuggestion.Entry.Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getHighlighted(), parsed.getHighlighted());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.collateMatch(), parsed.collateMatch());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","date":"2018-08-08 22:21:01","endLine":79,"groupId":"43476","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFromXContent","params":"(booleanaddRandomFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/37/d886fd5d82546d93ca012b6bbc207cbc8ba1cd.src","preCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getHighlighted(), parsed.getHighlighted());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.collateMatch(), parsed.collateMatch());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/SuggestionOptionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"2d925c9a9a3b05faa988335aa230b3071fca7718","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-08 22:21:01","modifiedFileCount":"96","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-09-21 23:03:05","codes":[{"authorDate":"2020-09-21 23:03:05","commitOrder":3,"curCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.getFreq(), parsed.getFreq());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","date":"2020-09-21 23:03:05","endLine":76,"groupId":"104671","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestFromXContent","params":"(booleanaddRandomFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/899de0096ed45f66d806ad2eda6de23ef153b4.src","preCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.getFreq(), parsed.getFreq());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/TermSuggestionOptionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-09-21 23:03:05","commitOrder":3,"curCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n            parsed = PhraseSuggestion.Entry.Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getHighlighted(), parsed.getHighlighted());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.collateMatch(), parsed.collateMatch());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","date":"2020-09-21 23:03:05","endLine":79,"groupId":"104671","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFromXContent","params":"(booleanaddRandomFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/9c38fbd5849244b19729f4478e2fe2632ea704.src","preCode":"    private void doTestFromXContent(boolean addRandomFields) throws IOException {\n        Option option = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        boolean humanReadable = randomBoolean();\n        BytesReference originalBytes = toShuffledXContent(option, xContentType, ToXContent.EMPTY_PARAMS, humanReadable);\n        BytesReference mutated;\n        if (addRandomFields) {\n            mutated = insertRandomFields(xContentType, originalBytes, null, random());\n        } else {\n            mutated = originalBytes;\n        }\n        Option parsed;\n        try (XContentParser parser = createParser(xContentType.xContent(), mutated)) {\n            ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n            parsed = PhraseSuggestion.Entry.Option.fromXContent(parser);\n            assertEquals(XContentParser.Token.END_OBJECT, parser.currentToken());\n            assertNull(parser.nextToken());\n        }\n        assertEquals(option.getText(), parsed.getText());\n        assertEquals(option.getHighlighted(), parsed.getHighlighted());\n        assertEquals(option.getScore(), parsed.getScore(), Float.MIN_VALUE);\n        assertEquals(option.collateMatch(), parsed.collateMatch());\n        assertToXContentEquivalent(originalBytes, toXContent(parsed, xContentType, humanReadable), xContentType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/SuggestionOptionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"f34246b90b508802fd91412883da5895965c8a4c","commitMessage":"@@@Optimize XContentParserUtils.ensureExpectedToken (#62691)\n\nWe only ever use this with `XContentParser` no need to make it inline\nworse by forcing the lambda and hence dynamic callsite here.\n=> Extraced the exception formatting code path that is likely very cold\nto a separate method and removed the lambda usage in hot loops by simplifying\nthe signature here.","date":"2020-09-21 23:03:05","modifiedFileCount":"103","status":"M","submitter":"Armin Braun"}]
