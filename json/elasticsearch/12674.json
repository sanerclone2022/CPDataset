[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                Math.toIntExact(transport.maxInitialLineLength.getBytes()),\n                Math.toIntExact(transport.maxHeaderSize.getBytes()),\n                Math.toIntExact(transport.maxChunkSize.getBytes()));\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(Math.toIntExact(transport.maxContentLength.getBytes()));\n            if (transport.maxCompositeBufferComponents != -1) {\n                aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            }\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (transport.compression) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(transport.compressionLevel));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            if (transport.pipelining) {\n                ch.pipeline().addLast(\"pipelining\", new HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            }\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","date":"2018-04-26 03:22:53","endLine":549,"groupId":"23123","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/0c271f3ae4f8ad65acac911cf34ccf7cf9752c.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                Math.toIntExact(transport.maxInitialLineLength.getBytes()),\n                Math.toIntExact(transport.maxHeaderSize.getBytes()),\n                Math.toIntExact(transport.maxChunkSize.getBytes()));\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(Math.toIntExact(transport.maxContentLength.getBytes()));\n            if (transport.maxCompositeBufferComponents != -1) {\n                aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            }\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (transport.compression) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(transport.compressionLevel));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            if (transport.pipelining) {\n                ch.pipeline().addLast(\"pipelining\", new HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            }\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","date":"2018-04-26 03:22:53","endLine":340,"groupId":"11432","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/818a2e567521eb2233d9ddcec9d6c50e82b8fe.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-05-11 17:00:49","commitOrder":2,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                Math.toIntExact(transport.maxInitialLineLength.getBytes()),\n                Math.toIntExact(transport.maxHeaderSize.getBytes()),\n                Math.toIntExact(transport.maxChunkSize.getBytes()));\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(Math.toIntExact(transport.maxContentLength.getBytes()));\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (transport.compression) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(transport.compressionLevel));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            if (transport.pipelining) {\n                ch.pipeline().addLast(\"pipelining\", new HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            }\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","date":"2018-05-11 17:00:49","endLine":583,"groupId":"23123","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/c2c4829d2cf5425be5af3b4709ffa62ac2c7bf.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                Math.toIntExact(transport.maxInitialLineLength.getBytes()),\n                Math.toIntExact(transport.maxHeaderSize.getBytes()),\n                Math.toIntExact(transport.maxChunkSize.getBytes()));\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(Math.toIntExact(transport.maxContentLength.getBytes()));\n            if (transport.maxCompositeBufferComponents != -1) {\n                aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            }\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (transport.compression) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(transport.compressionLevel));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            if (transport.pipelining) {\n                ch.pipeline().addLast(\"pipelining\", new HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            }\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","date":"2018-04-26 03:22:53","endLine":340,"groupId":"11432","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/818a2e567521eb2233d9ddcec9d6c50e82b8fe.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"N"}],"commitId":"0e417e3112d8adec9f583d2000892e609653b01f","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-11 17:00:49","modifiedFileCount":"94","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-05-16 13:41:23","commitOrder":3,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            if (transport.pipelining) {\n                ch.pipeline().addLast(\"pipelining\", new HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            }\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","date":"2018-05-16 13:41:23","endLine":459,"groupId":"44110","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8e/5bace46aa7e7484aaa7e1ff84ad0370e9f043e.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                Math.toIntExact(transport.maxInitialLineLength.getBytes()),\n                Math.toIntExact(transport.maxHeaderSize.getBytes()),\n                Math.toIntExact(transport.maxChunkSize.getBytes()));\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(Math.toIntExact(transport.maxContentLength.getBytes()));\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (transport.compression) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(transport.compressionLevel));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            if (transport.pipelining) {\n                ch.pipeline().addLast(\"pipelining\", new HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            }\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","date":"2018-04-26 03:22:53","endLine":340,"groupId":"11432","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/818a2e567521eb2233d9ddcec9d6c50e82b8fe.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"N"}],"commitId":"8c12a59c5e577dee6f187f4d85ba7d1ae023b956","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-16 13:41:23","modifiedFileCount":"129","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-05-24 17:07:44","commitOrder":4,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","date":"2018-05-24 17:07:44","endLine":453,"groupId":"44110","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/e889797bde4fc92d6b6d1ca4c2a4a729451d2f.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            if (transport.pipelining) {\n                ch.pipeline().addLast(\"pipelining\", new HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            }\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","date":"2018-04-26 03:22:53","endLine":340,"groupId":"11432","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/818a2e567521eb2233d9ddcec9d6c50e82b8fe.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"N"}],"commitId":"84c4598e478f0ede1b7f33ad30dc3306f48246ed","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n\nx-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClien\ntPlugin.java\n/Users/colings86/dev/work/git/elasticsearch/.git/worktrees/elasticsearch\n-ilm/MERGE_HEAD\n\nbuildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlu\ngin.groovy\ndocs/reference/migration/migrate_7_0/settings.asciidoc\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpChannel.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpPipeliningHandler.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpRequestHandler.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpResponse.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Net\nty4HttpServerTransport.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/pip\nelining/HttpPipelinedRequest.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/pip\nelining/HttpPipelinedResponse.java\nmodules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/pip\nelining/HttpPipeliningHandler.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4HttpChannelTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/pip\nelining/Netty4HttpPipeliningHandlerTests.java ->\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4HttpPipeliningHandlerTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4HttpServerPipeliningTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4PipeliningEnabledIT.java ->\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4PipeliningIT.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpReadW\nriteHandler.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/HttpWrite\nOperation.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NettyAdap\ntor.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NettyList\nener.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpCh\nannel.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpPi\npeliningHandler.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpRe\nsponse.java\nplugins/transport-nio/src/main/java/org/elasticsearch/http/nio/NioHttpSe\nrverTransport.java\nplugins/transport-nio/src/test/java/org/elasticsearch/NioIntegTestCase.j\nava\nplugins/transport-nio/src/test/java/org/elasticsearch/http/nio/HttpReadW\nriteHandlerTests.java\nplugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpPi\npeliningHandlerTests.java\nmodules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Net\nty4PipeliningDisabledIT.java ->\nplugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioPipeli\nningIT.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/PackagingTests.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/VMTestRunner.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCas\ne.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/DefaultTarTest\ns.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/DefaultZipTest\ns.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/OssTarTests.ja\nva\nqa/vagrant/src/main/java/org/elasticsearch/packaging/test/OssZipTests.ja\nva\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Archives.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Cleanup.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Distribution.j\nava\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/FileMatcher.ja\nva\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/FileUtils.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Installation.j\nava\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Platforms.java\nqa/vagrant/src/main/java/org/elasticsearch/packaging/util/Shell.java\nserver/src/main/java/org/elasticsearch/client/transport/TransportClient.\njava\nserver/src/main/java/org/elasticsearch/cluster/ClusterModule.java\nserver/src/main/java/org/elasticsearch/cluster/service/ClusterApplier.ja\nva\nserver/src/main/java/org/elasticsearch/cluster/service/ClusterApplierSer\nvice.java\nserver/src/main/java/org/elasticsearch/common/settings/ClusterSettings.j\nava\nserver/src/main/java/org/elasticsearch/discovery/single/SingleNodeDiscov\nery.java\nserver/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java\nserver/src/main/java/org/elasticsearch/http/HttpHandlingSettings.java\nserver/src/main/java/org/elasticsearch/http/HttpPipelinedMessage.java\nserver/src/main/java/org/elasticsearch/http/HttpPipelinedRequest.java\nserver/src/main/java/org/elasticsearch/http/HttpPipeliningAggregator.jav\na\nserver/src/main/java/org/elasticsearch/http/HttpTransportSettings.java\nserver/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.\njava\nserver/src/main/java/org/elasticsearch/persistent/PersistentTasksCustomM\netaData.java\nserver/src/main/java/org/elasticsearch/transport/TcpTransport.java\nserver/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestC\nase.java\nserver/src/test/java/org/elasticsearch/client/transport/TransportClientT\nests.java\nserver/src/test/java/org/elasticsearch/cluster/service/ClusterApplierSer\nviceTests.java\nserver/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscov\neryIT.java\nserver/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscov\neryTests.java\nserver/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryUnitTes\nts.java\nserver/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderT\nests.java\nserver/src/test/java/org/elasticsearch/indices/store/IndicesStoreIntegra\ntionIT.java\nserver/src/test/java/org/elasticsearch/persistent/TestPersistentTasksPlu\ngin.java\nserver/src/test/java/org/elasticsearch/search/geo/GeoShapeIntegrationIT.\njava\ntest/framework/src/main/java/org/elasticsearch/test/ClusterServiceUtils.\njava\ntest/framework/src/main/java/org/elasticsearch/test/ESIntegTestCase.java\ntest/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.\njava\ntest/framework/src/test/java/org/elasticsearch/test/test/InternalTestClu\nsterTests.java\nx-pack/docs/en/security/auditing/event-types.asciidoc\nx-pack/docs/en/security/auditing/forwarding-logs.asciidoc\nx-pack/docs/en/security/auditing/output-index.asciidoc\nx-pack/docs/en/security/auditing/output-logfile.asciidoc\nx-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClien\ntPlugin.java\nx-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/au\ndit/index/IndexAuditTrailTests.java\nx-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/au\ndit/index/RemoteIndexAuditTrailStartingTests.java\nx-pack/qa/ml-native-tests/src/test/java/org/elasticsearch/xpack/ml/integ\nration/MlNativeAutodetectIntegTestCase.java\n","date":"2018-05-24 17:07:44","modifiedFileCount":"44","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-06-11 16:47:26","commitOrder":5,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","date":"2018-06-11 16:47:26","endLine":446,"groupId":"44110","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/61/825ad4d278eb95fcf2f5fa65dd60a128cbb73b.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (SETTING_CORS_ENABLED.get(transport.settings())) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":5,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","date":"2018-04-26 03:22:53","endLine":340,"groupId":"11432","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/818a2e567521eb2233d9ddcec9d6c50e82b8fe.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"N"}],"commitId":"9ee492a3f0768a3790671bfe46223e700082730a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-11 16:47:26","modifiedFileCount":"192","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-06-15 06:32:41","codes":[{"authorDate":"2018-06-15 06:32:41","commitOrder":6,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyTcpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","date":"2018-06-15 06:32:41","endLine":430,"groupId":"44110","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/fd8168dbe474329ef99393a8751362fc2c3b96.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"},{"authorDate":"2018-06-15 06:32:41","commitOrder":6,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2018-06-15 06:32:41","endLine":340,"groupId":"11432","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/6c4b68bfa4efdc1e2d027440587f059e21d32d.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            serverAcceptedChannel(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"2af05e5480ab63e5602ff92ded3ca5d4d127b08b","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-15 06:32:41","modifiedFileCount":"62","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-06-15 06:32:41","codes":[{"authorDate":"2018-06-20 02:37:47","commitOrder":7,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2018-06-20 02:37:47","endLine":407,"groupId":"44110","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/49ce38b89bc04f94dc43c94212abedadf351a0.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyTcpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"openChannels\", transport.serverOpenChannels);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.getCorsConfig()));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"},{"authorDate":"2018-06-15 06:32:41","commitOrder":7,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2018-06-15 06:32:41","endLine":340,"groupId":"11432","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/6c4b68bfa4efdc1e2d027440587f059e21d32d.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"N"}],"commitId":"eee1a451fc3159e2d6f85692a741c85f54cb8a20","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-20 02:37:47","modifiedFileCount":"306","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-06-22 00:56:45","codes":[{"authorDate":"2018-06-20 02:37:47","commitOrder":8,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2018-06-20 02:37:47","endLine":407,"groupId":"44110","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/49ce38b89bc04f94dc43c94212abedadf351a0.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"N"},{"authorDate":"2018-06-22 00:56:45","commitOrder":8,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2018-06-22 00:56:45","endLine":334,"groupId":"11432","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/c6fceb54304415e7dcf123dc79dd00f30104fb.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            NettyTcpChannel nettyTcpChannel = new NettyTcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this, name));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"c9eec7eadcbb7f233a8c09211f02f937f501371e","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-22 00:56:45","modifiedFileCount":"63","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-11-07 08:58:20","codes":[{"authorDate":"2018-06-20 02:37:47","commitOrder":9,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2018-06-20 02:37:47","endLine":407,"groupId":"44110","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/49ce38b89bc04f94dc43c94212abedadf351a0.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"N"},{"authorDate":"2018-11-07 08:58:20","commitOrder":9,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2018-11-07 08:58:20","endLine":304,"groupId":"11432","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b3/4f50de0f04192e9e49682c049be29bf24342bb.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, name);\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"}],"commitId":"f395b1eace8297aeef16648473a7e7f3500b671e","commitMessage":"@@@Open node connections asynchronously (#35144)\n\nThis is related to #29023. Additionally at other points we have\ndiscussed a preference for removing the need to unnecessarily block\nthreads for opening new node connections. This commit lays the groudwork\nfor this by opening connections asynchronously at the transport level.\nWe still block.  however.  this work will make it possible to eventually\nremove all blocking on new connections out of the TransportService\nand Transport.","date":"2018-11-07 08:58:20","modifiedFileCount":"35","status":"M","submitter":"Tim Brooks"},{"authorTime":"2018-11-07 08:58:20","codes":[{"authorDate":"2018-11-20 00:51:32","commitOrder":10,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2018-11-20 00:51:32","endLine":347,"groupId":"44110","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/dc011a06c959287ec514ea49bc6a7947eae4e3.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(transport.logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-11-07 08:58:20","commitOrder":10,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2018-11-07 08:58:20","endLine":304,"groupId":"11432","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b3/4f50de0f04192e9e49682c049be29bf24342bb.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"N"}],"commitId":"b2057138a72dd221655fc868fee555c018c8c838","commitMessage":"@@@Remove AbstractComponent from AbstractLifecycleComponent (#35560)\n\nAbstractLifecycleComponent now no longer extends AbstractComponent. In\norder to accomplish this.  many.  many classes now instantiate their own\nlogger.\n","date":"2018-11-20 00:51:32","modifiedFileCount":"48","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-11-29 23:55:53","codes":[{"authorDate":"2018-11-20 00:51:32","commitOrder":11,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2018-11-20 00:51:32","endLine":347,"groupId":"44110","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/dc011a06c959287ec514ea49bc6a7947eae4e3.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"N"},{"authorDate":"2018-11-29 23:55:53","commitOrder":11,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2018-11-29 23:55:53","endLine":298,"groupId":"11432","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/ef6b21b1f3fb34ee8cc53cf8ddc9eea2a23f76.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"c305f9dc03eb089e3f7dc16cd4e3ddd546222360","commitMessage":"@@@Make keepalive pings bidirectional and optimizable (#35441)\n\nThis is related to #34405 and a follow-up to #34753. It makes a number\nof changes to our current keepalive pings.\n\nThe ping interval configuration is moved to the ConnectionProfile.\n\nThe server channel now responds to pings. This makes the keepalive\npings bidirectional.\n\nOn the client-side.  the pings can now be optimized away. What this\nmeans is that if the channel has received a message or sent a message\nsince the last pinging round.  the ping is not sent for this round.","date":"2018-11-29 23:55:53","modifiedFileCount":"21","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-03-28 00:40:26","codes":[{"authorDate":"2018-11-20 00:51:32","commitOrder":12,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2018-11-20 00:51:32","endLine":347,"groupId":"44110","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/dc011a06c959287ec514ea49bc6a7947eae4e3.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"N"},{"authorDate":"2020-03-28 00:40:26","commitOrder":12,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2020-03-28 00:40:26","endLine":353,"groupId":"11432","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/44622757920ca88c60e1617f07cf4057219649.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"size\", new Netty4SizeHeaderFrameDecoder());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"}],"commitId":"42150d3674089f415e0b8c54993aef2a03d016b5","commitMessage":"@@@Move transport decoding and aggregation to server (#48263)\n\nCurrently all of our transport protocol decoding and aggregation occurs\nin the individual transport modules. This means that each implementation\n(test.  netty.  nio) must implement this logic. Additionally.  it means\nthat the entire message has been read from the network before the server\npackage receives it.\n\nThis commit creates a pipeline in server which can be passed arbitrary\nbytes to handle. Internally.  the pipeline will decode.  decompress.  and\naggregate the messages. Additionally.  this allows us to run many\nmegabytes of bytes through the pipeline in tests to ensure that the\nlogic works.\n\nThis work will enable future work:\n\nCircuit breaking or backoff logic based on message type and byte\nin the content aggregator.\nSharing bytes with the application layer using the ref counted\nreleasable network bytes.\nImproved network monitoring based specifically on channels.\nFinally.  this fixes the bug where we do not circuit break on the correct\nmessage size when compression is enabled.","date":"2020-03-28 00:40:26","modifiedFileCount":"21","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-03-28 00:40:26","codes":[{"authorDate":"2020-05-18 23:06:24","commitOrder":13,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-05-18 23:06:24","endLine":323,"groupId":"44110","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/7ff735141d2e9d25fed2a762055858e0ade01e.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2020-03-28 00:40:26","commitOrder":13,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2020-03-28 00:40:26","endLine":353,"groupId":"11432","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/44622757920ca88c60e1617f07cf4057219649.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"N"}],"commitId":"7501e061cfe2b2455884b651267130976ac90c20","commitMessage":"@@@Create HttpRequest earlier in pipeline (#56393)\n\nElasticsearch requires that a HttpRequest abstraction be implemented\nby http modules before server processing. This abstraction controls when\nunderlying resources are released. This commit moves this abstraction to\nbe created immediately after content aggregation. This change will\nenable follow-up work including moving Cors logic into the server\npackage and tracking bytes as they are aggregated from the network\nlevel.","date":"2020-05-18 23:06:24","modifiedFileCount":"26","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-05-18 23:06:24","commitOrder":14,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-05-18 23:06:24","endLine":323,"groupId":"44110","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/7ff735141d2e9d25fed2a762055858e0ade01e.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"N"},{"authorDate":"2020-07-29 01:14:40","commitOrder":14,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2020-07-29 01:42:59","endLine":343,"groupId":"11432","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/095369bcfaea534fb0f3cab6c008647195e784.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"}],"commitId":"e3bbb3bed4ed9430ab43eb4a3e8276ae503c13ab","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-29 01:42:59","modifiedFileCount":"261","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-09-08 22:36:18","commitOrder":15,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-09-08 22:36:18","endLine":319,"groupId":"44110","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/1662a57842749b1111486647e41e62216c4e68.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":15,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2020-07-29 01:42:59","endLine":343,"groupId":"11432","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/095369bcfaea534fb0f3cab6c008647195e784.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"N"}],"commitId":"d5f9e4ecb0c178f47b480973e203d48293e48b6b","commitMessage":"@@@Move CorsHandler to server (#62007)\n\nCurrently we duplicate our specialized cors logic in all transport\nplugins. This is unnecessary as it could be implemented in a single\nplace. This commit moves the logic to server. Additionally it fixes a\nbut where we are incorrectly closing http channels on early Cors\nresponses.","date":"2020-09-08 22:36:18","modifiedFileCount":"12","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-09-25 04:20:12","commitOrder":16,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-09-25 04:20:12","endLine":323,"groupId":"44110","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/32b6cb055ca0abc9db1b832cafa123e334452b.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":16,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2020-07-29 01:42:59","endLine":343,"groupId":"11432","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/095369bcfaea534fb0f3cab6c008647195e784.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"N"}],"commitId":"19c19f28cb7b82f0c9b480e7f07289ab6bfeeb60","commitMessage":"@@@Split up large HTTP responses in outbound pipeline (#62666)\n\nCurrently Netty will batch compression an entire HTTP response\nregardless of its content size. It allocates a byte array at least of\nthe same size as the uncompressed content. This causes issues with our\nattempts to remove humungous G1GC allocations. This commit resolves the\nissue by split responses into 128KB chunks.\n\nThis has the side-effect of making large outbound HTTP responses that\nare compressed be send as chunked transfer-encoding.","date":"2020-09-25 04:20:12","modifiedFileCount":"9","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-10-01 01:31:54","codes":[{"authorDate":"2020-10-01 01:31:54","commitOrder":17,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", byteBufSizer);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-10-01 01:31:54","endLine":327,"groupId":"44110","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/010a31375c85ad8b72ee04767238b040426347.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2020-10-01 01:31:54","commitOrder":17,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", sizer);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2020-10-01 01:31:54","endLine":347,"groupId":"60698","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/ead8360941563b38c1ad86c96f8879bce5497d.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"1547bd672d4062de99140263c1fc167581edf971","commitMessage":"@@@Transfer network bytes to smaller buffer (#62673)\n\nCurrently we read in 64KB blocks from the network. When TLS is not\nenabled.  these bytes are normally passed all the way to the application\nlayer (some exceptions: compression). For the HTTP layer this means that\nthese bytes can live throughout the entire lifecycle of an indexing\nrequest.\n\nThe problem is that if the reads from the socket are small.  this means\nthat 64KB buffers can be consumed by 1KB or smaller reads. If the socket\nbuffer or TCP buffer sizes are small.  the leads to massive memory\nwaste. It has been identified as a major source of OOMs on coordinating\nnodes as Elasticsearch easily exhausts the heap for these network bytes.\n\nThis commit resolves the problem by placing a handler after the TLS\nhandler to copy these bytes to a more appropriate buffer size as\nnecessary. This comes after TLS.  because TLS is a framing layer which\noften resolves this problem for us (the 64KB buffer will be decoded\ninto a more appropriate buffer size). However.  this extra handler will\nsolve it for the non-TLS pipelines.","date":"2020-10-01 01:31:54","modifiedFileCount":"2","status":"M","submitter":"Tim Brooks"},{"authorTime":"2021-04-27 19:31:29","codes":[{"authorDate":"2021-04-27 19:31:29","commitOrder":18,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", NettyByteBufSizer.INSTANCE);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2021-04-27 19:31:29","endLine":314,"groupId":"12674","id":35,"instanceNumber":1,"isCurCommit":1,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/71ff3bca349973bc61202f8d7f8a84ff35a4bd.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", byteBufSizer);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2021-04-27 19:31:29","commitOrder":18,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", NettyByteBufSizer.INSTANCE);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","date":"2021-04-27 19:31:29","endLine":335,"groupId":"12674","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/367399098a3220ee14807cffb38c4162399633.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());\n            ch.attr(CHANNEL_KEY).set(nettyTcpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", sizer);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n            serverAcceptedChannel(nettyTcpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"cf360cefb68002fb5871d879f3a07643209904dc","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-27 19:31:29","modifiedFileCount":"260","status":"M","submitter":"iverase"}]
