[{"authorTime":"2021-03-09 08:56:16","codes":[{"authorDate":"2021-03-09 08:56:16","commitOrder":1,"curCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldName(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","date":"2021-03-09 08:56:16","endLine":235,"groupId":"21803","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlattenedLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/2c85230a672084187375b8624cb0ce8094927b.src","preCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldName(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"},{"authorDate":"2021-03-09 08:56:16","commitOrder":1,"curCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldName(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","date":"2021-03-09 08:56:16","endLine":256,"groupId":"21803","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlattenedLookupWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/2c85230a672084187375b8624cb0ce8094927b.src","preCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldName(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"}],"commitId":"796284a190db31466088bd04fb577720449eb16c","commitMessage":"@@@Move flattened field to core. (#68780)\n\nThis field mapper only lived in its own module so it could be licensed as x-pack\nbasic. Now it can be moved to core.  which matches its status as a core type.","date":"2021-03-09 08:56:16","modifiedFileCount":"4","status":"B","submitter":"Julie Tibshirani"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":2,"curCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldType(objectKey).name(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","date":"2021-04-21 21:28:12","endLine":197,"groupId":"21803","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlattenedLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/92d75a921dd0f0cf6a8c5dbad4733f1bfb65ae.src","preCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldName(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2021-04-21 21:28:12","commitOrder":2,"curCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldType(objectKey).name(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","date":"2021-04-21 21:28:12","endLine":218,"groupId":"21803","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlattenedLookupWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/92d75a921dd0f0cf6a8c5dbad4733f1bfb65ae.src","preCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldName(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"},{"authorTime":"2021-05-12 20:50:26","codes":[{"authorDate":"2021-05-12 20:50:26","commitOrder":3,"curCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertNotNull(searchFieldType);\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","date":"2021-05-12 20:50:26","endLine":186,"groupId":"21803","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlattenedLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/38353b1aef2b2b613d0bb47f4a9a60cf83fe1e.src","preCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldType(objectKey).name(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2021-05-12 20:50:26","commitOrder":3,"curCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertNotNull(searchFieldType);\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","date":"2021-05-12 20:50:26","endLine":206,"groupId":"21803","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlattenedLookupWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/38353b1aef2b2b613d0bb47f4a9a60cf83fe1e.src","preCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertEquals(mapper.keyedFieldType(objectKey).name(), searchFieldType.name());\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"4528e780c48ada91fd452b9c51dc1a37772c5f07","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n\n# Conflicts:\n#\tx-pack/plugin/spatial/build.gradle\n#\tx-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java\n","date":"2021-05-12 20:50:26","modifiedFileCount":"564","status":"M","submitter":"iverase"},{"authorTime":"2021-05-12 20:50:26","codes":[{"authorDate":"2021-05-26 14:46:59","commitOrder":4,"curCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertNotNull(searchFieldType);\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n\n        assertThat(lookup.getMatchingFieldNames(\"object1.*\"), contains(\"object1.object2.field\"));\n        \r\n        assertThat(lookup.getMatchingFieldNames(\"object1.object2.field.foo\"), contains(\"object1.object2.field.foo\"));\n        \r\n        assertThat(lookup.getMatchingFieldNames(\"object1.object2.field.foo*\"), hasSize(0));\n    }\n","date":"2021-05-26 14:46:59","endLine":211,"groupId":"102885","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlattenedLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d0/ab470e01000c83d387fdf80d3d74d89d6d5ac2.src","preCode":"    public void testFlattenedLookup() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), emptyList(), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(fieldName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = fieldName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertNotNull(searchFieldType);\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2021-05-12 20:50:26","commitOrder":4,"curCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertNotNull(searchFieldType);\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","date":"2021-05-12 20:50:26","endLine":206,"groupId":"102885","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlattenedLookupWithAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/38353b1aef2b2b613d0bb47f4a9a60cf83fe1e.src","preCode":"    public void testFlattenedLookupWithAlias() {\n        String fieldName = \"object1.object2.field\";\n        FlattenedFieldMapper mapper = createFlattenedMapper(fieldName);\n\n        String aliasName = \"alias\";\n        FieldAliasMapper alias = new FieldAliasMapper(aliasName, aliasName, fieldName);\n\n        FieldTypeLookup lookup = new FieldTypeLookup(singletonList(mapper), singletonList(alias), emptyList());\n        assertEquals(mapper.fieldType(), lookup.get(aliasName));\n\n        String objectKey = \"key1.key2\";\n        String searchFieldName = aliasName + \".\" + objectKey;\n\n        MappedFieldType searchFieldType = lookup.get(searchFieldName);\n        assertNotNull(searchFieldType);\n        assertThat(searchFieldType, Matchers.instanceOf(FlattenedFieldMapper.KeyedFlattenedFieldType.class));\n        FlattenedFieldMapper.KeyedFlattenedFieldType keyedFieldType = (FlattenedFieldMapper.KeyedFlattenedFieldType) searchFieldType;\n        assertEquals(objectKey, keyedFieldType.key());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/FieldTypeLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"}],"commitId":"18e30d98bbd2c5825f40e8aa659217bbaab8eb00","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-05-26 14:46:59","modifiedFileCount":"317","status":"M","submitter":"iverase"}]
