[{"authorTime":"2018-09-25 00:33:51","codes":[{"authorDate":"2018-09-25 00:33:51","commitOrder":1,"curCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"pipeline\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        ElasticsearchException e = expectThrows(\n            ElasticsearchException.class,\n            () -> factory.create(Collections.emptyMap(), null, outerConfig).execute(testIngestDocument)\n        );\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e.getRootCause().getMessage()\n        );\n    }\n","date":"2018-09-25 00:33:51","endLine":116,"groupId":"43723","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testThrowsOnRecursivePipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/99/fa7633d085adef5ba7170f4b1d2594dbe77862.src","preCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"pipeline\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        ElasticsearchException e = expectThrows(\n            ElasticsearchException.class,\n            () -> factory.create(Collections.emptyMap(), null, outerConfig).execute(testIngestDocument)\n        );\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e.getRootCause().getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2018-09-25 00:33:51","commitOrder":1,"curCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument);\n        outerProc.execute(testIngestDocument);\n    }\n","date":"2018-09-25 00:33:51","endLine":132,"groupId":"23822","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllowsRepeatedPipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/99/fa7633d085adef5ba7170f4b1d2594dbe77862.src","preCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument);\n        outerProc.execute(testIngestDocument);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"243e863f6e862074b564f909e90a8fd83ae8ad01","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-25 00:33:51","modifiedFileCount":"253","status":"B","submitter":"Lee Hinman"},{"authorTime":"2018-10-24 00:43:46","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":2,"curCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException e = expectThrows(\n            ElasticsearchException.class,\n            () -> factory.create(Collections.emptyMap(), null, outerConfig).execute(testIngestDocument)\n        );\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e.getRootCause().getMessage()\n        );\n    }\n","date":"2018-10-24 00:43:46","endLine":114,"groupId":"43723","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testThrowsOnRecursivePipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/d88c05ccc6e89ca265277087b2c9bed3314f20.src","preCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"pipeline\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        ElasticsearchException e = expectThrows(\n            ElasticsearchException.class,\n            () -> factory.create(Collections.emptyMap(), null, outerConfig).execute(testIngestDocument)\n        );\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e.getRootCause().getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2018-10-24 00:43:46","commitOrder":2,"curCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument);\n        outerProc.execute(testIngestDocument);\n    }\n","date":"2018-10-24 00:43:46","endLine":130,"groupId":"23822","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllowsRepeatedPipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/d88c05ccc6e89ca265277087b2c9bed3314f20.src","preCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"pipeline\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument);\n        outerProc.execute(testIngestDocument);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"62ac2fa5ec57a4701323d1c2a0077e2179a7d422","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-24 00:43:46","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException[] e = new ElasticsearchException[1];\n        factory.create(Collections.emptyMap(), null, outerConfig)\n            .execute(testIngestDocument, (result, e1) -> e[0] = (ElasticsearchException) e1);\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e[0].getRootCause().getMessage()\n        );\n    }\n","date":"2019-09-25 22:03:06","endLine":112,"groupId":"43723","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testThrowsOnRecursivePipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/36727c7ac3040a8726472ab23b51f431f2f0f2.src","preCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException e = expectThrows(\n            ElasticsearchException.class,\n            () -> factory.create(Collections.emptyMap(), null, outerConfig).execute(testIngestDocument)\n        );\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e.getRootCause().getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n    }\n","date":"2019-09-25 22:03:06","endLine":128,"groupId":"23822","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllowsRepeatedPipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/36727c7ac3040a8726472ab23b51f431f2f0f2.src","preCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument);\n        outerProc.execute(testIngestDocument);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"2c7fd822930b4ecb651d1903d99798e6f0c504b2","commitMessage":"@@@Allow ingest processors to execute in a non blocking manner. (#46241)\n\nThis PR changes the ingest executing to be non blocking\nby adding an additional method to the Processor interface\nthat accepts a BiConsumer as handler and changing\nIngestService#executeBulkRequest(...) to ingest document\nin a non blocking fashion iff a processor executes\nin a non blocking fashion.\n\nThis is the second PR that merges changes made to server module from\nthe enrich branch (see #32789) into the master branch.\n\nThe plan is to merge changes made to the server module separately from\nthe pr that will merge enrich into master.  so that these changes can\nbe reviewed in isolation.\n\nThis change originates from the enrich branch and was introduced there\nin #43361.","date":"2019-09-25 22:03:06","modifiedFileCount":"20","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-11-27 20:45:11","codes":[{"authorDate":"2019-11-27 20:45:11","commitOrder":4,"curCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException[] e = new ElasticsearchException[1];\n        factory.create(Collections.emptyMap(), null, outerConfig)\n            .execute(testIngestDocument, (result, e1) -> e[0] = (ElasticsearchException) e1);\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e[0].getRootCause().getMessage()\n        );\n    }\n","date":"2019-11-27 20:45:11","endLine":113,"groupId":"43723","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testThrowsOnRecursivePipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/bcc28e77d5ee8a9c06623ab7c29b9491bad58f.src","preCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException[] e = new ElasticsearchException[1];\n        factory.create(Collections.emptyMap(), null, outerConfig)\n            .execute(testIngestDocument, (result, e1) -> e[0] = (ElasticsearchException) e1);\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e[0].getRootCause().getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-11-27 20:45:11","commitOrder":4,"curCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n    }\n","date":"2019-11-27 20:45:11","endLine":129,"groupId":"23822","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllowsRepeatedPipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/bcc28e77d5ee8a9c06623ab7c29b9491bad58f.src","preCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = mock(IngestService.class);\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"88aea2107dc0591d3954b4696f473b95e128fcf7","commitMessage":"@@@Add templating support to pipeline processor. (#49030)\n\nThis commit adds templating support to the pipeline processor's `name` option.\n\nCloses #39955","date":"2019-11-27 20:45:11","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-06-16 05:08:29","commitOrder":5,"curCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException[] e = new ElasticsearchException[1];\n        factory.create(Collections.emptyMap(), null, null, outerConfig)\n            .execute(testIngestDocument, (result, e1) -> e[0] = (ElasticsearchException) e1);\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e[0].getRootCause().getMessage()\n        );\n    }\n","date":"2020-06-16 05:08:29","endLine":123,"groupId":"31990","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testThrowsOnRecursivePipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/e6f8e9a5b64a58e6c6237012c9093524798669.src","preCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException[] e = new ElasticsearchException[1];\n        factory.create(Collections.emptyMap(), null, outerConfig)\n            .execute(testIngestDocument, (result, e1) -> e[0] = (ElasticsearchException) e1);\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e[0].getRootCause().getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":5,"curCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, null, outerConfig);\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n    }\n","date":"2020-06-16 05:08:29","endLine":139,"groupId":"23822","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAllowsRepeatedPipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/e6f8e9a5b64a58e6c6237012c9093524798669.src","preCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, outerConfig);\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"69a6a18d8dc3f95001cfe6f55c1451ac616f7e84","commitMessage":"@@@Add optional description parameter to ingest processors. (#57906)\n\nThis commit adds an optional field.  `description`.  to all ingest processors\nso that users can explain the purpose of the specific processor instance.\n\nCloses #56000.","date":"2020-06-16 05:08:29","modifiedFileCount":"125","status":"M","submitter":"Tal Levy"},{"authorTime":"2021-08-11 21:30:36","codes":[{"authorDate":"2021-08-11 21:30:36","commitOrder":6,"curCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException[] e = new ElasticsearchException[1];\n        factory.create(Collections.emptyMap(), null, null, outerConfig)\n            .execute(testIngestDocument, (result, e1) -> e[0] = (ElasticsearchException) e1);\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e[0].getRootCause().getMessage()\n        );\n    }\n","date":"2021-08-11 21:30:36","endLine":112,"groupId":"104441","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testThrowsOnRecursivePipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/064f6a98853b1193c24bd550a9e611b81d5efa.src","preCode":"    public void testThrowsOnRecursivePipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        String outerPipelineId = \"outer\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline outer = new Pipeline(\n            outerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, outerConfig))\n        );\n        Map<String, Object> innerConfig = new HashMap<>();\n        innerConfig.put(\"name\", outerPipelineId);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null,\n            new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, innerConfig))\n        );\n        when(ingestService.getPipeline(outerPipelineId)).thenReturn(outer);\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        outerConfig.put(\"name\", innerPipelineId);\n        ElasticsearchException[] e = new ElasticsearchException[1];\n        factory.create(Collections.emptyMap(), null, null, outerConfig)\n            .execute(testIngestDocument, (result, e1) -> e[0] = (ElasticsearchException) e1);\n        assertEquals(\n            \"Cycle detected for pipeline: inner\", e[0].getRootCause().getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2021-08-11 21:30:36","commitOrder":6,"curCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, null, outerConfig);\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n    }\n","date":"2021-08-11 21:30:36","endLine":128,"groupId":"104441","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testAllowsRepeatedPipelineInvocations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/064f6a98853b1193c24bd550a9e611b81d5efa.src","preCode":"    public void testAllowsRepeatedPipelineInvocations() throws Exception {\n        String innerPipelineId = \"inner\";\n        IngestService ingestService = createIngestService();\n        IngestDocument testIngestDocument = RandomDocumentPicks.randomIngestDocument(random(), new HashMap<>());\n        Map<String, Object> outerConfig = new HashMap<>();\n        outerConfig.put(\"name\", innerPipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n        Pipeline inner = new Pipeline(\n            innerPipelineId, null, null, new CompoundProcessor()\n        );\n        when(ingestService.getPipeline(innerPipelineId)).thenReturn(inner);\n        Processor outerProc = factory.create(Collections.emptyMap(), null, null, outerConfig);\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n        outerProc.execute(testIngestDocument, (result, e) -> {});\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"498684a696fb2d81689a9c5e51fbc3c370e234f6","commitMessage":"@@@Add support for _meta field to ingest pipelines (#75905)\n\nWe are adding a _meta field to many of our REST APIs so that users can attach whatever metadata they\nwant. The data in this field will not be used by Elasticsearch. This commit add the _meta field to ingest\npipelines.","date":"2021-08-11 21:30:36","modifiedFileCount":"13","status":"M","submitter":"Keith Massey"}]
