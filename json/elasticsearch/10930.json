[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testBasics() throws IOException {\n        SimilarityScript.Factory factory = scriptEngine.compile(\n                \"foobar\", \"return query.boost * doc.freq / doc.length\", SimilarityScript.CONTEXT, Collections.emptyMap());\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", factory::newInstance, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits);\n        assertEquals((float) (3.2 * 2 / 3), topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","date":"2018-04-26 03:22:53","endLine":96,"groupId":"22277","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/95ab777752667bc3399c4c8ed4c98fc7f61253.src","preCode":"    public void testBasics() throws IOException {\n        SimilarityScript.Factory factory = scriptEngine.compile(\n                \"foobar\", \"return query.boost * doc.freq / doc.length\", SimilarityScript.CONTEXT, Collections.emptyMap());\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", factory::newInstance, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits);\n        assertEquals((float) (3.2 * 2 / 3), topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/SimilarityScriptTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testBasics() throws IOException {\n        final AtomicBoolean called = new AtomicBoolean();\n        SimilarityScript.Factory scriptFactory = () -> {\n            return new SimilarityScript() {\n\n                @Override\n                public double execute(double weight, ScriptedSimilarity.Query query,\n                        ScriptedSimilarity.Field field, ScriptedSimilarity.Term term,\n                        ScriptedSimilarity.Doc doc) throws IOException {\n                    assertEquals(1, weight, 0);\n                    assertNotNull(doc);\n                    assertEquals(2f, doc.getFreq(), 0);\n                    assertEquals(3, doc.getLength(), 0);\n                    assertNotNull(field);\n                    assertEquals(3, field.getDocCount());\n                    assertEquals(5, field.getSumDocFreq());\n                    assertEquals(6, field.getSumTotalTermFreq());\n                    assertNotNull(term);\n                    assertEquals(2, term.getDocFreq());\n                    assertEquals(3, term.getTotalTermFreq());\n                    assertNotNull(query);\n                    assertEquals(3.2f, query.getBoost(), 0);\n                    called.set(true);\n                    return 42f;\n                }\n\n            };\n        };\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", scriptFactory, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits);\n        assertTrue(called.get());\n        assertEquals(42, topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","date":"2018-04-26 03:22:53","endLine":137,"groupId":"22277","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/1d0e827c71c1231be7f7aff70dc1d4ac41f642.src","preCode":"    public void testBasics() throws IOException {\n        final AtomicBoolean called = new AtomicBoolean();\n        SimilarityScript.Factory scriptFactory = () -> {\n            return new SimilarityScript() {\n\n                @Override\n                public double execute(double weight, ScriptedSimilarity.Query query,\n                        ScriptedSimilarity.Field field, ScriptedSimilarity.Term term,\n                        ScriptedSimilarity.Doc doc) throws IOException {\n                    assertEquals(1, weight, 0);\n                    assertNotNull(doc);\n                    assertEquals(2f, doc.getFreq(), 0);\n                    assertEquals(3, doc.getLength(), 0);\n                    assertNotNull(field);\n                    assertEquals(3, field.getDocCount());\n                    assertEquals(5, field.getSumDocFreq());\n                    assertEquals(6, field.getSumTotalTermFreq());\n                    assertNotNull(term);\n                    assertEquals(2, term.getDocFreq());\n                    assertEquals(3, term.getTotalTermFreq());\n                    assertNotNull(query);\n                    assertEquals(3.2f, query.getBoost(), 0);\n                    called.set(true);\n                    return 42f;\n                }\n\n            };\n        };\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", scriptFactory, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits);\n        assertTrue(called.get());\n        assertEquals(42, topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/similarity/ScriptedSimilarityTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-07 17:59:10","codes":[{"authorDate":"2018-09-07 17:59:10","commitOrder":2,"curCode":"    public void testBasics() throws IOException {\n        SimilarityScript.Factory factory = scriptEngine.compile(\n                \"foobar\", \"return query.boost * doc.freq / doc.length\", SimilarityScript.CONTEXT, Collections.emptyMap());\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", factory::newInstance, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits.value);\n        assertEquals((float) (3.2 * 2 / 3), topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","date":"2018-09-07 17:59:10","endLine":96,"groupId":"22277","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/4c4eb0ff6365dfe44df04d1a76d8eccdbd4347.src","preCode":"    public void testBasics() throws IOException {\n        SimilarityScript.Factory factory = scriptEngine.compile(\n                \"foobar\", \"return query.boost * doc.freq / doc.length\", SimilarityScript.CONTEXT, Collections.emptyMap());\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", factory::newInstance, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits);\n        assertEquals((float) (3.2 * 2 / 3), topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/SimilarityScriptTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2018-09-07 17:59:10","commitOrder":2,"curCode":"    public void testBasics() throws IOException {\n        final AtomicBoolean called = new AtomicBoolean();\n        SimilarityScript.Factory scriptFactory = () -> {\n            return new SimilarityScript() {\n\n                @Override\n                public double execute(double weight, ScriptedSimilarity.Query query,\n                        ScriptedSimilarity.Field field, ScriptedSimilarity.Term term,\n                        ScriptedSimilarity.Doc doc) {\n\n                    StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();\n                    if (Arrays.stream(stackTraceElements).anyMatch(ste -> {\n                        return ste.getClassName().endsWith(\".TermScorer\") &&\n                                ste.getMethodName().equals(\"score\");\n                            }) == false) {\n                        \r\n                        return Float.MAX_VALUE;\n                    }\n\n                    assertEquals(1, weight, 0);\n                    assertNotNull(doc);\n                    assertEquals(2f, doc.getFreq(), 0);\n                    assertEquals(3, doc.getLength(), 0);\n                    assertNotNull(field);\n                    assertEquals(3, field.getDocCount());\n                    assertEquals(5, field.getSumDocFreq());\n                    assertEquals(6, field.getSumTotalTermFreq());\n                    assertNotNull(term);\n                    assertEquals(2, term.getDocFreq());\n                    assertEquals(3, term.getTotalTermFreq());\n                    assertNotNull(query);\n                    assertEquals(3.2f, query.getBoost(), 0);\n                    called.set(true);\n                    return 42f;\n                }\n\n            };\n        };\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", scriptFactory, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits.value);\n        assertTrue(called.get());\n        assertEquals(42, topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","date":"2018-09-07 17:59:10","endLine":152,"groupId":"22277","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/089bc40e4980a66a2925504c6224298b31cb29.src","preCode":"    public void testBasics() throws IOException {\n        final AtomicBoolean called = new AtomicBoolean();\n        SimilarityScript.Factory scriptFactory = () -> {\n            return new SimilarityScript() {\n\n                @Override\n                public double execute(double weight, ScriptedSimilarity.Query query,\n                        ScriptedSimilarity.Field field, ScriptedSimilarity.Term term,\n                        ScriptedSimilarity.Doc doc) throws IOException {\n                    assertEquals(1, weight, 0);\n                    assertNotNull(doc);\n                    assertEquals(2f, doc.getFreq(), 0);\n                    assertEquals(3, doc.getLength(), 0);\n                    assertNotNull(field);\n                    assertEquals(3, field.getDocCount());\n                    assertEquals(5, field.getSumDocFreq());\n                    assertEquals(6, field.getSumTotalTermFreq());\n                    assertNotNull(term);\n                    assertEquals(2, term.getDocFreq());\n                    assertEquals(3, term.getTotalTermFreq());\n                    assertNotNull(query);\n                    assertEquals(3.2f, query.getBoost(), 0);\n                    called.set(true);\n                    return 42f;\n                }\n\n            };\n        };\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", scriptFactory, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits);\n        assertTrue(called.get());\n        assertEquals(42, topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/similarity/ScriptedSimilarityTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"017ffe5d127ce0fb33feb8fc4e5fededb8cbfda1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-07 17:59:10","modifiedFileCount":"370","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2020-02-25 23:39:28","codes":[{"authorDate":"2020-02-25 23:39:28","commitOrder":3,"curCode":"    public void testBasics() throws IOException {\n        SimilarityScript.Factory factory = scriptEngine.compile(\n                \"foobar\", \"return query.boost * doc.freq / doc.length\", SimilarityScript.CONTEXT, Collections.emptyMap());\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", factory::newInstance, true);\n        Directory dir = new ByteBuffersDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits.value);\n        assertEquals((float) (3.2 * 2 / 3), topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","date":"2020-02-25 23:39:28","endLine":96,"groupId":"10930","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/9560bbd32c92ae2c1527023cb326dcb49a61fd.src","preCode":"    public void testBasics() throws IOException {\n        SimilarityScript.Factory factory = scriptEngine.compile(\n                \"foobar\", \"return query.boost * doc.freq / doc.length\", SimilarityScript.CONTEXT, Collections.emptyMap());\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", factory::newInstance, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits.value);\n        assertEquals((float) (3.2 * 2 / 3), topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/SimilarityScriptTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-02-25 23:39:28","commitOrder":3,"curCode":"    public void testBasics() throws IOException {\n        final AtomicBoolean called = new AtomicBoolean();\n        SimilarityScript.Factory scriptFactory = () -> {\n            return new SimilarityScript() {\n\n                @Override\n                public double execute(double weight, ScriptedSimilarity.Query query,\n                        ScriptedSimilarity.Field field, ScriptedSimilarity.Term term,\n                        ScriptedSimilarity.Doc doc) {\n\n                    StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();\n                    if (Arrays.stream(stackTraceElements).anyMatch(ste -> {\n                        return ste.getClassName().endsWith(\".TermScorer\") &&\n                                ste.getMethodName().equals(\"score\");\n                            }) == false) {\n                        \r\n                        return Float.MAX_VALUE;\n                    }\n\n                    assertEquals(1, weight, 0);\n                    assertNotNull(doc);\n                    assertEquals(2f, doc.getFreq(), 0);\n                    assertEquals(3, doc.getLength(), 0);\n                    assertNotNull(field);\n                    assertEquals(3, field.getDocCount());\n                    assertEquals(5, field.getSumDocFreq());\n                    assertEquals(6, field.getSumTotalTermFreq());\n                    assertNotNull(term);\n                    assertEquals(2, term.getDocFreq());\n                    assertEquals(3, term.getTotalTermFreq());\n                    assertNotNull(query);\n                    assertEquals(3.2f, query.getBoost(), 0);\n                    called.set(true);\n                    return 42f;\n                }\n\n            };\n        };\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", scriptFactory, true);\n        Directory dir = new ByteBuffersDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits.value);\n        assertTrue(called.get());\n        assertEquals(42, topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","date":"2020-02-25 23:39:28","endLine":152,"groupId":"10930","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/5086539fe95f9d066ea74c6abe01b968abf796.src","preCode":"    public void testBasics() throws IOException {\n        final AtomicBoolean called = new AtomicBoolean();\n        SimilarityScript.Factory scriptFactory = () -> {\n            return new SimilarityScript() {\n\n                @Override\n                public double execute(double weight, ScriptedSimilarity.Query query,\n                        ScriptedSimilarity.Field field, ScriptedSimilarity.Term term,\n                        ScriptedSimilarity.Doc doc) {\n\n                    StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();\n                    if (Arrays.stream(stackTraceElements).anyMatch(ste -> {\n                        return ste.getClassName().endsWith(\".TermScorer\") &&\n                                ste.getMethodName().equals(\"score\");\n                            }) == false) {\n                        \r\n                        return Float.MAX_VALUE;\n                    }\n\n                    assertEquals(1, weight, 0);\n                    assertNotNull(doc);\n                    assertEquals(2f, doc.getFreq(), 0);\n                    assertEquals(3, doc.getLength(), 0);\n                    assertNotNull(field);\n                    assertEquals(3, field.getDocCount());\n                    assertEquals(5, field.getSumDocFreq());\n                    assertEquals(6, field.getSumTotalTermFreq());\n                    assertNotNull(term);\n                    assertEquals(2, term.getDocFreq());\n                    assertEquals(3, term.getTotalTermFreq());\n                    assertNotNull(query);\n                    assertEquals(3.2f, query.getBoost(), 0);\n                    called.set(true);\n                    return 42f;\n                }\n\n            };\n        };\n        ScriptedSimilarity sim = new ScriptedSimilarity(\"foobar\", null, \"foobaz\", scriptFactory, true);\n        Directory dir = new RAMDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setSimilarity(sim));\n\n        Document doc = new Document();\n        doc.add(new TextField(\"f\", \"foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"foo foo bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"yes\", Store.NO));\n        w.addDocument(doc);\n\n        doc = new Document();\n        doc.add(new TextField(\"f\", \"bar\", Store.NO));\n        doc.add(new StringField(\"match\", \"no\", Store.NO));\n        w.addDocument(doc);\n\n        IndexReader r = DirectoryReader.open(w);\n        w.close();\n        IndexSearcher searcher = new IndexSearcher(r);\n        searcher.setSimilarity(sim);\n        Query query = new BoostQuery(new BooleanQuery.Builder()\n                .add(new TermQuery(new Term(\"f\", \"foo\")), Occur.SHOULD)\n                .add(new TermQuery(new Term(\"match\", \"yes\")), Occur.FILTER)\n                .build(), 3.2f);\n        TopDocs topDocs = searcher.search(query, 1);\n        assertEquals(1, topDocs.totalHits.value);\n        assertTrue(called.get());\n        assertEquals(42, topDocs.scoreDocs[0].score, 0);\n        w.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/similarity/ScriptedSimilarityTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"e67beed573547ac3757f6cc4c81b0c7feb440219","commitMessage":"@@@Use ByteBuffersDirectory rather than RAMDirectory (#52768)\n\nLucene's RAMDirectory has been deprecated. This commit replaces all uses of\nRAMDirectory in elasticsearch with the newer ByteBuffersDirectory. Most uses\nare in tests.  but the percolator and painless executor may get some small speedups.","date":"2020-02-25 23:39:28","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"}]
