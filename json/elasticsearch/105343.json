[{"authorTime":"2019-12-17 00:14:45","codes":[{"authorDate":"2019-12-17 00:14:45","commitOrder":1,"curCode":"    public void testEmptyBucket() throws IOException {\n        HistogramAggregationBuilder histogram = new HistogramAggregationBuilder(\"histo\").field(\"number\").interval(1).minDocCount(0)\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(histogram, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n        }, (Consumer<InternalHistogram>) histo -> {\n            assertThat(histo.getBuckets().size(), equalTo(3));\n\n            assertNotNull(histo.getBuckets().get(0).getAggregations().asMap().get(\"min\"));\n            InternalMin min = (InternalMin) histo.getBuckets().get(0).getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(1).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(1).getAggregations().asMap().get(\"min\");\n            assertEquals(Double.POSITIVE_INFINITY, min.getValue(), 0);\n            assertFalse(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(2).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(2).getAggregations().asMap().get(\"min\");\n            assertEquals(3.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n\n        }, fieldType);\n    }\n","date":"2019-12-17 00:14:45","endLine":346,"groupId":"1739","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyBucket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/2536a76544a8bfd0b6cba2ecbedb0f63c53b71.src","preCode":"    public void testEmptyBucket() throws IOException {\n        HistogramAggregationBuilder histogram = new HistogramAggregationBuilder(\"histo\").field(\"number\").interval(1).minDocCount(0)\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(histogram, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n        }, (Consumer<InternalHistogram>) histo -> {\n            assertThat(histo.getBuckets().size(), equalTo(3));\n\n            assertNotNull(histo.getBuckets().get(0).getAggregations().asMap().get(\"min\"));\n            InternalMin min = (InternalMin) histo.getBuckets().get(0).getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(1).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(1).getAggregations().asMap().get(\"min\");\n            assertEquals(Double.POSITIVE_INFINITY, min.getValue(), 0);\n            assertFalse(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(2).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(2).getAggregations().asMap().get(\"min\");\n            assertEquals(3.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"B"},{"authorDate":"2019-12-17 00:14:45","commitOrder":1,"curCode":"    public void testGetProperty() throws IOException {\n        GlobalAggregationBuilder globalBuilder = new GlobalAggregationBuilder(\"global\")\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(globalBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n        }, (Consumer<InternalGlobal>) global -> {\n            assertEquals(1.0, global.getDocCount(), 2);\n            assertTrue(AggregationInspectionHelper.hasValue(global));\n            assertNotNull(global.getAggregations().asMap().get(\"min\"));\n\n            InternalMin min = (InternalMin) global.getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertThat(global.getProperty(\"min\"), equalTo(min));\n            assertThat(global.getProperty(\"min.value\"), equalTo(1.0));\n            assertThat(min.getProperty(\"value\"), equalTo(1.0));\n        }, fieldType);\n    }\n","date":"2019-12-17 00:14:45","endLine":385,"groupId":"17589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/2536a76544a8bfd0b6cba2ecbedb0f63c53b71.src","preCode":"    public void testGetProperty() throws IOException {\n        GlobalAggregationBuilder globalBuilder = new GlobalAggregationBuilder(\"global\")\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(globalBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n        }, (Consumer<InternalGlobal>) global -> {\n            assertEquals(1.0, global.getDocCount(), 2);\n            assertTrue(AggregationInspectionHelper.hasValue(global));\n            assertNotNull(global.getAggregations().asMap().get(\"min\"));\n\n            InternalMin min = (InternalMin) global.getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertThat(global.getProperty(\"min\"), equalTo(min));\n            assertThat(global.getProperty(\"min.value\"), equalTo(1.0));\n            assertThat(min.getProperty(\"value\"), equalTo(1.0));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"B"}],"commitId":"9dec99678bf05dacf57c6bd1150bb1bf256b149e","commitMessage":"@@@Migrate MinAggregator integration tests to AggregatorTestCase (#50053)\n\nAlso renames MinTests to MinAggregationBuilderTests\n\n","date":"2019-12-17 00:14:45","modifiedFileCount":"1","status":"B","submitter":"Zachary Tong"},{"authorTime":"2020-02-08 07:01:20","codes":[{"authorDate":"2019-12-17 00:14:45","commitOrder":2,"curCode":"    public void testEmptyBucket() throws IOException {\n        HistogramAggregationBuilder histogram = new HistogramAggregationBuilder(\"histo\").field(\"number\").interval(1).minDocCount(0)\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(histogram, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n        }, (Consumer<InternalHistogram>) histo -> {\n            assertThat(histo.getBuckets().size(), equalTo(3));\n\n            assertNotNull(histo.getBuckets().get(0).getAggregations().asMap().get(\"min\"));\n            InternalMin min = (InternalMin) histo.getBuckets().get(0).getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(1).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(1).getAggregations().asMap().get(\"min\");\n            assertEquals(Double.POSITIVE_INFINITY, min.getValue(), 0);\n            assertFalse(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(2).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(2).getAggregations().asMap().get(\"min\");\n            assertEquals(3.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n\n        }, fieldType);\n    }\n","date":"2019-12-17 00:14:45","endLine":346,"groupId":"1739","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyBucket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/2536a76544a8bfd0b6cba2ecbedb0f63c53b71.src","preCode":"    public void testEmptyBucket() throws IOException {\n        HistogramAggregationBuilder histogram = new HistogramAggregationBuilder(\"histo\").field(\"number\").interval(1).minDocCount(0)\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(histogram, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n        }, (Consumer<InternalHistogram>) histo -> {\n            assertThat(histo.getBuckets().size(), equalTo(3));\n\n            assertNotNull(histo.getBuckets().get(0).getAggregations().asMap().get(\"min\"));\n            InternalMin min = (InternalMin) histo.getBuckets().get(0).getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(1).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(1).getAggregations().asMap().get(\"min\");\n            assertEquals(Double.POSITIVE_INFINITY, min.getValue(), 0);\n            assertFalse(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(2).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(2).getAggregations().asMap().get(\"min\");\n            assertEquals(3.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"N"},{"authorDate":"2020-02-08 07:01:20","commitOrder":2,"curCode":"    public void testGetProperty() throws IOException {\n        GlobalAggregationBuilder globalBuilder = new GlobalAggregationBuilder(\"global\")\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(globalBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n        }, (Consumer<InternalGlobal>) global -> {\n            assertEquals(2, global.getDocCount());\n            assertTrue(AggregationInspectionHelper.hasValue(global));\n            assertNotNull(global.getAggregations().asMap().get(\"min\"));\n\n            InternalMin min = (InternalMin) global.getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertThat(global.getProperty(\"min\"), equalTo(min));\n            assertThat(global.getProperty(\"min.value\"), equalTo(1.0));\n            assertThat(min.getProperty(\"value\"), equalTo(1.0));\n        }, fieldType);\n    }\n","date":"2020-02-08 07:01:20","endLine":391,"groupId":"1741","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/72/781f332a007987399177753f5456e18e0c7d68.src","preCode":"    public void testGetProperty() throws IOException {\n        GlobalAggregationBuilder globalBuilder = new GlobalAggregationBuilder(\"global\")\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(globalBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n        }, (Consumer<InternalGlobal>) global -> {\n            assertEquals(1.0, global.getDocCount(), 2);\n            assertTrue(AggregationInspectionHelper.hasValue(global));\n            assertNotNull(global.getAggregations().asMap().get(\"min\"));\n\n            InternalMin min = (InternalMin) global.getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertThat(global.getProperty(\"min\"), equalTo(min));\n            assertThat(global.getProperty(\"min.value\"), equalTo(1.0));\n            assertThat(min.getProperty(\"value\"), equalTo(1.0));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"c50cfa0668ff11b6649e327ea8b0f70cdcdde64c","commitMessage":"@@@Add Boxplot Aggregation (#51948)\n\nAdds a `boxplot` aggregation that calculates min.  max.  medium and the first\nand the third quartiles of the given data set.\n\nCloses #33112\n","date":"2020-02-08 07:01:20","modifiedFileCount":"2","status":"M","submitter":"Igor Motov"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testEmptyBucket() throws IOException {\n        HistogramAggregationBuilder histogram = new HistogramAggregationBuilder(\"histo\").field(\"number\").interval(1).minDocCount(0)\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n\n        testCase(histogram, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n        }, (Consumer<InternalHistogram>) histo -> {\n            assertThat(histo.getBuckets().size(), equalTo(3));\n\n            assertNotNull(histo.getBuckets().get(0).getAggregations().asMap().get(\"min\"));\n            InternalMin min = (InternalMin) histo.getBuckets().get(0).getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(1).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(1).getAggregations().asMap().get(\"min\");\n            assertEquals(Double.POSITIVE_INFINITY, min.getValue(), 0);\n            assertFalse(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(2).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(2).getAggregations().asMap().get(\"min\");\n            assertEquals(3.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":361,"groupId":"105343","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmptyBucket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/91639f5ac7ec53c1cdad0e648bcd305b8a2fc8.src","preCode":"    public void testEmptyBucket() throws IOException {\n        HistogramAggregationBuilder histogram = new HistogramAggregationBuilder(\"histo\").field(\"number\").interval(1).minDocCount(0)\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(histogram, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n        }, (Consumer<InternalHistogram>) histo -> {\n            assertThat(histo.getBuckets().size(), equalTo(3));\n\n            assertNotNull(histo.getBuckets().get(0).getAggregations().asMap().get(\"min\"));\n            InternalMin min = (InternalMin) histo.getBuckets().get(0).getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(1).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(1).getAggregations().asMap().get(\"min\");\n            assertEquals(Double.POSITIVE_INFINITY, min.getValue(), 0);\n            assertFalse(AggregationInspectionHelper.hasValue(min));\n\n            assertNotNull(histo.getBuckets().get(2).getAggregations().asMap().get(\"min\"));\n            min = (InternalMin) histo.getBuckets().get(2).getAggregations().asMap().get(\"min\");\n            assertEquals(3.0, min.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(min));\n\n\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testGetProperty() throws IOException {\n        GlobalAggregationBuilder globalBuilder = new GlobalAggregationBuilder(\"global\")\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n\n        testCase(globalBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n        }, (Consumer<InternalGlobal>) global -> {\n            assertEquals(2, global.getDocCount());\n            assertTrue(AggregationInspectionHelper.hasValue(global));\n            assertNotNull(global.getAggregations().asMap().get(\"min\"));\n\n            InternalMin min = (InternalMin) global.getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertThat(global.getProperty(\"min\"), equalTo(min));\n            assertThat(global.getProperty(\"min.value\"), equalTo(1.0));\n            assertThat(min.getProperty(\"value\"), equalTo(1.0));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":398,"groupId":"105343","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/91639f5ac7ec53c1cdad0e648bcd305b8a2fc8.src","preCode":"    public void testGetProperty() throws IOException {\n        GlobalAggregationBuilder globalBuilder = new GlobalAggregationBuilder(\"global\")\n            .subAggregation(new MinAggregationBuilder(\"min\").field(\"number\"));\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n\n        testCase(globalBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n        }, (Consumer<InternalGlobal>) global -> {\n            assertEquals(2, global.getDocCount());\n            assertTrue(AggregationInspectionHelper.hasValue(global));\n            assertNotNull(global.getAggregations().asMap().get(\"min\"));\n\n            InternalMin min = (InternalMin) global.getAggregations().asMap().get(\"min\");\n            assertEquals(1.0, min.getValue(), 0);\n            assertThat(global.getProperty(\"min\"), equalTo(min));\n            assertThat(global.getProperty(\"min.value\"), equalTo(1.0));\n            assertThat(min.getProperty(\"value\"), equalTo(1.0));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"}]
