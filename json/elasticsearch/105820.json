[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2018-04-26 03:22:53","endLine":141,"groupId":"47444","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/4fbc91157914979f34b22428e99b4daa969cc5.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2018-04-26 03:22:53","endLine":366,"groupId":"47447","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/4fbc91157914979f34b22428e99b4daa969cc5.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-06 15:17:40","codes":[{"authorDate":"2018-09-06 15:17:40","commitOrder":2,"curCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2018-09-06 15:17:40","endLine":141,"groupId":"47444","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/795bfdf6f59416e1de9a2409a0a7a07f50e87f.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-09-06 15:17:40","commitOrder":2,"curCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2018-09-06 15:17:40","endLine":366,"groupId":"47447","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/795bfdf6f59416e1de9a2409a0a7a07f50e87f.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"}],"commitId":"b1257d873bc8541b15d7c933a383344c151a1333","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-06 15:17:40","modifiedFileCount":"43","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-07 17:59:10","codes":[{"authorDate":"2018-09-07 17:59:10","commitOrder":3,"curCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2018-09-07 17:59:10","endLine":146,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/ca24826fc374aab5af31e6c1a47c75645c5be5.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2018-09-07 17:59:10","commitOrder":3,"curCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2018-09-07 17:59:10","endLine":378,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/ca24826fc374aab5af31e6c1a47c75645c5be5.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(42, 1.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocs(1, new ScoreDoc[] {new ScoreDoc(84, 2.0F)}, 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"017ffe5d127ce0fb33feb8fc4e5fededb8cbfda1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-07 17:59:10","modifiedFileCount":"370","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-11-02 00:05:41","codes":[{"authorDate":"2018-11-02 00:05:41","commitOrder":4,"curCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2018-11-02 01:13:02","endLine":144,"groupId":"12018","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/b14ec19b84a493934a70a6fe7d8275a7f8c3ed.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2018-11-02 00:05:41","commitOrder":4,"curCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2018-11-02 01:13:02","endLine":372,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/b14ec19b84a493934a70a6fe7d8275a7f8c3ed.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(Settings.EMPTY,\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"c3cf7dd305b3d4636405c292659dbff05307f146","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-11-02 01:13:02","modifiedFileCount":"456","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-12-06 02:49:06","codes":[{"authorDate":"2018-12-06 02:49:06","commitOrder":5,"curCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2018-12-06 02:49:06","endLine":146,"groupId":"12018","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/0c7f0bb152e702fc688c1f3025a7f34887d489.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)}, 1, 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2018-12-06 02:49:06","commitOrder":5,"curCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2018-12-06 02:49:06","endLine":379,"groupId":"12018","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/0c7f0bb152e702fc688c1f3025a7f34887d489.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)}, 1, 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().totalHits);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"18866c4c0b1ad640f8554dc4b41765a04dcefa04","commitMessage":"@@@Make hits.total an object in the search response (#35849)\n\nThis commit changes the format of the `hits.total` in the search response to be an object with\na `value` and a `relation`. The `value` indicates the number of hits that match the query and the\n`relation` indicates whether the number is accurate (in which case the relation is equals to `eq`)\nor a lower bound of the total (in which case it is equals to `gte`).\nThis change also adds a parameter called `rest_total_hits_as_int` that can be used in the\nsearch APIs to opt out from this change (retrieve the total hits as a number in the rest response).\nNote that currently all search responses are accurate (`track_total_hits: true`) or they don't contain\n`hits.total` (`track_total_hits: true`). We'll add a way to get a lower bound of the total hits in a\nfollow up (to allow numbers to be passed to `track_total_hits`).\n\nRelates #33028","date":"2018-12-06 02:49:06","modifiedFileCount":"234","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-01-29 21:58:11","codes":[{"authorDate":"2019-01-29 21:58:11","commitOrder":6,"curCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2019-01-29 21:58:11","endLine":148,"groupId":"6088","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/14476c851b889eb56682e77b504ac7d1daaf7b.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-01-29 21:58:11","commitOrder":6,"curCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2019-01-29 21:58:11","endLine":385,"groupId":"6088","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/14476c851b889eb56682e77b504ac7d1daaf7b.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new Index(\"test\", \"na\"), 0, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new Index(\"test\", \"na\"), 1, null));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"2325fb9cb3530607475233e7c7281e5ff7241001","commitMessage":"@@@Remove test only SearchShardTarget constructor (#37912)\n\nRemove SearchShardTarget test only constructor and replace all the usages with calls to the other constructor that accepts a ShardId.","date":"2019-01-29 21:58:11","modifiedFileCount":"21","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-06-19 17:18:40","codes":[{"authorDate":"2019-06-19 17:18:40","commitOrder":7,"curCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2019-06-19 17:18:40","endLine":146,"groupId":"17368","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/6e6dc1fe55e7fb450f9e68c79126b4c51bcd9e.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(42, responseRef.get().getHits().getAt(1).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-06-19 17:18:40","commitOrder":7,"curCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2019-06-19 17:18:40","endLine":378,"groupId":"17368","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/6e6dc1fe55e7fb450f9e68c79126b4c51bcd9e.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        AtomicReference<SearchResponse> responseRef = new AtomicReference<>();\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        SearchTransportService searchTransportService = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        mockSearchPhaseContext.searchTransport = searchTransportService;\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    responseRef.set(mockSearchPhaseContext.buildSearchResponse(searchResponse, null));\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(responseRef.get());\n        assertEquals(2, responseRef.get().getHits().getTotalHits().value);\n        assertEquals(1, responseRef.get().getHits().getHits().length);\n        assertEquals(84, responseRef.get().getHits().getAt(0).docId());\n        assertEquals(0, responseRef.get().getFailedShards());\n        assertEquals(2, responseRef.get().getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"54d3a4a30a7b4bcbed70d25927ced67f71bb1e57","commitMessage":"@@@SearchPhaseContext to not extend ActionListener (#43269)\n\nThe fact that SearchPhaseContext extends ActionListener makes it hard\nto reason about when the original listener is notified and to trace\nthose calls. Also.  the corresponding onFailure and onResponse were\nonly needed in two places.  one each.  where they can be replaced by a\nmore intuitive call.  like sendSearchResponse for onResponse.","date":"2019-06-19 17:18:40","modifiedFileCount":"7","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-10-04 22:07:49","codes":[{"authorDate":"2019-10-04 22:07:49","commitOrder":8,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2019-10-04 22:07:49","endLine":143,"groupId":"17368","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/d7a7ff7b5dcacbb5d1e6821fb9d77d2fd21251.src","preCode":"    public void testFetchTwoDocument() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-10-04 22:07:49","commitOrder":8,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2019-10-04 22:07:49","endLine":374,"groupId":"17368","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/d7a7ff7b5dcacbb5d1e6821fb9d77d2fd21251.src","preCode":"    public void testCleanupIrrelevantContexts() throws IOException { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        InitialSearchPhase.ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), \n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"4e6756fb4d030607206ebe95ff2a980bbc0a1e67","commitMessage":"@@@Fold InitialSearchPhase into AbstractSearchAsyncAction (#47182)\n\nHistorically.  we have two base classes for search actions that generally need to fan out to multiple shards and then move on to the following phase: InitialSearchPhase and AbstractSearchAsyncAction that extends it. Practically.  every search action extends the latter.  and there are no direct subclasses of InitialSearchPhase in our codebase.\n\nThis commit folds InitialSearchPhase into AbstractSearchAsyncAction in the attempt of simplifying things and making the search code running on the coordinating node easier to reason about.","date":"2019-10-04 22:07:49","modifiedFileCount":"10","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-11-28 21:35:35","codes":[{"authorDate":"2019-11-28 21:35:35","commitOrder":9,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2019-11-28 21:35:35","endLine":147,"groupId":"17368","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/ec29dbf803988a2dee0888bd9c1e779546dfaa.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-11-28 21:35:35","commitOrder":9,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","date":"2019-11-28 21:35:35","endLine":379,"groupId":"17368","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/ec29dbf803988a2dee0888bd9c1e779546dfaa.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"cab99c036a665f6864dbb38fdf7059b03b0ea767","commitMessage":"@@@Add a listener to track the progress of a search request locally (#49471)\n\nThis commit adds a function in NodeClient that allows to track the progress\nof a search request locally. Progress is tracked through a SearchProgressListener\nthat exposes query and fetch responses as well as partial and final reduces.\nThis new method can be used by modules/plugins inside a node in order to track the\nprogress of a local search request.\n\nRelates #49091","date":"2019-11-28 21:35:35","modifiedFileCount":"28","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-03-09 23:59:30","codes":[{"authorDate":"2020-03-09 23:59:30","commitOrder":10,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-03-09 23:59:30","endLine":153,"groupId":"26827","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/78f43842cfed8c40338be047e38542a2291755.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(123, request.id());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-03-09 23:59:30","commitOrder":10,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-03-09 23:59:30","endLine":392,"groupId":"26827","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/78f43842cfed8c40338be047e38542a2291755.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        QuerySearchResult queryResult = new QuerySearchResult(123, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        queryResult = new QuerySearchResult(321, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.id() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(123L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"}],"commitId":"b2ea32959103b93c03cc487ce475adde792f21e3","commitMessage":"@@@Harden search context id (#53143)\n\nUsing a Long alone is not strong enough for the id of search contexts \nbecause we reset the id generator whenever a data node is restarted.\nThis can lead to two issues:\n\n1. Fetch phase can fetch documents from another index\n2. A scroll search can return documents from another index\n\nThis commit avoids these issues by adding a UUID to SearchContexId.","date":"2020-03-09 23:59:30","modifiedFileCount":"49","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2020-03-17 02:51:54","codes":[{"authorDate":"2020-03-17 02:51:54","commitOrder":11,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-03-17 02:51:54","endLine":150,"groupId":"26827","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/9d810302ff1b4f9f0ccbfe0881af8e220b5410.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2020-03-17 02:51:54","commitOrder":11,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-03-17 02:51:54","endLine":385,"groupId":"26827","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/9d810302ff1b4f9f0ccbfe0881af8e220b5410.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            (b) -> new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, b));\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"}],"commitId":"4d81edb6257732a73adc3e5bc5157ad01d1a42c4","commitMessage":"@@@Stop using round-tripped PipelineAggregators (#53423)\n\nThis begins to clean up how `PipelineAggregator`s and executed.\nPreviously.  we would create the `PipelineAggregator`s on the data nodes\nand embed them in the aggregation tree. When it came time to execute the\npipeline aggregation we'd use the `PipelineAggregator`s that were on the\nfirst shard's results. This is inefficient because:\n1. The data node needs to make the `PipelineAggregator` only to\n   serialize it and then throw it away.\n2. The coordinating node needs to deserialize all of the\n   `PipelineAggregator`s even though it only needs one of them.\n3. You end up with many `PipelineAggregator` instances when you only\n   really *need* one per pipeline.\n4. `PipelineAggregator` needs to implement serialization.\n\nThis begins to undo these by building the `PipelineAggregator`s directly\non the coordinating node and using those instead of the\n`PipelineAggregator`s in the aggregtion tree. In a follow up change\nwe'll stop serializing the `PipelineAggregator`s to node versions that\nsupport this behavior. And.  one day.  we'll be able to remove\n`PipelineAggregator` from the aggregation result tree entirely.\n\nImportantly.  this doesn't change how pipeline aggregations are declared\nor parsed or requested. They are still part of the `AggregationBuilder`\ntree because *that* makes sense.\n","date":"2020-03-17 02:51:54","modifiedFileCount":"35","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-04-09 23:55:09","codes":[{"authorDate":"2020-04-09 23:55:09","commitOrder":12,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-04-09 23:55:09","endLine":152,"groupId":"26827","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/b81b91266d6246c343a334037c6c9a54b8b909.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-04-09 23:55:09","commitOrder":12,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-04-09 23:55:09","endLine":391,"groupId":"26827","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/b81b91266d6246c343a334037c6c9a54b8b909.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"b5c5002c75d6b2653b63ed955e716cc7e17333b4","commitMessage":"@@@Reduce memory for big aggs run against many shards (#54758)\n\nThis changes the behavior of aggregations when search is performed\nagainst enough shards to enable \"batch reduce\" mode. In this case we\nforce always store aggregations in serialized form rather than a\ntraditional java reference. This should shrink the memory usage of large\naggregations at the cost of slightly slowing down aggregations where the\ncoordinating node is also a data node. Because we're only doing this\nwhen there are many shards this is likely to be fairly rare.\n\nAs a side effect this lets us add logs for the memory usage of the aggs\nbuffer:\n```\n[2020-04-03T17:03:57. 052][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1320->448] max [1320]\n[2020-04-03T17:03:57. 089][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57. 102][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57. 103][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [1328->448] max [1328]\n[2020-04-03T17:03:57. 105][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [888] max [1328]\n```\n\nThese are useful.  but you need to keep some things in mind before\ntrusting them:\n1. The buffers are oversized ala Lucene's ArrayUtils. This means that we\n   are using more space than we need.  but probably not much more.\n2. Before they are merged the aggregations are inflated into their\n   traditional Java objects which *probably* take up a lot more space\n   than the serialized form. That is.  after all.  the reason why we store\n   them in serialized form in the first place.\n\nAnd.  just because I can.  here is another example of the log:\n```\n[2020-04-03T17:06:18. 731][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18. 750][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18. 809][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18. 827][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs partial reduction [147528->49176] max [147528]\n[2020-04-03T17:06:18. 829][TRACE][o.e.a.s.SearchPhaseController] [runTask-0] aggs final reduction [98352] max [147528]\n```\n\nI got that last one by building a ten shard index with a million docs in\nit and running a `sum` in three layers of `terms` aggregations.  all on\n`long` fields.  and with a `batched_reduce_size` of `3`.","date":"2020-04-09 23:55:09","modifiedFileCount":"9","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-07-29 01:14:40","commitOrder":13,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-07-29 01:42:59","endLine":155,"groupId":"0","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/fe819740357499355b133f21d02d1177d67b8d.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":13,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-07-29 01:42:59","endLine":395,"groupId":"0","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/fe819740357499355b133f21d02d1177d67b8d.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results =\n            controller.newSearchPhaseResults(NOOP, mockSearchPhaseContext.getRequest(), 2);\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult);\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult);\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"e3bbb3bed4ed9430ab43eb4a3e8276ae503c13ab","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-29 01:42:59","modifiedFileCount":"261","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":14,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-08-27 20:29:24","endLine":154,"groupId":"9996","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/336cc0309410f6df0e869cf7444e8ceb1a8ecb.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        final SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 312);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-08-27 20:29:24","commitOrder":14,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-08-27 20:29:24","endLine":394,"groupId":"9991","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/336cc0309410f6df0e869cf7444e8ceb1a8ecb.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        SearchContextId ctx1 = new SearchContextId(UUIDs.randomBase64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        SearchContextId ctx2 = new SearchContextId(UUIDs.randomBase64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE));\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, mockSearchPhaseContext, ClusterState.EMPTY_STATE,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-03 15:51:57","codes":[{"authorDate":"2020-09-03 15:51:57","commitOrder":15,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-09-03 15:51:57","endLine":153,"groupId":"9996","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/c544091ae85e92589cfb3fb2abfb4a565398b5.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-09-03 15:51:57","commitOrder":15,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-09-03 15:51:57","endLine":393,"groupId":"9991","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/c544091ae85e92589cfb3fb2abfb4a565398b5.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        ArraySearchPhaseResults<SearchPhaseResult> results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"}],"commitId":"60cda2a311f60e4d1d05cfde1347ef53558861ca","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-09-03 15:51:57","modifiedFileCount":"59","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-24 20:02:49","codes":[{"authorDate":"2020-09-24 20:02:49","commitOrder":16,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-09-24 20:02:49","endLine":155,"groupId":"9996","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/d8e0d724686ab0572ca907b821d14e2893838b.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-09-24 20:02:49","commitOrder":16,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-09-24 20:02:49","endLine":399,"groupId":"9991","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/d8e0d724686ab0572ca907b821d14e2893838b.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            NOOP, mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"fbed2a1709c7657a1104379fba5687d7f94d0afa","commitMessage":"@@@Request-level circuit breaker support on coordinating nodes (#62223)\n\nThis commit allows coordinating node to account the memory used to perform partial and final reduce of\naggregations in the request circuit breaker. The search coordinator adds the memory that it used to save\nand reduce the results of shard aggregations in the request circuit breaker. Before any partial or final\nreduce.  the memory needed to reduce the aggregations is estimated and a CircuitBreakingException} is thrown\nif exceeds the maximum memory allowed in this breaker.\nThis size is estimated as roughly 1.5 times the size of the serialized aggregations that need to be reduced.\nThis estimation can be completely off for some aggregations but it is corrected with the real size after\nthe reduce completes.\nIf the reduce is successful.  we update the circuit breaker to remove the size of the source aggregations\nand replace the estimation with the serialized size of the newly reduced result.\n\nAs a follow up we could trigger partial reduces based on the memory accounted in the circuit breaker instead\nof relying on a static number of shard responses. A simpler follow up that could be done in the mean time is\nto [reduce the default batch reduce size](https://github.com/elastic/elasticsearch/issues/51857) of blocking\nsearch request to a more sane number.\n\nCloses #37182","date":"2020-09-24 20:02:49","modifiedFileCount":"25","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-10-15 00:13:36","codes":[{"authorDate":"2020-10-15 00:13:36","commitOrder":17,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2020-10-15 00:13:36","endLine":155,"groupId":"9996","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/4a028f4f524a899e4695ececfde6240e1f2bd4.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-10-15 00:13:36","commitOrder":17,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2020-10-15 00:13:36","endLine":399,"groupId":"9991","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/4a028f4f524a899e4695ececfde6240e1f2bd4.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"4ee18cd9ae1a73739b30a91afd06ae7ecd20a499","commitMessage":"@@@Cancel search on shard failure when partial results disallowed (#63520)\n\nIf the partial results parameter is false (which defaults to true).  then \nwe should cancel the search request when it hits a shard failure because \nthe caller won't consume the partial results.\n\nCloses #60278","date":"2020-10-15 00:13:36","modifiedFileCount":"13","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2021-04-27 19:31:29","codes":[{"authorDate":"2021-04-27 19:31:29","commitOrder":18,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2021-04-27 19:31:29","endLine":144,"groupId":"9996","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/5f588ce641f024d324e8bce739ab5dca1fbdaa.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-04-27 19:31:29","commitOrder":18,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2021-04-27 19:31:29","endLine":388,"groupId":"9991","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/5f588ce641f024d324e8bce739ab5dca1fbdaa.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.newDirectExecutorService(),\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"cf360cefb68002fb5871d879f3a07643209904dc","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-27 19:31:29","modifiedFileCount":"260","status":"M","submitter":"iverase"},{"authorTime":"2021-08-20 23:45:38","codes":[{"authorDate":"2021-08-20 23:45:38","commitOrder":19,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2021-08-20 23:45:38","endLine":142,"groupId":"9996","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c4/edbd240fad7e9c931c463a2b5f15ff14b49dba.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2021-08-20 23:45:38","commitOrder":19,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2021-08-20 23:45:38","endLine":382,"groupId":"9991","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c4/edbd240fad7e9c931c463a2b5f15ff14b49dba.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(\n            writableRegistry(), s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"484a0780f8441c66384231f3f09aaf7c65fef3c2","commitMessage":"@@@Remove Dead NamedWritableRegistry Fields in Aggs/Search Code (#76743)\n\nNo need for the registry in these places anymore => we can simplify things here and there.","date":"2021-08-20 23:45:38","modifiedFileCount":"11","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-09-13 22:00:36","codes":[{"authorDate":"2021-09-13 22:00:36","commitOrder":20,"curCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        boolean profiled = randomBoolean();\n\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        SearchShardTarget shard1Target = new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, shard1Target, null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        addProfiling(profiled, queryResult);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        SearchShardTarget shard2Target = new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE);\n        queryResult = new QuerySearchResult(ctx2, shard2Target, null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        addProfiling(profiled, queryResult);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                SearchHits hits;\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.setSearchShardTarget(shard2Target);\n                    hits = new SearchHits(new SearchHit[] { new SearchHit(84) }, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F);\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.setSearchShardTarget(shard1Target);\n                    hits = new SearchHits(new SearchHit[] { new SearchHit(42) }, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n                }\n                fetchResult.shardResult(hits, fetchProfile(profiled));\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertProfiles(profiled, 2, searchResponse);\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","date":"2021-09-13 22:00:36","endLine":174,"groupId":"105820","id":39,"instanceNumber":1,"isCurCommit":1,"methodName":"testFetchTwoDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/7326bc071db79b2411e37cbe54124e9b92509a.src","preCode":"    public void testFetchTwoDocument() {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = randomIntBetween(2, 10);\n        ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0),\n            null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(\n            ctx2, new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().equals(ctx2)) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    assertEquals(ctx1, request.contextId());\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(42)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F));\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(42, searchResponse.getHits().getAt(1).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.isEmpty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-09-13 22:00:36","commitOrder":20,"curCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        boolean profiled = randomBoolean();\n\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        SearchShardTarget shard1Target = new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1, shard1Target, null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        addProfiling(profiled, queryResult);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        SearchShardTarget shard2Target = new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE);\n        queryResult = new QuerySearchResult(ctx2, shard2Target, null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        addProfiling(profiled, queryResult);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.setSearchShardTarget(shard1Target);\n                    SearchHits hits = new SearchHits(\n                        new SearchHit[] { new SearchHit(84) },\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                        2.0F\n                    );\n                    fetchResult.shardResult(hits, fetchProfile(profiled));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        if (profiled) {\n            assertThat(searchResponse.getProfileResults().size(), equalTo(2));\n            assertThat(searchResponse.getProfileResults().get(shard1Target.toString()).getFetchPhase(), nullValue());\n            assertThat(\n                searchResponse.getProfileResults().get(shard2Target.toString()).getFetchPhase().getTime(),\n                equalTo(FETCH_PROFILE_TIME)\n            );\n        }\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","date":"2021-09-13 22:00:36","endLine":482,"groupId":"105820","id":40,"instanceNumber":2,"isCurCommit":1,"methodName":"testCleanupIrrelevantContexts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/7326bc071db79b2411e37cbe54124e9b92509a.src","preCode":"    public void testCleanupIrrelevantContexts() { \r\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(2);\n        SearchPhaseController controller = new SearchPhaseController(s -> InternalAggregationTestCase.emptyReduceContextBuilder());\n        QueryPhaseResultConsumer results = controller.newSearchPhaseResults(EsExecutors.DIRECT_EXECUTOR_SERVICE,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            mockSearchPhaseContext.getRequest(), 2, exc  -> {});\n        int resultSetSize = 1;\n        final ShardSearchContextId ctx1 = new ShardSearchContextId(UUIDs.base64UUID(), 123);\n        QuerySearchResult queryResult = new QuerySearchResult(ctx1,\n            new SearchShardTarget(\"node1\", new ShardId(\"test\", \"na\", 0), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(42, 1.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize); \r\n        queryResult.setShardIndex(0);\n        results.consumeResult(queryResult, () -> {});\n\n        final ShardSearchContextId ctx2 = new ShardSearchContextId(UUIDs.base64UUID(), 321);\n        queryResult = new QuerySearchResult(ctx2,\n            new SearchShardTarget(\"node2\", new ShardId(\"test\", \"na\", 1), null, OriginalIndices.NONE), null);\n        queryResult.topDocs(new TopDocsAndMaxScore(new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO),\n                new ScoreDoc[] {new ScoreDoc(84, 2.0F)}), 2.0F), new DocValueFormat[0]);\n        queryResult.size(resultSetSize);\n        queryResult.setShardIndex(1);\n        results.consumeResult(queryResult, () -> {});\n\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            public void sendExecuteFetch(Transport.Connection connection, ShardFetchSearchRequest request, SearchTask task,\n                                         SearchActionListener<FetchSearchResult> listener) {\n                FetchSearchResult fetchResult = new FetchSearchResult();\n                if (request.contextId().getId() == 321) {\n                    fetchResult.hits(new SearchHits(new SearchHit[] {new SearchHit(84)},\n                        new TotalHits(1, TotalHits.Relation.EQUAL_TO), 2.0F));\n                } else {\n                    fail(\"requestID 123 should not be fetched but was\");\n                }\n                listener.onResponse(fetchResult);\n            }\n        };\n        FetchSearchPhase phase = new FetchSearchPhase(results, controller, null, mockSearchPhaseContext,\n            (searchResponse, scrollId) -> new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(searchResponse, null);\n                }\n            });\n        assertEquals(\"fetch\", phase.getName());\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        SearchResponse searchResponse = mockSearchPhaseContext.searchResponse.get();\n        assertNotNull(searchResponse);\n        assertEquals(2, searchResponse.getHits().getTotalHits().value);\n        assertEquals(1, searchResponse.getHits().getHits().length);\n        assertEquals(84, searchResponse.getHits().getAt(0).docId());\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getSuccessfulShards());\n        assertEquals(1, mockSearchPhaseContext.releasedSearchContexts.size());\n        assertTrue(mockSearchPhaseContext.releasedSearchContexts.contains(ctx1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/FetchSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"}],"commitId":"c2c0165fd2811eb88e10eaa0089fbdbdeaab020c","commitMessage":"@@@Profile the fetch phase (#77064)\n\nThis adds profiling to the fetch phase so we can tell when fetching is\nslower than we'd like and we can tell which portion of the fetch is\nslow. The output includes which stored fields were loaded.  how long it\ntook to load stored fields.  which fetch sub-phases were run.  and how\nlong those fetch sub-phases took.\n\nCloses #75892\n\n* Skip bwc\n\n* Don't compare fetch profiles\n\n* Use passed one\n\n* no npe\n\n* Do last rename\n\n* Move method down\n\n* serialization tests\n\n* Fix sneaky serialization\n\n* Test for sneaky bug\n\n* license header\n\n* Document\n\n* Fix test\n\n* newline\n\n* Restore assertion\n\n* unit test merging\n\n* Handle inner hits\n\n* Fixup\n\n* Revert unneeded\n\n* Revert inner hits profiling\n\n* Fix names\n\n* Fixup names\n\n* Move results building\n\n* Drop loaded_nested\n\n* Checkstyle\n\n* Fixup more\n\n* Finish writeable cleanup\n\nAdd unit tests for merge\n\n* Remove null checking builder\n\n* Fix wire mistake\n\nHow did this pass before?!\n\n* Rename\n\n* Remove funny builder\n\n* Remove name munging","date":"2021-09-13 22:00:36","modifiedFileCount":"42","status":"M","submitter":"Nik Everett"}]
