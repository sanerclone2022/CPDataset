[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n        assertThat(query,\n                either(instanceOf(BooleanQuery.class)).or(instanceOf(MultiPhrasePrefixQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2018-04-26 03:22:53","endLine":100,"groupId":"430","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhrasePrefixQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/d5f98fe0b4769e74ba2b33275a7b53cfef14b8.src","preCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n        assertThat(query,\n                either(instanceOf(BooleanQuery.class)).or(instanceOf(MultiPhrasePrefixQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2018-04-26 03:22:53","endLine":108,"groupId":"430","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/c53992ebe8caa6c5ecfed729723054e1c40b0e.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-09-24 01:37:15","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n        assertThat(query,\n                either(instanceOf(BooleanQuery.class)).or(instanceOf(MultiPhrasePrefixQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2018-04-26 03:22:53","endLine":100,"groupId":"430","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhrasePrefixQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/d5f98fe0b4769e74ba2b33275a7b53cfef14b8.src","preCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n        assertThat(query,\n                either(instanceOf(BooleanQuery.class)).or(instanceOf(MultiPhrasePrefixQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2019-09-24 01:37:15","commitOrder":2,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2019-09-24 01:37:15","endLine":104,"groupId":"430","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/8acf497bbcb10fcd8223a7c4e003be2e31f379.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"4414fccb2765dd24895216636e68aabea2d156ca","commitMessage":"@@@Replace SearchContext with QueryShardContext in query builder tests (#46978)\n\nThis commit replaces the SearchContext used in AbstractQueryTestCase with\na QueryShardContext in order to reduce the visibility of search contexts.\n\nRelates #46523","date":"2019-09-24 01:37:15","modifiedFileCount":"57","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-09-24 01:37:15","codes":[{"authorDate":"2020-07-20 22:44:31","commitOrder":3,"curCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, QueryShardContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(MultiPhrasePrefixQuery.class))\n            .or(instanceOf(SynonymQuery.class))\n            .or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2020-07-20 22:44:31","endLine":103,"groupId":"430","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhrasePrefixQueryBuilderqueryBuilder@Queryquery@QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/d364707af926674bfd650ebf5e3c2ec3bcf217.src","preCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n        assertThat(query,\n                either(instanceOf(BooleanQuery.class)).or(instanceOf(MultiPhrasePrefixQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-09-24 01:37:15","commitOrder":3,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2019-09-24 01:37:15","endLine":104,"groupId":"430","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/8acf497bbcb10fcd8223a7c4e003be2e31f379.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"2c5c478875ee5e7534a13fe8c88368602a7ff437","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-20 22:44:31","modifiedFileCount":"143","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchExecutionContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(MultiPhrasePrefixQuery.class))\n            .or(instanceOf(SynonymQuery.class))\n            .or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2021-01-15 01:11:59","endLine":103,"groupId":"430","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhrasePrefixQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/14/be4c199888b2894c00e8e533bd733571c733c9.src","preCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, QueryShardContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(MultiPhrasePrefixQuery.class))\n            .or(instanceOf(SynonymQuery.class))\n            .or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query,\n                                       SearchExecutionContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2021-01-15 01:11:59","endLine":105,"groupId":"430","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cd/d865747fb7280295a47d9bec201f383b50119f.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":5,"curCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchExecutionContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQueryOption.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(MultiPhrasePrefixQuery.class))\n            .or(instanceOf(SynonymQuery.class))\n            .or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2021-04-21 21:28:12","endLine":91,"groupId":"103342","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhrasePrefixQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/3a328b98503b9e77a6428cb5089b5a449d37ae.src","preCode":"    protected void doAssertLuceneQuery(MatchPhrasePrefixQueryBuilder queryBuilder, Query query, SearchExecutionContext context)\n            throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(MultiPhrasePrefixQuery.class))\n            .or(instanceOf(SynonymQuery.class))\n            .or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-04-21 21:28:12","commitOrder":5,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query,\n                                       SearchExecutionContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQueryOption.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2021-04-21 21:28:12","endLine":93,"groupId":"103342","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3e/83472f8d9158378d50af02ed048f9705f440d1.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query,\n                                       SearchExecutionContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"}]
