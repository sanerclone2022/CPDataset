[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private Query getLongRangeQuery(ShapeRelation relation, long from, long to, boolean includeLower, boolean includeUpper) {\n        long[] lower = new long[] {from + (includeLower ? 0 : 1)};\n        long[] upper = new long[] {to - (includeUpper ? 0 : 1)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = LongRange.newWithinQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery = LongRange.newContainsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery = LongRange.newIntersectsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.LONG.dvRangeQuery(FIELDNAME, queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","date":"2018-04-26 03:22:53","endLine":176,"groupId":"61630","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getLongRangeQuery","params":"(ShapeRelationrelation@longfrom@longto@booleanincludeLower@booleanincludeUpper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/20153675af60473e3a0fbe103026ab096e6292.src","preCode":"    private Query getLongRangeQuery(ShapeRelation relation, long from, long to, boolean includeLower, boolean includeUpper) {\n        long[] lower = new long[] {from + (includeLower ? 0 : 1)};\n        long[] upper = new long[] {to - (includeUpper ? 0 : 1)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = LongRange.newWithinQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery = LongRange.newContainsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery = LongRange.newIntersectsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.LONG.dvRangeQuery(FIELDNAME, queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private Query getDoubleRangeQuery(ShapeRelation relation, double from, double to, boolean includeLower,\n                                      boolean includeUpper) {\n        double[] lower = new double[] {includeLower ? from : Math.nextUp(from)};\n        double[] upper = new double[] {includeUpper ? to : Math.nextDown(to)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = DoubleRange.newWithinQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery =  DoubleRange.newContainsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery =  DoubleRange.newIntersectsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.DOUBLE.dvRangeQuery(FIELDNAME, queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","date":"2018-04-26 03:22:53","endLine":217,"groupId":"27329","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDoubleRangeQuery","params":"(ShapeRelationrelation@doublefrom@doubleto@booleanincludeLower@booleanincludeUpper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/20153675af60473e3a0fbe103026ab096e6292.src","preCode":"    private Query getDoubleRangeQuery(ShapeRelation relation, double from, double to, boolean includeLower,\n                                      boolean includeUpper) {\n        double[] lower = new double[] {includeLower ? from : Math.nextUp(from)};\n        double[] upper = new double[] {includeUpper ? to : Math.nextDown(to)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = DoubleRange.newWithinQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery =  DoubleRange.newContainsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery =  DoubleRange.newIntersectsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.DOUBLE.dvRangeQuery(FIELDNAME, queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-09-19 06:27:17","codes":[{"authorDate":"2020-09-19 06:27:17","commitOrder":2,"curCode":"    private Query getLongRangeQuery(ShapeRelation relation, long from, long to, boolean includeLower, boolean includeUpper) {\n        long[] lower = new long[] {from + (includeLower ? 0 : 1)};\n        long[] upper = new long[] {to - (includeUpper ? 0 : 1)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = LongRange.newWithinQuery(\"field\", lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery = LongRange.newContainsQuery(\"field\", lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery = LongRange.newIntersectsQuery(\"field\", lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.LONG.dvRangeQuery(\"field\", queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","date":"2020-09-19 06:27:17","endLine":368,"groupId":"102750","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getLongRangeQuery","params":"(ShapeRelationrelation@longfrom@longto@booleanincludeLower@booleanincludeUpper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/80479cf2533aa6fbd44846561e208592e7fdbd.src","preCode":"    private Query getLongRangeQuery(ShapeRelation relation, long from, long to, boolean includeLower, boolean includeUpper) {\n        long[] lower = new long[] {from + (includeLower ? 0 : 1)};\n        long[] upper = new long[] {to - (includeUpper ? 0 : 1)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = LongRange.newWithinQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery = LongRange.newContainsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery = LongRange.newIntersectsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.LONG.dvRangeQuery(FIELDNAME, queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"},{"authorDate":"2020-09-19 06:27:17","commitOrder":2,"curCode":"    private Query getDoubleRangeQuery(ShapeRelation relation, double from, double to, boolean includeLower,\n                                      boolean includeUpper) {\n        double[] lower = new double[] {includeLower ? from : Math.nextUp(from)};\n        double[] upper = new double[] {includeUpper ? to : Math.nextDown(to)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = DoubleRange.newWithinQuery(\"field\", lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery =  DoubleRange.newContainsQuery(\"field\", lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery =  DoubleRange.newIntersectsQuery(\"field\", lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.DOUBLE.dvRangeQuery(\"field\", queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","date":"2020-09-19 06:27:17","endLine":409,"groupId":"102750","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDoubleRangeQuery","params":"(ShapeRelationrelation@doublefrom@doubleto@booleanincludeLower@booleanincludeUpper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/80479cf2533aa6fbd44846561e208592e7fdbd.src","preCode":"    private Query getDoubleRangeQuery(ShapeRelation relation, double from, double to, boolean includeLower,\n                                      boolean includeUpper) {\n        double[] lower = new double[] {includeLower ? from : Math.nextUp(from)};\n        double[] upper = new double[] {includeUpper ? to : Math.nextDown(to)};\n        Query indexQuery;\n        BinaryDocValuesRangeQuery.QueryType queryType;\n        if (relation == ShapeRelation.WITHIN) {\n            indexQuery = DoubleRange.newWithinQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.WITHIN;\n        } else if (relation == ShapeRelation.CONTAINS) {\n            indexQuery =  DoubleRange.newContainsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.CONTAINS;\n        } else {\n            indexQuery =  DoubleRange.newIntersectsQuery(FIELDNAME, lower, upper);\n            queryType = BinaryDocValuesRangeQuery.QueryType.INTERSECTS;\n        }\n        Query dvQuery = RangeType.DOUBLE.dvRangeQuery(FIELDNAME, queryType, from, to,\n                includeLower, includeUpper);\n        return new IndexOrDocValuesQuery(indexQuery, dvQuery);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"}],"commitId":"d669cb500fadd52fd2ceb1dff0fe5a0e9379cc04","commitMessage":"@@@Dense vector field type minor fixes (#62631)\n\nThe dense vector field is not aggregatable although it produces fielddata through its BinaryDocValuesField. It should pass up hasDocValues set to true to its parent class in its constructor.  and return isAggregatable false\n\nThis may not have consequences today.  but it will be important once we try to share the same exists query implementation throughout all of the mappers with #57607.","date":"2020-09-19 06:27:17","modifiedFileCount":"13","status":"M","submitter":"Luca Cavanna"}]
