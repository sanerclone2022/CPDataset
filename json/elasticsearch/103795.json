[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2018-04-26 03:22:53","endLine":109,"groupId":"16643","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicOperationsCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/59c8a103927260c4e39175f555513321458b43.src","preCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2018-04-26 03:22:53","endLine":200,"groupId":"16639","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheDifferentReaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/59c8a103927260c4e39175f555513321458b43.src","preCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-10-03 23:11:28","codes":[{"authorDate":"2018-10-03 23:11:28","commitOrder":2,"curCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2018-10-03 23:11:28","endLine":109,"groupId":"69858","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicOperationsCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/08/bf43b91bbc6b6a13344f30b8b5d0f942186b6f.src","preCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-10-03 23:11:28","commitOrder":2,"curCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2018-10-03 23:11:28","endLine":200,"groupId":"16639","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheDifferentReaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/08/bf43b91bbc6b6a13344f30b8b5d0f942186b6f.src","preCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"90c55f5e36ddc9d7cbf2fcde8e88027db8a5e060","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-10-03 23:11:28","modifiedFileCount":"33","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-10-15 23:03:37","codes":[{"authorDate":"2018-10-03 23:11:28","commitOrder":3,"curCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2018-10-03 23:11:28","endLine":109,"groupId":"69858","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicOperationsCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/08/bf43b91bbc6b6a13344f30b8b5d0f942186b6f.src","preCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2018-10-15 23:03:37","commitOrder":3,"curCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        if (randomBoolean()) {\n            writer.flush();\n            IOUtils.close(writer);\n            writer = new IndexWriter(dir, newIndexWriterConfig());\n        }\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2018-10-15 23:03:37","endLine":206,"groupId":"16639","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheDifferentReaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/11d3f3e934a7c3079bac3fb9e5949c41915b57.src","preCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"0b42eda0e360d17975460a0d1efd0c6e6b494ca5","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-15 23:03:37","modifiedFileCount":"331","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2020-09-18 22:53:37","codes":[{"authorDate":"2020-09-18 22:53:37","commitOrder":4,"curCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2020-09-18 22:53:37","endLine":110,"groupId":"16643","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicOperationsCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/eb70c3df03aa3cc1ae966bcae4a3a4630218b9.src","preCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-09-18 22:53:37","commitOrder":4,"curCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        if (randomBoolean()) {\n            writer.flush();\n            IOUtils.close(writer);\n            writer = new IndexWriter(dir, newIndexWriterConfig());\n        }\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2020-09-18 22:53:37","endLine":205,"groupId":"16639","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheDifferentReaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/eb70c3df03aa3cc1ae966bcae4a3a4630218b9.src","preCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        if (randomBoolean()) {\n            writer.flush();\n            IOUtils.close(writer);\n            writer = new IndexWriter(dir, newIndexWriterConfig());\n        }\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes, () -> termQuery.toString());\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes, () -> termQuery.toString());\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"8935fffe5ee9128ebdc15dfa4d20ad0dd3021ba0","commitMessage":"@@@Remove cache key renderer argument from IndicesRequestCache (#62534)\n\nIn the context of of a recurring test failure tracked by #32827.  we added trace logging and an extra cache key renderer argument to IndicesRequestCache#getOrCompute (see #39475 and #34180).\n\nWe addressed the issue with #54071.  but the extra argument was left behind.  with a NORELEASE comment saying it should be removed.\n\nWith this commit.  we remove the extra cache key rendered argument and the corresponding log lines which are not so useful without it.\n\nCloses #55837","date":"2020-09-18 22:53:37","modifiedFileCount":"5","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-12-24 02:19:02","codes":[{"authorDate":"2020-12-24 02:19:02","commitOrder":5,"curCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        MappingLookup.CacheKey mappingKey = MappingLookupUtils.fromTypes().cacheKey();\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0L, requestCacheStats.stats().getMemorySize().getBytes());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2020-12-24 02:19:02","endLine":115,"groupId":"51913","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicOperationsCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/62b925966be85471d3550b5ddfe02563323afc.src","preCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-12-24 02:19:02","commitOrder":5,"curCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        MappingLookup.CacheKey mappingKey = MappingLookupUtils.fromTypes().cacheKey();\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        if (randomBoolean()) {\n            writer.flush();\n            IOUtils.close(writer);\n            writer = new IndexWriter(dir, newIndexWriterConfig());\n        }\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > value.length());\n        final long cacheSize = requestCacheStats.stats().getMemorySize().getBytes();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, mappingKey, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().getBytes());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0L, requestCacheStats.stats().getMemorySize().getBytes());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2020-12-24 02:19:02","endLine":210,"groupId":"51913","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheDifferentReaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/62b925966be85471d3550b5ddfe02563323afc.src","preCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        if (randomBoolean()) {\n            writer.flush();\n            IOUtils.close(writer);\n            writer = new IndexWriter(dir, newIndexWriterConfig());\n        }\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > value.length());\n        final int cacheSize = requestCacheStats.stats().getMemorySize().bytesAsInt();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().bytesAsInt() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().bytesAsInt());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0, requestCacheStats.stats().getMemorySize().bytesAsInt());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"3e3152406a4fda2cebeceac3d7fdae4071ce7ea6","commitMessage":"@@@Bust the request cache when the mapping changes (#66295)\n\nThis makes sure that we only serve a hit from the request cache if it\nwas build using the same mapping and that the same mapping is used for\nthe entire \"query phase\" of the search.\n\nCloses #62033","date":"2020-12-24 02:19:02","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-01-12 18:48:51","codes":[{"authorDate":"2021-01-12 18:48:51","commitOrder":6,"curCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        MappingLookup.CacheKey mappingKey = MappingLookup.EMPTY.cacheKey();\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0L, requestCacheStats.stats().getMemorySize().getBytes());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2021-01-12 18:48:51","endLine":117,"groupId":"103795","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicOperationsCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/9eb1fcb4a3066ee63a883e3366e5820bb9908e.src","preCode":"    public void testBasicOperationsCache() throws Exception {\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),\n            new ShardId(\"foo\", \"bar\", 1));\n        MappingLookup.CacheKey mappingKey = MappingLookupUtils.fromTypes().cacheKey();\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        AtomicBoolean indexShard = new AtomicBoolean(true);\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n\n        \r\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > value.length());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            reader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(entity);\n        }\n        cache.cleanCache();\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0L, requestCacheStats.stats().getMemorySize().getBytes());\n\n        IOUtils.close(reader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-01-12 18:48:51","commitOrder":6,"curCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        MappingLookup.CacheKey mappingKey = MappingLookup.EMPTY.cacheKey();\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        if (randomBoolean()) {\n            writer.flush();\n            IOUtils.close(writer);\n            writer = new IndexWriter(dir, newIndexWriterConfig());\n        }\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > value.length());\n        final long cacheSize = requestCacheStats.stats().getMemorySize().getBytes();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, mappingKey, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().getBytes());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0L, requestCacheStats.stats().getMemorySize().getBytes());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","date":"2021-01-12 18:48:51","endLine":212,"groupId":"103795","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheDifferentReaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/9eb1fcb4a3066ee63a883e3366e5820bb9908e.src","preCode":"    public void testCacheDifferentReaders() throws Exception {\n        IndicesRequestCache cache = new IndicesRequestCache(Settings.EMPTY);\n        MappingLookup.CacheKey mappingKey = MappingLookupUtils.fromTypes().cacheKey();\n        AtomicBoolean indexShard =  new AtomicBoolean(true);\n        ShardRequestCache requestCacheStats = new ShardRequestCache();\n        Directory dir = newDirectory();\n        IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n\n        writer.addDocument(newDoc(0, \"foo\"));\n        DirectoryReader reader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n        TermQueryBuilder termQuery = new TermQueryBuilder(\"id\", \"0\");\n        BytesReference termBytes = XContentHelper.toXContent(termQuery, XContentType.JSON, false);\n        if (randomBoolean()) {\n            writer.flush();\n            IOUtils.close(writer);\n            writer = new IndexWriter(dir, newIndexWriterConfig());\n        }\n        writer.updateDocument(new Term(\"id\", \"0\"), newDoc(0, \"bar\"));\n        DirectoryReader secondReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer), new ShardId(\"foo\", \"bar\", 1));\n\n        \r\n        TestEntity entity = new TestEntity(requestCacheStats, indexShard);\n        Loader loader = new Loader(reader, 0);\n        BytesReference value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(1, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > value.length());\n        final long cacheSize = requestCacheStats.stats().getMemorySize().getBytes();\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        TestEntity secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(0, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertFalse(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n        assertTrue(requestCacheStats.stats().getMemorySize().getBytes() > cacheSize + value.length());\n        assertEquals(2, cache.numRegisteredCloseListeners());\n\n        secondEntity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(secondReader, 0);\n        value = cache.getOrCompute(secondEntity, loader, mappingKey, secondReader, termBytes);\n        assertEquals(\"bar\", value.streamInput().readString());\n        assertEquals(1, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        entity = new TestEntity(requestCacheStats, indexShard);\n        loader = new Loader(reader, 0);\n        value = cache.getOrCompute(entity, loader, mappingKey, reader, termBytes);\n        assertEquals(\"foo\", value.streamInput().readString());\n        assertEquals(2, requestCacheStats.stats().getHitCount());\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(2, cache.count());\n\n        \r\n        reader.close();\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(1, cache.count());\n        assertEquals(cacheSize, requestCacheStats.stats().getMemorySize().getBytes());\n        assertEquals(1, cache.numRegisteredCloseListeners());\n\n        \r\n        if (randomBoolean()) {\n            secondReader.close();\n        } else {\n            indexShard.set(false); \r\n            cache.clear(secondEntity);\n        }\n        cache.cleanCache();\n        assertEquals(2, requestCacheStats.stats().getMissCount());\n        assertEquals(0, requestCacheStats.stats().getEvictions());\n        assertTrue(loader.loadedFromCache);\n        assertEquals(0, cache.count());\n        assertEquals(0L, requestCacheStats.stats().getMemorySize().getBytes());\n\n        IOUtils.close(secondReader, writer, dir, cache);\n        assertEquals(0, cache.numRegisteredCloseListeners());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesRequestCacheTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"df7041f45a83544d4db4e016d8d59a8a48e95557","commitMessage":"@@@Remove last DocumentMapper reference from MappingLookup (#67157)\n\nAs part of #66295 we made QueryShardContext perform mapping lookups through MappingLookup rather than MapperService. That helps as MapperService relies on DocumentMapper which may change througout the execution of the search request. At search time.  the percolate query also needs to parse documents.  which made us add a parse method to MappingLookup.Such parse method currently relies on calling DocumentMapper#parseDocument through a function.  but we would like to rather make this easier to follow. (see https://github.com/elastic/elasticsearch/pull/66295/files#r544639868)\n\nWe recently removed the need to provide the entire DocumentMapper to DocumentParser#parse.  opening the possibility for using DocumentParser directly when needing to parse a document at query time. This commit adds everything that is needed (namely Mapping.  IndexSettings and IndexAnalyzers) to MappingLookup so that it can parse a document through DocumentParser without relying on DocumentMapper.\n\nAs a bonus.  given that MappingLookup holds a reference to these three additional objects.  we can make DocumentMapper rely on MappingLookup to retrieve those and not hold its own same references to them.\nAlong the same lines.  given that MappingLookup holds all that's necessary to parse a document.  the signature of DocumentParser#parse can be simplified by replacing most of its arguments with MappingLookup and retrieving what is needed from it.","date":"2021-01-12 18:48:51","modifiedFileCount":"18","status":"M","submitter":"Luca Cavanna"}]
