[{"authorTime":"2019-04-20 04:17:00","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2018-12-25 03:06:50","endLine":169,"groupId":"14615","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/f8d48fc5cf399c096f6dd44eb7b90b2d4879f3.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"NB"},{"authorDate":"2019-04-20 04:17:00","commitOrder":3,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2019-04-20 04:17:00","endLine":437,"groupId":"14615","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/8bd7dbc893532daea6ecd4d99e5b17c2861d9e.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"B"}],"commitId":"8fe7568f732f6561d9e015c276fd0fca162ea9bb","commitMessage":"@@@Add ignore_above in ICUCollationKeywordFieldMapper (#40414)\n\nAdd the possibility to use ignore_above parameter in ICUCollationKeywordFieldMapper.\n\nClose #40413","date":"2019-04-20 04:17:00","modifiedFileCount":"2","status":"M","submitter":"clement-tourriere"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2019-10-15 16:05:29","endLine":160,"groupId":"14615","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/d4b72cdf380546661ade4fa9c791444f8a0c0a.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2019-10-15 16:05:29","endLine":437,"groupId":"14615","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/db71bc07bb7375e415806b9bc91d4ca652c687.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-14 23:15:19","codes":[{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-01-14 23:15:19","endLine":161,"groupId":"66157","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/063d1478a9bbaa5b8e57cc4d4272956a6310af.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-01-14 23:15:19","endLine":437,"groupId":"66157","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/0113daf621f26206e00138b0b0a00c4a227d3f.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"774bfb5e22389a923678ed8013e8cd284703d5dd","commitMessage":"@@@Don't use user-supplied type when building DocumentMapper (#50960)\n\nThis commit begins the process of removing types from the document parsing\ninfrastructure. Initially.  we just ignore the user-supplied type after it has been\nremoved from the mapping json structure.  and always supply _doc as the name\nof the root parser.\n\nThe production code change is very small here.  and most of the changeset\nconsists of alterations to Mapper test code that was passing in non-standard\ntype names and checking serialization.\n\nRelates to #41059","date":"2020-01-14 23:15:19","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-01-20 19:14:49","endLine":161,"groupId":"14615","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/821f1170ce81fb91de0dcb3d5c6e230eb24cd1.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-01-20 19:14:49","endLine":437,"groupId":"14615","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/db71bc07bb7375e415806b9bc91d4ca652c687.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"3d796248437e06dc90c15077702b67851bcb63a8","commitMessage":"@@@Revert \"Don't use user-supplied type when building DocumentMapper (#50960)\" (#51214)\n\nReverts #50960\n\nThis commit has been causing test failures during upgrade tests: specifically.  an upgraded\nnode becomes master and sends a cluster state update to a 7.x node; this node sees that the\nmapping version of its .tasks index is the same as the master.  so asserts that the serialized\nmappings are the same; however.  because the master has rewritten the mapping to use\n_docinstead oftasks`.  we get an assertion failure. The logical fix is for the master to\nincrement its mapping version when it rewrites the mapping.  but there isn't a simple way to\ndo that currently.\n\nThis reverts commit 774bfb5e22389a923678ed8013e8cd284703d5dd.","date":"2020-01-20 19:14:49","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-08-24 20:15:41","commitOrder":7,"curCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"ignore_above\", 5)));\n\n        ParsedDocument doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"elk\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"elasticsearch\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-08-24 20:15:41","endLine":201,"groupId":"14615","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/c22674a41d64d2b3a6c1510e30f3f6ea35d09f.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").field(\"ignore_above\", 5).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elk\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"elasticsearch\")\n                        .endObject()),\n                XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":7,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-01-20 19:14:49","endLine":437,"groupId":"14615","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/db71bc07bb7375e415806b9bc91d4ca652c687.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"}],"commitId":"6a9dde599f5fc11205e3f71f339a37bac9a259dc","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-24 20:15:41","modifiedFileCount":"171","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":8,"curCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"ignore_above\", 5)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-08-25 01:10:47","endLine":174,"groupId":"35877","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/424e11efd1ca3848ef04bce59f560f33bc1b32.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"ignore_above\", 5)));\n\n        ParsedDocument doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"elk\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"elasticsearch\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":8,"curCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-01-20 19:14:49","endLine":437,"groupId":"14615","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/db71bc07bb7375e415806b9bc91d4ca652c687.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":9,"curCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"ignore_above\", 5)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-08-25 01:10:47","endLine":174,"groupId":"35877","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/424e11efd1ca3848ef04bce59f560f33bc1b32.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"ignore_above\", 5)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"},{"authorDate":"2020-08-27 20:29:24","commitOrder":9,"curCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", FIELD_TYPE).field(\"ignore_above\", 5)));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","date":"2020-08-27 20:29:24","endLine":310,"groupId":"35877","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/66dc5dc72793b041e384e1137c823172e8f252.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"ignore_above\", 5).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elk\")\n                .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n            .bytes(XContentFactory.jsonBuilder()\n                .startObject()\n                .field(\"field\", \"elasticsearch\")\n                .endObject()),\n            XContentType.JSON));\n\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-06-22 22:13:22","codes":[{"authorDate":"2021-06-22 22:13:22","commitOrder":10,"curCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"ignore_above\", 5)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        fields = doc.rootDoc().getFields(\"_ignored\");\n        assertEquals(0, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n\n        fields = doc.rootDoc().getFields(\"_ignored\");\n        assertEquals(1, fields.length);\n        assertEquals(\"field\", fields[0].stringValue());\n    }\n","date":"2021-06-22 22:13:22","endLine":227,"groupId":"103163","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/1296e7d486860d768e208cbed911cd9487887a.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"ignore_above\", 5)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2021-06-22 22:13:22","commitOrder":10,"curCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", FIELD_TYPE).field(\"ignore_above\", 5)));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        fields = doc.rootDoc().getFields(\"_ignored\");\n        assertEquals(0, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n        fields = doc.rootDoc().getFields(\"_ignored\");\n        assertEquals(1, fields.length);\n        assertEquals(\"field\", fields[0].stringValue());\n    }\n","date":"2021-06-22 22:13:22","endLine":279,"groupId":"103163","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testIgnoreAbove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/ddc8a2b9d7951d9de708d93ea015b1b415d612.src","preCode":"    public void testIgnoreAbove() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", FIELD_TYPE).field(\"ignore_above\", 5)));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"elk\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        doc = mapper.parse(source(b -> b.field(\"field\", \"elasticsearch\")));\n        fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(0, fields.length);\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"437805b8005871554e87f76ad24646e6d0c28d48","commitMessage":"@@@Add keyword fields above `ignore_above` to `_ignored` (#74418)\n\nCurrently the `_ignore` field indexes and stores the names of every field in a document that has been ignored\nbecause eg. it was malformed. The `ignore_above` option for keyword-type fields\nserves a somewhat similar purpose.  so this change add logix that  adds these\nfields to the \"_ignored\" field as well for `keyword`.  `wildcard` and\n`icu_collation_keyword` fields.\n\nCloses #74228","date":"2021-06-22 22:13:22","modifiedFileCount":"6","status":"M","submitter":"Christoph B?scher"}]
