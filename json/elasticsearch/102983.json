[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        FieldMapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n    }\n","date":"2018-04-26 03:22:53","endLine":140,"groupId":"65134","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/1e749cd22e750fdd68974ffb8ee53bcfd74f09.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        FieldMapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        FieldMapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2018-04-26 03:22:53","endLine":309,"groupId":"21404","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/e90631a14b3b768baf437610a6a96862b51005.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        FieldMapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-19 02:10:12","codes":[{"authorDate":"2018-07-19 02:10:12","commitOrder":2,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n    }\n","date":"2018-07-19 02:10:12","endLine":144,"groupId":"65134","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/947a44a0a1258afb556249eb52aa9d7d73daed.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        FieldMapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2018-07-19 02:10:12","commitOrder":2,"curCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2018-07-19 02:10:12","endLine":310,"groupId":"21404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/bf0a849fa39066049c3b8a58041b055f38f3a0.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        FieldMapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"a019e723b5475f0ca77063dab45fbcccd1d6559a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-19 02:10:12","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-07-19 02:10:12","codes":[{"authorDate":"2018-12-18 04:38:14","commitOrder":3,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","date":"2018-12-18 04:38:14","endLine":140,"groupId":"65134","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/e2d7c31afe2d00d5ece5beadcb7c05d6d08c28.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2018-07-19 02:10:12","commitOrder":3,"curCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2018-07-19 02:10:12","endLine":310,"groupId":"21404","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/bf0a849fa39066049c3b8a58041b055f38f3a0.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"N"}],"commitId":"5bc7822562a6eefa4a64743233160cdc9f431adf","commitMessage":"@@@[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)\n\nThis commit  exposes lucene's LatLonShape field as the\ndefault type in GeoShapeFieldMapper. To use the new \nindexing approach.  simply set \"type\" : \"geo_shape\" in \nthe mappings without setting any of the strategy.  precision.  \ntree_levels.  or distance_error_pct parameters. Note the \nfollowing when using the new indexing approach:\n\n* geo_shape query does not support querying by \nMULTIPOINT.\n* LINESTRING and MULTILINESTRING queries do not \nyet support WITHIN relation.\n* CONTAINS relation is not yet supported.\nThe tree.  precision.  tree_levels.  distance_error_pct.  \nand points_only parameters are deprecated.\n","date":"2018-12-18 04:38:14","modifiedFileCount":"22","status":"M","submitter":"Nick Knize"},{"authorTime":"2018-07-19 02:10:12","codes":[{"authorDate":"2018-12-18 10:09:46","commitOrder":4,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n    }\n","date":"2018-12-18 10:09:46","endLine":149,"groupId":"65134","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/e689e9d7e89dfc6fc1c59ca220c4ec0d53a8cc.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2018-07-19 02:10:12","commitOrder":4,"curCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2018-07-19 02:10:12","endLine":310,"groupId":"21404","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/bf0a849fa39066049c3b8a58041b055f38f3a0.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"N"}],"commitId":"96d279ed83e25f427db86b831333ca6772202a91","commitMessage":"@@@Revert \"[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)\"\n\nThis reverts commit 5bc7822562a6eefa4a64743233160cdc9f431adf.\n","date":"2018-12-18 10:09:46","modifiedFileCount":"22","status":"M","submitter":"Nicholas Knize"},{"authorTime":"2018-07-19 02:10:12","codes":[{"authorDate":"2018-12-18 23:54:56","commitOrder":5,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","date":"2018-12-18 23:54:56","endLine":140,"groupId":"65134","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/e2d7c31afe2d00d5ece5beadcb7c05d6d08c28.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2018-07-19 02:10:12","commitOrder":5,"curCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2018-07-19 02:10:12","endLine":310,"groupId":"21404","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/bf0a849fa39066049c3b8a58041b055f38f3a0.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"N"}],"commitId":"ec0dc2c0e900e1703dea29ddb56e4916618fc49e","commitMessage":"@@@[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#36751)\n\n* [Geo] Expose BKDBackedGeoShapes as new VECTOR strategy\n\nThis commit exposes lucene's LatLonShape field as a new\nstrategy in GeoShapeFieldMapper. To use the new indexing\napproach.  strategy should be set to \"vector\" in the\ngeo_shape field mapper. If the tree parameter is set\nthe mapper will throw an IAE. Note the following:\n\nWhen using vector strategy:\n\n* geo_shape query does not support querying by POINT. \nMULTIPOINT.  or GEOMETRYCOLLECTION.\n* LINESTRING and MULTILINESTRING queries do not support\nWITHIN relation.\n* CONTAINS relation is not supported.\n* The tree.  precision.  tree_levels.  distance_error_pct. \nand points_only parameters will not throw an exception\nbut they have no effect and will be marked as\ndeprecated..\n\nAll other features are supported.\n\n* revert change to PercolatorFieldMapper\n\n* fix ExistsQuery for geo_shape vector strategy\n\n* add deprecation logging for tree.  precision.  tree_levels.  distance_error_pct.  and points_only\n\n* initial update to geoshape docs.  including mapping migration updates\n\n* initial support for GeoCollection queries\n\n* fix docs and javadoc errors\n\n* clean up geocollection queries\n\n* set deprecated mapping tests to NOTCONSOLE\n\n* fix geo-shape mapper asciidoc mapping and test warnings\n\n* add support for point queries using LatLonShapeBoundingBoxQuery\n\n* update GeoShapeQueryBuilderTests to include POINT queries for VECTOR strategy. Other comment cleanups\n\n* add lucene geometry build testing to ShapeBuilder tests\n\n* remove deprecated prefix tree mapping from geo-shape.asciidoc\n\n* refactor GeoShapeFieldMapper into LegacyGeoShapeFieldMapper and GeoShapeFieldMapper\n\nBoth classes derive from BaseGeoShapeFieldMapper that provides shared parameters:\ncoerce.  ignoreMalformed.  ignore_z_value.  orientation.\n\n* update docs to remove vector strategy\n\n* fix GeometryCollectionBuilder#buildLucene to return the object created by the shape builder\n\n* fix LineLength failure in GeoJsonShapeParserTests\n\n* ShapeMapper refactor changes from PR feedback\n\n* fix typo in geo-shape.asciidoc\n\n* ignore circle test in docs\n\n* update indexing-approach ref to geoshape-indexing-approach\n\n* add warnings check for LegacyGeoShapeFieldMapper to AbstractBuilderTestCase\n\n* fix deprecatedParameters setup\n\n* update indexing approach\n\n* fixing unexpected warnings failures\n\n* move orientation back to field type\n\n* remove if in LegacyGeoShapeFieldMapper#doXContent. Fix GeoShapeFieldMapper to work with double array as a point\n\n* fix indexing-approach link in circle section of geoshape docs\n\n* add strategy to deprecation warnings check\n\n* fix test failures\n\n* fix typo in QueryStringQueryBuilderTests\n\n* fix total hits to totalHits().value\n\n* fix version number\n\n* add version check to BaseGeoShapeFieldMapper\n\n* fix line length!\n\n* revert version check in BaseGeoShapeFieldMapper\n\n* Fix serialization of mappings of legacy shapes.\n","date":"2018-12-18 23:54:56","modifiedFileCount":"20","status":"M","submitter":"Nick Knize"},{"authorTime":"2020-08-25 01:10:47","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":6,"curCode":"    public void testCoerceParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"coerce\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"coerce\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","date":"2020-08-25 01:10:47","endLine":126,"groupId":"66433","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/79/72c5250d4325af263d43b2cb48ccc974e5c03c.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-08-25 01:10:47","commitOrder":6,"curCode":"    public void testIgnoreZValue() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_point\").field(\"ignore_z_value\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_point\").field(\"ignore_z_value\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2020-08-25 01:10:47","endLine":187,"groupId":"66433","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/a0776b199a5f99e823fbafa9c05611fb8b5411.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_point\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-22 16:11:41","codes":[{"authorDate":"2020-10-22 16:11:41","commitOrder":7,"curCode":"    public void testCoerceParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"coerce\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"coerce\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(false));\n    }\n","date":"2020-10-22 16:11:41","endLine":125,"groupId":"102983","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/1f1ebad3dd8ddb0a3a377034bf3095fbd9cba6.src","preCode":"    public void testCoerceParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"coerce\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n        boolean coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"coerce\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n        coerce = ((GeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-10-22 16:11:41","commitOrder":7,"curCode":"    public void testIgnoreZValue() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_point\").field(\"ignore_z_value\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_point\").field(\"ignore_z_value\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2020-10-22 16:11:41","endLine":204,"groupId":"102983","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/c01f8cc5b376e178d7b71e22071eda236763b8.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_point\").field(\"ignore_z_value\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n        boolean ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_point\").field(\"ignore_z_value\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoPointFieldMapper.class));\n        ignoreZValue = ((GeoPointFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"bfaf3040c6e5245b6d3367483ba86c676dd09bd2","commitMessage":"@@@Convert geo field mappers to Parametrized form (#63836)\n\nRelates to #62988","date":"2020-10-22 16:11:41","modifiedFileCount":"42","status":"M","submitter":"Alan Woodward"}]
