[{"authorTime":"2018-05-14 17:10:33","codes":[{"authorDate":"2018-05-14 17:10:33","commitOrder":1,"curCode":"    public void testMultiMatchQuery() throws IOException {\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\n            \"text_shingle_unigram\");\n        Query query = builder.toQuery(shardContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new MultiMatchQueryBuilder(\"foo bar baz biz\", \"text_shingle\");\n        query = builder.toQuery(shardContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","date":"2018-05-14 17:10:33","endLine":205,"groupId":"68004","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiMatchQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/792e94f733126a9cfaa8400ba1b9511b518ad2.src","preCode":"    public void testMultiMatchQuery() throws IOException {\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\n            \"text_shingle_unigram\");\n        Query query = builder.toQuery(shardContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new MultiMatchQueryBuilder(\"foo bar baz biz\", \"text_shingle\");\n        query = builder.toQuery(shardContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","realPath":"modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/DisableGraphQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"},{"authorDate":"2018-05-14 17:10:33","commitOrder":1,"curCode":"    public void testSimpleQueryString() throws IOException {\n        SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder(\"foo bar baz\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        Query query = builder.toQuery(shardContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz\\\"\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"foo bar baz biz\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz biz\\\"\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","date":"2018-05-14 17:10:33","endLine":231,"groupId":"20805","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleQueryString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/792e94f733126a9cfaa8400ba1b9511b518ad2.src","preCode":"    public void testSimpleQueryString() throws IOException {\n        SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder(\"foo bar baz\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        Query query = builder.toQuery(shardContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz\\\"\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"foo bar baz biz\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz biz\\\"\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","realPath":"modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/DisableGraphQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"}],"commitId":"b08d7c872b45a88ee1d093487d9213462b95033f","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-14 17:10:33","modifiedFileCount":"43","status":"B","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":2,"curCode":"    public void testMultiMatchQuery() throws IOException {\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\n            \"text_shingle_unigram\");\n        Query query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new MultiMatchQueryBuilder(\"foo bar baz biz\", \"text_shingle\");\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","date":"2021-01-15 01:11:59","endLine":206,"groupId":"68004","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiMatchQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/141e5913bac814c6022b639d769560fa3ead37.src","preCode":"    public void testMultiMatchQuery() throws IOException {\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\n            \"text_shingle_unigram\");\n        Query query = builder.toQuery(shardContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new MultiMatchQueryBuilder(\"foo bar baz biz\", \"text_shingle\");\n        query = builder.toQuery(shardContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","realPath":"modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/DisableGraphQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":2,"curCode":"    public void testSimpleQueryString() throws IOException {\n        SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder(\"foo bar baz\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        Query query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz\\\"\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"foo bar baz biz\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz biz\\\"\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","date":"2021-01-15 01:11:59","endLine":232,"groupId":"20805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleQueryString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/141e5913bac814c6022b639d769560fa3ead37.src","preCode":"    public void testSimpleQueryString() throws IOException {\n        SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder(\"foo bar baz\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        Query query = builder.toQuery(shardContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz\\\"\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"foo bar baz biz\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz biz\\\"\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(shardContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","realPath":"modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/DisableGraphQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-02-10 00:56:00","commitOrder":3,"curCode":"    public void testMultiMatchQuery() throws IOException {\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\n            \"text_shingle_unigram\");\n        Query query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder.type(MatchQueryParser.Type.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new MultiMatchQueryBuilder(\"foo bar baz biz\", \"text_shingle\");\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder.type(MatchQueryParser.Type.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","date":"2021-02-10 00:56:00","endLine":195,"groupId":"10698","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testMultiMatchQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8e/fde7e6b1e03a35ce585d55450bb2b1e9d4bafd.src","preCode":"    public void testMultiMatchQuery() throws IOException {\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar baz\",\n            \"text_shingle_unigram\");\n        Query query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new MultiMatchQueryBuilder(\"foo bar baz biz\", \"text_shingle\");\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder.type(MatchQuery.Type.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","realPath":"modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/DisableGraphQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    public void testSimpleQueryString() throws IOException {\n        SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder(\"foo bar baz\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        Query query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz\\\"\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"foo bar baz biz\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz biz\\\"\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","date":"2021-01-15 01:11:59","endLine":232,"groupId":"10698","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleQueryString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/141e5913bac814c6022b639d769560fa3ead37.src","preCode":"    public void testSimpleQueryString() throws IOException {\n        SimpleQueryStringBuilder builder = new SimpleQueryStringBuilder(\"foo bar baz\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        Query query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz\\\"\");\n        builder.field(\"text_shingle_unigram\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQueryWithUnigram, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"foo bar baz biz\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.NONE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedQuery, equalTo(query));\n\n        builder = new SimpleQueryStringBuilder(\"\\\"foo bar baz biz\\\"\");\n        builder.field(\"text_shingle\");\n        builder.flags(SimpleQueryStringFlag.PHRASE);\n        query = builder.toQuery(searchExecutionContext);\n        assertThat(expectedPhraseQuery, equalTo(query));\n    }\n","realPath":"modules/analysis-common/src/test/java/org/elasticsearch/analysis/common/DisableGraphQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"N"}],"commitId":"936abca50a6d1dd68ed69317baa7016c9a66b843","commitMessage":"@@@Rename MatchQuery -> MatchQueryParser. (#68716)\n\nThis commit renames `MatchQuery` to make it clear it's not a query. Its purpose\nis actually to produce Lucene queries through its `parse` method.\n\nIt also renames `MultiMatchQuery` -> `MultiMatchQueryParser`.","date":"2021-02-10 00:56:00","modifiedFileCount":"17","status":"M","submitter":"Julie Tibshirani"}]
