[{"authorTime":"2021-03-04 22:01:13","codes":[{"authorDate":"2021-03-04 22:01:13","commitOrder":1,"curCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\",\n            new GeoIpTaskState.Metadata(0L, 0, 9, \"8a76ac17c58d8f3f2e15e3f1ec37d473\"))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-03-04 22:01:13","endLine":174,"groupId":"27723","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckDatabases_dontCheckDatabaseOnNonIngestNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/2c71764b380a2aa133934f33a1fba4acef92b0.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\",\n            new GeoIpTaskState.Metadata(0L, 0, 9, \"8a76ac17c58d8f3f2e15e3f1ec37d473\"))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2021-03-04 22:01:13","commitOrder":1,"curCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-03-04 22:01:13","endLine":219,"groupId":"60466","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/2c71764b380a2aa133934f33a1fba4acef92b0.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"}],"commitId":"6c35c2508192366d462b8fd5d11038facafc7674","commitMessage":"@@@Add DatabaseRegistry for locally managing databases managed by GeoIpDownloader (#69540)\n\nThis component is responsible for making the databases maintained by GeoIpDownloader\navailable for ingest processors.\n\nAlso provided a lookup mechanism for geoip processors with fallback to {@link LocalDatabases}.\nAll databases are downloaded into a geoip tmp directory.  which is created at node startup.\n\nThe following high level steps are executed after each cluster state update:\n1) Check which databases are available in {@link GeoIpTaskState}. \n   which is part of the geoip downloader persistent task.\n2) For each database check whether the databases have changed\n   by comparing the local and remote md5 hash or are locally missing.\n3) For each database identified in step 2 start downloading the database\n   chunks. Each chunks is appended to a tmp file (inside geoip tmp dir) and\n   after all chunks have been downloaded.  the database is uncompressed and\n   renamed to the final filename. After this the database is loaded and\n   if there is an old instance of this database then that is closed.\n4) Cleanup locally loaded databases that are no longer mentioned in {@link GeoIpTaskState}.\n\nRelates to #68920","date":"2021-03-04 22:01:13","modifiedFileCount":"10","status":"B","submitter":"Martijn van Groningen"},{"authorTime":"2021-03-04 22:01:13","codes":[{"authorDate":"2021-03-10 18:37:05","commitOrder":2,"curCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String md5 = mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\", new GeoIpTaskState.Metadata(0L, 0, 9, md5))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-03-10 18:37:05","endLine":172,"groupId":"43380","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckDatabases_dontCheckDatabaseOnNonIngestNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/1caad55a5462b1f8b83f9d97b70d8260601a62.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\",\n            new GeoIpTaskState.Metadata(0L, 0, 9, \"8a76ac17c58d8f3f2e15e3f1ec37d473\"))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2021-03-04 22:01:13","commitOrder":2,"curCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-03-04 22:01:13","endLine":219,"groupId":"60466","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/2c71764b380a2aa133934f33a1fba4acef92b0.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"}],"commitId":"0c82c4c789cd2e76b7a4de7ecd3edf67893de753","commitMessage":"@@@Fix DatabaseRegistryTests (#70180)\n\nThis test predefined expected md5 hashes in constants.  that were expected with java15.\nHowever java16 creates different md5 hashes and so the expected md5 hashes don't match\nwith the actual md5 hashes.  which caused tests in this test suite to fail (running\nwith java16 only).\n\nThe tests now generates the expected md5 hash during the test instead of using predefined constants.\n\nCloses #69986","date":"2021-03-10 18:37:05","modifiedFileCount":"1","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2021-03-17 20:20:56","codes":[{"authorDate":"2021-03-17 20:20:56","commitOrder":3,"curCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String md5 = mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\", new GeoIpTaskState.Metadata(0L, 0, 9, md5))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\").resolve(\"nodeId\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-03-17 20:20:56","endLine":172,"groupId":"43380","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCheckDatabases_dontCheckDatabaseOnNonIngestNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/0aaec86ef9974bf55c56f19057d3bcf1555418.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String md5 = mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\", new GeoIpTaskState.Metadata(0L, 0, 9, md5))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2021-03-17 20:20:56","commitOrder":3,"curCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\").resolve(\"nodeId\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-03-17 20:20:56","endLine":215,"groupId":"60466","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/0aaec86ef9974bf55c56f19057d3bcf1555418.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"3d3ec5c4fe50d58a033830ee4910fec164103582","commitMessage":"@@@Take the node id into account when creating geoip tmp dir. (#70462)\n\nThis change adjust where the geoip tmp directory is created\nto avoid issues when running multiple nodes on the same machine.\n\nIn the java tmp dir.  a 'geoip-databases' directory is created and\ndirectly under this directory a directory with the node id as name is created.\nThis allows safely running multiple nodes on the same machine (this\nhappens mainly during tests).\n\nCloses #69972\nRelates to #68920","date":"2021-03-17 20:20:56","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2021-03-17 20:20:56","codes":[{"authorDate":"2021-06-18 19:51:12","commitOrder":4,"curCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String md5 = mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\", new GeoIpTaskState.Metadata(0L, 0, 9, md5, 10))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\").resolve(\"nodeId\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-06-18 19:51:12","endLine":192,"groupId":"1087","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCheckDatabases_dontCheckDatabaseOnNonIngestNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/803f5b78d19aff3d4a77fd2a36c90d33bd9151.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseOnNonIngestNode() throws Exception {\n        String md5 = mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n        String taskId = GeoIpDownloader.GEOIP_DOWNLOADER;\n        PersistentTask<?> task = new PersistentTask<>(taskId, GeoIpDownloader.GEOIP_DOWNLOADER, new GeoIpTaskParams(), 1, null);\n        task = new PersistentTask<>(task, new GeoIpTaskState(Map.of(\"GeoIP2-City.mmdb\", new GeoIpTaskState.Metadata(0L, 0, 9, md5))));\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(1L, Map.of(taskId, task));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_name1\", \"_id1\", buildNewFakeTransportAddress(), Map.of(),\n                    Set.of(DiscoveryNodeRole.MASTER_ROLE), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\").resolve(\"nodeId\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2021-03-17 20:20:56","commitOrder":4,"curCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\").resolve(\"nodeId\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","date":"2021-03-17 20:20:56","endLine":215,"groupId":"1087","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/0aaec86ef9974bf55c56f19057d3bcf1555418.src","preCode":"    public void testCheckDatabases_dontCheckDatabaseWhenGeoIpDownloadTask() throws Exception {\n        PersistentTasksCustomMetadata tasksCustomMetadata = new PersistentTasksCustomMetadata(0L, Map.of());\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"name\"))\n            .metadata(Metadata.builder().putCustom(TYPE, tasksCustomMetadata).build())\n            .nodes(new DiscoveryNodes.Builder()\n                .add(new DiscoveryNode(\"_id1\", buildNewFakeTransportAddress(), Version.CURRENT))\n                .localNodeId(\"_id1\"))\n            .routingTable(createIndexRoutingTable())\n            .build();\n\n        mockSearches(\"GeoIP2-City.mmdb\", 0, 9);\n\n        databaseRegistry.checkDatabases(state);\n        assertThat(databaseRegistry.getDatabase(\"GeoIP2-City.mmdb\", false), nullValue());\n        verify(client, never()).search(any());\n        try (Stream<Path> files = Files.list(geoIpTmpDir.resolve(\"geoip-databases\").resolve(\"nodeId\"))) {\n            assertThat(files.collect(Collectors.toList()), empty());\n        }\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/DatabaseRegistryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"N"}],"commitId":"331a44ba425d9ae937a8f49a7f94d8d0a02f3b93","commitMessage":"@@@Change GeoIP downloader policy after 30 days of no updates (#74099)\n\nThis PR changes the way GeoIpDownloader and GeoIpProcessor handle situation when we are unable to update databases for 30 days. In that case:\n\nGeoIpDownloader will delete all chunks from .geoip_databases index\nDatabaseRegistry will delete all files on ingest nodes\nGeoIpProcessor will tag document with tags: [\"_geoip_expired_database\"] field (same way as in Logstash)\nThis change also fixes bug with that breaks DatabaseRegistry and when it tires to download databases after updating timestamp only (GeoIpDownloader checks if there are new databases and updates timestamp because local databases are up to date)","date":"2021-06-18 19:51:12","modifiedFileCount":"15","status":"M","submitter":"Przemko Robakowski"}]
