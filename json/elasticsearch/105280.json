[{"authorTime":"2020-05-04 15:24:35","codes":[{"authorDate":"2019-01-23 01:38:55","commitOrder":3,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n            fieldType.setName(\"field\");\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2019-01-23 01:38:55","endLine":99,"groupId":"5686","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/41583e9458099d6a29aa8e4fbf8edf7784b2f1.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n            fieldType.setName(\"field\");\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"NB"},{"authorDate":"2020-05-04 15:24:35","commitOrder":3,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.Builder(\"number\").fieldType();\n            fieldType.setName(\"field\");\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-05-04 15:24:35","endLine":117,"groupId":"23992","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/e987c46a0db5245bd4e6dfd046e2d09470aafd.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.Builder(\"number\").fieldType();\n            fieldType.setName(\"field\");\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/aggregations/metrics/TDigestPreAggregatedPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"caf6c5ac197415fabfa9737c561aeba66d57c2d6","commitMessage":"@@@Histogram field type support for ValueCount and Avg aggregations (#55933)\n\nImplements value_count and avg aggregations over Histogram fields as discussed in #53285\n\n- value_count returns the sum of all counts array of the histograms\n- avg computes a weighted average of the values array of the histogram by multiplying each value with its associated element in the counts array\n","date":"2020-05-04 15:24:35","modifiedFileCount":"5","status":"M","submitter":"Christos Soulios"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"field\", NumberFieldMapper.NumberType.DOUBLE);\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":111,"groupId":"17687","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/c2bf92373ab5674bfe4f5e9c95665f5020d850.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n            fieldType.setName(\"field\");\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.HistogramFieldType(\"field\", true, Collections.emptyMap());\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":117,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bd/dea56afb376bdb64ae89219ecc843e37f8c9bf.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.Builder(\"number\").fieldType();\n            fieldType.setName(\"field\");\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/aggregations/metrics/TDigestPreAggregatedPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":5,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"field\", NumberFieldMapper.NumberType.DOUBLE);\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":111,"groupId":"17687","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/2acaff2840ab52c9cd409caa5e20b007aec071.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"field\", NumberFieldMapper.NumberType.DOUBLE);\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":5,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.HistogramFieldType(\"field\", true, Collections.emptyMap());\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":117,"groupId":"20274","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/75708122ef1e0600b3c37bdebb916c3d7d602b.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.HistogramFieldType(\"field\", true, Collections.emptyMap());\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = search(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/aggregations/metrics/TDigestPreAggregatedPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-29 21:37:33","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":6,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"field\", NumberFieldMapper.NumberType.DOUBLE);\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":111,"groupId":"17687","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/2acaff2840ab52c9cd409caa5e20b007aec071.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"field\", NumberFieldMapper.NumberType.DOUBLE);\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2020-09-29 21:37:33","commitOrder":6,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.HistogramFieldType(\"field\", Collections.emptyMap());\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-09-29 21:37:33","endLine":117,"groupId":"20274","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/56fd051cb484a4aecc375ecb63f71778f35336.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.HistogramFieldType(\"field\", true, Collections.emptyMap());\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/aggregations/metrics/TDigestPreAggregatedPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"7ee52140b758448dfd043234e2d5eb69087e5b86","commitMessage":"@@@Convert percolator.  murmur3 and histogram mappers to parametrized form (#63004)\n\nRelates to #62988","date":"2020-09-29 21:37:33","modifiedFileCount":"17","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-02 02:38:22","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":7,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"field\", NumberFieldMapper.NumberType.DOUBLE);\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":111,"groupId":"105280","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/2acaff2840ab52c9cd409caa5e20b007aec071.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            for (double value : new double[] {3, 0.2, 10}) {\n                Document doc = new Document();\n                doc.add(new SortedNumericDocValuesField(\"field\", NumericUtils.doubleToSortableLong(value)));\n                w.addDocument(doc);\n            }\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[]{0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"field\", NumberFieldMapper.NumberType.DOUBLE);\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2020-10-02 02:38:22","commitOrder":7,"curCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(histogramFieldDocValues(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.HistogramFieldType(\"field\", Collections.emptyMap());\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","date":"2020-10-02 02:38:22","endLine":95,"groupId":"105280","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bf/e5f493c1c46812222b35667ae014bdfeb008d5.src","preCode":"    public void testSimple() throws IOException {\n        try (Directory dir = newDirectory();\n                RandomIndexWriter w = new RandomIndexWriter(random(), dir)) {\n            Document doc = new Document();\n            doc.add(getDocValue(\"field\", new double[] {3, 0.2, 10}));\n            w.addDocument(doc);\n\n            PercentileRanksAggregationBuilder aggBuilder = new PercentileRanksAggregationBuilder(\"my_agg\", new double[] {0.1, 0.5, 12})\n                    .field(\"field\")\n                    .method(PercentilesMethod.TDIGEST);\n            MappedFieldType fieldType = new HistogramFieldMapper.HistogramFieldType(\"field\", Collections.emptyMap());\n            try (IndexReader reader = w.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                PercentileRanks ranks = searchAndReduce(searcher, new MatchAllDocsQuery(), aggBuilder, fieldType);\n                Iterator<Percentile> rankIterator = ranks.iterator();\n                Percentile rank = rankIterator.next();\n                assertEquals(0.1, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                rank = rankIterator.next();\n                assertEquals(0.5, rank.getValue(), 0d);\n                assertThat(rank.getPercent(), Matchers.greaterThan(0d));\n                assertThat(rank.getPercent(), Matchers.lessThan(100d));\n                rank = rankIterator.next();\n                assertEquals(12, rank.getValue(), 0d);\n                \r\n                \r\n                \r\n                assertFalse(rankIterator.hasNext());\n                assertTrue(AggregationInspectionHelper.hasValue(((InternalTDigestPercentileRanks)ranks)));\n            }\n        }\n    }\n","realPath":"x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/aggregations/metrics/TDigestPreAggregatedPercentileRanksAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"c3101a339ffaa4fc9d61aca10a90c6a2f4c98398","commitMessage":"@@@Extract histogramFieldDocValues into an utility class (#63100)\n\nThis function will be needed in the upcoming rate aggs tests.","date":"2020-10-02 02:38:22","modifiedFileCount":"8","status":"M","submitter":"Igor Motov"}]
