[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testScaleUp() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final ThreadBarrier barrier = new ThreadBarrier(max + 1);\n\n        ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), randomTimeUnit(), EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    latch.countDown();\n                    try {\n                        barrier.await();\n                        barrier.await();\n                    } catch (Exception e) {\n                        barrier.reset(e);\n                    }\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        terminate(pool);\n    }\n","date":"2018-04-26 03:22:53","endLine":204,"groupId":"16036","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/6152d98962f2a73ef398ac47d6218fbebc7862.src","preCode":"    public void testScaleUp() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final ThreadBarrier barrier = new ThreadBarrier(max + 1);\n\n        ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), randomTimeUnit(), EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    latch.countDown();\n                    try {\n                        barrier.await();\n                        barrier.await();\n                    } catch (Exception e) {\n                        barrier.reset(e);\n                    }\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        terminate(pool);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testScaleDown() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final ThreadBarrier barrier = new ThreadBarrier(max + 1);\n\n        final ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), TimeUnit.MILLISECONDS, EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    latch.countDown();\n                    try {\n                        barrier.await();\n                        barrier.await();\n                    } catch (Exception e) {\n                        barrier.reset(e);\n                    }\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        assertBusy(() -> {\n            assertThat(\"wrong active count\", pool.getActiveCount(), equalTo(0));\n            assertThat(\"idle threads didn't shrink below max. (\" + pool.getPoolSize() + \")\", pool.getPoolSize(), lessThan(max));\n        });\n        terminate(pool);\n    }\n","date":"2018-04-26 03:22:53","endLine":245,"groupId":"72825","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScaleDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/6152d98962f2a73ef398ac47d6218fbebc7862.src","preCode":"    public void testScaleDown() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final ThreadBarrier barrier = new ThreadBarrier(max + 1);\n\n        final ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), TimeUnit.MILLISECONDS, EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    latch.countDown();\n                    try {\n                        barrier.await();\n                        barrier.await();\n                    } catch (Exception e) {\n                        barrier.reset(e);\n                    }\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        assertBusy(() -> {\n            assertThat(\"wrong active count\", pool.getActiveCount(), equalTo(0));\n            assertThat(\"idle threads didn't shrink below max. (\" + pool.getPoolSize() + \")\", pool.getPoolSize(), lessThan(max));\n        });\n        terminate(pool);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-01-24 20:52:22","codes":[{"authorDate":"2019-01-24 20:52:22","commitOrder":2,"curCode":"    public void testScaleUp() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final CyclicBarrier barrier = new CyclicBarrier(max + 1);\n\n        ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), randomTimeUnit(),\n                    EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(() -> {\n                latch.countDown();\n                try {\n                    barrier.await();\n                    barrier.await();\n                } catch (Exception e) {\n                    throw new AssertionError(e);\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        terminate(pool);\n    }\n","date":"2019-01-24 20:52:22","endLine":203,"groupId":"104108","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testScaleUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/31/09473d56616d2290466d15838d60f7d208bd02.src","preCode":"    public void testScaleUp() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final ThreadBarrier barrier = new ThreadBarrier(max + 1);\n\n        ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), randomTimeUnit(),\n                    EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    latch.countDown();\n                    try {\n                        barrier.await();\n                        barrier.await();\n                    } catch (Exception e) {\n                        barrier.reset(e);\n                    }\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        terminate(pool);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2019-01-24 20:52:22","commitOrder":2,"curCode":"    public void testScaleDown() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final CyclicBarrier barrier = new CyclicBarrier(max + 1);\n\n        final ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), TimeUnit.MILLISECONDS,\n                    EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(() -> {\n                latch.countDown();\n                try {\n                    barrier.await();\n                    barrier.await();\n                } catch (Exception e) {\n                    throw new AssertionError(e);\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        assertBusy(() -> {\n            assertThat(\"wrong active count\", pool.getActiveCount(), equalTo(0));\n            assertThat(\"idle threads didn't shrink below max. (\" + pool.getPoolSize() + \")\", pool.getPoolSize(), lessThan(max));\n        });\n        terminate(pool);\n    }\n","date":"2019-01-24 20:52:22","endLine":242,"groupId":"104108","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScaleDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/31/09473d56616d2290466d15838d60f7d208bd02.src","preCode":"    public void testScaleDown() throws Exception {\n        final int min = between(1, 3);\n        final int max = between(min + 1, 6);\n        final ThreadBarrier barrier = new ThreadBarrier(max + 1);\n\n        final ThreadPoolExecutor pool =\n                EsExecutors.newScaling(getClass().getName() + \"/\" + getTestName(), min, max, between(1, 100), TimeUnit.MILLISECONDS,\n                    EsExecutors.daemonThreadFactory(\"test\"), threadContext);\n        assertThat(\"Min property\", pool.getCorePoolSize(), equalTo(min));\n        assertThat(\"Max property\", pool.getMaximumPoolSize(), equalTo(max));\n\n        for (int i = 0; i < max; ++i) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            pool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    latch.countDown();\n                    try {\n                        barrier.await();\n                        barrier.await();\n                    } catch (Exception e) {\n                        barrier.reset(e);\n                    }\n                }\n            });\n\n            \r\n            \r\n            latch.await();\n        }\n\n        barrier.await();\n        assertThat(\"wrong pool size\", pool.getPoolSize(), equalTo(max));\n        assertThat(\"wrong active size\", pool.getActiveCount(), equalTo(max));\n        barrier.await();\n        assertBusy(() -> {\n            assertThat(\"wrong active count\", pool.getActiveCount(), equalTo(0));\n            assertThat(\"idle threads didn't shrink below max. (\" + pool.getPoolSize() + \")\", pool.getPoolSize(), lessThan(max));\n        });\n        terminate(pool);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"c7b16162ae456ca6d06cafc2435cfff1d00c1998","commitMessage":"@@@Remove unused ThreadBarrier class (#37666)\n\nThis class is pretty complex and only used in a test where we can simply\nfail the test with an assertion error.","date":"2019-01-24 20:52:22","modifiedFileCount":"1","status":"M","submitter":"Simon Willnauer"}]
