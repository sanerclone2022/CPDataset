[{"authorTime":"2019-03-28 01:03:30","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","date":"2018-04-26 03:22:53","endLine":183,"groupId":"53593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/88db6c12ce07360038de2bbe2e22bc9c46de46.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"NB"},{"authorDate":"2019-03-28 01:03:30","commitOrder":2,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        final MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setOccur(operator.toBooleanClauseOccur());\n        matchQuery.setFuzziness(fuzziness);\n        matchQuery.setFuzzyPrefixLength(prefixLength);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setTranspositions(fuzzyTranspositions);\n        matchQuery.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(fuzzyRewrite, null, LoggingDeprecationHandler.INSTANCE));\n\n        final Query query = matchQuery.parse(MatchQuery.Type.BOOLEAN_PREFIX, fieldName, value);\n        return Queries.maybeApplyMinimumShouldMatch(query, minimumShouldMatch);\n    }\n","date":"2019-03-28 01:03:30","endLine":367,"groupId":"450","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/0c89f9df4997929849313473e061f02ce0dfb0.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        final MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setOccur(operator.toBooleanClauseOccur());\n        matchQuery.setFuzziness(fuzziness);\n        matchQuery.setFuzzyPrefixLength(prefixLength);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setTranspositions(fuzzyTranspositions);\n        matchQuery.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(fuzzyRewrite, null, LoggingDeprecationHandler.INSTANCE));\n\n        final Query query = matchQuery.parse(MatchQuery.Type.BOOLEAN_PREFIX, fieldName, value);\n        return Queries.maybeApplyMinimumShouldMatch(query, minimumShouldMatch);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchBoolPrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"B"}],"commitId":"6bba9fc83bc30d29c67e66e8e4c70f4dcc3b7494","commitMessage":"@@@search as you type fieldmapper (#35600)\n\nAdds the search_as_you_type field type that acts like a text field optimized\nfor as-you-type search completion. It creates a couple subfields that analyze\nthe indexed terms as shingles.  against which full terms are queried.  and a\nprefix subfield that analyze terms as the largest shingle size used and\nedge-ngrams.  against which partial terms are queried\n\nAdds a match_bool_prefix query type that creates a boolean clause of a term\nquery for each term except the last.  for which a boolean clause with a prefix\nquery is created.\n\nThe match_bool_prefix query is the recommended way of querying a search as you\ntype field.  which will boil down to term queries for each shingle of the input\ntext on the appropriate shingle field.  and the final (possibly partial) term\nas a term query on the prefix field. This field type also supports phrase and\nphrase prefix queries however\n","date":"2019-03-28 01:03:30","modifiedFileCount":"10","status":"M","submitter":"Andy Bristol"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","date":"2021-01-15 01:11:59","endLine":178,"groupId":"53593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/bcfd055c137a6b95fcd4f338a9f3eedaea88a9.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        final MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setOccur(operator.toBooleanClauseOccur());\n        matchQuery.setFuzziness(fuzziness);\n        matchQuery.setFuzzyPrefixLength(prefixLength);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setTranspositions(fuzzyTranspositions);\n        matchQuery.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(fuzzyRewrite, null, LoggingDeprecationHandler.INSTANCE));\n\n        final Query query = matchQuery.parse(MatchQuery.Type.BOOLEAN_PREFIX, fieldName, value);\n        return Queries.maybeApplyMinimumShouldMatch(query, minimumShouldMatch);\n    }\n","date":"2021-01-15 01:11:59","endLine":367,"groupId":"450","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/97/67b66977b1145667758f12b4d83da06cb1b122.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        final MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setOccur(operator.toBooleanClauseOccur());\n        matchQuery.setFuzziness(fuzziness);\n        matchQuery.setFuzzyPrefixLength(prefixLength);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setTranspositions(fuzzyTranspositions);\n        matchQuery.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(fuzzyRewrite, null, LoggingDeprecationHandler.INSTANCE));\n\n        final Query query = matchQuery.parse(MatchQuery.Type.BOOLEAN_PREFIX, fieldName, value);\n        return Queries.maybeApplyMinimumShouldMatch(query, minimumShouldMatch);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchBoolPrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-02-10 00:56:00","codes":[{"authorDate":"2021-02-10 00:56:00","commitOrder":4,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQueryParser queryParser = new MatchQueryParser(context);\n        if (analyzer != null) {\n            queryParser.setAnalyzer(analyzer);\n        }\n        queryParser.setPhraseSlop(slop);\n        queryParser.setZeroTermsQuery(zeroTermsQuery);\n\n        return queryParser.parse(MatchQueryParser.Type.PHRASE, fieldName, value);\n    }\n","date":"2021-02-10 00:56:00","endLine":167,"groupId":"107868","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/568a594ada4a96dbd84ce1e610bab82b6c8f58.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2021-02-10 00:56:00","commitOrder":4,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        final MatchQueryParser queryParser = new MatchQueryParser(context);\n        if (analyzer != null) {\n            queryParser.setAnalyzer(analyzer);\n        }\n        queryParser.setOccur(operator.toBooleanClauseOccur());\n        queryParser.setFuzziness(fuzziness);\n        queryParser.setFuzzyPrefixLength(prefixLength);\n        queryParser.setMaxExpansions(maxExpansions);\n        queryParser.setTranspositions(fuzzyTranspositions);\n        queryParser.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(fuzzyRewrite, null, LoggingDeprecationHandler.INSTANCE));\n\n        final Query query = queryParser.parse(MatchQueryParser.Type.BOOLEAN_PREFIX, fieldName, value);\n        return Queries.maybeApplyMinimumShouldMatch(query, minimumShouldMatch);\n    }\n","date":"2021-02-10 00:56:00","endLine":356,"groupId":"107868","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/cb91ee58a6f27f3d24780b0bbf384a4fb23db4.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        final MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setOccur(operator.toBooleanClauseOccur());\n        matchQuery.setFuzziness(fuzziness);\n        matchQuery.setFuzzyPrefixLength(prefixLength);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setTranspositions(fuzzyTranspositions);\n        matchQuery.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(fuzzyRewrite, null, LoggingDeprecationHandler.INSTANCE));\n\n        final Query query = matchQuery.parse(MatchQuery.Type.BOOLEAN_PREFIX, fieldName, value);\n        return Queries.maybeApplyMinimumShouldMatch(query, minimumShouldMatch);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchBoolPrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"}],"commitId":"936abca50a6d1dd68ed69317baa7016c9a66b843","commitMessage":"@@@Rename MatchQuery -> MatchQueryParser. (#68716)\n\nThis commit renames `MatchQuery` to make it clear it's not a query. Its purpose\nis actually to produce Lucene queries through its `parse` method.\n\nIt also renames `MultiMatchQuery` -> `MultiMatchQueryParser`.","date":"2021-02-10 00:56:00","modifiedFileCount":"17","status":"M","submitter":"Julie Tibshirani"}]
