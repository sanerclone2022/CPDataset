[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","date":"2018-04-26 03:22:53","endLine":183,"groupId":"53593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/88db6c12ce07360038de2bbe2e22bc9c46de46.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setMaxExpansions(maxExpansions);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","date":"2018-04-26 03:22:53","endLine":178,"groupId":"53593","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/90ba5ae575b74ffca5d53b6b61f18ce390db80.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setMaxExpansions(maxExpansions);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-07-20 22:44:31","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","date":"2018-04-26 03:22:53","endLine":183,"groupId":"53593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/88db6c12ce07360038de2bbe2e22bc9c46de46.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"N"},{"authorDate":"2020-07-20 22:44:31","commitOrder":2,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","date":"2020-07-20 22:44:31","endLine":208,"groupId":"53593","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/e41a94ddc3674ea8d3b0c46189789e79ba5ba4.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setMaxExpansions(maxExpansions);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"2c5c478875ee5e7534a13fe8c88368602a7ff437","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-20 22:44:31","modifiedFileCount":"143","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","date":"2021-01-15 01:11:59","endLine":178,"groupId":"53593","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/bcfd055c137a6b95fcd4f338a9f3eedaea88a9.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","date":"2021-01-15 01:11:59","endLine":208,"groupId":"53593","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/9349cb6ecb9d7767dc5095fc70cfcb42a0115c.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-02-10 00:56:00","codes":[{"authorDate":"2021-02-10 00:56:00","commitOrder":4,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQueryParser queryParser = new MatchQueryParser(context);\n        if (analyzer != null) {\n            queryParser.setAnalyzer(analyzer);\n        }\n        queryParser.setPhraseSlop(slop);\n        queryParser.setZeroTermsQuery(zeroTermsQuery);\n\n        return queryParser.parse(MatchQueryParser.Type.PHRASE, fieldName, value);\n    }\n","date":"2021-02-10 00:56:00","endLine":167,"groupId":"107869","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/568a594ada4a96dbd84ce1e610bab82b6c8f58.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2021-02-10 00:56:00","commitOrder":4,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQueryParser queryParser = new MatchQueryParser(context);\n        if (analyzer != null) {\n            queryParser.setAnalyzer(analyzer);\n        }\n        queryParser.setPhraseSlop(slop);\n        queryParser.setMaxExpansions(maxExpansions);\n        queryParser.setZeroTermsQuery(zeroTermsQuery);\n\n        return queryParser.parse(MatchQueryParser.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","date":"2021-02-10 00:56:00","endLine":197,"groupId":"107869","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/c7896bd730eb8afa5ce90ee9420e3989441688.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        \r\n        if (analyzer != null && context.getIndexAnalyzers().get(analyzer) == null) {\n            throw new QueryShardException(context, \"[\" + NAME + \"] analyzer [\" + analyzer + \"] not found\");\n        }\n\n        MatchQuery matchQuery = new MatchQuery(context);\n        if (analyzer != null) {\n            matchQuery.setAnalyzer(analyzer);\n        }\n        matchQuery.setPhraseSlop(slop);\n        matchQuery.setMaxExpansions(maxExpansions);\n        matchQuery.setZeroTermsQuery(zeroTermsQuery);\n\n        return matchQuery.parse(MatchQuery.Type.PHRASE_PREFIX, fieldName, value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"936abca50a6d1dd68ed69317baa7016c9a66b843","commitMessage":"@@@Rename MatchQuery -> MatchQueryParser. (#68716)\n\nThis commit renames `MatchQuery` to make it clear it's not a query. Its purpose\nis actually to produce Lucene queries through its `parse` method.\n\nIt also renames `MultiMatchQuery` -> `MultiMatchQueryParser`.","date":"2021-02-10 00:56:00","modifiedFileCount":"17","status":"M","submitter":"Julie Tibshirani"}]
