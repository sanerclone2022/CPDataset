[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":183,"groupId":"1290","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/6a9d093d12a90c8f66d4034ecb84944811a013.src","preCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true).startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2018-04-26 03:22:53","endLine":287,"groupId":"1291","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/6a9d093d12a90c8f66d4034ecb84944811a013.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true).startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-10-03 23:11:28","codes":[{"authorDate":"2018-10-03 23:11:28","commitOrder":2,"curCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2018-10-03 23:11:28","endLine":185,"groupId":"2346","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/e0894186a069c78e39ec31d0ed525536f6d3df.src","preCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2018-10-03 23:11:28","commitOrder":2,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true).startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2018-10-03 23:11:28","endLine":289,"groupId":"3063","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/e0894186a069c78e39ec31d0ed525536f6d3df.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true).startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\").startArray(\"nested2\").startObject().field(\"field2\", \"2\").endObject().startObject().field(\"field2\", \"3\").endObject().endArray().endObject()\n                        .startObject().field(\"field1\", \"4\").startArray(\"nested2\").startObject().field(\"field2\", \"5\").endObject().startObject().field(\"field2\", \"6\").endObject().endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"90c55f5e36ddc9d7cbf2fcde8e88027db8a5e060","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-10-03 23:11:28","modifiedFileCount":"33","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2018-12-25 03:06:50","endLine":196,"groupId":"2346","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/f41589fb1fd31145149d4dad6ac70e5ed84248.src","preCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2018-12-25 03:06:50","endLine":320,"groupId":"3063","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/f41589fb1fd31145149d4dad6ac70e5ed84248.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":195,"groupId":"2346","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/dee44f2fa7bc9d632c7889796a49c55a73a4ef.src","preCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2019-10-15 16:05:29","endLine":319,"groupId":"3063","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/dee44f2fa7bc9d632c7889796a49c55a73a4ef.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-20 21:03:25","codes":[{"authorDate":"2020-10-20 21:03:25","commitOrder":5,"curCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2020-10-20 21:03:25","endLine":196,"groupId":"2346","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/0151f39d4cc86011ab4729ec87a52e0ede0b98.src","preCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-10-20 21:03:25","commitOrder":5,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2020-10-20 21:03:25","endLine":320,"groupId":"3063","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/0151f39d4cc86011ab4729ec87a52e0ede0b98.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"04200361f4fb2e17203612020ef4e379a53aef70","commitMessage":"@@@Remove two redundant DocumentMapper methods (#63922)\n\nDocumentMapper exposes field types and object mappers through specific getter methods.  that call the corresponding getters exposed by MappingLookup. MappingLookup is though exposed directly by DocumentMapper.  hence there is no need for additional methods other than the one to retrieve the mapping lookup object.\n","date":"2020-10-20 21:03:25","modifiedFileCount":"10","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-10-21 02:11:29","codes":[{"authorDate":"2020-10-21 02:11:29","commitOrder":6,"curCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2020-10-21 02:11:29","endLine":193,"groupId":"2346","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/62/bc263d0886a14ab1cdb90ddce21f744a428faf.src","preCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-10-21 02:11:29","commitOrder":6,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2020-10-21 02:11:29","endLine":315,"groupId":"3063","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/62/bc263d0886a14ab1cdb90ddce21f744a428faf.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"}],"commitId":"b96f26eba2049ffafb3197fbbb1942b3cdf8733a","commitMessage":"@@@Remove documentMapperParser method from MapperService (#63938)\n\nMapperService allows to retrieve its internal DocumentMapperParser instance. Such method is only used in tests.  and always to parse mappings which is already exposed by MapperService through a specific parse method.\n\nThis commit removes the getter for DocumentMapperParser from MapperService in favour of calling MapperService#parse","date":"2020-10-21 02:11:29","modifiedFileCount":"27","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-11-05 01:48:32","codes":[{"authorDate":"2020-11-05 01:48:32","commitOrder":7,"curCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2020-11-05 01:48:32","endLine":174,"groupId":"2346","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testMultiNested() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\")\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2020-11-05 01:48:32","commitOrder":7,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2020-11-05 01:48:32","endLine":315,"groupId":"3063","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\")\n                .startObject(\"nested1\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .startObject(\"properties\")\n                .startObject(\"nested2\").field(\"type\", \"nested\").field(\"include_in_parent\", true)\n                .endObject().endObject().endObject()\n                .endObject().endObject().endObject());\n\n        DocumentMapper docMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"63b96c0d7ce90d78eace02e507ca8b52321acb68","commitMessage":"@@@Convert some object mapper testcases to use MapperServiceTestCase (#64543)\n\n","date":"2020-11-05 01:48:32","modifiedFileCount":"3","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-01-13 22:41:39","codes":[{"authorDate":"2021-01-13 22:41:39","commitOrder":8,"curCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2021-01-13 22:41:39","endLine":174,"groupId":"2346","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/3ea7660b88547cb6c6fb6abf8cb0400bc1d232.src","preCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2021-01-13 22:41:39","commitOrder":8,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2021-01-13 22:41:39","endLine":315,"groupId":"3063","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/3ea7660b88547cb6c6fb6abf8cb0400bc1d232.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.hasNestedObjects(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"d7761bf4d6323dc08620e634b2c2c5799158c06c","commitMessage":"@@@Use a mapping snapshot for fetching nested docs (#66877)\n\nThis uses the mapping snapshot that we built for the search phase\nin #66295 for fetching nested documents. This is simpler to reason about\nbecause the mapping snapshot is immutable.\n\n","date":"2021-01-13 22:41:39","modifiedFileCount":"13","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-06-08 06:05:30","codes":[{"authorDate":"2021-06-08 06:05:30","commitOrder":9,"curCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper1 = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper1, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper1;\n        assertThat(nested1Mapper.isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.isIncludeInRoot(), equalTo(false));\n        ObjectMapper mapper2 = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(mapper2, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested2Mapper = (NestedObjectMapper) mapper2;\n        assertThat(nested2Mapper.isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2021-06-08 06:05:30","endLine":168,"groupId":"2346","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/68338445e5d51266706810a7f14c6f9b5a1b85.src","preCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2021-06-08 06:05:30","commitOrder":9,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper1 = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper1, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper1;\n        assertThat(nested1Mapper.isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.isIncludeInRoot(), equalTo(false));\n        ObjectMapper mapper2 = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(mapper2, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested2Mapper = (NestedObjectMapper) mapper2;\n        assertThat(nested2Mapper.isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2021-06-08 06:05:30","endLine":313,"groupId":"3063","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/68338445e5d51266706810a7f14c6f9b5a1b85.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"ad111598867545d0dbeae60c6d24dfcd502c0c26","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-08 06:05:30","modifiedFileCount":"156","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":10,"curCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2021-06-17 05:31:31","endLine":163,"groupId":"2346","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/d10f6aa3f3bc80209d9bc55f3560efd9b0b7ab.src","preCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper1 = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper1, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper1;\n        assertThat(nested1Mapper.isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.isIncludeInRoot(), equalTo(false));\n        ObjectMapper mapper2 = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(mapper2, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested2Mapper = (NestedObjectMapper) mapper2;\n        assertThat(nested2Mapper.isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":10,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2021-06-17 05:31:31","endLine":304,"groupId":"3063","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/d10f6aa3f3bc80209d9bc55f3560efd9b0b7ab.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper1 = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper1, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper1;\n        assertThat(nested1Mapper.isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.isIncludeInRoot(), equalTo(false));\n        ObjectMapper mapper2 = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(mapper2, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested2Mapper = (NestedObjectMapper) mapper2;\n        assertThat(nested2Mapper.isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-07-19 16:44:48","codes":[{"authorDate":"2021-07-19 16:44:48","commitOrder":11,"curCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper1 = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper1, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper1;\n        assertThat(nested1Mapper.isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.isIncludeInRoot(), equalTo(false));\n        ObjectMapper mapper2 = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(mapper2, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested2Mapper = (NestedObjectMapper) mapper2;\n        assertThat(nested2Mapper.isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","date":"2021-07-19 16:44:48","endLine":168,"groupId":"103200","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"testMultiNested","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/a31bc81b3f1eecf82398149bfffe679cbd33ec.src","preCode":"    public void testMultiNested() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(false));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                            .startObject().field(\"field1\", \"1\").startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray()\n                        .endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"nested1.nested2.field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2021-07-19 16:44:48","commitOrder":11,"curCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper mapper1 = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(mapper1, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested1Mapper = (NestedObjectMapper) mapper1;\n        assertThat(nested1Mapper.isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.isIncludeInRoot(), equalTo(false));\n        ObjectMapper mapper2 = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(mapper2, instanceOf(NestedObjectMapper.class));\n        NestedObjectMapper nested2Mapper = (NestedObjectMapper) mapper2;\n        assertThat(nested2Mapper.isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","date":"2021-07-19 16:44:48","endLine":313,"groupId":"103200","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"testMultiObjectAndNested2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/a31bc81b3f1eecf82398149bfffe679cbd33ec.src","preCode":"    public void testMultiObjectAndNested2() throws Exception {\n        DocumentMapper docMapper = createDocumentMapper(mapping(b -> {\n            b.startObject(\"nested1\");\n            {\n                b.field(\"type\", \"nested\");\n                b.field(\"include_in_parent\", true);\n                b.startObject(\"properties\");\n                {\n                    b.startObject(\"nested2\");\n                    {\n                        b.field(\"type\", \"nested\");\n                        b.field(\"include_in_parent\", true);\n                    }\n                    b.endObject();\n                }\n                b.endObject();\n            }\n            b.endObject();\n        }));\n\n        assertThat(docMapper.mappers().hasNested(), equalTo(true));\n        ObjectMapper nested1Mapper = docMapper.mappers().objectMappers().get(\"nested1\");\n        assertThat(nested1Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested1Mapper.nested().isIncludeInRoot(), equalTo(false));\n        ObjectMapper nested2Mapper = docMapper.mappers().objectMappers().get(\"nested1.nested2\");\n        assertThat(nested2Mapper.nested().isNested(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInParent(), equalTo(true));\n        assertThat(nested2Mapper.nested().isIncludeInRoot(), equalTo(false));\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"value\")\n                        .startArray(\"nested1\")\n                        .startObject().field(\"field1\", \"1\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"2\").endObject()\n                            .startObject().field(\"field2\", \"3\").endObject()\n                        .endArray().endObject()\n                        .startObject().field(\"field1\", \"4\")\n                        .startArray(\"nested2\")\n                            .startObject().field(\"field2\", \"5\").endObject()\n                            .startObject().field(\"field2\", \"6\").endObject()\n                        .endArray().endObject()\n                        .endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.docs().size(), equalTo(7));\n        assertThat(doc.docs().get(0).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(0).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(0).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"nested1.nested2.field2\"), equalTo(\"3\"));\n        assertThat(doc.docs().get(1).get(\"nested1.field1\"), nullValue());\n        assertThat(doc.docs().get(1).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(2).get(\"nested1.field1\"), equalTo(\"1\"));\n        assertThat(doc.docs().get(2).get(\"nested1.nested2.field2\"), equalTo(\"2\"));\n        assertThat(doc.docs().get(2).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(3).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(3).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(4).get(\"nested1.nested2.field2\"), equalTo(\"6\"));\n        assertThat(doc.docs().get(4).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(5).get(\"nested1.field1\"), equalTo(\"4\"));\n        assertThat(doc.docs().get(5).get(\"nested1.nested2.field2\"), equalTo(\"5\"));\n        assertThat(doc.docs().get(5).get(\"field\"), nullValue());\n        assertThat(doc.docs().get(6).get(\"field\"), equalTo(\"value\"));\n        assertThat(doc.docs().get(6).getFields(\"nested1.field1\").length, equalTo(2));\n        assertThat(doc.docs().get(6).getFields(\"nested1.nested2.field2\").length, equalTo(4));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"cf575f4766e3b3d7a58698be0d91559664f1bd80","commitMessage":"@@@Make NestedObjectMapper its own class (#74410)\n\nNested objects are implemented via a Nested class directly on object mappers. \neven though nested and non-nested objects have quite different semantics. In\naddition.  most call-sites that need to get an object mapper in fact need a nested\nobject mapper. To make it clearer that nested and object mappers are different\nbeasts with different implementations and different requirements.  we should\nsplit them into different classes.","date":"2021-07-19 16:44:48","modifiedFileCount":"39","status":"M","submitter":"Alan Woodward"}]
