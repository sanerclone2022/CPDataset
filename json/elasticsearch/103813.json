[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.HTTP_ENABLED.getKey(), false)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-04-26 03:22:53","endLine":161,"groupId":"7828","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/4823791d5cd2f6157a8c433b8c1dd42231651c.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.HTTP_ENABLED.getKey(), false)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(NetworkModule.HTTP_ENABLED.getKey(), false)\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins);\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","date":"2018-04-26 03:22:53","endLine":202,"groupId":"61560","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/27f1a6b3631dc802accc2ca5380ca9b1195519.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(NetworkModule.HTTP_ENABLED.getKey(), false)\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins);\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-05-03 15:54:15","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":2,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.HTTP_ENABLED.getKey(), false)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2018-05-03 15:54:15","commitOrder":2,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins);\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","date":"2018-05-03 15:54:15","endLine":209,"groupId":"63260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/4243d2b22c7d3d7d1655fdac4907765ab0463f.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(NetworkModule.HTTP_ENABLED.getKey(), false)\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins);\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"6546535a8b2dad3f4d1a776d6ca98ebde2f465ae","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-03 15:54:15","modifiedFileCount":"266","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-07-18 18:41:23","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":3,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2018-07-18 18:41:23","commitOrder":3,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins);\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","date":"2018-07-18 18:41:23","endLine":212,"groupId":"65166","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/33f56dea94167de00ada4c5ff20410a993aeb3.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins);\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"6c77449a87764147099b1e35c0ec191de3202d7a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-18 18:41:23","modifiedFileCount":"222","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-05 16:48:48","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":4,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2018-09-05 16:48:48","commitOrder":4,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","date":"2018-09-05 16:48:48","endLine":221,"groupId":"65166","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/3520f91b3e35150be7233a156fa73abb396bde.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins);\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"f00a28a909be71e17f0d1bc4c4a6ee15c5fdd0cb","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-05 16:48:48","modifiedFileCount":"122","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-13 16:46:14","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":5,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2018-09-13 16:46:14","commitOrder":5,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey()) \r\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","date":"2018-09-13 16:46:14","endLine":223,"groupId":"65166","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/aa4e8303f53e1c8c1b8dbe22877991b2f8b237.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"8e59de3eb2df9915e4878702fbd3edd55d019ffa","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-13 16:46:14","modifiedFileCount":"189","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-12-06 15:31:46","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":6,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2018-12-06 15:31:46","commitOrder":6,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(TestZenDiscovery.USE_ZEN2.getKey(), getUseZen2())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey()) \r\n            .put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), 1)\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2018-12-06 15:31:46","endLine":226,"groupId":"69754","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/bb5da14dbb49298cec86f0c06dd3e265db0504.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey()) \r\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node build = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            build.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return build;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"ee05ef131286eead295cf58ed4393af56f0d7ade","commitMessage":"@@@Merge branch 'zen2'\n","date":"2018-12-06 15:31:46","modifiedFileCount":"122","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2018-12-20 22:20:33","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":7,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2018-12-20 22:20:33","commitOrder":7,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(TestZenDiscovery.USE_ZEN2.getKey(), getUseZen2())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2018-12-20 22:20:33","endLine":229,"groupId":"69754","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/aa1c2107d5a463b9d4521fb2da1a35b6e31df1.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(\"node.name\", \"node_s_0\")\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(TestZenDiscovery.USE_ZEN2.getKey(), getUseZen2())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey()) \r\n            .put(INITIAL_MASTER_NODE_COUNT_SETTING.getKey(), 1)\n            .put(nodeSettings()) \r\n            .build();\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"ca92d74e7e7102ffe52a9b2d6db3c89696b6dc67","commitMessage":"@@@[Zen2] Change unsafe bootstrap nodes count to nodes list in tests (#36559)\n\nThis commit modifies ESSingleNodeTestCase and ESIntegTestCase and\nseveral concrete test classes to use node names when bootstrapping the\ncluster.\n\nToday ClusterBootstrapService.INITIAL_MASTER_NODE_COUNT_SETTING\nsetting is used to bootstrap clusters in tests. Instead.  we want to use\nClusterBootrstapService.INITIAL_MASTER_NODES_SETTING and get rid of\nthe former setting eventually.\n\nThere were two main problems when refactoring InternalTestCluster:\n\n1. Nodes are created one-by-one in buildNode method. And node.name\nis created in this method as well. It's not suitable for bootstrapping. \nbecause we need to have the names of all master eligible nodes in\nadvance.  before creating the node with bootstrapping configuration set.\nWe address this issue by separating buildNode into two methods:\ngetNodeSettings and buildNode. We first iterate over all nodes to\nget nodes settings.  then change the setting for the bootstrapping node\nand then proceed with building the node.\n2. If autoManageMinMasterNodes = false.  there is no way for the test to\nset the list of bootstrapping nodes because node names are not known in\nadvance. This problem is solved by adding updateNodesSettings method\nto NodeConfigurationSource and ESIntegTestCase (which could be\noverridden by concrete integration test class). Once we have the list\nof settings for all nodes.  the integration test class is allowed to\nupdate it. In our case.  we update the\nClusterBootrstapService.INITIAL_MASTER_NODES_SETTING setting.","date":"2018-12-20 22:20:33","modifiedFileCount":"6","status":"M","submitter":"Andrey Ershov"},{"authorTime":"2019-02-05 16:46:52","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":8,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2019-02-05 16:46:52","commitOrder":8,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(TestZenDiscovery.USE_ZEN2.getKey(), getUseZen2())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2019-02-05 16:46:52","endLine":229,"groupId":"69754","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/d21043282aea3b1ebb1cfd68d4d55711d2a78d.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(TestZenDiscovery.USE_ZEN2.getKey(), getUseZen2())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_ZEN_PING_UNICAST_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"2d114a02fffb75c3088561c9ec6ab6fb67e8d980","commitMessage":"@@@Rename static Zen1 settings (#38333)\n\nRenames the following settings to remove the mention of `zen` in their names:\n\n- `discovery.zen.hosts_provider` -> `discovery.seed_providers`\n- `discovery.zen.ping.unicast.concurrent_connects` -> `discovery.seed_resolver.max_concurrent_resolvers`\n- `discovery.zen.ping.unicast.hosts.resolve_timeout` -> `discovery.seed_resolver.timeout`\n- `discovery.zen.ping.unicast.hosts` -> `discovery.seed_addresses`","date":"2019-02-05 16:46:52","modifiedFileCount":"26","status":"M","submitter":"David Turner"},{"authorTime":"2019-02-06 01:42:24","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":9,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2019-02-06 01:42:24","commitOrder":9,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2019-02-06 01:42:24","endLine":223,"groupId":"49596","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/37/6264954d73136e4e4550f4d8e66e88bbf49899.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(TestZenDiscovery.USE_ZEN2.getKey(), getUseZen2())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (plugins.contains(TestZenDiscovery.TestPlugin.class) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(TestZenDiscovery.TestPlugin.class);\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"f2dd5dd6eb6cbaffe86967875faaf8a0148b9e4e","commitMessage":"@@@Remove DiscoveryPlugin#getDiscoveryTypes (#38414)\n\nWith this change we no longer support pluggable discovery implementations. No\nknown implementations of `DiscoveryPlugin` actually override this method.  so in\npractice this should have no effect on the wider world. However.  we were using\nthis rather extensively in tests to provide the `test-zen` discovery type. We\nno longer need a separate discovery type for tests as we no longer need to\ncustomise its behaviour.\n\nRelates #38410","date":"2019-02-06 01:42:24","modifiedFileCount":"21","status":"M","submitter":"David Turner"},{"authorTime":"2019-08-16 14:15:04","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":10,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2019-08-16 14:15:04","commitOrder":10,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2019-08-16 14:15:04","endLine":232,"groupId":"32007","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e4b58ab987d9245c167de40bb80743f9dfb6d3.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"8d29df0351ed658abdb03c81c1ac53ab7aa36fe2","commitMessage":"@@@Use dynamic ports for ESSingleNodeTestCase too\n\nExtends #45601 to cover all tests.\n","date":"2019-08-16 14:15:04","modifiedFileCount":"1","status":"M","submitter":"Alpar Torok"},{"authorTime":"2019-08-23 05:19:40","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":11,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2019-08-23 05:19:40","commitOrder":11,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.NODE_PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2019-08-23 05:19:40","endLine":232,"groupId":"32007","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a1/67419b9db3d4e7363990d06ccb86b085e64e27.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"d05101b9e5356db2667bebd8fb0960945915d5f2","commitMessage":"@@@Add node.processors setting in favor of processors (#45855)\n\nThis commit namespaces the existing processors setting under the \"node\"\nnamespace. In doing so.  we deprecate the existing processors setting in\nfavor of node.processors.","date":"2019-08-23 05:19:40","modifiedFileCount":"13","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-02-21 07:48:26","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":12,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","date":"2018-05-03 15:54:15","endLine":169,"groupId":"7828","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a86d3f4b828d6844657e03f3eed617b11e0a17.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"},{"authorDate":"2020-02-21 07:48:26","commitOrder":12,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(EsExecutors.NODE_PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        plugins.add(MockScriptService.TestPlugin.class);\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2020-02-21 07:48:26","endLine":238,"groupId":"3076","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/29c0c11026c2dbc99ed336b0426fc02969154a.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE.getKey(), \"1000/1m\")\n            .put(EsExecutors.NODE_PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"0866031899a889afb6f296e89a4c1d277b496cfc","commitMessage":"@@@Scripting: split out compile limits and caching (#52498)\n\nPhase 1 of adding compilation limits per context.\n* Refactor rate limiting and caching into separate class.  \n  `ScriptCache`.   which will be used per context.\n* Disable compilation limit for certain tests.\n\nRefs: #50152\n","date":"2020-02-21 07:48:26","modifiedFileCount":"9","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":13,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(dataNode());\n    }\n","date":"2020-06-26 22:33:37","endLine":160,"groupId":"7828","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/98a5010366e0d8efaeee6ac638b28254ed9a89.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(Node.NODE_DATA_SETTING.getKey(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":13,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(EsExecutors.NODE_PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(dataNode())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        plugins.add(MockScriptService.TestPlugin.class);\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2020-06-26 22:33:37","endLine":239,"groupId":"4366","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/00f33000990386583a1150d5bc14882480b0cb.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(EsExecutors.NODE_PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(Node.NODE_DATA_SETTING.getKey(), true)\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        plugins.add(MockScriptService.TestPlugin.class);\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":14,"curCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(dataNode());\n    }\n","date":"2020-06-26 22:33:37","endLine":160,"groupId":"103813","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"baseSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/98a5010366e0d8efaeee6ac638b28254ed9a89.src","preCode":"    private static Settings.Builder baseSettings() {\n        final Path tempDir = createTempDir();\n        return Settings.builder()\n                .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n                .put(NetworkModule.TRANSPORT_TYPE_KEY, getTestTransportType())\n                .put(dataNode());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/node/NodeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"N"},{"authorDate":"2021-04-21 21:28:12","commitOrder":14,"curCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(), false)\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(EsExecutors.NODE_PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(dataNode())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        plugins.add(MockScriptService.TestPlugin.class);\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","date":"2021-04-21 21:28:12","endLine":236,"groupId":"103813","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"newNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/b99feefdc81c5365961a4eb2b5eee9f66fce78.src","preCode":"    private Node newNode() {\n        final Path tempDir = createTempDir();\n        final String nodeName = nodeSettings().get(Node.NODE_NAME_SETTING.getKey(), \"node_s_0\");\n\n        Settings settings = Settings.builder()\n            .put(ClusterName.CLUSTER_NAME_SETTING.getKey(), InternalTestCluster.clusterName(\"single-node-cluster\", random().nextLong()))\n            .put(Environment.PATH_HOME_SETTING.getKey(), tempDir)\n            .put(Environment.PATH_REPO_SETTING.getKey(), tempDir.resolve(\"repo\"))\n            \r\n            \r\n            .put(Environment.PATH_SHARED_DATA_SETTING.getKey(), createTempDir().getParent())\n            .put(Node.NODE_NAME_SETTING.getKey(), nodeName)\n            .put(EsExecutors.NODE_PROCESSORS_SETTING.getKey(), 1) \r\n            .put(\"transport.type\", getTestTransportType())\n            .put(TransportSettings.PORT.getKey(), ESTestCase.getPortRange())\n            .put(dataNode())\n            .put(NodeEnvironment.NODE_ID_SEED_SETTING.getKey(), random().nextLong())\n            \r\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"1b\")\n            .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"1b\")\n            \r\n            \r\n            .put(HierarchyCircuitBreakerService.USE_REAL_MEMORY_USAGE_SETTING.getKey(), false)\n            .putList(DISCOVERY_SEED_HOSTS_SETTING.getKey()) \r\n            .putList(INITIAL_MASTER_NODES_SETTING.getKey(), nodeName)\n            .put(nodeSettings()) \r\n            .build();\n\n        Collection<Class<? extends Plugin>> plugins = getPlugins();\n        if (plugins.contains(getTestTransportPlugin()) == false) {\n            plugins = new ArrayList<>(plugins);\n            plugins.add(getTestTransportPlugin());\n        }\n        if (addMockHttpTransport()) {\n            plugins.add(MockHttpTransport.TestPlugin.class);\n        }\n        plugins.add(MockScriptService.TestPlugin.class);\n        Node node = new MockNode(settings, plugins, forbidPrivateIndexSettings());\n        try {\n            node.start();\n        } catch (NodeValidationException e) {\n            throw new RuntimeException(e);\n        }\n        return node;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/ESSingleNodeTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"}]
