[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n\n        DateObjectValueSource that = (DateObjectValueSource) o;\n        return methodName.equals(that.methodName);\n    }\n","date":"2018-04-26 03:22:53","endLine":87,"groupId":"26813","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/abcbcbefabdf66eca7190db4f7511b745825ce.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n\n        DateObjectValueSource that = (DateObjectValueSource) o;\n        return methodName.equals(that.methodName);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateObjectValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n        BytesReferenceMonitoringDoc that = (BytesReferenceMonitoringDoc) o;\n        return xContentType == that.xContentType && Objects.equals(source, that.source);\n    }\n","date":"2018-04-26 03:22:53","endLine":74,"groupId":"26813","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/f92ac24d215dc5ba47dbd00bca9c30bb29edf2.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n        BytesReferenceMonitoringDoc that = (BytesReferenceMonitoringDoc) o;\n        return xContentType == that.xContentType && Objects.equals(source, that.source);\n    }\n","realPath":"x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/BytesReferenceMonitoringDoc.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2021-01-26 22:47:09","commitOrder":2,"curCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (super.equals(o) == false) return false;\n\n        DateObjectValueSource that = (DateObjectValueSource) o;\n        return methodName.equals(that.methodName);\n    }\n","date":"2021-01-26 22:47:09","endLine":84,"groupId":"56642","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/2d5115ea1c4e86d613723787ad166f3b780525.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n\n        DateObjectValueSource that = (DateObjectValueSource) o;\n        return methodName.equals(that.methodName);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateObjectValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n        BytesReferenceMonitoringDoc that = (BytesReferenceMonitoringDoc) o;\n        return xContentType == that.xContentType && Objects.equals(source, that.source);\n    }\n","date":"2018-04-26 03:22:53","endLine":74,"groupId":"26813","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/f92ac24d215dc5ba47dbd00bca9c30bb29edf2.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n        BytesReferenceMonitoringDoc that = (BytesReferenceMonitoringDoc) o;\n        return xContentType == that.xContentType && Objects.equals(source, that.source);\n    }\n","realPath":"x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/BytesReferenceMonitoringDoc.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"ad1f876daa714001877622ae4d6c91043c38eae7","commitMessage":"@@@Replace NOT operator with explicit `false` check (#67817)\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-01-26 22:47:09","modifiedFileCount":"117","status":"M","submitter":"Rory Hunter"},{"authorTime":"2021-02-02 22:27:33","codes":[{"authorDate":"2021-01-26 22:47:09","commitOrder":3,"curCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (super.equals(o) == false) return false;\n\n        DateObjectValueSource that = (DateObjectValueSource) o;\n        return methodName.equals(that.methodName);\n    }\n","date":"2021-01-26 22:47:09","endLine":84,"groupId":"101437","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/2d5115ea1c4e86d613723787ad166f3b780525.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (super.equals(o) == false) return false;\n\n        DateObjectValueSource that = (DateObjectValueSource) o;\n        return methodName.equals(that.methodName);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/DateObjectValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2021-02-02 22:27:33","commitOrder":3,"curCode":"    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (super.equals(o) == false) {\n            return false;\n        }\n        BytesReferenceMonitoringDoc that = (BytesReferenceMonitoringDoc) o;\n        return xContentType == that.xContentType && Objects.equals(source, that.source);\n    }\n","date":"2021-02-02 22:27:33","endLine":74,"groupId":"101437","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/6b0c88f6e455c09c12bd7eca8492b283b58d81.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n        BytesReferenceMonitoringDoc that = (BytesReferenceMonitoringDoc) o;\n        return xContentType == that.xContentType && Objects.equals(source, that.source);\n    }\n","realPath":"x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/BytesReferenceMonitoringDoc.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"b4514228f065461263b39a82ff33371a75315431","commitMessage":"@@@Replace NOT operator with explicit `false` check - part 5 (#68360)\n\nPart 5.\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-02-02 22:27:33","modifiedFileCount":"96","status":"M","submitter":"Rory Hunter"}]
