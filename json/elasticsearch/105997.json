[{"authorTime":"2020-03-26 20:46:09","codes":[{"authorDate":"2020-03-26 20:46:09","commitOrder":1,"curCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetaData template = IndexTemplateMetaData.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetaData.builder(\"foo-write\")).putAlias(AliasMetaData.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final MetaData metaData = MetaData.builder().put(createMetaData(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-03-26 20:46:09","endLine":272,"groupId":"16887","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRejectDuplicateAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/9054e706fbb0ed9d18764860debb73ca9d16e0.src","preCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetaData template = IndexTemplateMetaData.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetaData.builder(\"foo-write\")).putAlias(AliasMetaData.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final MetaData metaData = MetaData.builder().put(createMetaData(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"},{"authorDate":"2020-03-26 20:46:09","commitOrder":1,"curCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetaData template = IndexTemplateMetaData.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetaData.builder(\"foo-write\")).putAlias(AliasMetaData.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final MetaData metaData = MetaData.builder().put(createMetaData(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, randomFrom(Boolean.FALSE, null)));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-03-26 20:46:09","endLine":289,"groupId":"10787","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenAffectsResolvedTemplates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/9054e706fbb0ed9d18764860debb73ca9d16e0.src","preCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetaData template = IndexTemplateMetaData.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetaData.builder(\"foo-write\")).putAlias(AliasMetaData.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final MetaData metaData = MetaData.builder().put(createMetaData(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, randomFrom(Boolean.FALSE, null)));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetaDataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"B"}],"commitId":"2e24e885beedb9926976269bf01faadac7575376","commitMessage":"@@@Rollover: refactor out cluster state update (#53965)\n\nMake it possible to reuse the cluster state update of rollover for\nsimulation purposes by extracting it. Also now run the full rollover in\nthe pre-rollover phase and the actual rollover phase.  allowing a\ndedicated exception in case of concurrent rollovers as well as a more\nthorough pre-check.","date":"2020-03-26 20:46:09","modifiedFileCount":"5","status":"B","submitter":"Henning Andersen"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":272,"groupId":"16887","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRejectDuplicateAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/98ffbe5d3f83f9420666f5f038176eca3ae5ca.src","preCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetaData template = IndexTemplateMetaData.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetaData.builder(\"foo-write\")).putAlias(AliasMetaData.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final MetaData metaData = MetaData.builder().put(createMetaData(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomFrom(Boolean.FALSE, null)));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":289,"groupId":"10787","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenAffectsResolvedTemplates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/98ffbe5d3f83f9420666f5f038176eca3ae5ca.src","preCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetaData template = IndexTemplateMetaData.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetaData.builder(\"foo-write\")).putAlias(AliasMetaData.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final MetaData metaData = MetaData.builder().put(createMetaData(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetaDataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metaData, indexName, aliasName, randomFrom(Boolean.FALSE, null)));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-19 22:16:16","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":272,"groupId":"16887","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRejectDuplicateAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/98ffbe5d3f83f9420666f5f038176eca3ae5ca.src","preCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"},{"authorDate":"2020-04-19 22:16:16","commitOrder":3,"curCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, false));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-04-19 22:16:16","endLine":329,"groupId":"10787","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenAffectsResolvedTemplates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/cf8e790ff8d7c465fe93dda3dc2fdc833da13a.src","preCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomFrom(Boolean.FALSE, null)));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"c5b923afec911c6ae8fc5179e65ae6bf55dcc5f1","commitMessage":"@@@Make isHidden a primitive when finding v2 templates (#55408)\n\nisHidden was a `Boolean` in order to treat a special case identified\nwith V1 templates where if the create index request didn't specify if\nthe index should be hidden or not (ie. isHidden was `null`) but the\nindex matched a template that specified the `index.hidden` setting we\nneeded to remove the global templates from the templates we'll apply to\nthe new index (note: this is important with V1 templates as inheritance\nis supported).\n\nWith V2 templates we match only one template with an index so the\nequivalent check did not need to exist (we added a sanity check in\nhttps://github.com/elastic/elasticsearch/pull/55015 where we make sure\nwe don't apply an invalid global template - one that specifes the\n`index.hidden` setting.  but this is a check we make irrespective of the\nuser specifying or not if the index should be hidden)\n\nThis commit makes `isHidden` when matching V2 templates a boolean\nprimitive.  eliminating the need for the `null` state to exist. Note that\nsome methods which use the matching V2 templates still work with a\n`Boolean` object `isHidden` attribute as they are also matching the V1\ntemplates. These methods will pass in `false` instead of `null` when\nfinding the V2 templates.","date":"2020-04-19 22:16:16","modifiedFileCount":"6","status":"M","submitter":"Andrei Dan"},{"authorTime":"2020-04-23 04:48:10","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":272,"groupId":"105997","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRejectDuplicateAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/98ffbe5d3f83f9420666f5f038176eca3ae5ca.src","preCode":"    public void testRejectDuplicateAlias() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Arrays.asList(\"foo-*\", \"bar-*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n            () -> MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomBoolean()));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"},{"authorDate":"2020-04-23 04:48:10","commitOrder":4,"curCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, randomFrom(Boolean.FALSE, null)));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","date":"2020-04-23 04:48:10","endLine":401,"groupId":"105997","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenAffectsResolvedTemplates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/950822462d480b5f3fc31043f3a78debef35be.src","preCode":"    public void testHiddenAffectsResolvedTemplates() {\n        final IndexTemplateMetadata template = IndexTemplateMetadata.builder(\"test-template\")\n            .patterns(Collections.singletonList(\"*\"))\n            .putAlias(AliasMetadata.builder(\"foo-write\")).putAlias(AliasMetadata.builder(\"bar-write\").writeIndex(randomBoolean()))\n            .build();\n        final Metadata metadata = Metadata.builder().put(createMetadata(randomAlphaOfLengthBetween(5, 7)), false).put(template).build();\n        String indexName = randomFrom(\"foo-123\", \"bar-xyz\");\n        String aliasName = randomFrom(\"foo-write\", \"bar-write\");\n\n        \r\n        MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, Boolean.TRUE);\n        \r\n        final IllegalArgumentException ex = expectThrows(IllegalArgumentException.class, () ->\n            MetadataRolloverService.checkNoDuplicatedAliasInIndexTemplate(metadata, indexName, aliasName, false));\n        assertThat(ex.getMessage(), containsString(\"index template [test-template]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/rollover/MetadataRolloverServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"f6cd01ea2b987d474bcf7c2bbbcf05a6ebea50b6","commitMessage":"@@@Rollover for data streams (#55498)\n\n","date":"2020-04-23 04:48:10","modifiedFileCount":"16","status":"M","submitter":"Dan Hermann"}]
