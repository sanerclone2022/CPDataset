[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getId(), primaryTerm, createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":545,"groupId":"34556","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/7844950d6b28dcbbe93db4426064a92a76ce45.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getId(), primaryTerm, createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getRelocationId(), primaryTerm,\n            createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","date":"2018-04-26 03:22:53","endLine":586,"groupId":"21959","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/7844950d6b28dcbbe93db4426064a92a76ce45.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getRelocationId(), primaryTerm,\n            createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-07-10 07:44:12","commitOrder":2,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getId(), primaryTerm, createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2018-07-10 07:44:12","endLine":545,"groupId":"34556","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/08/301e99d6a69756888b488de9b6f832c2b608d9.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getId(), primaryTerm, createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getRelocationId(), primaryTerm,\n            createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","date":"2018-04-26 03:22:53","endLine":586,"groupId":"21959","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/7844950d6b28dcbbe93db4426064a92a76ce45.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getRelocationId(), primaryTerm,\n            createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"N"}],"commitId":"e9cd0556c167b257bb588af5547923e5f13a99ca","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-10 07:44:12","modifiedFileCount":"627","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-09-28 01:00:37","codes":[{"authorDate":"2018-09-28 01:00:37","commitOrder":3,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getId(), primaryTerm, createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2018-09-28 01:00:37","endLine":547,"groupId":"34556","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6c/084cb29cd9cc99141f47c8fdbeb6b628ba4e07.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getId(), primaryTerm, createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"},{"authorDate":"2018-09-28 01:00:37","commitOrder":3,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getRelocationId(), primaryTerm,\n            createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","date":"2018-09-28 01:00:37","endLine":589,"groupId":"21959","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6c/084cb29cd9cc99141f47c8fdbeb6b628ba4e07.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getRelocationId(), primaryTerm,\n            createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"M"}],"commitId":"a26cc1a2422c7d6eda7d0c204f7588d79fa597e6","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-28 01:00:37","modifiedFileCount":"338","status":"M","submitter":"Lee Hinman"},{"authorTime":"2019-04-03 15:32:57","codes":[{"authorDate":"2019-04-03 15:32:57","commitOrder":4,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2019-04-03 15:32:57","endLine":636,"groupId":"8266","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/64d9e4184ebd053951162532e7c7b445dbbdd1.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getId(), primaryTerm, createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"},{"authorDate":"2019-04-03 15:32:57","commitOrder":4,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","date":"2019-04-03 15:32:57","endLine":679,"groupId":"594","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/64d9e4184ebd053951162532e7c7b445dbbdd1.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        action.new AsyncPrimaryAction(request, primaryShard.allocationId().getRelocationId(), primaryTerm,\n            createTransportChannel(listener), task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":638,"status":"M"}],"commitId":"9ad9f16b792d437fcc5d708863062f3d59cc572b","commitMessage":"@@@Remove some abstractions from `TransportReplicationAction` (#40706)\n\n`TransportReplicationAction` is a rather complex beast.  and some of its\nconcrete implementations do not need all of its features. More specifically.  it\n(a) chases a primary around the cluster until it manages to pin it down and\nthen (b) executes an action on that primary and all its replicas. There are\nsome actions that are coordinated by the primary itself.  meaning that there is\nno need for the chase-the-primary phases.  and in the case of peer recovery\nretention leases and primary/replica resync it is important to bypass these\nfirst phases.\n\nThis commit is a step towards separating the `TransportReplicationAction` into\nthese two parts. It is a mostly mechanical sequence of steps to remove some\nabstractions that are no longer in use.","date":"2019-04-03 15:32:57","modifiedFileCount":"6","status":"M","submitter":"David Turner"},{"authorTime":"2019-04-12 03:26:18","codes":[{"authorDate":"2019-04-12 03:26:18","commitOrder":5,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener, primaryTerm) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2019-04-12 03:26:18","endLine":639,"groupId":"8266","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/dd3ad2fe4805b332162111f0fc5e2cc1e121eb.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"},{"authorDate":"2019-04-12 03:26:18","commitOrder":5,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener, primaryTerm) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","date":"2019-04-12 03:26:18","endLine":682,"groupId":"594","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/dd3ad2fe4805b332162111f0fc5e2cc1e121eb.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":641,"status":"M"}],"commitId":"b41e3fc09f2584626c5fe8c9889ba70d9cd4cbb2","commitMessage":"@@@Move primary term from replicas proxy to repl op (#41119)\n\nA small refactoring that removes the primaryTerm field from ReplicasProxy and\ninstead passes it directly in to the methods that need it. Relates #40706.","date":"2019-04-12 03:26:18","modifiedFileCount":"10","status":"M","submitter":"David Turner"},{"authorTime":"2019-04-16 20:03:55","codes":[{"authorDate":"2019-04-16 20:03:55","commitOrder":6,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\",\n                requests.get(0).action, equalTo(\"internal:testAction2[p]\"));\n            \r\n            final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest\n                = (TransportReplicationAction.ConcreteShardRequest<Request>) requests.get(0).request;\n            assertThat(\"primary term not properly set on primary delegation\", concreteShardRequest.getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2019-04-16 20:03:55","endLine":635,"groupId":"62264","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/b23a9111a4e26bb9282948d634a4428a03fb8f.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener, primaryTerm) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n        }.run();\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\", requests.get(0).action, equalTo(\"internal:testAction[p]\"));\n            assertThat(\"primary term not properly set on primary delegation\",\n                ((TransportReplicationAction.ConcreteShardRequest<Request>)requests.get(0).request).getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"},{"authorDate":"2019-04-16 20:03:55","commitOrder":6,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n        assertTrue(listener.isDone());\n        listener.actionGet(); \r\n    }\n","date":"2019-04-16 20:03:55","endLine":668,"groupId":"11328","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/b23a9111a4e26bb9282948d634a4428a03fb8f.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n        action.new AsyncPrimaryAction(primaryRequest, listener, task) {\n            @Override\n            protected ReplicationOperation<Request, Request, TransportReplicationAction.PrimaryResult<Request, TestResponse>>\n            createReplicatedOperation(\n                    Request request,\n                    ActionListener<TransportReplicationAction.PrimaryResult<Request, TestResponse>> actionListener,\n                    TransportReplicationAction<Request, Request, TestResponse>.PrimaryShardReference primaryShardReference) {\n                return new NoopReplicationOperation(request, actionListener, primaryTerm) {\n                    @Override\n                    public void execute() throws Exception {\n                        assertPhase(task, \"primary\");\n                        assertFalse(executed.getAndSet(true));\n                        super.execute();\n                    }\n                };\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                throw new RuntimeException(e);\n            }\n        }.run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"M"}],"commitId":"5708796e5131bac7724ea57d6290b6f688a9b47a","commitMessage":"@@@Inline TransportReplAct#createReplicatedOperation (#41197)\n\n`TransportReplicationAction.AsyncPrimaryAction#createReplicatedOperation`\nexists so it can be overridden in tests. This commit re-works these tests to\nuse a real `ReplicationOperation` and inlines the now-unnecessary method.\n\nRelates #40706.","date":"2019-04-16 20:03:55","modifiedFileCount":"3","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":7,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metadata().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\",\n                requests.get(0).action, equalTo(\"internal:testAction2[p]\"));\n            \r\n            final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest\n                = (TransportReplicationAction.ConcreteShardRequest<Request>) requests.get(0).request;\n            assertThat(\"primary term not properly set on primary delegation\", concreteShardRequest.getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":691,"groupId":"62264","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/e1782cc66d82cbea0b47857b6541daa12460ea.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\",\n                requests.get(0).action, equalTo(\"internal:testAction2[p]\"));\n            \r\n            final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest\n                = (TransportReplicationAction.ConcreteShardRequest<Request>) requests.get(0).request;\n            assertThat(\"primary term not properly set on primary delegation\", concreteShardRequest.getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":7,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metadata().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n        assertTrue(listener.isDone());\n        listener.actionGet(); \r\n    }\n","date":"2020-04-01 03:52:01","endLine":724,"groupId":"11328","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/e1782cc66d82cbea0b47857b6541daa12460ea.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metaData().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n        assertTrue(listener.isDone());\n        listener.actionGet(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":693,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2021-08-11 23:15:30","commitOrder":8,"curCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metadata().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\",\n                requests.get(0).action, equalTo(\"internal:testAction2[p]\"));\n            @SuppressWarnings(\"unchecked\")\n            final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest\n                = (TransportReplicationAction.ConcreteShardRequest<Request>) requests.get(0).request;\n            assertThat(\"primary term not properly set on primary delegation\", concreteShardRequest.getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","date":"2021-08-11 23:15:30","endLine":685,"groupId":"105681","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/27ddfbf354b38818457b5059fbcdfee9aeaac3.src","preCode":"    public void testPrimaryPhaseExecutesOrDelegatesRequestToRelocationTarget() throws Exception {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = stateWithActivePrimary(index, true, randomInt(5));\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n\n        ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metadata().index(index).primaryTerm(shardId.id());\n        boolean executeOnPrimary = true;\n        \r\n        if (primaryShard.relocating() && randomBoolean()) {\n            isRelocated.set(true);\n            executeOnPrimary = false;\n        }\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n\n        if (executeOnPrimary) {\n            assertTrue(executed.get());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        } else {\n            assertFalse(executed.get());\n            assertIndexShardCounter(0);  \r\n            final List<CapturingTransport.CapturedRequest> requests =\n                transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());\n            assertThat(requests, notNullValue());\n            assertThat(requests.size(), equalTo(1));\n            assertThat(\"primary request was not delegated to relocation target\",\n                requests.get(0).action, equalTo(\"internal:testAction2[p]\"));\n            \r\n            final TransportReplicationAction.ConcreteShardRequest<Request> concreteShardRequest\n                = (TransportReplicationAction.ConcreteShardRequest<Request>) requests.get(0).request;\n            assertThat(\"primary term not properly set on primary delegation\", concreteShardRequest.getPrimaryTerm(), equalTo(primaryTerm));\n            assertPhase(task, \"primary_delegation\");\n            transport.handleResponse(requests.get(0).requestId, new TestResponse());\n            assertTrue(listener.isDone());\n            listener.get();\n            assertPhase(task, \"finished\");\n            assertFalse(request.isRetrySet.get());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":8,"curCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metadata().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n        assertTrue(listener.isDone());\n        listener.actionGet(); \r\n    }\n","date":"2020-04-01 03:52:01","endLine":724,"groupId":"105681","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/e1782cc66d82cbea0b47857b6541daa12460ea.src","preCode":"    public void testPrimaryPhaseExecutesDelegatedRequestOnRelocationTarget() {\n        final String index = \"test\";\n        final ShardId shardId = new ShardId(index, \"_na_\", 0);\n        ClusterState state = state(index, true, ShardRoutingState.RELOCATING);\n        final ShardRouting primaryShard = state.getRoutingTable().shardRoutingTable(shardId).primaryShard();\n        final long primaryTerm = state.metadata().index(index).primaryTerm(shardId.id());\n        String primaryTargetNodeId = primaryShard.relocatingNodeId();\n        \r\n        state = ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();\n        setState(clusterService, state);\n        Request request = new Request(shardId).timeout(\"1ms\");\n        PlainActionFuture<TestResponse> listener = new PlainActionFuture<>();\n        ReplicationTask task = maybeTask();\n        AtomicBoolean executed = new AtomicBoolean();\n        final TransportReplicationAction.ConcreteShardRequest<Request> primaryRequest\n            = new TransportReplicationAction.ConcreteShardRequest<>(request, primaryShard.allocationId().getRelocationId(), primaryTerm);\n\n        new TestAction(Settings.EMPTY, \"internal:testAction2\", transportService, clusterService, shardStateAction, threadPool) {\n            @Override\n            protected void shardOperationOnPrimary(Request shardRequest, IndexShard primary,\n                                                   ActionListener<PrimaryResult<Request, TestResponse>> listener) {\n                assertPhase(task, \"primary\");\n                assertFalse(executed.getAndSet(true));\n                super.shardOperationOnPrimary(shardRequest, primary, listener);\n            }\n        }.new AsyncPrimaryAction(primaryRequest, listener, task).run();\n        assertThat(executed.get(), equalTo(true));\n        assertPhase(task, \"finished\");\n        assertFalse(request.isRetrySet.get());\n        assertTrue(listener.isDone());\n        listener.actionGet(); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":693,"status":"N"}],"commitId":"4137d110796f6308126ee2c573eebc5c3ebaa26a","commitMessage":"@@@Fix compiler warnings in :server - part 4 (#76302)\n\nCloses #40366.\n\nFix the last remaining javac issues when linting is enforced in `server/`.","date":"2021-08-11 23:15:30","modifiedFileCount":"81","status":"M","submitter":"Rory Hunter"}]
