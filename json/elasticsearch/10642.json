[{"authorTime":"2018-05-16 13:41:23","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":235,"groupId":"70000","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/b436ce7de43cb9fdc7082c2b0b5bd36dc760bd.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"NB"},{"authorDate":"2018-05-16 13:41:23","commitOrder":2,"curCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n            xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2018-05-16 13:41:23","endLine":212,"groupId":"70000","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/41bd69a527ab681c4eeff0fa5ce9c23c99da07.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n            xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"}],"commitId":"8c12a59c5e577dee6f187f4d85ba7d1ae023b956","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-16 13:41:23","modifiedFileCount":"129","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-06-19 01:06:47","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":235,"groupId":"70000","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/b436ce7de43cb9fdc7082c2b0b5bd36dc760bd.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"},{"authorDate":"2018-06-19 01:06:47","commitOrder":3,"curCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2018-06-19 01:06:47","endLine":226,"groupId":"14908","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/cb74f7cd205fa4c23202f31ac47b3988336673.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n            xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"5d52f297cc570a2432b038832133f9ffb56d3bab","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-19 01:06:47","modifiedFileCount":"129","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-01-22 04:50:56","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":235,"groupId":"70000","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/b436ce7de43cb9fdc7082c2b0b5bd36dc760bd.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"N"},{"authorDate":"2019-01-22 04:50:56","commitOrder":4,"curCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2019-01-22 04:50:56","endLine":249,"groupId":"14908","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/fd5a64147cc35fcbebb57dc574437939fa304e.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"f516d68fb28ef56271f2784715a68908570d9b87","commitMessage":"@@@Share `NioGroup` between http and transport impls (#37396)\n\nCurrently we create dedicated network threads for both the http and\ntransport implementations. Since these these threads should never\nperform blocking operations.  these threads could be shared. This commit\nmodifies the nio-transport to have 0 http workers be default. If the\ndefault configs are used.  this will cause the http transport to be run\non the transport worker threads. The http worker setting will still exist\nin case the user would like to configure dedicated workers. Additionally. \nthis commmit deletes dedicated acceptor threads. We have never had these\nfor the netty transport and they can be added back if a need is\ndetermined in the future.","date":"2019-01-22 04:50:56","modifiedFileCount":"19","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-01-22 04:50:56","codes":[{"authorDate":"2019-07-17 09:27:29","commitOrder":5,"curCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2019-07-17 09:27:29","endLine":203,"groupId":"70000","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/04c51ec835366c3c5e106e707a9a6eca1564ad.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2019-01-22 04:50:56","commitOrder":5,"curCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","date":"2019-01-22 04:50:56","endLine":249,"groupId":"14908","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/fd5a64147cc35fcbebb57dc574437939fa304e.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"N"}],"commitId":"c9607061ae2adf27d951c75c69d40ccb769f5362","commitMessage":"@@@Add Cors integration tests (#44361)\n\nThis commit adds integration tests to ensure that the basic cors\nfunctionality works for the netty and nio transports.","date":"2019-07-17 09:27:29","modifiedFileCount":"4","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-02-04 16:48:13","codes":[{"authorDate":"2020-02-04 16:48:13","commitOrder":6,"curCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-02-04 16:48:13","endLine":212,"groupId":"21320","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/ce1dc3921f6d3eef5e102b48c25ce037d25416.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2020-02-04 16:48:13","commitOrder":6,"curCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-02-04 16:48:13","endLine":207,"groupId":"28965","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/4d2cb1027b07e5fff9d24f21ca4c8844d9b60a.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder().put(\"http.port\", remoteAddress.getPort()).build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\"Failed to bind to [\" + remoteAddress.getPort() + \"]\", bindHttpException.getMessage());\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"84dd9dc9c03d85dd08fdaa67ce78c71511e7a01d","commitMessage":"@@@Add host address to BindTransportException message (#51269)\n\nWhen bind fails.  show the host address in addition to the port. This\nhelps debugging cases with wrong \"network.host\" values.\n\nCloses #48001","date":"2020-02-04 16:48:13","modifiedFileCount":"7","status":"M","submitter":"Maria Ralli"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-02-07 03:05:03","commitOrder":7,"curCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher(), clusterSettings)) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher(), clusterSettings)) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":216,"groupId":"21320","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/ff905b1446507936f0558c1f5e4333910b2149.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":7,"curCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":211,"groupId":"28965","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/3d44f60d180cdcb2f81128de09ca8ab56520b2.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"26b9cf787dfcfb2340fd2dbc98e4c42faf868e40","commitMessage":"@@@Add Trace Logging of REST Requests (#51684)\n\nBeing able to trace log all REST requests to a node would make debugging\na number of issues a lot easier.\n","date":"2020-02-07 03:05:03","modifiedFileCount":"27","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-05-12 04:49:40","commitOrder":8,"curCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(Settings.EMPTY))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(settings))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-05-12 04:49:40","endLine":217,"groupId":"40500","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/ed191322b72c16a983440c2f76cd164b372022.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher(), clusterSettings)) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher(), clusterSettings)) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":8,"curCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":211,"groupId":"28965","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/3d44f60d180cdcb2f81128de09ca8ab56520b2.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"}],"commitId":"0bf4be7dd7f1f2393d65ddd01f2f052ed6f270d5","commitMessage":"@@@Share netty event loops between transports (#46346)\n\nCurrently Elasticsearch creates independent event loop groups for each\ntransport (http and internal) transport type. This is unnecessary and\ncan lead to contention when different threads access shared resources\n(ex: allocators). This commit moves to a model where.  by default.  the\nevent loops are shared between the transports. The previous behavior can\nbe attained by specifically setting the http worker count.","date":"2020-05-12 04:49:40","modifiedFileCount":"15","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-07-06 16:42:47","codes":[{"authorDate":"2020-07-06 16:42:47","commitOrder":9,"curCode":"    public void testBindUnavailableAddress() {\n        Settings initialSettings = createSettings();\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(initialSettings, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(Settings.EMPTY))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(settings))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-07-06 16:42:47","endLine":223,"groupId":"40500","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/4b5b9337b893264951f5ba3e1603d19d78ba8a.src","preCode":"    public void testBindUnavailableAddress() {\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(Settings.EMPTY))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(settings))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2020-07-06 16:42:47","commitOrder":9,"curCode":"    public void testBindUnavailableAddress() {\n        final Settings initialSettings = createSettings();\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(initialSettings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-07-06 16:42:47","endLine":217,"groupId":"28965","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/b0cd7f0ed423884d36927b5750c9782380f294.src","preCode":"    public void testBindUnavailableAddress() {\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(Settings.EMPTY, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"2ba8e2e98bf4b7c54929c0a19046deba61951817","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-06 16:42:47","modifiedFileCount":"330","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-08-10 18:39:12","codes":[{"authorDate":"2020-07-06 16:42:47","commitOrder":10,"curCode":"    public void testBindUnavailableAddress() {\n        Settings initialSettings = createSettings();\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(initialSettings, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(Settings.EMPTY))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(settings))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2020-07-06 16:42:47","endLine":223,"groupId":"10642","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/4b5b9337b893264951f5ba3e1603d19d78ba8a.src","preCode":"    public void testBindUnavailableAddress() {\n        Settings initialSettings = createSettings();\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(initialSettings, networkService, bigArrays, threadPool,\n                xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(Settings.EMPTY))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (Netty4HttpServerTransport otherTransport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n                    xContentRegistry(), new NullDispatcher(), clusterSettings, new SharedGroupFactory(settings))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, otherTransport::start);\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"},{"authorDate":"2021-08-10 18:39:12","commitOrder":10,"curCode":"    public void testBindUnavailableAddress() {\n        final Settings initialSettings = createSettings();\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(initialSettings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n            randomClusterSettings())) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n                randomClusterSettings())) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","date":"2021-08-10 18:39:12","endLine":204,"groupId":"10642","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testBindUnavailableAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/769272582ab0d57084431f1119660b84530a9c.src","preCode":"    public void testBindUnavailableAddress() {\n        final Settings initialSettings = createSettings();\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(initialSettings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n            Settings settings = Settings.builder()\n                .put(\"http.port\", remoteAddress.getPort())\n                .put(\"network.host\", remoteAddress.getAddress())\n                .build();\n            try (NioHttpServerTransport otherTransport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n                threadPool, xContentRegistry(), new NullDispatcher(), new NioGroupFactory(Settings.EMPTY, logger),\n                new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());\n                assertEquals(\n                    \"Failed to bind to \" + NetworkAddress.format(remoteAddress.address()),\n                    bindHttpException.getMessage()\n                );\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"873fbf7b650e9b78a8537d8759dee37b1470864f","commitMessage":"@@@Fix Leaking Http Channel Objects when Http Client Stats are Disabled (#76257)\n\nWe have to remove the channel from the internal collection of channels when stats are disabled.\n\nCloses #76183\n","date":"2021-08-10 18:39:12","modifiedFileCount":"5","status":"M","submitter":"Armin Braun"}]
