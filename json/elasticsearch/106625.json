[{"authorTime":"2020-05-07 08:20:26","codes":[{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-05-07 08:20:26","endLine":268,"groupId":"64583","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/90/9e1882dd8aa33749d74c7cadf823950e6658a9.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"},{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-05-07 08:20:26","endLine":522,"groupId":"19755","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/90/9e1882dd8aa33749d74c7cadf823950e6658a9.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"B"}],"commitId":"cabe6a330514f0f80f3b95be8763082b25efce89","commitMessage":"@@@Create plugin for internalClusterTest task (#55896)\n\nThis commit creates a new gradle plugin to provide a separate task name\nand source set for running ESIntegTestCase tests. The only project\nconverted to use the new plugin in this PR is server.  as an example. The\nremaining cases in x-pack will be handled in followups.","date":"2020-05-07 08:20:26","modifiedFileCount":"5","status":"B","submitter":"Ryan Ernst"},{"authorTime":"2020-05-13 20:30:38","codes":[{"authorDate":"2020-05-13 20:30:38","commitOrder":2,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(termsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-05-13 20:30:38","endLine":272,"groupId":"23122","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/f4a96ad0b2381c9db76b9277ca89d8e9de1a1a.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(termsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(termsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2020-05-13 20:30:38","commitOrder":2,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(tagsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(stringsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(tagsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-05-13 20:30:38","endLine":505,"groupId":"26275","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/f4a96ad0b2381c9db76b9277ca89d8e9de1a1a.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()), greaterThan(0L));\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), notNullValue());\n            assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()), equalTo(0L));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"4a8d93f55b3907253d28c3b66eb04c1a4021755e","commitMessage":"@@@Add list of defered aggregations to the profiler (#56208)\n\nThis adds a few things to the `breakdown` of the profiler:\n* `histogram` aggregations now contain `total_buckets` which is the\n  count of buckets that they collected. This could be useful when\n  debugging a histogram inside of another bucketing agg that is fairly\n  selective.\n* All bucketing aggs that can delay their sub-aggregations will now add\n  a list of delayed sub-aggregations. This is useful because we\n  sometimes have fairly involved logic around which sub-aggregations get\n  delayed and this will save you from having to guess.\n* Aggregtations wrapped in the `MultiBucketAggregatorWrapper` can't\n  accurately add anything to the breakdown. Instead they the wrapper\n  adds a marker entry `\"multi_bucket_aggregator_wrapper\": true` so we\n  can be quickly pick out such aggregations when debugging.\n\nIt also fixes a bug where `_count` breakdown entries were contributing\nto the overall `time_in_nanos`. They didn't add a large amount of time\nso it is unlikely that this caused a big problem.  but I was there.\n\nTo support the arbitrary breakdown data this reworks the profiler so\nthat the `breakdown` can contain any data that is supported by\n`StreamOutput#writeGenericValue(Object)` and\n`XContentBuilder#value(Object)`.\n","date":"2020-05-13 20:30:38","modifiedFileCount":"17","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-06-09 20:43:53","codes":[{"authorDate":"2020-06-09 20:43:53","commitOrder":3,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-06-09 20:43:53","endLine":291,"groupId":"23122","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/5788ec6a7c94ac5a8783028f84ff1ecb24a94f.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(termsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2020-06-09 20:43:53","commitOrder":3,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-06-09 20:43:53","endLine":524,"groupId":"26275","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/5788ec6a7c94ac5a8783028f84ff1ecb24a94f.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(tagsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(stringsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(tagsAggResult.getDebugInfo(), equalTo(Map.of(WRAPPED, true)));\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"}],"commitId":"9b8ff5caec86252f78dacce8b20954b8a8482c58","commitMessage":"@@@Save memory when string terms are not on top (#57758)\n\nThis reworks string flavored implementations of the `terms` aggregation\nto save memory when it is under another bucket by dropping the usage of\n`asMultiBucketAggregator`.\n","date":"2020-06-09 20:43:53","modifiedFileCount":"12","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-15 20:49:13","codes":[{"authorDate":"2020-06-09 20:43:53","commitOrder":4,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-06-09 20:43:53","endLine":291,"groupId":"23122","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/5788ec6a7c94ac5a8783028f84ff1ecb24a94f.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"},{"authorDate":"2020-09-15 20:49:13","commitOrder":4,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-09-15 20:49:13","endLine":560,"groupId":"26275","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/80f499d237095456e0845c3b897deffb04d2c0.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"}],"commitId":"049bca0959047a532a145b61e28175aac56bf883","commitMessage":"@@@Add more debugging information for cardinality agg (#62317)\n\nThis adds two extra bits of info to the profiler:\n1. Count of the number of different types of collectors. This lets us figure\n   out if we're using the optimization for segment ordinals. It adds a few\n   more similar counters just for good measure.\n2. Profiles the `getLeafCollector` and `postCollection` methods. These are\n   non-trivial for some aggregations.  like cardinality.","date":"2020-09-15 20:49:13","modifiedFileCount":"4","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-29 05:33:27","codes":[{"authorDate":"2020-06-09 20:43:53","commitOrder":5,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-06-09 20:43:53","endLine":291,"groupId":"23122","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/5788ec6a7c94ac5a8783028f84ff1ecb24a94f.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"},{"authorDate":"2020-10-29 05:33:27","commitOrder":5,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-10-29 05:33:27","endLine":545,"groupId":"26275","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/04/08ecb21f2ee7594cd909bfce057d6f6291027e.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"3af540b50dd526ee035c20d691d8ec32e8b5068a","commitMessage":"@@@Remove aggregation's postCollect phase (#64016)\n\nAfter #63811 it became clear to me that `postCollect` is kind of\ndangerous and not all that useful. So this removes it.\n\nThe trouble with `postCollect` is that it all happened right after we\nfinished calling `collect` on the `LeafBucketCollectors` but before we\nbuilt the aggregation results. But in #63811 we found out that we can't\ncall `postCollect` on the children of `parent` or `child` aggregators\nuntil we know which *which* aggregation results we're building.\n\nSo this removes `postCollect` and moves all of the things we did at\npost-collect phase into `buildAggregations` or into hooks called in\nthose methods.\n","date":"2020-10-29 05:33:27","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-02-11 08:12:50","codes":[{"authorDate":"2020-06-09 20:43:53","commitOrder":6,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2020-06-09 20:43:53","endLine":291,"groupId":"23122","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/5788ec6a7c94ac5a8783028f84ff1ecb24a94f.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"},{"authorDate":"2021-02-11 08:12:50","commitOrder":6,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2021-02-11 08:12:50","endLine":555,"groupId":"26275","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/e535afb762eef9edf84ba4806512e6b0477a2d.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"0bbc6addd9b5314db9115fa4ac10211e43ba2d66","commitMessage":"@@@Revert \"Remove aggregation's postCollect phase (#68615)\n\nThis partially reverts #64016 and  and adds #67839 and adds\nadditional tests that would have caught issues with the changes\nin #64016. It's mostly Nik's code.  I am just cleaning things up\na bit.\n\nCo-authored-by: Nik Everett <nik9000@gmail.com>\n","date":"2021-02-11 08:12:50","modifiedFileCount":"40","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-06-21 22:10:41","codes":[{"authorDate":"2021-06-21 22:10:41","commitOrder":7,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult, \"avg\");\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                avgAggResult.getDebugInfo(),\n                matchesMap().entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2021-06-21 22:10:41","endLine":313,"groupId":"60189","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/6ba2db67408475802c66df1df0ca09b323e6a5.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult);\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2021-06-21 22:10:41","commitOrder":7,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2021-06-21 22:10:41","endLine":569,"groupId":"60198","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/6ba2db67408475802c66df1df0ca09b323e6a5.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            Map<String, Object> histoDebugInfo = histoAggResult.getDebugInfo();\n            assertThat(histoDebugInfo, notNullValue());\n            assertThat(histoDebugInfo.keySet(), equalTo(Set.of(TOTAL_BUCKETS)));\n            assertThat(((Number) histoDebugInfo.get(TOTAL_BUCKETS)).longValue(), greaterThan(0L));\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(avgAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertThat(maxAggResult.getDebugInfo(), equalTo(Map.of()));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"M"}],"commitId":"8904ffe2bebf29d1f3f17f11233016a160cd1217","commitMessage":"@@@Add extra profiling information to terms agg (#73636)\n\nI was helping some folks debug an issue with the terms agg and noticed\nthat we didn't always have the `total_buckets` debug information. I also\nnoticed that we can't tell how many buckets we build.  so I added that\ntoo as `built_buckets`.\n\nFinally.  I noticed that when we're using segment ords we count segments\nwithout any values as \"multi-valued\". We can do better there and count\nthem as no-valued. That will.  mostly.  just improve the profiling. When\nwe collect from global ords we have no way to tell how many values are\non the segment so segments without any values will.  sadly.  in this case\nstill be miscounted as multi-valued.\n","date":"2021-06-21 22:10:41","modifiedFileCount":"6","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-09-08 21:20:26","codes":[{"authorDate":"2021-09-08 21:20:26","commitOrder":8,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, SearchProfileQueryPhaseResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (SearchProfileQueryPhaseResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult, \"avg\");\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                avgAggResult.getDebugInfo(),\n                matchesMap().entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2021-09-08 21:20:26","endLine":312,"groupId":"60189","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/558c1145cc47ab6c16ee47205043f74f6e473f.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult, \"avg\");\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                avgAggResult.getDebugInfo(),\n                matchesMap().entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2021-09-08 21:20:26","commitOrder":8,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, SearchProfileQueryPhaseResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (SearchProfileQueryPhaseResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2021-09-08 21:20:26","endLine":568,"groupId":"60198","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/558c1145cc47ab6c16ee47205043f74f6e473f.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, ProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (ProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"d9debbfe03b23e782d6afdadddd658b3d83bf710","commitMessage":"@@@Rename profile results for fetch profiling (#77195)\n\nThis renames the results objects that we use for profiling searches to\nline up with the names that make sense when we introduce profiling the\nfetch phase. This change is *just* renaming the classes in an IDE and\nfixing checkstyle.\n\nRelates to #77064","date":"2021-09-08 21:20:26","modifiedFileCount":"21","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-09-13 22:00:36","codes":[{"authorDate":"2021-09-13 22:00:36","commitOrder":9,"curCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, SearchProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (SearchProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult, \"avg\");\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                avgAggResult.getDebugInfo(),\n                matchesMap().entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2021-09-13 22:00:36","endLine":312,"groupId":"106625","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"testMultiLevelProfileBreadthFirst","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/37832f0bea5fd6ca9237549b7b33b98cf925ea.src","preCode":"    public void testMultiLevelProfileBreadthFirst() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L).subAggregation(terms(\"terms\")\n                        .collectMode(SubAggCollectionMode.BREADTH_FIRST).field(TAG_FIELD).subAggregation(avg(\"avg\").field(NUMBER_FIELD))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, SearchProfileQueryPhaseResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (SearchProfileQueryPhaseResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult termsAggResult = histoAggResult.getProfiledChildren().get(0);\n            assertThat(termsAggResult, notNullValue());\n            assertThat(termsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(termsAggResult.getLuceneDescription(), equalTo(\"terms\"));\n            assertThat(termsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> termsBreakdown = termsAggResult.getTimeBreakdown();\n            assertThat(termsBreakdown, notNullValue());\n            assertThat(termsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(termsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(termsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(termsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(termsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(termsAggResult, \"avg\");\n            assertThat(termsAggResult.getProfiledChildren().size(), equalTo(1));\n\n            ProfileResult avgAggResult = termsAggResult.getProfiledChildren().get(0);\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getLuceneDescription(), equalTo(\"avg\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                avgAggResult.getDebugInfo(),\n                matchesMap().entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2021-09-13 22:00:36","commitOrder":9,"curCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, SearchProfileShardResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (SearchProfileShardResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","date":"2021-09-13 22:00:36","endLine":568,"groupId":"106625","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testComplexProfile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/37832f0bea5fd6ca9237549b7b33b98cf925ea.src","preCode":"    public void testComplexProfile() {\n        SearchResponse response = client().prepareSearch(\"idx\").setProfile(true)\n                .addAggregation(histogram(\"histo\").field(NUMBER_FIELD).interval(1L)\n                        .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD)))\n                        .subAggregation(terms(\"strings\").field(STRING_FIELD)\n                                .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                .subAggregation(max(\"max\").field(NUMBER_FIELD))\n                                .subAggregation(terms(\"tags\").field(TAG_FIELD)\n                                        .subAggregation(avg(\"avg\").field(NUMBER_FIELD))\n                                        .subAggregation(max(\"max\").field(NUMBER_FIELD)))))\n                .get();\n        assertSearchResponse(response);\n        Map<String, SearchProfileQueryPhaseResult> profileResults = response.getProfileResults();\n        assertThat(profileResults, notNullValue());\n        assertThat(profileResults.size(), equalTo(getNumShards(\"idx\").numPrimaries));\n        for (SearchProfileQueryPhaseResult profileShardResult : profileResults.values()) {\n            assertThat(profileShardResult, notNullValue());\n            AggregationProfileShardResult aggProfileResults = profileShardResult.getAggregationProfileResults();\n            assertThat(aggProfileResults, notNullValue());\n            List<ProfileResult> aggProfileResultsList = aggProfileResults.getProfileResults();\n            assertThat(aggProfileResultsList, notNullValue());\n            assertThat(aggProfileResultsList.size(), equalTo(1));\n            ProfileResult histoAggResult = aggProfileResultsList.get(0);\n            assertThat(histoAggResult, notNullValue());\n            assertThat(histoAggResult.getQueryName(),\n                    equalTo(\"NumericHistogramAggregator\"));\n            assertThat(histoAggResult.getLuceneDescription(), equalTo(\"histo\"));\n            assertThat(histoAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> histoBreakdown = histoAggResult.getTimeBreakdown();\n            assertThat(histoBreakdown, notNullValue());\n            assertThat(histoBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(histoBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(histoBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(histoBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(histoBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(histoBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(\n                histoAggResult.getDebugInfo(),\n                matchesMap().entry(TOTAL_BUCKETS, greaterThan(0L)).entry(BUILT_BUCKETS, greaterThan(0))\n            );\n            assertThat(histoAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> histoAggResultSubAggregations = histoAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult tagsAggResult = histoAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            Map<String, ProfileResult> tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            ProfileResult avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            ProfileResult stringsAggResult = histoAggResultSubAggregations.get(\"strings\");\n            assertThat(stringsAggResult, notNullValue());\n            assertThat(stringsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(stringsAggResult.getTime(), greaterThan(0L));\n            Map<String, Long> stringsBreakdown = stringsAggResult.getTimeBreakdown();\n            assertThat(stringsBreakdown, notNullValue());\n            assertThat(stringsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(stringsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(stringsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(stringsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(stringsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(stringsAggResult);\n            assertThat(stringsAggResult.getProfiledChildren().size(), equalTo(3));\n\n            Map<String, ProfileResult> stringsAggResultSubAggregations = stringsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = stringsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = stringsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n\n            tagsAggResult = stringsAggResultSubAggregations.get(\"tags\");\n            assertThat(tagsAggResult, notNullValue());\n            assertThat(tagsAggResult.getQueryName(), equalTo(GlobalOrdinalsStringTermsAggregator.class.getSimpleName()));\n            assertThat(tagsAggResult.getLuceneDescription(), equalTo(\"tags\"));\n            assertThat(tagsAggResult.getTime(), greaterThan(0L));\n            tagsBreakdown = tagsAggResult.getTimeBreakdown();\n            assertThat(tagsBreakdown, notNullValue());\n            assertThat(tagsBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(tagsBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(tagsBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(tagsBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(tagsBreakdown.get(REDUCE), equalTo(0L));\n            assertRemapTermsDebugInfo(tagsAggResult);\n            assertThat(tagsAggResult.getProfiledChildren().size(), equalTo(2));\n\n            tagsAggResultSubAggregations = tagsAggResult.getProfiledChildren().stream()\n                    .collect(Collectors.toMap(ProfileResult::getLuceneDescription, s -> s));\n\n            avgAggResult = tagsAggResultSubAggregations.get(\"avg\");\n            assertThat(avgAggResult, notNullValue());\n            assertThat(avgAggResult.getQueryName(), equalTo(\"AvgAggregator\"));\n            assertThat(avgAggResult.getTime(), greaterThan(0L));\n            avgBreakdown = avgAggResult.getTimeBreakdown();\n            assertThat(avgBreakdown, notNullValue());\n            assertThat(avgBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(avgBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(avgBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(avgBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(avgBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(avgBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(avgAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(avgAggResult.getProfiledChildren().size(), equalTo(0));\n\n            maxAggResult = tagsAggResultSubAggregations.get(\"max\");\n            assertThat(maxAggResult, notNullValue());\n            assertThat(maxAggResult.getQueryName(), equalTo(\"MaxAggregator\"));\n            assertThat(maxAggResult.getTime(), greaterThan(0L));\n            maxBreakdown = maxAggResult.getTimeBreakdown();\n            assertThat(maxBreakdown, notNullValue());\n            assertThat(maxBreakdown.keySet(), equalTo(BREAKDOWN_KEYS));\n            assertThat(maxBreakdown.get(INITIALIZE), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_LEAF_COLLECTOR), greaterThan(0L));\n            assertThat(maxBreakdown.get(COLLECT), greaterThan(0L));\n            assertThat(maxBreakdown.get(POST_COLLECTION), greaterThan(0L));\n            assertThat(maxBreakdown.get(BUILD_AGGREGATION), greaterThan(0L));\n            assertThat(maxBreakdown.get(REDUCE), equalTo(0L));\n            assertMap(maxAggResult.getDebugInfo(), matchesMap().entry(BUILT_BUCKETS, greaterThan(0)));\n            assertThat(maxAggResult.getProfiledChildren().size(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/profile/aggregation/AggregationProfilerIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"c2c0165fd2811eb88e10eaa0089fbdbdeaab020c","commitMessage":"@@@Profile the fetch phase (#77064)\n\nThis adds profiling to the fetch phase so we can tell when fetching is\nslower than we'd like and we can tell which portion of the fetch is\nslow. The output includes which stored fields were loaded.  how long it\ntook to load stored fields.  which fetch sub-phases were run.  and how\nlong those fetch sub-phases took.\n\nCloses #75892\n\n* Skip bwc\n\n* Don't compare fetch profiles\n\n* Use passed one\n\n* no npe\n\n* Do last rename\n\n* Move method down\n\n* serialization tests\n\n* Fix sneaky serialization\n\n* Test for sneaky bug\n\n* license header\n\n* Document\n\n* Fix test\n\n* newline\n\n* Restore assertion\n\n* unit test merging\n\n* Handle inner hits\n\n* Fixup\n\n* Revert unneeded\n\n* Revert inner hits profiling\n\n* Fix names\n\n* Fixup names\n\n* Move results building\n\n* Drop loaded_nested\n\n* Checkstyle\n\n* Fixup more\n\n* Finish writeable cleanup\n\nAdd unit tests for merge\n\n* Remove null checking builder\n\n* Fix wire mistake\n\nHow did this pass before?!\n\n* Rename\n\n* Remove funny builder\n\n* Remove name munging","date":"2021-09-13 22:00:36","modifiedFileCount":"42","status":"M","submitter":"Nik Everett"}]
