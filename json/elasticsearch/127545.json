[{"authorTime":"2018-11-21 05:10:06","codes":[{"authorDate":"2018-11-21 05:10:06","commitOrder":1,"curCode":"        public DecayDateLinear(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId);\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = scale / (1.0 - decay);\n        }\n","date":"2018-11-21 05:10:06","endLine":221,"groupId":"49239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"DecayDateLinear","params":"(StringoriginStr@StringscaleStr@StringoffsetStr@doubledecay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/2d921091e3725283095cace19fb62b11107389.src","preCode":"        public DecayDateLinear(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId);\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = scale / (1.0 - decay);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScoreScriptUtils.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"},{"authorDate":"2018-11-21 05:10:06","commitOrder":1,"curCode":"        public DecayDateGauss(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId);\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = 0.5 * Math.pow(scale, 2.0) / Math.log(decay);\n        }\n","date":"2018-11-21 05:10:06","endLine":267,"groupId":"49239","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"DecayDateGauss","params":"(StringoriginStr@StringscaleStr@StringoffsetStr@doubledecay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/2d921091e3725283095cace19fb62b11107389.src","preCode":"        public DecayDateGauss(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId);\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = 0.5 * Math.pow(scale, 2.0) / Math.log(decay);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScoreScriptUtils.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"}],"commitId":"643bb20137182582478584f63ae9d31101b7d9b8","commitMessage":"@@@Add a new query type - ScriptScoreQuery (#34533)\n\n* Add a new query type - ScriptScoreQuery\n\nscript_score query uses script to calculate document scores.\nAdded as a substitute for function_score with an intentation\nto deprecate function_scoreq query.\n\n```http\nGET /_search\n{\n    \"query\": {\n        \"script_score\" : {\n            \"query\": {\n                \"match\": { \"message\": \"elasticsearch\" }\n            }. \n            \"script\" : {\n              \"source\": \"Math.log(2 + doc['likes'].value)\"\n            }. \n            \"min_score\" : 2\n        }\n    }\n}\n```\n\nAdd several functions to painless to be used inside script_score:\n\ndouble rational(double.  double)\ndouble sigmoid(double.  double.  double)\ndouble randomNotReproducible() \ndouble randomReproducible(String.  int) \n\ndouble decayGeoLinear(String.  String.  String.  double.  GeoPoint)\ndouble decayGeoExp(String.  String.  String.  double.  GeoPoint)\ndouble decayGeoGauss(String.  String.  String.  double.  GeoPoint)\n\ndouble decayNumericLinear(String.  String.  String.  double.  double)\ndouble decayNumericExp(String.  String.  String.  double.  double)\ndouble decayNumericGauss(String.  String.  String.  double.  double)\n\ndouble decayDateLinear(String.  String.  String.  double.  JodaCompatibleZonedDateTime)\ndouble decayDateExp(String.  String.  String.  double.  JodaCompatibleZonedDateTime)\ndouble decayDateGauss(String.  String.  String.  double.  JodaCompatibleZonedDateTime)\n\nDate functions only works on dates in  the default format and default time zone\n\n","date":"2018-11-21 05:10:06","modifiedFileCount":"6","status":"B","submitter":"Mayya Sharipova"},{"authorTime":"2019-01-23 17:40:05","codes":[{"authorDate":"2019-01-23 17:40:05","commitOrder":2,"curCode":"        public DecayDateLinear(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId).toEpochMilli();\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = scale / (1.0 - decay);\n        }\n","date":"2019-01-23 17:40:05","endLine":221,"groupId":"127545","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"DecayDateLinear","params":"(StringoriginStr@StringscaleStr@StringoffsetStr@doubledecay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/3ef1fb23d85121a8a9225d5274f7084158c6af.src","preCode":"        public DecayDateLinear(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId);\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = scale / (1.0 - decay);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScoreScriptUtils.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2019-01-23 17:40:05","commitOrder":2,"curCode":"        public DecayDateGauss(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId).toEpochMilli();\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = 0.5 * Math.pow(scale, 2.0) / Math.log(decay);\n        }\n","date":"2019-01-23 17:40:05","endLine":267,"groupId":"127545","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"DecayDateGauss","params":"(StringoriginStr@StringscaleStr@StringoffsetStr@doubledecay)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/3ef1fb23d85121a8a9225d5274f7084158c6af.src","preCode":"        public DecayDateGauss(String originStr, String scaleStr, String offsetStr, double decay) {\n            this.origin = dateParser.parse(originStr, null, false, defaultZoneId);\n            long scale = TimeValue.parseTimeValue(scaleStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".scale\")\n                .getMillis();\n            this.offset = TimeValue.parseTimeValue(offsetStr, TimeValue.timeValueHours(24), getClass().getSimpleName() + \".offset\")\n                .getMillis();\n            this.scaling = 0.5 * Math.pow(scale, 2.0) / Math.log(decay);\n        }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScoreScriptUtils.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"daa2ec8a605d385a65b9ab3e89d016b3fd0dffe2","commitMessage":"@@@Switch mapping/aggregations over to java time (#36363)\n\nThis commit moves the aggregation and mapping code from joda time to\njava time. This includes field mappers.  root object mappers.  aggregations with date\nhistograms.  query builders and a lot of changes within tests.\n\nThe cut-over to java time is a requirement so that we can support nanoseconds\nproperly in a future field mapper.\n\nRelates #27330","date":"2019-01-23 17:40:05","modifiedFileCount":"154","status":"M","submitter":"Alexander Reelsen"}]
