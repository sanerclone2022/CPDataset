[{"authorTime":"2019-02-12 20:37:12","codes":[{"authorDate":"2019-02-12 20:37:12","commitOrder":1,"curCode":"    public void testRemoveAction() {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Remove.INSTANCE,\n                        new RetentionLeaseActions.RemoveRequest(indexService.getShard(0).shardId(), id))\n                .actionGet();\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(0));\n    }\n","date":"2019-02-12 20:37:12","endLine":269,"groupId":"31409","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bf/f4493321289fd3b3a6e0e5c42365fab8a642cb.src","preCode":"    public void testRemoveAction() {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Remove.INSTANCE,\n                        new RetentionLeaseActions.RemoveRequest(indexService.getShard(0).shardId(), id))\n                .actionGet();\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseActionsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"},{"authorDate":"2019-02-12 20:37:12","commitOrder":1,"curCode":"    public void testRemoveUnderBlock() throws InterruptedException {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        runActionUnderBlockTest(\n                indexService,\n                (shardId, actionLatch) ->\n                        client().execute(\n                                RetentionLeaseActions.Remove.INSTANCE,\n                                new RetentionLeaseActions.RemoveRequest(shardId, id),\n                                new ActionListener<RetentionLeaseActions.Response>() {\n\n                                    @Override\n                                    public void onResponse(final RetentionLeaseActions.Response response) {\n                                        actionLatch.countDown();\n                                    }\n\n                                    @Override\n                                    public void onFailure(final Exception e) {\n                                        fail(e.toString());\n                                    }\n\n                                }));\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(0));\n    }\n","date":"2019-02-12 20:37:12","endLine":488,"groupId":"31420","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveUnderBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bf/f4493321289fd3b3a6e0e5c42365fab8a642cb.src","preCode":"    public void testRemoveUnderBlock() throws InterruptedException {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        runActionUnderBlockTest(\n                indexService,\n                (shardId, actionLatch) ->\n                        client().execute(\n                                RetentionLeaseActions.Remove.INSTANCE,\n                                new RetentionLeaseActions.RemoveRequest(shardId, id),\n                                new ActionListener<RetentionLeaseActions.Response>() {\n\n                                    @Override\n                                    public void onResponse(final RetentionLeaseActions.Response response) {\n                                        actionLatch.countDown();\n                                    }\n\n                                    @Override\n                                    public void onFailure(final Exception e) {\n                                        fail(e.toString());\n                                    }\n\n                                }));\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseActionsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"}],"commitId":"bbe990f86275ed6d696681afc636d940ddf49d26","commitMessage":"@@@Introduce retention lease actions (#38756)\n\nThis commit introduces actions for some common retention lease\noperations that clients need to be able to perform remotely. These\nactions include add/renew/remove.","date":"2019-02-12 20:37:12","modifiedFileCount":"8","status":"B","submitter":"Jason Tedor"},{"authorTime":"2019-08-02 22:00:32","codes":[{"authorDate":"2019-08-02 22:00:32","commitOrder":2,"curCode":"    public void testRemoveAction() {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Remove.INSTANCE,\n                        new RetentionLeaseActions.RemoveRequest(indexService.getShard(0).shardId(), id))\n                .actionGet();\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(1));\n        assertTrue(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().contains(\n            ReplicationTracker.getPeerRecoveryRetentionLeaseId(stats.getShards()[0].getShardRouting())));\n    }\n","date":"2019-08-02 22:00:32","endLine":278,"groupId":"31409","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/1a93e8268d157c227ee01bbd76fad33c387e23.src","preCode":"    public void testRemoveAction() {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Remove.INSTANCE,\n                        new RetentionLeaseActions.RemoveRequest(indexService.getShard(0).shardId(), id))\n                .actionGet();\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseActionsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2019-08-02 22:00:32","commitOrder":2,"curCode":"    public void testRemoveUnderBlock() throws InterruptedException {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        runActionUnderBlockTest(\n                indexService,\n                (shardId, actionLatch) ->\n                        client().execute(\n                                RetentionLeaseActions.Remove.INSTANCE,\n                                new RetentionLeaseActions.RemoveRequest(shardId, id),\n                                new ActionListener<RetentionLeaseActions.Response>() {\n\n                                    @Override\n                                    public void onResponse(final RetentionLeaseActions.Response response) {\n                                        actionLatch.countDown();\n                                    }\n\n                                    @Override\n                                    public void onFailure(final Exception e) {\n                                        fail(e.toString());\n                                    }\n\n                                }));\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(1));\n        assertTrue(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().contains(\n            ReplicationTracker.getPeerRecoveryRetentionLeaseId(stats.getShards()[0].getShardRouting())));\n    }\n","date":"2019-08-02 22:00:32","endLine":503,"groupId":"31420","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveUnderBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/1a93e8268d157c227ee01bbd76fad33c387e23.src","preCode":"    public void testRemoveUnderBlock() throws InterruptedException {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        runActionUnderBlockTest(\n                indexService,\n                (shardId, actionLatch) ->\n                        client().execute(\n                                RetentionLeaseActions.Remove.INSTANCE,\n                                new RetentionLeaseActions.RemoveRequest(shardId, id),\n                                new ActionListener<RetentionLeaseActions.Response>() {\n\n                                    @Override\n                                    public void onResponse(final RetentionLeaseActions.Response response) {\n                                        actionLatch.countDown();\n                                    }\n\n                                    @Override\n                                    public void onFailure(final Exception e) {\n                                        fail(e.toString());\n                                    }\n\n                                }));\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseActionsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"}],"commitId":"01287eacb2f2d2673bc25078fb0b76d81beaad9b","commitMessage":"@@@Use index for peer recovery instead of translog (#45136)\n\nToday we recover a replica by copying operations from the primary's translog.\nHowever we also retain some historical operations in the index itself.  as long\nas soft-deletes are enabled. This commit adjusts peer recovery to use the\noperations in the index for recovery rather than those in the translog.  and\nensures that the replication group retains enough history for use in peer\nrecovery by means of retention leases.\n\nReverts #38904 and #42211\nRelates #41536","date":"2019-08-02 22:00:32","modifiedFileCount":"42","status":"M","submitter":"David Turner"},{"authorTime":"2020-11-18 16:50:23","codes":[{"authorDate":"2019-08-02 22:00:32","commitOrder":3,"curCode":"    public void testRemoveAction() {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Remove.INSTANCE,\n                        new RetentionLeaseActions.RemoveRequest(indexService.getShard(0).shardId(), id))\n                .actionGet();\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(1));\n        assertTrue(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().contains(\n            ReplicationTracker.getPeerRecoveryRetentionLeaseId(stats.getShards()[0].getShardRouting())));\n    }\n","date":"2019-08-02 22:00:32","endLine":278,"groupId":"103548","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRemoveAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/1a93e8268d157c227ee01bbd76fad33c387e23.src","preCode":"    public void testRemoveAction() {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Remove.INSTANCE,\n                        new RetentionLeaseActions.RemoveRequest(indexService.getShard(0).shardId(), id))\n                .actionGet();\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(1));\n        assertTrue(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().contains(\n            ReplicationTracker.getPeerRecoveryRetentionLeaseId(stats.getShards()[0].getShardRouting())));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseActionsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"},{"authorDate":"2020-11-18 16:50:23","commitOrder":3,"curCode":"    public void testRemoveUnderBlock() throws InterruptedException {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        runActionUnderBlockTest(\n                indexService,\n                (shardId, actionLatch) ->\n                        client().execute(\n                                RetentionLeaseActions.Remove.INSTANCE,\n                                new RetentionLeaseActions.RemoveRequest(shardId, id),\n                                new ActionListener<>() {\n\n                                    @Override\n                                    public void onResponse(final ActionResponse.Empty response) {\n                                        actionLatch.countDown();\n                                    }\n\n                                    @Override\n                                    public void onFailure(final Exception e) {\n                                        fail(e.toString());\n                                    }\n\n                                }));\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(1));\n        assertTrue(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().contains(\n            ReplicationTracker.getPeerRecoveryRetentionLeaseId(stats.getShards()[0].getShardRouting())));\n    }\n","date":"2020-11-18 16:50:23","endLine":504,"groupId":"103548","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveUnderBlock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/5ac508fbc10351398deceb3ee927c5cbdf153f.src","preCode":"    public void testRemoveUnderBlock() throws InterruptedException {\n        final Settings settings = Settings.builder()\n                .put(\"index.number_of_shards\", 1)\n                .put(\"index.number_of_replicas\", 0)\n                .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), true)\n                .build();\n        final IndexService indexService = createIndex(\"index\", settings);\n        ensureGreen(\"index\");\n        final String id = randomAlphaOfLength(8);\n        final long retainingSequenceNumber = randomBoolean() ? RETAIN_ALL : randomNonNegativeLong();\n        final String source = randomAlphaOfLength(8);\n\n        client()\n                .execute(\n                        RetentionLeaseActions.Add.INSTANCE,\n                        new RetentionLeaseActions.AddRequest(indexService.getShard(0).shardId(), id, retainingSequenceNumber, source))\n                .actionGet();\n\n        runActionUnderBlockTest(\n                indexService,\n                (shardId, actionLatch) ->\n                        client().execute(\n                                RetentionLeaseActions.Remove.INSTANCE,\n                                new RetentionLeaseActions.RemoveRequest(shardId, id),\n                                new ActionListener<RetentionLeaseActions.Response>() {\n\n                                    @Override\n                                    public void onResponse(final RetentionLeaseActions.Response response) {\n                                        actionLatch.countDown();\n                                    }\n\n                                    @Override\n                                    public void onFailure(final Exception e) {\n                                        fail(e.toString());\n                                    }\n\n                                }));\n\n        final IndicesStatsResponse stats = client()\n                .execute(\n                        IndicesStatsAction.INSTANCE,\n                        new IndicesStatsRequest().indices(\"index\"))\n                .actionGet();\n        assertNotNull(stats.getShards());\n        assertThat(stats.getShards(), arrayWithSize(1));\n        assertNotNull(stats.getShards()[0].getRetentionLeaseStats());\n        assertThat(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().leases(), hasSize(1));\n        assertTrue(stats.getShards()[0].getRetentionLeaseStats().retentionLeases().contains(\n            ReplicationTracker.getPeerRecoveryRetentionLeaseId(stats.getShards()[0].getShardRouting())));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseActionsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"}],"commitId":"acb811ea6d04a8366966a5effd094fede44b5d4f","commitMessage":"@@@Dry up Empty ActionResponse Implementations (#65035)\n\nNo need to have multiple empty action response implementations.\n=> Use a single class and singleton for all of them like we do for\nempty flat transport responses.","date":"2020-11-18 16:50:23","modifiedFileCount":"34","status":"M","submitter":"Armin Braun"}]
