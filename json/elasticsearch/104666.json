[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"8097","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/10292fa3e7c4546c61c41f8eb8d0e3e430f147.src","preCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        Engine.Searcher engineSearcher = new Engine.Searcher(\"test\", new IndexSearcher(reader));\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","date":"2018-04-26 03:22:53","endLine":187,"groupId":"8097","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproximations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/10292fa3e7c4546c61c41f8eb8d0e3e430f147.src","preCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        Engine.Searcher engineSearcher = new Engine.Searcher(\"test\", new IndexSearcher(reader));\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-28 01:00:37","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"8097","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/10292fa3e7c4546c61c41f8eb8d0e3e430f147.src","preCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"},{"authorDate":"2018-09-28 01:00:37","commitOrder":2,"curCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        Engine.Searcher engineSearcher = new Engine.Searcher(\"test\", new IndexSearcher(reader), logger);\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","date":"2018-09-28 01:00:37","endLine":393,"groupId":"8097","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproximations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/a9c8cb69a3190bac92a96297435ff15a15b961.src","preCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        Engine.Searcher engineSearcher = new Engine.Searcher(\"test\", new IndexSearcher(reader));\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"}],"commitId":"a26cc1a2422c7d6eda7d0c204f7588d79fa597e6","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-28 01:00:37","modifiedFileCount":"338","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-10-17 04:58:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"8097","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/10292fa3e7c4546c61c41f8eb8d0e3e430f147.src","preCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"},{"authorDate":"2018-10-17 04:58:53","commitOrder":3,"curCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        Engine.Searcher engineSearcher = new Engine.Searcher(\"test\", new IndexSearcher(reader), reader::close);\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","date":"2018-10-17 04:58:53","endLine":393,"groupId":"8097","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproximations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/a8049d741bd3e94de69c9d3454d36f5b732477.src","preCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        Engine.Searcher engineSearcher = new Engine.Searcher(\"test\", new IndexSearcher(reader), logger);\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"}],"commitId":"fbe8dc014c73b833fb5eb5f95215b4286af05644","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-17 04:58:53","modifiedFileCount":"144","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-06-28 21:42:43","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"8097","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/10292fa3e7c4546c61c41f8eb8d0e3e430f147.src","preCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"},{"authorDate":"2019-06-28 21:42:43","commitOrder":4,"curCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(reader, IndexSearcher.getDefaultSimilarity(),\n            null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","date":"2019-06-28 21:42:43","endLine":188,"groupId":"8097","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproximations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/9d3ba3b7dd48a5d756b3f6d553a53217474ac2.src","preCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        Engine.Searcher engineSearcher = new Engine.Searcher(\"test\", new IndexSearcher(reader), reader::close);\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(engineSearcher, null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"fd4eb96d1c2ee7091d99b5a5069673de45833801","commitMessage":"@@@Refactor IndexSearcherWrapper to disallow the wrapping of IndexSearcher (#43645)\n\nThis change removes the ability to wrap an IndexSearcher in plugins. The IndexSearcherWrapper is replaced by an IndexReaderWrapper and allows to wrap the DirectoryReader only. This simplifies the creation of the context IndexSearcher that is used on a per request basis. This change also moves the optimization that was implemented in the security index searcher wrapper to the ContextIndexSearcher that now checks the live docs to determine how the search should be executed. If the underlying live docs is a sparse bit set the searcher will compute the intersection\nbetweeen the query and the live docs instead of checking the live docs on every document that match the query.","date":"2019-06-28 21:42:43","modifiedFileCount":"18","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-11-20 22:33:41","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":5,"curCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"8097","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/10292fa3e7c4546c61c41f8eb8d0e3e430f147.src","preCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"},{"authorDate":"2019-11-20 22:33:41","commitOrder":5,"curCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2019-11-20 22:33:41","endLine":194,"groupId":"8097","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproximations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/5684930a9c57971964210116b510dc75c2ef35.src","preCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        \r\n        \r\n        ContextIndexSearcher searcher = new ContextIndexSearcher(reader, IndexSearcher.getDefaultSimilarity(),\n            null, MAYBE_CACHE_POLICY);\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"15023ba239679fab34f5a80becb804fd56acd47d","commitMessage":"@@@Disable caching when queries are profiled (#48195)\n\nThis change disables the query and request cache when\nprofile is set to true in the request. This means that profiled queries\nwill not check caches to execute the query and the result will never be\nadded in the cache either.\n\nCloses #33298","date":"2019-11-20 22:33:41","modifiedFileCount":"6","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-05-13 20:30:38","codes":[{"authorDate":"2020-05-13 20:30:38","commitOrder":6,"curCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\"), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\"), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\"), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\"), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\"), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\"), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2020-05-13 20:30:38","endLine":130,"groupId":"104666","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/d4c889d141485a48fb2d7f5e6607161a98235c.src","preCode":"    public void testBasic() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n        searcher.search(query, 1);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), equalTo(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), equalTo(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-05-13 20:30:38","commitOrder":6,"curCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\"), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\"), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\"), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\"), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\"), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\"), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","date":"2020-05-13 20:30:38","endLine":194,"groupId":"104666","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testApproximations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/d4c889d141485a48fb2d7f5e6607161a98235c.src","preCode":"    public void testApproximations() throws IOException {\n        QueryProfiler profiler = new QueryProfiler();\n        searcher.setProfiler(profiler);\n        Query query = new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random());\n        searcher.count(query);\n        List<ProfileResult> results = profiler.getTree();\n        assertEquals(1, results.size());\n        Map<String, Long> breakdown = results.get(0).getTimeBreakdown();\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString()).longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString()).longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString()).longValue(), greaterThan(0L));\n\n        assertThat(breakdown.get(QueryTimingType.CREATE_WEIGHT.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.BUILD_SCORER.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.NEXT_DOC.toString() + \"_count\").longValue(), greaterThan(0L));\n        assertThat(breakdown.get(QueryTimingType.ADVANCE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.SCORE.toString() + \"_count\").longValue(), equalTo(0L));\n        assertThat(breakdown.get(QueryTimingType.MATCH.toString() + \"_count\").longValue(), greaterThan(0L));\n\n        long rewriteTime = profiler.getRewriteTime();\n        assertThat(rewriteTime, greaterThan(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/profile/query/QueryProfilerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"4a8d93f55b3907253d28c3b66eb04c1a4021755e","commitMessage":"@@@Add list of defered aggregations to the profiler (#56208)\n\nThis adds a few things to the `breakdown` of the profiler:\n* `histogram` aggregations now contain `total_buckets` which is the\n  count of buckets that they collected. This could be useful when\n  debugging a histogram inside of another bucketing agg that is fairly\n  selective.\n* All bucketing aggs that can delay their sub-aggregations will now add\n  a list of delayed sub-aggregations. This is useful because we\n  sometimes have fairly involved logic around which sub-aggregations get\n  delayed and this will save you from having to guess.\n* Aggregtations wrapped in the `MultiBucketAggregatorWrapper` can't\n  accurately add anything to the breakdown. Instead they the wrapper\n  adds a marker entry `\"multi_bucket_aggregator_wrapper\": true` so we\n  can be quickly pick out such aggregations when debugging.\n\nIt also fixes a bug where `_count` breakdown entries were contributing\nto the overall `time_in_nanos`. They didn't add a large amount of time\nso it is unlikely that this caused a big problem.  but I was there.\n\nTo support the arbitrary breakdown data this reworks the profiler so\nthat the `breakdown` can contain any data that is supported by\n`StreamOutput#writeGenericValue(Object)` and\n`XContentBuilder#value(Object)`.\n","date":"2020-05-13 20:30:38","modifiedFileCount":"17","status":"M","submitter":"Nik Everett"}]
