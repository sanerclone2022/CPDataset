[{"authorTime":"2019-03-28 01:03:30","codes":[{"authorDate":"2019-03-28 01:03:30","commitOrder":1,"curCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createShardContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n    }\n","date":"2019-03-28 01:03:30","endLine":264,"groupId":"51451","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixSingleField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/a722fc3113957654de0506236e17be48c05a85.src","preCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createShardContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"B"},{"authorDate":"2019-03-28 01:03:30","commitOrder":1,"curCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_ALIAS_FIELD_NAME);\n            builder.type(Type.BOOL_PREFIX);\n            final Query query = builder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            for (Query disjunctQuery : disMaxQuery.getDisjuncts()) {\n                assertThat(disjunctQuery, instanceOf(BooleanQuery.class));\n                final BooleanQuery booleanQuery = (BooleanQuery) disjunctQuery;\n                assertThat(booleanQuery.clauses(), hasSize(2));\n                assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n                assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(),\n                    equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n            }\n        }\n\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_FIELD_NAME_2);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(STRING_FIELD_NAME_2, \"foo bar\")));\n        }\n    }\n","date":"2019-03-28 01:03:30","endLine":298,"groupId":"51451","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixMultipleFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/a722fc3113957654de0506236e17be48c05a85.src","preCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_ALIAS_FIELD_NAME);\n            builder.type(Type.BOOL_PREFIX);\n            final Query query = builder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            for (Query disjunctQuery : disMaxQuery.getDisjuncts()) {\n                assertThat(disjunctQuery, instanceOf(BooleanQuery.class));\n                final BooleanQuery booleanQuery = (BooleanQuery) disjunctQuery;\n                assertThat(booleanQuery.clauses(), hasSize(2));\n                assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n                assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(),\n                    equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n            }\n        }\n\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_FIELD_NAME_2);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(STRING_FIELD_NAME_2, \"foo bar\")));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"}],"commitId":"6bba9fc83bc30d29c67e66e8e4c70f4dcc3b7494","commitMessage":"@@@search as you type fieldmapper (#35600)\n\nAdds the search_as_you_type field type that acts like a text field optimized\nfor as-you-type search completion. It creates a couple subfields that analyze\nthe indexed terms as shingles.  against which full terms are queried.  and a\nprefix subfield that analyze terms as the largest shingle size used and\nedge-ngrams.  against which partial terms are queried\n\nAdds a match_bool_prefix query type that creates a boolean clause of a term\nquery for each term except the last.  for which a boolean clause with a prefix\nquery is created.\n\nThe match_bool_prefix query is the recommended way of querying a search as you\ntype field.  which will boil down to term queries for each shingle of the input\ntext on the appropriate shingle field.  and the final (possibly partial) term\nas a term query on the prefix field. This field type also supports phrase and\nphrase prefix queries however\n","date":"2019-03-28 01:03:30","modifiedFileCount":"10","status":"B","submitter":"Andy Bristol"},{"authorTime":"2019-06-05 14:47:33","codes":[{"authorDate":"2019-03-28 01:03:30","commitOrder":2,"curCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createShardContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n    }\n","date":"2019-03-28 01:03:30","endLine":264,"groupId":"51451","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixSingleField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/a722fc3113957654de0506236e17be48c05a85.src","preCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createShardContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"N"},{"authorDate":"2019-06-05 14:47:33","commitOrder":2,"curCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_FIELD_NAME_2);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(STRING_FIELD_NAME_2, \"foo bar\")));\n        }\n    }\n","date":"2019-06-05 14:47:33","endLine":280,"groupId":"51451","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixMultipleFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/810d6686c4be97de2039963ad0e18e6ad64cb7.src","preCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_ALIAS_FIELD_NAME);\n            builder.type(Type.BOOL_PREFIX);\n            final Query query = builder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            for (Query disjunctQuery : disMaxQuery.getDisjuncts()) {\n                assertThat(disjunctQuery, instanceOf(BooleanQuery.class));\n                final BooleanQuery booleanQuery = (BooleanQuery) disjunctQuery;\n                assertThat(booleanQuery.clauses(), hasSize(2));\n                assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n                assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(),\n                    equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n            }\n        }\n\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_FIELD_NAME_2);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(STRING_FIELD_NAME_2, \"foo bar\")));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"3cfa4a6aa86499f57d72a7aca0a4440e48523e92","commitMessage":"@@@Deduplicate alias and concrete fields in query field expansion (#42328)\n\nThe full-text query parsers accept field pattern that are expanded using the mapping.\nAlias field are also detected during the expansion but they are not deduplicated with the\nconcrete fields that are found from other patterns (or the same). This change ensures\nthat we deduplicate the target fields of the full-text query parsers in order to avoid\nadding the same clause multiple times. Boolean queries are already able to deduplicate\nclauses during rewrite but since we also use DisjunctionMaxQuery it is preferable to detect\n these duplicates early on.\n","date":"2019-06-05 14:47:33","modifiedFileCount":"5","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-04-03 22:00:46","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":3,"curCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createShardContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(TEXT_FIELD_NAME, \"bar\")));\n    }\n","date":"2020-04-03 22:00:46","endLine":257,"groupId":"51451","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixSingleField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/227541b3a9d022dfdc905e2b00e19d548e5786.src","preCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createShardContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(STRING_FIELD_NAME, \"bar\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2020-04-03 22:00:46","commitOrder":3,"curCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(KEYWORD_FIELD_NAME, \"foo bar\")));\n        }\n    }\n","date":"2020-04-03 22:00:46","endLine":274,"groupId":"51451","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixMultipleFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/227541b3a9d022dfdc905e2b00e19d548e5786.src","preCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", STRING_FIELD_NAME, STRING_FIELD_NAME_2);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(STRING_FIELD_NAME_2, \"foo bar\")));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"f5759bb2092f1a957e79626c872c3f5707c1ee04","commitMessage":"@@@Rename field name constants in AbstractBuilderTestCase (#53234)\n\nSome field name constants were not updaten when we moved from \"string\" to \"text\"\nand \"keyword\" fields. Renaming them makes it easier and faster to know which\nfield type is used in test subclassing this base test case.","date":"2020-04-03 22:00:46","modifiedFileCount":"34","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(TEXT_FIELD_NAME, \"bar\")));\n    }\n","date":"2021-01-15 01:11:59","endLine":258,"groupId":"51451","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixSingleField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/c52824fefbdd7894f0f7f5324cc199b7229240.src","preCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createShardContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(TEXT_FIELD_NAME, \"bar\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createSearchExecutionContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(KEYWORD_FIELD_NAME, \"foo bar\")));\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":275,"groupId":"51451","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixMultipleFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/c52824fefbdd7894f0f7f5324cc199b7229240.src","preCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createShardContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(KEYWORD_FIELD_NAME, \"foo bar\")));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(TEXT_FIELD_NAME, \"bar\")));\n    }\n","date":"2021-01-15 01:11:59","endLine":258,"groupId":"103446","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryBooleanPrefixSingleField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/c52824fefbdd7894f0f7f5324cc199b7229240.src","preCode":"    public void testToQueryBooleanPrefixSingleField() throws IOException {\n        final MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME);\n        builder.type(Type.BOOL_PREFIX);\n        final Query query = builder.toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(BooleanQuery.class));\n        final BooleanQuery booleanQuery = (BooleanQuery) query;\n        assertThat(booleanQuery.clauses(), hasSize(2));\n        assertThat(assertBooleanSubQuery(booleanQuery, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n        assertThat(assertBooleanSubQuery(booleanQuery, PrefixQuery.class, 1).getPrefix(), equalTo(new Term(TEXT_FIELD_NAME, \"bar\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"N"},{"authorDate":"2021-06-17 05:31:31","commitOrder":5,"curCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createSearchExecutionContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            for (Query disjunct : disMaxQuery.getDisjuncts()) {\n                if (disjunct instanceof BooleanQuery) {\n                    final BooleanQuery firstDisjunct = (BooleanQuery) disjunct;\n                    assertThat(firstDisjunct.clauses(), hasSize(2));\n                    assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(),\n                        equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n                } else if (disjunct instanceof PrefixQuery) {\n                    final PrefixQuery secondDisjunct = (PrefixQuery) disjunct;\n                    assertThat(secondDisjunct.getPrefix(), equalTo(new Term(KEYWORD_FIELD_NAME, \"foo bar\")));\n                } else {\n                    throw new AssertionError();\n                }\n                assertThat(disjunct, either(instanceOf(BooleanQuery.class)).or(instanceOf(PrefixQuery.class)));\n            }\n        }\n    }\n","date":"2021-06-17 05:31:31","endLine":272,"groupId":"103446","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testToQueryBooleanPrefixMultipleFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/15aeb3ec5c5862b4bde00e7411fc2022965d47.src","preCode":"    public void testToQueryBooleanPrefixMultipleFields() throws IOException {\n        {\n            \r\n            final MultiMatchQueryBuilder queryBuilder = new MultiMatchQueryBuilder(\"foo bar\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME);\n            queryBuilder.type(Type.BOOL_PREFIX);\n            final Query query = queryBuilder.toQuery(createSearchExecutionContext());\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            final DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n            assertThat(disMaxQuery.getDisjuncts(), hasSize(2));\n            final BooleanQuery firstDisjunct = assertDisjunctionSubQuery(disMaxQuery, BooleanQuery.class, 0);\n            assertThat(firstDisjunct.clauses(), hasSize(2));\n            assertThat(assertBooleanSubQuery(firstDisjunct, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"foo\")));\n            final PrefixQuery secondDisjunct = assertDisjunctionSubQuery(disMaxQuery, PrefixQuery.class, 1);\n            assertThat(secondDisjunct.getPrefix(), equalTo(new Term(KEYWORD_FIELD_NAME, \"foo bar\")));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
