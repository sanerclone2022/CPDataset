[{"authorTime":"2020-05-07 08:20:26","codes":[{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testSingleValuedFieldOrderedByCountDesc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.count(false)))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 2;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i--;\n        }\n    }\n","date":"2020-05-07 08:20:26","endLine":430,"groupId":"44383","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValuedFieldOrderedByCountDesc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/f649afc769cf52f1093c37230f0a1dc51722c0.src","preCode":"    public void testSingleValuedFieldOrderedByCountDesc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.count(false)))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 2;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i--;\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"B"},{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testSingleValuedFieldOrderedBySubAggregationAsc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.aggregation(\"sum\", true))\n                        .subAggregation(max(\"sum\").field(\"value\")))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 0;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i++;\n        }\n    }\n","date":"2020-05-07 08:20:26","endLine":511,"groupId":"44383","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValuedFieldOrderedBySubAggregationAsc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/f649afc769cf52f1093c37230f0a1dc51722c0.src","preCode":"    public void testSingleValuedFieldOrderedBySubAggregationAsc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.aggregation(\"sum\", true))\n                        .subAggregation(max(\"sum\").field(\"value\")))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 0;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i++;\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"B"}],"commitId":"cabe6a330514f0f80f3b95be8763082b25efce89","commitMessage":"@@@Create plugin for internalClusterTest task (#55896)\n\nThis commit creates a new gradle plugin to provide a separate task name\nand source set for running ESIntegTestCase tests. The only project\nconverted to use the new plugin in this PR is server.  as an example. The\nremaining cases in x-pack will be handled in followups.","date":"2020-05-07 08:20:26","modifiedFileCount":"5","status":"B","submitter":"Ryan Ernst"},{"authorTime":"2021-07-21 01:08:45","codes":[{"authorDate":"2021-07-21 01:08:45","commitOrder":2,"curCode":"    public void testSingleValuedFieldOrderedByCountDesc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .calendarInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.count(false)))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 2;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i--;\n        }\n    }\n","date":"2021-07-21 01:08:45","endLine":417,"groupId":"106897","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValuedFieldOrderedByCountDesc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/fc3cd77284797f2e9eeef9c4dd0201f708c208.src","preCode":"    public void testSingleValuedFieldOrderedByCountDesc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.count(false)))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 2;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i--;\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"},{"authorDate":"2021-07-21 01:08:45","commitOrder":2,"curCode":"    public void testSingleValuedFieldOrderedBySubAggregationAsc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .calendarInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.aggregation(\"sum\", true))\n                        .subAggregation(max(\"sum\").field(\"value\")))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 0;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i++;\n        }\n    }\n","date":"2021-07-21 01:08:45","endLine":498,"groupId":"106897","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleValuedFieldOrderedBySubAggregationAsc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/fc3cd77284797f2e9eeef9c4dd0201f708c208.src","preCode":"    public void testSingleValuedFieldOrderedBySubAggregationAsc() throws Exception {\n        SearchResponse response = client().prepareSearch(\"idx\")\n                .addAggregation(dateHistogram(\"histo\")\n                        .field(\"date\")\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\n                        .order(BucketOrder.aggregation(\"sum\", true))\n                        .subAggregation(max(\"sum\").field(\"value\")))\n                .get();\n\n        assertSearchResponse(response);\n\n        Histogram histo = response.getAggregations().get(\"histo\");\n        assertThat(histo, notNullValue());\n        assertThat(histo.getName(), equalTo(\"histo\"));\n        assertThat(histo.getBuckets().size(), equalTo(3));\n\n        int i = 0;\n        for (Histogram.Bucket bucket : histo.getBuckets()) {\n            assertThat(((ZonedDateTime) bucket.getKey()), equalTo(ZonedDateTime.of(2012, i + 1, 1, 0, 0, 0, 0, ZoneOffset.UTC)));\n            i++;\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"}],"commitId":"7af39dbc351c69aba3f61f8c34fb7dad3abcd08f","commitMessage":"@@@Remove deprecated date histo interval (#75000)\n\nDate histogram interval parameter was deprecated in 7.2.  in favor of the more specific fixed_interval and calendar_interval parameters.  The old logic used some poorly understood guessing to decide if it should operate in fixed or calendar mode.  The new logic requires a specific choice by the user.  which is more explicit.  In 7.x REST compatibility mode.  we will parse the interval as calendar if possible.  and otherwise interpret it as fixed.  ","date":"2021-07-21 01:08:45","modifiedFileCount":"26","status":"M","submitter":"Mark Tozzi"}]
