[{"authorTime":"2018-12-06 15:31:46","codes":[{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public void testJoinRequestEqualsHashCodeSerialization() {\n        Join initialJoin = new Join(createNode(randomAlphaOfLength(10)), createNode(randomAlphaOfLength(10)), randomNonNegativeLong(),\n            randomNonNegativeLong(), randomNonNegativeLong());\n        JoinRequest initialJoinRequest = new JoinRequest(initialJoin.getSourceNode(),\n            randomBoolean() ? Optional.empty() : Optional.of(initialJoin));\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialJoinRequest,\n            joinRequest -> copyWriteable(joinRequest, writableRegistry(), JoinRequest::new),\n            joinRequest -> {\n                if (randomBoolean() && joinRequest.getOptionalJoin().isPresent() == false) {\n                    return new JoinRequest(createNode(randomAlphaOfLength(20)), joinRequest.getOptionalJoin());\n                } else {\n                    \r\n                    final Optional<Join> newOptionalJoin;\n                    if (joinRequest.getOptionalJoin().isPresent() && randomBoolean()) {\n                        newOptionalJoin = Optional.empty();\n                    } else {\n                        newOptionalJoin = Optional.of(new Join(joinRequest.getSourceNode(), createNode(randomAlphaOfLength(10)),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n                    }\n                    return new JoinRequest(joinRequest.getSourceNode(), newOptionalJoin);\n                }\n            });\n    }\n","date":"2018-12-06 15:31:46","endLine":192,"groupId":"37325","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinRequestEqualsHashCodeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/85f42e554f0ef4b2c0fede77b12fc946706d83.src","preCode":"    public void testJoinRequestEqualsHashCodeSerialization() {\n        Join initialJoin = new Join(createNode(randomAlphaOfLength(10)), createNode(randomAlphaOfLength(10)), randomNonNegativeLong(),\n            randomNonNegativeLong(), randomNonNegativeLong());\n        JoinRequest initialJoinRequest = new JoinRequest(initialJoin.getSourceNode(),\n            randomBoolean() ? Optional.empty() : Optional.of(initialJoin));\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialJoinRequest,\n            joinRequest -> copyWriteable(joinRequest, writableRegistry(), JoinRequest::new),\n            joinRequest -> {\n                if (randomBoolean() && joinRequest.getOptionalJoin().isPresent() == false) {\n                    return new JoinRequest(createNode(randomAlphaOfLength(20)), joinRequest.getOptionalJoin());\n                } else {\n                    \r\n                    final Optional<Join> newOptionalJoin;\n                    if (joinRequest.getOptionalJoin().isPresent() && randomBoolean()) {\n                        newOptionalJoin = Optional.empty();\n                    } else {\n                        newOptionalJoin = Optional.of(new Join(joinRequest.getSourceNode(), createNode(randomAlphaOfLength(10)),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n                    }\n                    return new JoinRequest(joinRequest.getSourceNode(), newOptionalJoin);\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/MessagesTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"},{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public void testPreVoteRequestEqualsHashCodeSerialization() {\n        PreVoteRequest initialPreVoteRequest = new PreVoteRequest(createNode(randomAlphaOfLength(10)), randomNonNegativeLong());\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialPreVoteRequest,\n            preVoteRequest -> copyWriteable(preVoteRequest, writableRegistry(), PreVoteRequest::new),\n            preVoteRequest -> {\n                if (randomBoolean()) {\n                    return new PreVoteRequest(createNode(randomAlphaOfLength(10)), preVoteRequest.getCurrentTerm());\n                } else {\n                    return new PreVoteRequest(preVoteRequest.getSourceNode(), randomNonNegativeLong());\n                }\n            });\n    }\n","date":"2018-12-06 15:31:46","endLine":212,"groupId":"55367","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreVoteRequestEqualsHashCodeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/85f42e554f0ef4b2c0fede77b12fc946706d83.src","preCode":"    public void testPreVoteRequestEqualsHashCodeSerialization() {\n        PreVoteRequest initialPreVoteRequest = new PreVoteRequest(createNode(randomAlphaOfLength(10)), randomNonNegativeLong());\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialPreVoteRequest,\n            preVoteRequest -> copyWriteable(preVoteRequest, writableRegistry(), PreVoteRequest::new),\n            preVoteRequest -> {\n                if (randomBoolean()) {\n                    return new PreVoteRequest(createNode(randomAlphaOfLength(10)), preVoteRequest.getCurrentTerm());\n                } else {\n                    return new PreVoteRequest(preVoteRequest.getSourceNode(), randomNonNegativeLong());\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/MessagesTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"ee05ef131286eead295cf58ed4393af56f0d7ade","commitMessage":"@@@Merge branch 'zen2'\n","date":"2018-12-06 15:31:46","modifiedFileCount":"122","status":"B","submitter":"Yannick Welsch"},{"authorTime":"2018-12-06 23:04:25","codes":[{"authorDate":"2018-12-06 23:04:25","commitOrder":2,"curCode":"    public void testJoinRequestEqualsHashCodeSerialization() {\n        Join initialJoin = new Join(createNode(randomAlphaOfLength(10)), createNode(randomAlphaOfLength(10)), randomNonNegativeLong(),\n            randomNonNegativeLong(), randomNonNegativeLong());\n        JoinRequest initialJoinRequest = new JoinRequest(initialJoin.getSourceNode(),\n            randomBoolean() ? Optional.empty() : Optional.of(initialJoin));\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialJoinRequest,\n                (CopyFunction<JoinRequest>) joinRequest -> copyWriteable(joinRequest, writableRegistry(), JoinRequest::new),\n            joinRequest -> {\n                if (randomBoolean() && joinRequest.getOptionalJoin().isPresent() == false) {\n                    return new JoinRequest(createNode(randomAlphaOfLength(20)), joinRequest.getOptionalJoin());\n                } else {\n                    \r\n                    final Optional<Join> newOptionalJoin;\n                    if (joinRequest.getOptionalJoin().isPresent() && randomBoolean()) {\n                        newOptionalJoin = Optional.empty();\n                    } else {\n                        newOptionalJoin = Optional.of(new Join(joinRequest.getSourceNode(), createNode(randomAlphaOfLength(10)),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n                    }\n                    return new JoinRequest(joinRequest.getSourceNode(), newOptionalJoin);\n                }\n            });\n    }\n","date":"2018-12-06 23:04:25","endLine":195,"groupId":"37325","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinRequestEqualsHashCodeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/899dd4429b9caecd77b16f534d9ee13d44a284.src","preCode":"    public void testJoinRequestEqualsHashCodeSerialization() {\n        Join initialJoin = new Join(createNode(randomAlphaOfLength(10)), createNode(randomAlphaOfLength(10)), randomNonNegativeLong(),\n            randomNonNegativeLong(), randomNonNegativeLong());\n        JoinRequest initialJoinRequest = new JoinRequest(initialJoin.getSourceNode(),\n            randomBoolean() ? Optional.empty() : Optional.of(initialJoin));\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialJoinRequest,\n            joinRequest -> copyWriteable(joinRequest, writableRegistry(), JoinRequest::new),\n            joinRequest -> {\n                if (randomBoolean() && joinRequest.getOptionalJoin().isPresent() == false) {\n                    return new JoinRequest(createNode(randomAlphaOfLength(20)), joinRequest.getOptionalJoin());\n                } else {\n                    \r\n                    final Optional<Join> newOptionalJoin;\n                    if (joinRequest.getOptionalJoin().isPresent() && randomBoolean()) {\n                        newOptionalJoin = Optional.empty();\n                    } else {\n                        newOptionalJoin = Optional.of(new Join(joinRequest.getSourceNode(), createNode(randomAlphaOfLength(10)),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n                    }\n                    return new JoinRequest(joinRequest.getSourceNode(), newOptionalJoin);\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/MessagesTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2018-12-06 23:04:25","commitOrder":2,"curCode":"    public void testPreVoteRequestEqualsHashCodeSerialization() {\n        PreVoteRequest initialPreVoteRequest = new PreVoteRequest(createNode(randomAlphaOfLength(10)), randomNonNegativeLong());\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialPreVoteRequest,\n                (CopyFunction<PreVoteRequest>) preVoteRequest -> copyWriteable(preVoteRequest, writableRegistry(), PreVoteRequest::new),\n            preVoteRequest -> {\n                if (randomBoolean()) {\n                    return new PreVoteRequest(createNode(randomAlphaOfLength(10)), preVoteRequest.getCurrentTerm());\n                } else {\n                    return new PreVoteRequest(preVoteRequest.getSourceNode(), randomNonNegativeLong());\n                }\n            });\n    }\n","date":"2018-12-06 23:04:25","endLine":215,"groupId":"55367","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreVoteRequestEqualsHashCodeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/899dd4429b9caecd77b16f534d9ee13d44a284.src","preCode":"    public void testPreVoteRequestEqualsHashCodeSerialization() {\n        PreVoteRequest initialPreVoteRequest = new PreVoteRequest(createNode(randomAlphaOfLength(10)), randomNonNegativeLong());\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialPreVoteRequest,\n            preVoteRequest -> copyWriteable(preVoteRequest, writableRegistry(), PreVoteRequest::new),\n            preVoteRequest -> {\n                if (randomBoolean()) {\n                    return new PreVoteRequest(createNode(randomAlphaOfLength(10)), preVoteRequest.getCurrentTerm());\n                } else {\n                    return new PreVoteRequest(preVoteRequest.getSourceNode(), randomNonNegativeLong());\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/MessagesTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"f5fa1f4746fe66a09a90a264728c4c13f65a993e","commitMessage":"@@@Help Eclipse with type inference for functions (#36301)\n\nThe Eclipse IDE java compiler seems to need some special hints about what types\nsome functions used in the tests return. Correcting this for some test that were\nnewly merged to master.","date":"2018-12-06 23:04:25","modifiedFileCount":"6","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2018-12-06 23:04:25","codes":[{"authorDate":"2020-03-11 17:03:54","commitOrder":3,"curCode":"    public void testJoinRequestEqualsHashCodeSerialization() {\n        Join initialJoin = new Join(createNode(randomAlphaOfLength(10)), createNode(randomAlphaOfLength(10)), randomNonNegativeLong(),\n            randomNonNegativeLong(), randomNonNegativeLong());\n        JoinRequest initialJoinRequest = new JoinRequest(initialJoin.getSourceNode(),\n            randomNonNegativeLong(), randomBoolean() ? Optional.empty() : Optional.of(initialJoin));\n        \r\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialJoinRequest,\n                (CopyFunction<JoinRequest>) joinRequest -> copyWriteable(joinRequest, writableRegistry(), JoinRequest::new),\n            joinRequest -> {\n                if (randomBoolean() && joinRequest.getOptionalJoin().isPresent() == false) {\n                    return new JoinRequest(createNode(randomAlphaOfLength(10)),\n                        joinRequest.getMinimumTerm(), joinRequest.getOptionalJoin());\n                } else if (randomBoolean()) {\n                    return new JoinRequest(joinRequest.getSourceNode(),\n                        randomValueOtherThan(joinRequest.getMinimumTerm(), ESTestCase::randomNonNegativeLong),\n                        joinRequest.getOptionalJoin());\n                } else {\n                    \r\n                    final Optional<Join> newOptionalJoin;\n                    if (joinRequest.getOptionalJoin().isPresent() && randomBoolean()) {\n                        newOptionalJoin = Optional.empty();\n                    } else {\n                        newOptionalJoin = Optional.of(new Join(joinRequest.getSourceNode(), createNode(randomAlphaOfLength(10)),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n                    }\n                    return new JoinRequest(joinRequest.getSourceNode(), joinRequest.getMinimumTerm(), newOptionalJoin);\n                }\n            });\n    }\n","date":"2020-03-11 17:03:54","endLine":206,"groupId":"102360","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinRequestEqualsHashCodeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/99649892ae2ae57e85d415cb38329f4e157db3.src","preCode":"    public void testJoinRequestEqualsHashCodeSerialization() {\n        Join initialJoin = new Join(createNode(randomAlphaOfLength(10)), createNode(randomAlphaOfLength(10)), randomNonNegativeLong(),\n            randomNonNegativeLong(), randomNonNegativeLong());\n        JoinRequest initialJoinRequest = new JoinRequest(initialJoin.getSourceNode(),\n            randomBoolean() ? Optional.empty() : Optional.of(initialJoin));\n        \r\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialJoinRequest,\n                (CopyFunction<JoinRequest>) joinRequest -> copyWriteable(joinRequest, writableRegistry(), JoinRequest::new),\n            joinRequest -> {\n                if (randomBoolean() && joinRequest.getOptionalJoin().isPresent() == false) {\n                    return new JoinRequest(createNode(randomAlphaOfLength(20)), joinRequest.getOptionalJoin());\n                } else {\n                    \r\n                    final Optional<Join> newOptionalJoin;\n                    if (joinRequest.getOptionalJoin().isPresent() && randomBoolean()) {\n                        newOptionalJoin = Optional.empty();\n                    } else {\n                        newOptionalJoin = Optional.of(new Join(joinRequest.getSourceNode(), createNode(randomAlphaOfLength(10)),\n                            randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n                    }\n                    return new JoinRequest(joinRequest.getSourceNode(), newOptionalJoin);\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/MessagesTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2018-12-06 23:04:25","commitOrder":3,"curCode":"    public void testPreVoteRequestEqualsHashCodeSerialization() {\n        PreVoteRequest initialPreVoteRequest = new PreVoteRequest(createNode(randomAlphaOfLength(10)), randomNonNegativeLong());\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialPreVoteRequest,\n                (CopyFunction<PreVoteRequest>) preVoteRequest -> copyWriteable(preVoteRequest, writableRegistry(), PreVoteRequest::new),\n            preVoteRequest -> {\n                if (randomBoolean()) {\n                    return new PreVoteRequest(createNode(randomAlphaOfLength(10)), preVoteRequest.getCurrentTerm());\n                } else {\n                    return new PreVoteRequest(preVoteRequest.getSourceNode(), randomNonNegativeLong());\n                }\n            });\n    }\n","date":"2018-12-06 23:04:25","endLine":215,"groupId":"102360","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreVoteRequestEqualsHashCodeSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/899dd4429b9caecd77b16f534d9ee13d44a284.src","preCode":"    public void testPreVoteRequestEqualsHashCodeSerialization() {\n        PreVoteRequest initialPreVoteRequest = new PreVoteRequest(createNode(randomAlphaOfLength(10)), randomNonNegativeLong());\n        EqualsHashCodeTestUtils.checkEqualsAndHashCode(initialPreVoteRequest,\n                (CopyFunction<PreVoteRequest>) preVoteRequest -> copyWriteable(preVoteRequest, writableRegistry(), PreVoteRequest::new),\n            preVoteRequest -> {\n                if (randomBoolean()) {\n                    return new PreVoteRequest(createNode(randomAlphaOfLength(10)), preVoteRequest.getCurrentTerm());\n                } else {\n                    return new PreVoteRequest(preVoteRequest.getSourceNode(), randomNonNegativeLong());\n                }\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/MessagesTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"}],"commitId":"9dcd88ee1e8b5b13384a041326c42f6fcf5f7abf","commitMessage":"@@@Allow joining node to trigger term bump (#53338)\n\nIn rare circumstances it is possible for an isolated node to have a greater\nterm than the currently-elected leader. Today such a node will attempt to join\nthe cluster but will not offer a vote to the leader and will reject its cluster\nstate publications due to their stale term. This situation persists since there\nis no mechanism for the joining node to inform the leader that its term is\nstale and a new election is required.\n\nThis commit adds the current term of the joining node to the join request. Once\nthe join has been validated.  the leader will perform another election to\nincrease its term far enough to allow the isolated node to join properly.\n\nFixes #53271","date":"2020-03-11 17:03:54","modifiedFileCount":"7","status":"M","submitter":"David Turner"}]
