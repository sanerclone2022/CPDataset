[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        if (result.hasFailure() == false) {\n            if (!index.origin().isRecovery()) {\n                long took = result.getTook();\n                totalStats.indexMetric.inc(took);\n                totalStats.indexCurrent.dec();\n                StatsHolder typeStats = typeStats(index.type());\n                typeStats.indexMetric.inc(took);\n                typeStats.indexCurrent.dec();\n            }\n        } else {\n            postIndex(shardId, index, result.getFailure());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":90,"groupId":"23694","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postIndex","params":"(ShardIdshardId@Engine.Indexindex@Engine.IndexResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/a869a1d9c0b71f82a700b50a9853f1ffe17d88.src","preCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        if (result.hasFailure() == false) {\n            if (!index.origin().isRecovery()) {\n                long took = result.getTook();\n                totalStats.indexMetric.inc(took);\n                totalStats.indexCurrent.dec();\n                StatsHolder typeStats = typeStats(index.type());\n                typeStats.indexMetric.inc(took);\n                typeStats.indexCurrent.dec();\n            }\n        } else {\n            postIndex(shardId, index, result.getFailure());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        if (result.hasFailure() == false) {\n            if (!delete.origin().isRecovery()) {\n                long took = result.getTook();\n                totalStats.deleteMetric.inc(took);\n                totalStats.deleteCurrent.dec();\n                StatsHolder typeStats = typeStats(delete.type());\n                typeStats.deleteMetric.inc(took);\n                typeStats.deleteCurrent.dec();\n            }\n        } else {\n            postDelete(shardId, delete, result.getFailure());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":126,"groupId":"23694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postDelete","params":"(ShardIdshardId@Engine.Deletedelete@Engine.DeleteResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/a869a1d9c0b71f82a700b50a9853f1ffe17d88.src","preCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        if (result.hasFailure() == false) {\n            if (!delete.origin().isRecovery()) {\n                long took = result.getTook();\n                totalStats.deleteMetric.inc(took);\n                totalStats.deleteCurrent.dec();\n                StatsHolder typeStats = typeStats(delete.type());\n                typeStats.deleteMetric.inc(took);\n                typeStats.deleteCurrent.dec();\n            }\n        } else {\n            postDelete(shardId, delete, result.getFailure());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-05-01 16:21:57","codes":[{"authorDate":"2018-05-01 16:21:57","commitOrder":2,"curCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (index.origin().isRecovery() == false) {\n                    long took = result.getTook();\n                    totalStats.indexMetric.inc(took);\n                    totalStats.indexCurrent.dec();\n                    StatsHolder typeStats = typeStats(index.type());\n                    typeStats.indexMetric.inc(took);\n                    typeStats.indexCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postIndex(shardId, index, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","date":"2018-05-01 16:21:57","endLine":95,"groupId":"64185","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postIndex","params":"(ShardIdshardId@Engine.Indexindex@Engine.IndexResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/b7b719aed6d3dcb284c8db88cd1dcd8d38711e.src","preCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        if (result.hasFailure() == false) {\n            if (!index.origin().isRecovery()) {\n                long took = result.getTook();\n                totalStats.indexMetric.inc(took);\n                totalStats.indexCurrent.dec();\n                StatsHolder typeStats = typeStats(index.type());\n                typeStats.indexMetric.inc(took);\n                typeStats.indexCurrent.dec();\n            }\n        } else {\n            postIndex(shardId, index, result.getFailure());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-05-01 16:21:57","commitOrder":2,"curCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (!delete.origin().isRecovery()) {\n                    long took = result.getTook();\n                    totalStats.deleteMetric.inc(took);\n                    totalStats.deleteCurrent.dec();\n                    StatsHolder typeStats = typeStats(delete.type());\n                    typeStats.deleteMetric.inc(took);\n                    typeStats.deleteCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postDelete(shardId, delete, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","date":"2018-05-01 16:21:57","endLine":136,"groupId":"23694","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postDelete","params":"(ShardIdshardId@Engine.Deletedelete@Engine.DeleteResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/b7b719aed6d3dcb284c8db88cd1dcd8d38711e.src","preCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        if (result.hasFailure() == false) {\n            if (!delete.origin().isRecovery()) {\n                long took = result.getTook();\n                totalStats.deleteMetric.inc(took);\n                totalStats.deleteCurrent.dec();\n                StatsHolder typeStats = typeStats(delete.type());\n                typeStats.deleteMetric.inc(took);\n                typeStats.deleteCurrent.dec();\n            }\n        } else {\n            postDelete(shardId, delete, result.getFailure());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"a6b0f663af90525dd53e007dcc86cf72e38558b3","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-01 16:21:57","modifiedFileCount":"44","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-09-27 20:03:37","codes":[{"authorDate":"2019-09-27 20:03:37","commitOrder":3,"curCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (index.origin().isRecovery() == false) {\n                    long took = result.getTook();\n                    totalStats.indexMetric.inc(took);\n                    totalStats.indexCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postIndex(shardId, index, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","date":"2019-09-27 20:03:37","endLine":70,"groupId":"47768","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"postIndex","params":"(ShardIdshardId@Engine.Indexindex@Engine.IndexResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/337aa3263a8f83d26f0b2fef259b3839106eb5.src","preCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (index.origin().isRecovery() == false) {\n                    long took = result.getTook();\n                    totalStats.indexMetric.inc(took);\n                    totalStats.indexCurrent.dec();\n                    StatsHolder typeStats = typeStats(index.type());\n                    typeStats.indexMetric.inc(took);\n                    typeStats.indexCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postIndex(shardId, index, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2019-09-27 20:03:37","commitOrder":3,"curCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (!delete.origin().isRecovery()) {\n                    long took = result.getTook();\n                    totalStats.deleteMetric.inc(took);\n                    totalStats.deleteCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postDelete(shardId, delete, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","date":"2019-09-27 20:03:37","endLine":105,"groupId":"42093","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"postDelete","params":"(ShardIdshardId@Engine.Deletedelete@Engine.DeleteResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/337aa3263a8f83d26f0b2fef259b3839106eb5.src","preCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (!delete.origin().isRecovery()) {\n                    long took = result.getTook();\n                    totalStats.deleteMetric.inc(took);\n                    totalStats.deleteCurrent.dec();\n                    StatsHolder typeStats = typeStats(delete.type());\n                    typeStats.deleteMetric.inc(took);\n                    typeStats.deleteCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postDelete(shardId, delete, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"ff99bc1d3f8a7ea72718872d214ec2097dfca276","commitMessage":"@@@Remove per-type indexing stats (#47203)\n\nWith only a single type.  the per-type filters for indexing stats are no longer useful.\n\nRelates to #41059\n","date":"2019-09-27 20:03:37","modifiedFileCount":"14","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-01-29 21:51:41","codes":[{"authorDate":"2019-09-27 20:03:37","commitOrder":4,"curCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (index.origin().isRecovery() == false) {\n                    long took = result.getTook();\n                    totalStats.indexMetric.inc(took);\n                    totalStats.indexCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postIndex(shardId, index, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","date":"2019-09-27 20:03:37","endLine":70,"groupId":"127782","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"postIndex","params":"(ShardIdshardId@Engine.Indexindex@Engine.IndexResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/337aa3263a8f83d26f0b2fef259b3839106eb5.src","preCode":"    public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (index.origin().isRecovery() == false) {\n                    long took = result.getTook();\n                    totalStats.indexMetric.inc(took);\n                    totalStats.indexCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postIndex(shardId, index, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2021-01-29 21:51:41","commitOrder":4,"curCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (delete.origin().isRecovery() == false) {\n                    long took = result.getTook();\n                    totalStats.deleteMetric.inc(took);\n                    totalStats.deleteCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postDelete(shardId, delete, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","date":"2021-01-29 21:51:41","endLine":105,"groupId":"127782","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"postDelete","params":"(ShardIdshardId@Engine.Deletedelete@Engine.DeleteResultresult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/8f5efcf05a9c494ff5ffe2a38361aff4463764.src","preCode":"    public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {\n        switch (result.getResultType()) {\n            case SUCCESS:\n                if (!delete.origin().isRecovery()) {\n                    long took = result.getTook();\n                    totalStats.deleteMetric.inc(took);\n                    totalStats.deleteCurrent.dec();\n                }\n                break;\n            case FAILURE:\n                postDelete(shardId, delete, result.getFailure());\n                break;\n            default:\n                throw new IllegalArgumentException(\"unknown result type: \" + result.getResultType());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/shard/InternalIndexingStats.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"d5c5f9e9a6916c38818817b60a23f268bdd67fa5","commitMessage":"@@@Replace NOT operator with explicit `false` check (#68124)\n\nPart 3.\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-01-29 21:51:41","modifiedFileCount":"101","status":"M","submitter":"Rory Hunter"}]
