[{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-05-18 23:06:24","commitOrder":10,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-05-18 23:06:24","endLine":323,"groupId":"44110","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/7ff735141d2e9d25fed2a762055858e0ade01e.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"NB"},{"authorDate":"2020-07-29 01:14:40","commitOrder":10,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","date":"2020-07-29 01:42:59","endLine":316,"groupId":"9749","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/095369bcfaea534fb0f3cab6c008647195e784.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"B"}],"commitId":"e3bbb3bed4ed9430ab43eb4a3e8276ae503c13ab","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-29 01:42:59","modifiedFileCount":"261","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-09-08 22:36:18","commitOrder":11,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-09-08 22:36:18","endLine":319,"groupId":"44110","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/1662a57842749b1111486647e41e62216c4e68.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            if (handlingSettings.isCorsEnabled()) {\n                ch.pipeline().addLast(\"cors\", new Netty4CorsHandler(transport.corsConfig));\n            }\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":11,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","date":"2020-07-29 01:42:59","endLine":316,"groupId":"9749","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/095369bcfaea534fb0f3cab6c008647195e784.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"}],"commitId":"d5f9e4ecb0c178f47b480973e203d48293e48b6b","commitMessage":"@@@Move CorsHandler to server (#62007)\n\nCurrently we duplicate our specialized cors logic in all transport\nplugins. This is unnecessary as it could be implemented in a single\nplace. This commit moves the logic to server. Additionally it fixes a\nbut where we are incorrectly closing http channels on early Cors\nresponses.","date":"2020-09-08 22:36:18","modifiedFileCount":"12","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-09-25 04:20:12","commitOrder":12,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-09-25 04:20:12","endLine":323,"groupId":"44110","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/32b6cb055ca0abc9db1b832cafa123e334452b.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":12,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","date":"2020-07-29 01:42:59","endLine":316,"groupId":"9749","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/095369bcfaea534fb0f3cab6c008647195e784.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"}],"commitId":"19c19f28cb7b82f0c9b480e7f07289ab6bfeeb60","commitMessage":"@@@Split up large HTTP responses in outbound pipeline (#62666)\n\nCurrently Netty will batch compression an entire HTTP response\nregardless of its content size. It allocates a byte array at least of\nthe same size as the uncompressed content. This causes issues with our\nattempts to remove humungous G1GC allocations. This commit resolves the\nissue by split responses into 128KB chunks.\n\nThis has the side-effect of making large outbound HTTP responses that\nare compressed be send as chunked transfer-encoding.","date":"2020-09-25 04:20:12","modifiedFileCount":"9","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-10-01 01:31:54","commitOrder":13,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", byteBufSizer);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2020-10-01 01:31:54","endLine":327,"groupId":"44110","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/010a31375c85ad8b72ee04767238b040426347.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":13,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","date":"2020-07-29 01:42:59","endLine":316,"groupId":"9749","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/095369bcfaea534fb0f3cab6c008647195e784.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"}],"commitId":"1547bd672d4062de99140263c1fc167581edf971","commitMessage":"@@@Transfer network bytes to smaller buffer (#62673)\n\nCurrently we read in 64KB blocks from the network. When TLS is not\nenabled.  these bytes are normally passed all the way to the application\nlayer (some exceptions: compression). For the HTTP layer this means that\nthese bytes can live throughout the entire lifecycle of an indexing\nrequest.\n\nThe problem is that if the reads from the socket are small.  this means\nthat 64KB buffers can be consumed by 1KB or smaller reads. If the socket\nbuffer or TCP buffer sizes are small.  the leads to massive memory\nwaste. It has been identified as a major source of OOMs on coordinating\nnodes as Elasticsearch easily exhausts the heap for these network bytes.\n\nThis commit resolves the problem by placing a handler after the TLS\nhandler to copy these bytes to a more appropriate buffer size as\nnecessary. This comes after TLS.  because TLS is a framing layer which\noften resolves this problem for us (the 64KB buffer will be decoded\ninto a more appropriate buffer size). However.  this extra handler will\nsolve it for the non-TLS pipelines.","date":"2020-10-01 01:31:54","modifiedFileCount":"2","status":"M","submitter":"Tim Brooks"},{"authorTime":"2021-04-27 19:31:29","codes":[{"authorDate":"2021-04-27 19:31:29","commitOrder":14,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", NettyByteBufSizer.INSTANCE);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","date":"2021-04-27 19:31:29","endLine":314,"groupId":"12673","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/71ff3bca349973bc61202f8d7f8a84ff35a4bd.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            Netty4HttpChannel nettyHttpChannel = new Netty4HttpChannel(ch);\n            ch.attr(HTTP_CHANNEL_KEY).set(nettyHttpChannel);\n            ch.pipeline().addLast(\"byte_buf_sizer\", byteBufSizer);\n            ch.pipeline().addLast(\"read_timeout\", new ReadTimeoutHandler(transport.readTimeoutMillis, TimeUnit.MILLISECONDS));\n            final HttpRequestDecoder decoder = new HttpRequestDecoder(\n                handlingSettings.getMaxInitialLineLength(),\n                handlingSettings.getMaxHeaderSize(),\n                handlingSettings.getMaxChunkSize());\n            decoder.setCumulator(ByteToMessageDecoder.COMPOSITE_CUMULATOR);\n            ch.pipeline().addLast(\"decoder\", decoder);\n            ch.pipeline().addLast(\"decoder_compress\", new HttpContentDecompressor());\n            ch.pipeline().addLast(\"encoder\", new HttpResponseEncoder());\n            final HttpObjectAggregator aggregator = new HttpObjectAggregator(handlingSettings.getMaxContentLength());\n            aggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);\n            ch.pipeline().addLast(\"aggregator\", aggregator);\n            if (handlingSettings.isCompression()) {\n                ch.pipeline().addLast(\"encoder_compress\", new HttpContentCompressor(handlingSettings.getCompressionLevel()));\n            }\n            ch.pipeline().addLast(\"request_creator\", requestCreator);\n            ch.pipeline().addLast(\"response_creator\", responseCreator);\n            ch.pipeline().addLast(\"pipelining\", new Netty4HttpPipeliningHandler(logger, transport.pipeliningMaxEvents));\n            ch.pipeline().addLast(\"handler\", requestHandler);\n            transport.serverAcceptedChannel(nettyHttpChannel);\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2021-04-27 19:31:29","commitOrder":14,"curCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"byte_buf_sizer\", NettyByteBufSizer.INSTANCE);\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","date":"2021-04-27 19:31:29","endLine":307,"groupId":"12673","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initChannel","params":"(Channelch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/367399098a3220ee14807cffb38c4162399633.src","preCode":"        protected void initChannel(Channel ch) throws Exception {\n            addClosedExceptionLogger(ch);\n            assert ch instanceof Netty4NioSocketChannel;\n            NetUtils.tryEnsureReasonableKeepAliveConfig(((Netty4NioSocketChannel) ch).javaChannel());\n            ch.pipeline().addLast(\"logging\", new ESLoggingHandler());\n            \r\n            ch.pipeline().addLast(\"dispatcher\", new Netty4MessageChannelHandler(pageCacheRecycler, Netty4Transport.this));\n        }\n","realPath":"modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"cf360cefb68002fb5871d879f3a07643209904dc","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-27 19:31:29","modifiedFileCount":"260","status":"M","submitter":"iverase"}]
