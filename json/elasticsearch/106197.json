[{"authorTime":"2020-05-07 08:20:26","codes":[{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testBroadcastOperations() throws IOException {\n        assertAcked(prepareCreate(\"test\", 1));\n\n        NumShards numShards = getNumShards(\"test\");\n\n        logger.info(\"Running Cluster Health\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        flush();\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test\"))).actionGet();\n        refresh();\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0)\n                    .setQuery(matchAllQuery())\n                    .get();\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getTotalShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","date":"2020-05-07 08:20:26","endLine":64,"groupId":"25924","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/dd9168cbd05f3b2ead58745eef684dfdf8e99e.src","preCode":"    public void testBroadcastOperations() throws IOException {\n        assertAcked(prepareCreate(\"test\", 1));\n\n        NumShards numShards = getNumShards(\"test\");\n\n        logger.info(\"Running Cluster Health\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        flush();\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test\"))).actionGet();\n        refresh();\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0)\n                    .setQuery(matchAllQuery())\n                    .get();\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getTotalShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/broadcast/BroadcastActionsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testIndexActions() throws Exception {\n        createIndex();\n        NumShards numShards = getNumShards(getConcreteIndexName());\n        logger.info(\"Running Cluster Health\");\n        ensureGreen();\n        logger.info(\"Indexing [type1/1]\");\n        IndexResponse indexResponse = client().prepareIndex().setIndex(\"test\").setId(\"1\").setSource(source(\"1\", \"test\"))\n                .setRefreshPolicy(RefreshPolicy.IMMEDIATE).get();\n        assertThat(indexResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(indexResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        RefreshResponse refreshResponse = refresh();\n        assertThat(refreshResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"--> index exists?\");\n        assertThat(indexExists(getConcreteIndexName()), equalTo(true));\n        logger.info(\"--> index exists?, fake index\");\n        assertThat(indexExists(\"test1234565\"), equalTo(false));\n\n        logger.info(\"Clearing cache\");\n        ClearIndicesCacheResponse clearIndicesCacheResponse = client().admin().indices().clearCache(clearIndicesCacheRequest(\"test\")\n            .fieldDataCache(true).queryCache(true)).actionGet();\n        assertNoFailures(clearIndicesCacheResponse);\n        assertThat(clearIndicesCacheResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"Force Merging\");\n        waitForRelocation(ClusterHealthStatus.GREEN);\n        ForceMergeResponse mergeResponse = forceMerge();\n        assertThat(mergeResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        GetResponse getResult;\n\n        logger.info(\"Get [type1/1]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(\"cycle(map) #\" + i, (String) getResult.getSourceAsMap().get(\"name\"), equalTo(\"test\"));\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Get [type1/1] with script\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").setStoredFields(\"name\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(getResult.isExists(), equalTo(true));\n            assertThat(getResult.getSourceAsBytes(), nullValue());\n            assertThat(getResult.getField(\"name\").getValues().get(0).toString(), equalTo(\"test\"));\n        }\n\n        logger.info(\"Get [type1/2] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Delete [type1/1]\");\n        DeleteResponse deleteResponse = client().prepareDelete(\"test\", \"1\").execute().actionGet();\n        assertThat(deleteResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(deleteResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Index [type1/1]\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        logger.info(\"Index [type1/2]\");\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test2\"))).actionGet();\n\n        logger.info(\"Flushing\");\n        FlushResponse flushResult = client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        assertThat(flushResult.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n        assertThat(flushResult.getFailedShards(), equalTo(0));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] and [type1/2]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            String ste1 = getResult.getSourceAsString();\n            String ste2 = Strings.toString(source(\"2\", \"test2\"));\n            assertThat(\"cycle #\" + i, ste1, equalTo(ste2));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0).setQuery(termQuery(\"_type\", \"_doc\"))\n                .execute().actionGet();\n            assertNoFailures(countResponse);\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n\n            \r\n            countResponse = client().prepareSearch(\"test\").setSize(0).execute().actionGet();\n            assertThat(\"Failures \" + countResponse.getShardFailures(), countResponse.getShardFailures() == null ? 0\n                : countResponse.getShardFailures().length, equalTo(0));\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","date":"2020-05-07 08:20:26","endLine":178,"groupId":"45092","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexActions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/3cf9188f06fec54a69a9ea7e9709f22ea82410.src","preCode":"    public void testIndexActions() throws Exception {\n        createIndex();\n        NumShards numShards = getNumShards(getConcreteIndexName());\n        logger.info(\"Running Cluster Health\");\n        ensureGreen();\n        logger.info(\"Indexing [type1/1]\");\n        IndexResponse indexResponse = client().prepareIndex().setIndex(\"test\").setId(\"1\").setSource(source(\"1\", \"test\"))\n                .setRefreshPolicy(RefreshPolicy.IMMEDIATE).get();\n        assertThat(indexResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(indexResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        RefreshResponse refreshResponse = refresh();\n        assertThat(refreshResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"--> index exists?\");\n        assertThat(indexExists(getConcreteIndexName()), equalTo(true));\n        logger.info(\"--> index exists?, fake index\");\n        assertThat(indexExists(\"test1234565\"), equalTo(false));\n\n        logger.info(\"Clearing cache\");\n        ClearIndicesCacheResponse clearIndicesCacheResponse = client().admin().indices().clearCache(clearIndicesCacheRequest(\"test\")\n            .fieldDataCache(true).queryCache(true)).actionGet();\n        assertNoFailures(clearIndicesCacheResponse);\n        assertThat(clearIndicesCacheResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"Force Merging\");\n        waitForRelocation(ClusterHealthStatus.GREEN);\n        ForceMergeResponse mergeResponse = forceMerge();\n        assertThat(mergeResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        GetResponse getResult;\n\n        logger.info(\"Get [type1/1]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(\"cycle(map) #\" + i, (String) getResult.getSourceAsMap().get(\"name\"), equalTo(\"test\"));\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Get [type1/1] with script\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").setStoredFields(\"name\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(getResult.isExists(), equalTo(true));\n            assertThat(getResult.getSourceAsBytes(), nullValue());\n            assertThat(getResult.getField(\"name\").getValues().get(0).toString(), equalTo(\"test\"));\n        }\n\n        logger.info(\"Get [type1/2] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Delete [type1/1]\");\n        DeleteResponse deleteResponse = client().prepareDelete(\"test\", \"1\").execute().actionGet();\n        assertThat(deleteResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(deleteResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Index [type1/1]\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        logger.info(\"Index [type1/2]\");\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test2\"))).actionGet();\n\n        logger.info(\"Flushing\");\n        FlushResponse flushResult = client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        assertThat(flushResult.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n        assertThat(flushResult.getFailedShards(), equalTo(0));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] and [type1/2]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            String ste1 = getResult.getSourceAsString();\n            String ste2 = Strings.toString(source(\"2\", \"test2\"));\n            assertThat(\"cycle #\" + i, ste1, equalTo(ste2));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0).setQuery(termQuery(\"_type\", \"_doc\"))\n                .execute().actionGet();\n            assertNoFailures(countResponse);\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n\n            \r\n            countResponse = client().prepareSearch(\"test\").setSize(0).execute().actionGet();\n            assertThat(\"Failures \" + countResponse.getShardFailures(), countResponse.getShardFailures() == null ? 0\n                : countResponse.getShardFailures().length, equalTo(0));\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/document/DocumentActionsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"cabe6a330514f0f80f3b95be8763082b25efce89","commitMessage":"@@@Create plugin for internalClusterTest task (#55896)\n\nThis commit creates a new gradle plugin to provide a separate task name\nand source set for running ESIntegTestCase tests. The only project\nconverted to use the new plugin in this PR is server.  as an example. The\nremaining cases in x-pack will be handled in followups.","date":"2020-05-07 08:20:26","modifiedFileCount":"5","status":"B","submitter":"Ryan Ernst"},{"authorTime":"2021-02-06 04:13:05","codes":[{"authorDate":"2020-05-07 08:20:26","commitOrder":2,"curCode":"    public void testBroadcastOperations() throws IOException {\n        assertAcked(prepareCreate(\"test\", 1));\n\n        NumShards numShards = getNumShards(\"test\");\n\n        logger.info(\"Running Cluster Health\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        flush();\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test\"))).actionGet();\n        refresh();\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0)\n                    .setQuery(matchAllQuery())\n                    .get();\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getTotalShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","date":"2020-05-07 08:20:26","endLine":64,"groupId":"106197","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/dd9168cbd05f3b2ead58745eef684dfdf8e99e.src","preCode":"    public void testBroadcastOperations() throws IOException {\n        assertAcked(prepareCreate(\"test\", 1));\n\n        NumShards numShards = getNumShards(\"test\");\n\n        logger.info(\"Running Cluster Health\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        flush();\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test\"))).actionGet();\n        refresh();\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0)\n                    .setQuery(matchAllQuery())\n                    .get();\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getTotalShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/broadcast/BroadcastActionsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"},{"authorDate":"2021-02-06 04:13:05","commitOrder":2,"curCode":"    public void testIndexActions() throws Exception {\n        createIndex();\n        NumShards numShards = getNumShards(getConcreteIndexName());\n        logger.info(\"Running Cluster Health\");\n        ensureGreen();\n        logger.info(\"Indexing [type1/1]\");\n        IndexResponse indexResponse = client().prepareIndex().setIndex(\"test\").setId(\"1\").setSource(source(\"1\", \"test\"))\n                .setRefreshPolicy(RefreshPolicy.IMMEDIATE).get();\n        assertThat(indexResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(indexResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        RefreshResponse refreshResponse = refresh();\n        assertThat(refreshResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"--> index exists?\");\n        assertThat(indexExists(getConcreteIndexName()), equalTo(true));\n        logger.info(\"--> index exists?, fake index\");\n        assertThat(indexExists(\"test1234565\"), equalTo(false));\n\n        logger.info(\"Clearing cache\");\n        ClearIndicesCacheResponse clearIndicesCacheResponse = client().admin().indices().clearCache(clearIndicesCacheRequest(\"test\")\n            .fieldDataCache(true).queryCache(true)).actionGet();\n        assertNoFailures(clearIndicesCacheResponse);\n        assertThat(clearIndicesCacheResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"Force Merging\");\n        waitForRelocation(ClusterHealthStatus.GREEN);\n        ForceMergeResponse mergeResponse = forceMerge();\n        assertThat(mergeResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        GetResponse getResult;\n\n        logger.info(\"Get [type1/1]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(\"cycle(map) #\" + i, (String) getResult.getSourceAsMap().get(\"name\"), equalTo(\"test\"));\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Get [type1/1] with script\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").setStoredFields(\"name\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(getResult.isExists(), equalTo(true));\n            assertThat(getResult.getSourceAsBytes(), nullValue());\n            assertThat(getResult.getField(\"name\").getValues().get(0).toString(), equalTo(\"test\"));\n        }\n\n        logger.info(\"Get [type1/2] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Delete [type1/1]\");\n        DeleteResponse deleteResponse = client().prepareDelete(\"test\", \"1\").execute().actionGet();\n        assertThat(deleteResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(deleteResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Index [type1/1]\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        logger.info(\"Index [type1/2]\");\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test2\"))).actionGet();\n\n        logger.info(\"Flushing\");\n        FlushResponse flushResult = client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        assertThat(flushResult.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n        assertThat(flushResult.getFailedShards(), equalTo(0));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] and [type1/2]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            String ste1 = getResult.getSourceAsString();\n            String ste2 = Strings.toString(source(\"2\", \"test2\"));\n            assertThat(\"cycle #\" + i, ste1, equalTo(ste2));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0).setQuery(matchAllQuery())\n                .execute().actionGet();\n            assertNoFailures(countResponse);\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n\n            \r\n            countResponse = client().prepareSearch(\"test\").setSize(0).execute().actionGet();\n            assertThat(\"Failures \" + countResponse.getShardFailures(), countResponse.getShardFailures() == null ? 0\n                : countResponse.getShardFailures().length, equalTo(0));\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","date":"2021-02-06 04:13:05","endLine":167,"groupId":"106197","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testIndexActions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/0c1ec184cd2c57593d955f5079c6807696d764.src","preCode":"    public void testIndexActions() throws Exception {\n        createIndex();\n        NumShards numShards = getNumShards(getConcreteIndexName());\n        logger.info(\"Running Cluster Health\");\n        ensureGreen();\n        logger.info(\"Indexing [type1/1]\");\n        IndexResponse indexResponse = client().prepareIndex().setIndex(\"test\").setId(\"1\").setSource(source(\"1\", \"test\"))\n                .setRefreshPolicy(RefreshPolicy.IMMEDIATE).get();\n        assertThat(indexResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(indexResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        RefreshResponse refreshResponse = refresh();\n        assertThat(refreshResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"--> index exists?\");\n        assertThat(indexExists(getConcreteIndexName()), equalTo(true));\n        logger.info(\"--> index exists?, fake index\");\n        assertThat(indexExists(\"test1234565\"), equalTo(false));\n\n        logger.info(\"Clearing cache\");\n        ClearIndicesCacheResponse clearIndicesCacheResponse = client().admin().indices().clearCache(clearIndicesCacheRequest(\"test\")\n            .fieldDataCache(true).queryCache(true)).actionGet();\n        assertNoFailures(clearIndicesCacheResponse);\n        assertThat(clearIndicesCacheResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        logger.info(\"Force Merging\");\n        waitForRelocation(ClusterHealthStatus.GREEN);\n        ForceMergeResponse mergeResponse = forceMerge();\n        assertThat(mergeResponse.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n\n        GetResponse getResult;\n\n        logger.info(\"Get [type1/1]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(\"cycle(map) #\" + i, (String) getResult.getSourceAsMap().get(\"name\"), equalTo(\"test\"));\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Get [type1/1] with script\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().prepareGet(\"test\", \"1\").setStoredFields(\"name\").execute().actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(getResult.isExists(), equalTo(true));\n            assertThat(getResult.getSourceAsBytes(), nullValue());\n            assertThat(getResult.getField(\"name\").getValues().get(0).toString(), equalTo(\"test\"));\n        }\n\n        logger.info(\"Get [type1/2] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Delete [type1/1]\");\n        DeleteResponse deleteResponse = client().prepareDelete(\"test\", \"1\").execute().actionGet();\n        assertThat(deleteResponse.getIndex(), equalTo(getConcreteIndexName()));\n        assertThat(deleteResponse.getId(), equalTo(\"1\"));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] (should be empty)\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.isExists(), equalTo(false));\n        }\n\n        logger.info(\"Index [type1/1]\");\n        client().index(indexRequest(\"test\").id(\"1\").source(source(\"1\", \"test\"))).actionGet();\n        logger.info(\"Index [type1/2]\");\n        client().index(indexRequest(\"test\").id(\"2\").source(source(\"2\", \"test2\"))).actionGet();\n\n        logger.info(\"Flushing\");\n        FlushResponse flushResult = client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        assertThat(flushResult.getSuccessfulShards(), equalTo(numShards.totalNumShards));\n        assertThat(flushResult.getFailedShards(), equalTo(0));\n        logger.info(\"Refreshing\");\n        client().admin().indices().refresh(refreshRequest(\"test\")).actionGet();\n\n        logger.info(\"Get [type1/1] and [type1/2]\");\n        for (int i = 0; i < 5; i++) {\n            getResult = client().get(getRequest(\"test\").id(\"1\")).actionGet();\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n            assertThat(\"cycle #\" + i, getResult.getSourceAsString(), equalTo(Strings.toString(source(\"1\", \"test\"))));\n            getResult = client().get(getRequest(\"test\").id(\"2\")).actionGet();\n            String ste1 = getResult.getSourceAsString();\n            String ste2 = Strings.toString(source(\"2\", \"test2\"));\n            assertThat(\"cycle #\" + i, ste1, equalTo(ste2));\n            assertThat(getResult.getIndex(), equalTo(getConcreteIndexName()));\n        }\n\n        logger.info(\"Count\");\n        \r\n        for (int i = 0; i < 5; i++) {\n            \r\n            SearchResponse countResponse = client().prepareSearch(\"test\").setSize(0).setQuery(termQuery(\"_type\", \"_doc\"))\n                .execute().actionGet();\n            assertNoFailures(countResponse);\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n\n            \r\n            countResponse = client().prepareSearch(\"test\").setSize(0).execute().actionGet();\n            assertThat(\"Failures \" + countResponse.getShardFailures(), countResponse.getShardFailures() == null ? 0\n                : countResponse.getShardFailures().length, equalTo(0));\n            assertThat(countResponse.getHits().getTotalHits().value, equalTo(2L));\n            assertThat(countResponse.getSuccessfulShards(), equalTo(numShards.numPrimaries));\n            assertThat(countResponse.getFailedShards(), equalTo(0));\n        }\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/document/DocumentActionsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"af1cc495b2d8d5a54327a596a9a6044d3aa8d3bc","commitMessage":"@@@Remove support for _type in searches (#68564)\n\nTypes are no longer allowed in requests in 8.0.  so we can remove support for\nusing the `_type` field within a search request.\n\nRelates to #41059.\nCloses #68311.","date":"2021-02-06 04:13:05","modifiedFileCount":"15","status":"M","submitter":"Julie Tibshirani"}]
