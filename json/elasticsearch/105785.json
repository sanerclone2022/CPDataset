[{"authorTime":"2019-08-08 18:32:46","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline, ingestDocument, false);\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(ElasticsearchException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.IllegalArgumentException: java.lang.RuntimeException: processor failed\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":209,"groupId":"68524","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteItemWithFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/320d264110edeaefc04e0fd46f22d9dcebe46a.src","preCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline, ingestDocument, false);\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(ElasticsearchException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.IllegalArgumentException: java.lang.RuntimeException: processor failed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"NB"},{"authorDate":"2019-08-08 18:32:46","commitOrder":2,"curCode":"    public void testDropDocument() {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline, ingestDocument, false);\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","date":"2019-08-08 18:32:46","endLine":226,"groupId":"64353","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/44e196fe8d4ff4702d7b4a9076a2572a30ea05.src","preCode":"    public void testDropDocument() {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline, ingestDocument, false);\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"}],"commitId":"a8c5fc728bb906cbf84e105679a1dce6cf4e047d","commitMessage":"@@@Change the ingest simulate api to not include dropped documents (#44161)\n\nIf documents are dropped by the `drop` processor then\nthese documents are returned as a `null` value in the response.\n\n=== Example\n\nCreate pipeline:\n\n```\nPUT _ingest/pipeline/droppipeline\n{\n    \"processors\": [\n        {\n            \"set\": {\n                \"field\": \"bla\". \n                \"value\": \"val\"\n            }\n        }. \n        {\n            \"drop\": {}\n        }\n    ]\n}\n```\n\nSimulate request:\n\nPOST _ingest/pipeline/droppipeline/_simulate\n{\n    \"docs\": [\n        {\n            \"_source\": {\n                \"message\": \"text\"\n            }\n        }\n    ]\n}\n\nResponse:\n\n```\n{\n    \"docs\": [\n        null\n    ]\n}\n```\n\nResponse if verbose is enabled:\n\n```\n{\n    \"docs\": [\n        {\n            \"processor_results\": [\n                {\n                    \"doc\": {\n                        \"_index\": \"_index\". \n                        \"_type\": \"_doc\". \n                        \"_id\": \"_id\". \n                        \"_source\": {\n                            \"message\": \"text\". \n                            \"bla\": \"val\"\n                        }. \n                        \"_ingest\": {\n                            \"timestamp\": \"2019-07-10T11:07:10.758315Z\"\n                        }\n                    }\n                }. \n                null\n            ]\n        }\n    ]\n}\n```\n\nCloses #36150\n\n* Abort pipeline simulation in verbose mode when document has been dropped\nby drop processor","date":"2019-08-08 18:32:46","modifiedFileCount":"5","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(ElasticsearchException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.IllegalArgumentException: java.lang.RuntimeException: processor failed\"));\n    }\n","date":"2019-09-25 22:03:06","endLine":263,"groupId":"54658","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteItemWithFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/496ec16fadadeb68362bda4ae37846a211b211.src","preCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline, ingestDocument, false);\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(ElasticsearchException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.IllegalArgumentException: java.lang.RuntimeException: processor failed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","date":"2019-09-25 22:03:06","endLine":283,"groupId":"68525","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/496ec16fadadeb68362bda4ae37846a211b211.src","preCode":"    public void testDropDocument() {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        SimulateDocumentResult actualItemResponse = executionService.executeDocument(pipeline, ingestDocument, false);\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"2c7fd822930b4ecb651d1903d99798e6f0c504b2","commitMessage":"@@@Allow ingest processors to execute in a non blocking manner. (#46241)\n\nThis PR changes the ingest executing to be non blocking\nby adding an additional method to the Processor interface\nthat accepts a BiConsumer as handler and changing\nIngestService#executeBulkRequest(...) to ingest document\nin a non blocking fashion iff a processor executes\nin a non blocking fashion.\n\nThis is the second PR that merges changes made to server module from\nthe enrich branch (see #32789) into the master branch.\n\nThe plan is to merge changes made to the server module separately from\nthe pr that will merge enrich into master.  so that these changes can\nbe reviewed in isolation.\n\nThis change originates from the enrich branch and was introduced there\nin #43361.","date":"2019-09-25 22:03:06","modifiedFileCount":"20","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-11-02 03:11:18","commitOrder":4,"curCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(ElasticsearchException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.RuntimeException: processor failed\"));\n    }\n","date":"2019-11-02 03:11:18","endLine":263,"groupId":"54658","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteItemWithFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/8d259db97010bfd0d306098dd005c78dfccf9c.src","preCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(ElasticsearchException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.IllegalArgumentException: java.lang.RuntimeException: processor failed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":4,"curCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","date":"2019-09-25 22:03:06","endLine":283,"groupId":"68525","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/496ec16fadadeb68362bda4ae37846a211b211.src","preCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"N"}],"commitId":"a565b2d52600a282bb798e6ec2b4c0c6afaa04cb","commitMessage":"@@@Do not wrap ingest processor exception with IAE (#48816)\n\nThe problem with wrapping here is that it converts any exception into an\nIAE.  which we treat as a client error (400 status) whereas the exception\nbeing wrapped here could be a server error (e.g..  NPE). This commit\nstops wrapping all ingest processor exceptions as IAEs.","date":"2019-11-02 03:11:18","modifiedFileCount":"5","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-11-14 23:53:08","commitOrder":5,"curCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(IngestProcessorException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.RuntimeException: processor failed\"));\n    }\n","date":"2019-11-14 23:53:08","endLine":263,"groupId":"54658","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteItemWithFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/ed9d1e23dd2048dd6697a88a84a90e0721542a.src","preCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(ElasticsearchException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.RuntimeException: processor failed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":5,"curCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","date":"2019-09-25 22:03:06","endLine":283,"groupId":"68525","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/496ec16fadadeb68362bda4ae37846a211b211.src","preCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"N"}],"commitId":"d4e82d4020873dd58fa5db0c5ed88db9eac60739","commitMessage":"@@@Introduce dedicated ingest processor exception (#48810)\n\nToday we wrap exceptions that occur while executing an ingest processor\nin an ElasticsearchException. Today.  in ExceptionsHelper#unwrapCause we\nonly unwrap causes for exceptions that implement\nElasticsearchWrapperException.  which the top-level\nElasticsearchException does not. Ultimately.  this means that any\nexception that occurs during processor execution does not have its cause\nunwrapped.  and so its status is blanket treated as a 500. This means\nthat while executing a bulk request with an ingest pipeline. \ndocument-level failures that occur during a processor will cause the\nstatus for that document to be treated as 500. Since that does not give\nthe client any indication that they made a mistake.  it means some\nclients will enter infinite retries.  thinking that there is some\nserver-side problem that merely needs to clear. This commit addresses\nthis by introducing a dedicated ingest processor exception.  so that its\ncauses can be unwrapped. While we could consider a broader change to\nunwrap causes for more than just ElasticsearchWrapperExceptions.  that is\na broad change with unclear implications. Since the problem of reporting\n500s on client errors is a user-facing bug.  we take the conservative\napproach for now.  and we can revisit the unwrapping in a future change.","date":"2019-11-14 23:53:08","modifiedFileCount":"7","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2019-11-14 23:53:08","commitOrder":6,"curCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(IngestProcessorException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.RuntimeException: processor failed\"));\n    }\n","date":"2019-11-14 23:53:08","endLine":263,"groupId":"54658","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteItemWithFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/ed9d1e23dd2048dd6697a88a84a90e0721542a.src","preCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(IngestProcessorException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.RuntimeException: processor failed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"N"},{"authorDate":"2020-06-16 05:08:29","commitOrder":6,"curCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","date":"2020-06-16 05:08:29","endLine":276,"groupId":"68525","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDropDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/264ff1cb6b6a5949ce9221218c70f306776805.src","preCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"69a6a18d8dc3f95001cfe6f55c1451ac616f7e84","commitMessage":"@@@Add optional description parameter to ingest processors. (#57906)\n\nThis commit adds an optional field.  `description`.  to all ingest processors\nso that users can explain the purpose of the specific processor instance.\n\nCloses #56000.","date":"2020-06-16 05:08:29","modifiedFileCount":"125","status":"M","submitter":"Tal Levy"},{"authorTime":"2021-08-11 21:30:36","codes":[{"authorDate":"2021-08-11 21:30:36","commitOrder":7,"curCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, null, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(IngestProcessorException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.RuntimeException: processor failed\"));\n    }\n","date":"2021-08-11 21:30:36","endLine":245,"groupId":"105785","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testExecuteItemWithFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/9f21babe483104e8ee5d87ac6de0510b847e27.src","preCode":"    public void testExecuteItemWithFailure() throws Exception {\n        TestProcessor processor = new TestProcessor(ingestDocument -> { throw new RuntimeException(\"processor failed\"); });\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor, processor));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), instanceOf(RuntimeException.class));\n        Exception exception = simulateDocumentBaseResult.getFailure();\n        assertThat(exception, instanceOf(IngestProcessorException.class));\n        assertThat(exception.getMessage(), equalTo(\"java.lang.RuntimeException: processor failed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2021-08-11 21:30:36","commitOrder":7,"curCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, null, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","date":"2021-08-11 21:30:36","endLine":265,"groupId":"105785","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testDropDocument","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/9f21babe483104e8ee5d87ac6de0510b847e27.src","preCode":"    public void testDropDocument() throws Exception {\n        TestProcessor processor1 = new TestProcessor(ingestDocument -> ingestDocument.setFieldValue(\"field\", \"value\"));\n        Processor processor2 = new DropProcessor.Factory().create(Map.of(), null, null, Map.of());\n        Pipeline pipeline = new Pipeline(\"_id\", \"_description\", version, new CompoundProcessor(processor1, processor2));\n\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicReference<SimulateDocumentResult> holder = new AtomicReference<>();\n        executionService.executeDocument(pipeline, ingestDocument, false, (r, e) -> {\n            holder.set(r);\n            latch.countDown();\n        });\n        latch.await();\n        SimulateDocumentResult actualItemResponse = holder.get();\n        assertThat(processor1.getInvokedCounter(), equalTo(1));\n        assertThat(actualItemResponse, instanceOf(SimulateDocumentBaseResult.class));\n        SimulateDocumentBaseResult simulateDocumentBaseResult = (SimulateDocumentBaseResult) actualItemResponse;\n        assertThat(simulateDocumentBaseResult.getIngestDocument(), nullValue());\n        assertThat(simulateDocumentBaseResult.getFailure(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulateExecutionServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"498684a696fb2d81689a9c5e51fbc3c370e234f6","commitMessage":"@@@Add support for _meta field to ingest pipelines (#75905)\n\nWe are adding a _meta field to many of our REST APIs so that users can attach whatever metadata they\nwant. The data in this field will not be used by Elasticsearch. This commit add the _meta field to ingest\npipelines.","date":"2021-08-11 21:30:36","modifiedFileCount":"13","status":"M","submitter":"Keith Massey"}]
